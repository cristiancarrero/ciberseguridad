import {
  WaiterState,
  checkExceptions,
  createWaiter
} from "./chunk-G5U3VVV4.js";
import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  HttpRequest,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  awsEndpointFunctions,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  customEndpointFunctions,
  decorateServiceException,
  expectNonNull,
  expectString,
  extendedEncodeURIComponent,
  fromBase64,
  fromUtf8,
  getArrayIfSingleItem,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  loadConfigsForDefaultMode,
  normalizeProvider,
  parseBoolean,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  parseXmlBody,
  parseXmlErrorBody,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  strictParseInt32,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-QZRTEARY.js";
import "./chunk-XU5PFWOA.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@aws-sdk/client-iam/dist-es/auth/httpAuthSchemeProvider.js
var defaultIAMHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "iam",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultIAMHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-iam/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "iam"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-iam/package.json
var package_default = {
  name: "@aws-sdk/client-iam",
  description: "AWS SDK for JavaScript Iam Client for Node.js, Browser and React Native",
  version: "3.726.1",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-iam",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo iam"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/client-sso-oidc": "3.726.0",
    "@aws-sdk/client-sts": "3.726.1",
    "@aws-sdk/core": "3.723.0",
    "@aws-sdk/credential-provider-node": "3.726.0",
    "@aws-sdk/middleware-host-header": "3.723.0",
    "@aws-sdk/middleware-logger": "3.723.0",
    "@aws-sdk/middleware-recursion-detection": "3.723.0",
    "@aws-sdk/middleware-user-agent": "3.726.0",
    "@aws-sdk/region-config-resolver": "3.723.0",
    "@aws-sdk/types": "3.723.0",
    "@aws-sdk/util-endpoints": "3.726.0",
    "@aws-sdk/util-user-agent-browser": "3.723.0",
    "@aws-sdk/util-user-agent-node": "3.726.0",
    "@smithy/config-resolver": "^4.0.0",
    "@smithy/core": "^3.0.0",
    "@smithy/fetch-http-handler": "^5.0.0",
    "@smithy/hash-node": "^4.0.0",
    "@smithy/invalid-dependency": "^4.0.0",
    "@smithy/middleware-content-length": "^4.0.0",
    "@smithy/middleware-endpoint": "^4.0.0",
    "@smithy/middleware-retry": "^4.0.0",
    "@smithy/middleware-serde": "^4.0.0",
    "@smithy/middleware-stack": "^4.0.0",
    "@smithy/node-config-provider": "^4.0.0",
    "@smithy/node-http-handler": "^4.0.0",
    "@smithy/protocol-http": "^5.0.0",
    "@smithy/smithy-client": "^4.0.0",
    "@smithy/types": "^4.0.0",
    "@smithy/url-parser": "^4.0.0",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.0",
    "@smithy/util-defaults-mode-node": "^4.0.0",
    "@smithy/util-endpoints": "^3.0.0",
    "@smithy/util-middleware": "^4.0.0",
    "@smithy/util-retry": "^4.0.0",
    "@smithy/util-utf8": "^4.0.0",
    "@smithy/util-waiter": "^4.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.2.2"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-iam",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-iam"
  }
};

// node_modules/@aws-sdk/client-iam/dist-es/endpoint/ruleset.js
var C = "required";
var D = "fn";
var E = "argv";
var F = "ref";
var G = "authSchemes";
var H = "signingName";
var I = "signingRegion";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "stringEquals";
var i = "sigv4";
var j = "iam";
var k = { [C]: false, "type": "String" };
var l = { [C]: true, "default": false, "type": "Boolean" };
var m = { [F]: "Endpoint" };
var n = { [D]: c, [E]: [{ [F]: "UseFIPS" }, true] };
var o = { [D]: c, [E]: [{ [F]: "UseDualStack" }, true] };
var p = {};
var q = { [D]: h, [E]: [{ [D]: "getAttr", [E]: [{ [F]: g }, "name"] }, "aws"] };
var r = { [D]: "getAttr", [E]: [{ [F]: g }, "name"] };
var s = { [D]: c, [E]: [{ [F]: "UseFIPS" }, false] };
var t = { [D]: c, [E]: [{ [F]: "UseDualStack" }, false] };
var u = { [G]: [{ "name": i, [H]: j, [I]: "us-east-1" }] };
var v = { [D]: h, [E]: [r, "aws-us-gov"] };
var w = { "url": "https://iam.us-gov.amazonaws.com", "properties": { [G]: [{ "name": i, [H]: j, [I]: "us-gov-west-1" }] }, "headers": {} };
var x = { [D]: "getAttr", [E]: [{ [F]: g }, "supportsFIPS"] };
var y = { [D]: c, [E]: [true, { [D]: "getAttr", [E]: [{ [F]: g }, "supportsDualStack"] }] };
var z = [n];
var A = [o];
var B = [{ [F]: "Region" }];
var _data = { version: "1.0", parameters: { Region: k, UseDualStack: l, UseFIPS: l, Endpoint: k }, rules: [{ conditions: [{ [D]: b, [E]: [m] }], rules: [{ conditions: z, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: A, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: m, properties: p, headers: p }, type: e }], type: f }, { conditions: [{ [D]: b, [E]: B }], rules: [{ conditions: [{ [D]: "aws.partition", [E]: B, assign: g }], rules: [{ conditions: [q, s, t], endpoint: { url: "https://iam.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [q, n, t], endpoint: { url: "https://iam-fips.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-cn"] }, s, t], endpoint: { url: "https://iam.cn-north-1.amazonaws.com.cn", properties: { [G]: [{ name: i, [H]: j, [I]: "cn-north-1" }] }, headers: p }, type: e }, { conditions: [v, s, t], endpoint: w, type: e }, { conditions: [v, n, t], endpoint: w, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso"] }, s, t], endpoint: { url: "https://iam.us-iso-east-1.c2s.ic.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-iso-east-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-b"] }, s, t], endpoint: { url: "https://iam.us-isob-east-1.sc2s.sgov.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-isob-east-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-e"] }, s, t], endpoint: { url: "https://iam.eu-isoe-west-1.cloud.adc-e.uk", properties: { [G]: [{ name: i, [H]: j, [I]: "eu-isoe-west-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-f"] }, s, t], endpoint: { url: "https://iam.us-isof-south-1.csp.hci.ic.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-isof-south-1" }] }, headers: p }, type: e }, { conditions: [n, o], rules: [{ conditions: [{ [D]: c, [E]: [a, x] }, y], rules: [{ endpoint: { url: "https://iam-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: z, rules: [{ conditions: [{ [D]: c, [E]: [x, a] }], rules: [{ endpoint: { url: "https://iam-fips.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: A, rules: [{ conditions: [y], rules: [{ endpoint: { url: "https://iam.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://iam.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-iam/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-iam/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2010-05-08",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultIAMHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "IAM",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-iam/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_2) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-iam/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-iam/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-iam/dist-es/IAMClient.js
var IAMClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    __publicField(this, "config");
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultIAMHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-iam/dist-es/models/IAMServiceException.js
var IAMServiceException = class _IAMServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IAMServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-iam/dist-es/models/models_0.js
var AccessAdvisorUsageGranularityType = {
  ACTION_LEVEL: "ACTION_LEVEL",
  SERVICE_LEVEL: "SERVICE_LEVEL"
};
var StatusType = {
  Active: "Active",
  Inactive: "Inactive"
};
var AccountNotManagementOrDelegatedAdministratorException = class _AccountNotManagementOrDelegatedAdministratorException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "AccountNotManagementOrDelegatedAdministratorException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "AccountNotManagementOrDelegatedAdministratorException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _AccountNotManagementOrDelegatedAdministratorException.prototype);
    this.Message = opts.Message;
  }
};
var InvalidInputException = class _InvalidInputException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "InvalidInputException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidInputException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidInputException.prototype);
  }
};
var LimitExceededException = class _LimitExceededException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "LimitExceededException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
var NoSuchEntityException = class _NoSuchEntityException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "NoSuchEntityException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchEntityException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchEntityException.prototype);
  }
};
var ServiceFailureException = class _ServiceFailureException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "ServiceFailureException",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "ServiceFailureException");
    __publicField(this, "$fault", "server");
    Object.setPrototypeOf(this, _ServiceFailureException.prototype);
  }
};
var EntityAlreadyExistsException = class _EntityAlreadyExistsException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "EntityAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntityAlreadyExistsException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _EntityAlreadyExistsException.prototype);
  }
};
var UnmodifiableEntityException = class _UnmodifiableEntityException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "UnmodifiableEntityException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "UnmodifiableEntityException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _UnmodifiableEntityException.prototype);
  }
};
var AssignmentStatusType = {
  Any: "Any",
  Assigned: "Assigned",
  Unassigned: "Unassigned"
};
var PermissionsBoundaryAttachmentType = {
  Policy: "PermissionsBoundaryPolicy"
};
var PolicyNotAttachableException = class _PolicyNotAttachableException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "PolicyNotAttachableException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PolicyNotAttachableException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _PolicyNotAttachableException.prototype);
  }
};
var EntityTemporarilyUnmodifiableException = class _EntityTemporarilyUnmodifiableException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "EntityTemporarilyUnmodifiableException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntityTemporarilyUnmodifiableException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _EntityTemporarilyUnmodifiableException.prototype);
  }
};
var InvalidUserTypeException = class _InvalidUserTypeException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "InvalidUserTypeException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidUserTypeException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidUserTypeException.prototype);
  }
};
var PasswordPolicyViolationException = class _PasswordPolicyViolationException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "PasswordPolicyViolationException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PasswordPolicyViolationException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _PasswordPolicyViolationException.prototype);
  }
};
var ConcurrentModificationException = class _ConcurrentModificationException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "ConcurrentModificationException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConcurrentModificationException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConcurrentModificationException.prototype);
  }
};
var OpenIdIdpCommunicationErrorException = class _OpenIdIdpCommunicationErrorException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "OpenIdIdpCommunicationErrorException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OpenIdIdpCommunicationErrorException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _OpenIdIdpCommunicationErrorException.prototype);
  }
};
var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "MalformedPolicyDocumentException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "MalformedPolicyDocumentException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
  }
};
var ServiceNotSupportedException = class _ServiceNotSupportedException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "ServiceNotSupportedException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ServiceNotSupportedException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ServiceNotSupportedException.prototype);
  }
};
var DeleteConflictException = class _DeleteConflictException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "DeleteConflictException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DeleteConflictException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DeleteConflictException.prototype);
  }
};
var FeatureType = {
  ROOT_CREDENTIALS_MANAGEMENT: "RootCredentialsManagement",
  ROOT_SESSIONS: "RootSessions"
};
var OrganizationNotFoundException = class _OrganizationNotFoundException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "OrganizationNotFoundException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OrganizationNotFoundException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OrganizationNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
var OrganizationNotInAllFeaturesModeException = class _OrganizationNotInAllFeaturesModeException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "OrganizationNotInAllFeaturesModeException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OrganizationNotInAllFeaturesModeException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OrganizationNotInAllFeaturesModeException.prototype);
    this.Message = opts.Message;
  }
};
var ServiceAccessNotEnabledException = class _ServiceAccessNotEnabledException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "ServiceAccessNotEnabledException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ServiceAccessNotEnabledException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ServiceAccessNotEnabledException.prototype);
    this.Message = opts.Message;
  }
};
var InvalidAuthenticationCodeException = class _InvalidAuthenticationCodeException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "InvalidAuthenticationCodeException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidAuthenticationCodeException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidAuthenticationCodeException.prototype);
  }
};
var CallerIsNotManagementAccountException = class _CallerIsNotManagementAccountException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "CallerIsNotManagementAccountException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CallerIsNotManagementAccountException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CallerIsNotManagementAccountException.prototype);
    this.Message = opts.Message;
  }
};
var ReportStateType = {
  COMPLETE: "COMPLETE",
  INPROGRESS: "INPROGRESS",
  STARTED: "STARTED"
};
var ReportGenerationLimitExceededException = class _ReportGenerationLimitExceededException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "ReportGenerationLimitExceededException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ReportGenerationLimitExceededException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ReportGenerationLimitExceededException.prototype);
  }
};
var EntityType = {
  AWSManagedPolicy: "AWSManagedPolicy",
  Group: "Group",
  LocalManagedPolicy: "LocalManagedPolicy",
  Role: "Role",
  User: "User"
};
var SummaryKeyType = {
  AccessKeysPerUserQuota: "AccessKeysPerUserQuota",
  AccountAccessKeysPresent: "AccountAccessKeysPresent",
  AccountMFAEnabled: "AccountMFAEnabled",
  AccountPasswordPresent: "AccountPasswordPresent",
  AccountSigningCertificatesPresent: "AccountSigningCertificatesPresent",
  AttachedPoliciesPerGroupQuota: "AttachedPoliciesPerGroupQuota",
  AttachedPoliciesPerRoleQuota: "AttachedPoliciesPerRoleQuota",
  AttachedPoliciesPerUserQuota: "AttachedPoliciesPerUserQuota",
  GlobalEndpointTokenVersion: "GlobalEndpointTokenVersion",
  GroupPolicySizeQuota: "GroupPolicySizeQuota",
  Groups: "Groups",
  GroupsPerUserQuota: "GroupsPerUserQuota",
  GroupsQuota: "GroupsQuota",
  MFADevices: "MFADevices",
  MFADevicesInUse: "MFADevicesInUse",
  Policies: "Policies",
  PoliciesQuota: "PoliciesQuota",
  PolicySizeQuota: "PolicySizeQuota",
  PolicyVersionsInUse: "PolicyVersionsInUse",
  PolicyVersionsInUseQuota: "PolicyVersionsInUseQuota",
  ServerCertificates: "ServerCertificates",
  ServerCertificatesQuota: "ServerCertificatesQuota",
  SigningCertificatesPerUserQuota: "SigningCertificatesPerUserQuota",
  UserPolicySizeQuota: "UserPolicySizeQuota",
  Users: "Users",
  UsersQuota: "UsersQuota",
  VersionsPerPolicyQuota: "VersionsPerPolicyQuota"
};
var CredentialReportExpiredException = class _CredentialReportExpiredException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "CredentialReportExpiredException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CredentialReportExpiredException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _CredentialReportExpiredException.prototype);
  }
};
var CredentialReportNotPresentException = class _CredentialReportNotPresentException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "CredentialReportNotPresentException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CredentialReportNotPresentException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _CredentialReportNotPresentException.prototype);
  }
};
var CredentialReportNotReadyException = class _CredentialReportNotReadyException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "CredentialReportNotReadyException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CredentialReportNotReadyException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _CredentialReportNotReadyException.prototype);
  }
};
var ReportFormatType = {
  text_csv: "text/csv"
};
var SortKeyType = {
  LAST_AUTHENTICATED_TIME_ASCENDING: "LAST_AUTHENTICATED_TIME_ASCENDING",
  LAST_AUTHENTICATED_TIME_DESCENDING: "LAST_AUTHENTICATED_TIME_DESCENDING",
  SERVICE_NAMESPACE_ASCENDING: "SERVICE_NAMESPACE_ASCENDING",
  SERVICE_NAMESPACE_DESCENDING: "SERVICE_NAMESPACE_DESCENDING"
};
var JobStatusType = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS"
};
var PolicyOwnerEntityType = {
  GROUP: "GROUP",
  ROLE: "ROLE",
  USER: "USER"
};
var DeletionTaskStatusType = {
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  NOT_STARTED: "NOT_STARTED",
  SUCCEEDED: "SUCCEEDED"
};
var EncodingType = {
  PEM: "PEM",
  SSH: "SSH"
};
var UnrecognizedPublicKeyEncodingException = class _UnrecognizedPublicKeyEncodingException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "UnrecognizedPublicKeyEncodingException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "UnrecognizedPublicKeyEncodingException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _UnrecognizedPublicKeyEncodingException.prototype);
  }
};
var PolicyUsageType = {
  PermissionsBoundary: "PermissionsBoundary",
  PermissionsPolicy: "PermissionsPolicy"
};
var PolicyScopeType = {
  AWS: "AWS",
  All: "All",
  Local: "Local"
};
var PolicyType = {
  INLINE: "INLINE",
  MANAGED: "MANAGED"
};
var GlobalEndpointTokenVersion = {
  v1Token: "v1Token",
  v2Token: "v2Token"
};
var PolicyEvaluationException = class _PolicyEvaluationException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "PolicyEvaluationException",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "PolicyEvaluationException");
    __publicField(this, "$fault", "server");
    Object.setPrototypeOf(this, _PolicyEvaluationException.prototype);
  }
};
var ContextKeyTypeEnum = {
  BINARY: "binary",
  BINARY_LIST: "binaryList",
  BOOLEAN: "boolean",
  BOOLEAN_LIST: "booleanList",
  DATE: "date",
  DATE_LIST: "dateList",
  IP: "ip",
  IP_LIST: "ipList",
  NUMERIC: "numeric",
  NUMERIC_LIST: "numericList",
  STRING: "string",
  STRING_LIST: "stringList"
};
var PolicyEvaluationDecisionType = {
  ALLOWED: "allowed",
  EXPLICIT_DENY: "explicitDeny",
  IMPLICIT_DENY: "implicitDeny"
};
var AccessKeyFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING }
});
var ChangePasswordRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.OldPassword && { OldPassword: SENSITIVE_STRING },
  ...obj.NewPassword && { NewPassword: SENSITIVE_STRING }
});
var CreateAccessKeyResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AccessKey && { AccessKey: AccessKeyFilterSensitiveLog(obj.AccessKey) }
});
var CreateLoginProfileRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Password && { Password: SENSITIVE_STRING }
});
var ServiceSpecificCredentialFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ServicePassword && { ServicePassword: SENSITIVE_STRING }
});
var CreateServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ServiceSpecificCredential && {
    ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential)
  }
});
var VirtualMFADeviceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Base32StringSeed && { Base32StringSeed: SENSITIVE_STRING },
  ...obj.QRCodePNG && { QRCodePNG: SENSITIVE_STRING }
});
var CreateVirtualMFADeviceResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VirtualMFADevice && { VirtualMFADevice: VirtualMFADeviceFilterSensitiveLog(obj.VirtualMFADevice) }
});
var ListVirtualMFADevicesResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VirtualMFADevices && {
    VirtualMFADevices: obj.VirtualMFADevices.map((item) => VirtualMFADeviceFilterSensitiveLog(item))
  }
});
var ResetServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ServiceSpecificCredential && {
    ServiceSpecificCredential: ServiceSpecificCredentialFilterSensitiveLog(obj.ServiceSpecificCredential)
  }
});

// node_modules/@aws-sdk/client-iam/dist-es/models/models_1.js
var PolicySourceType = {
  AWS_MANAGED: "aws-managed",
  GROUP: "group",
  NONE: "none",
  RESOURCE: "resource",
  ROLE: "role",
  USER: "user",
  USER_MANAGED: "user-managed"
};
var KeyPairMismatchException = class _KeyPairMismatchException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "KeyPairMismatchException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeyPairMismatchException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _KeyPairMismatchException.prototype);
  }
};
var MalformedCertificateException = class _MalformedCertificateException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "MalformedCertificateException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "MalformedCertificateException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _MalformedCertificateException.prototype);
  }
};
var DuplicateCertificateException = class _DuplicateCertificateException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "DuplicateCertificateException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DuplicateCertificateException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DuplicateCertificateException.prototype);
  }
};
var InvalidCertificateException = class _InvalidCertificateException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "InvalidCertificateException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidCertificateException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidCertificateException.prototype);
  }
};
var DuplicateSSHPublicKeyException = class _DuplicateSSHPublicKeyException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "DuplicateSSHPublicKeyException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DuplicateSSHPublicKeyException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DuplicateSSHPublicKeyException.prototype);
  }
};
var InvalidPublicKeyException = class _InvalidPublicKeyException extends IAMServiceException {
  constructor(opts) {
    super({
      name: "InvalidPublicKeyException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidPublicKeyException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidPublicKeyException.prototype);
  }
};
var UpdateLoginProfileRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Password && { Password: SENSITIVE_STRING }
});
var UploadServerCertificateRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PrivateKey && { PrivateKey: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-iam/dist-es/protocols/Aws_query.js
var se_AddClientIDToOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddClientIDToOpenIDConnectProviderRequest(input, context),
    [_A]: _ACIDTOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AddRoleToInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddRoleToInstanceProfileRequest(input, context),
    [_A]: _ARTIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AddUserToGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddUserToGroupRequest(input, context),
    [_A]: _AUTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachGroupPolicyRequest(input, context),
    [_A]: _AGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachRolePolicyRequest(input, context),
    [_A]: _ARP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachUserPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachUserPolicyRequest(input, context),
    [_A]: _AUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ChangePasswordCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ChangePasswordRequest(input, context),
    [_A]: _CP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateAccessKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateAccessKeyRequest(input, context),
    [_A]: _CAK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateAccountAliasCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateAccountAliasRequest(input, context),
    [_A]: _CAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateGroupRequest(input, context),
    [_A]: _CG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceProfileRequest(input, context),
    [_A]: _CIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLoginProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLoginProfileRequest(input, context),
    [_A]: _CLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateOpenIDConnectProviderRequest(input, context),
    [_A]: _COIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreatePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreatePolicyRequest(input, context),
    [_A]: _CPr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreatePolicyVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreatePolicyVersionRequest(input, context),
    [_A]: _CPV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateRoleRequest(input, context),
    [_A]: _CR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSAMLProviderRequest(input, context),
    [_A]: _CSAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateServiceLinkedRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateServiceLinkedRoleRequest(input, context),
    [_A]: _CSLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateServiceSpecificCredentialCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateServiceSpecificCredentialRequest(input, context),
    [_A]: _CSSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateUserRequest(input, context),
    [_A]: _CU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVirtualMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVirtualMFADeviceRequest(input, context),
    [_A]: _CVMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeactivateMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeactivateMFADeviceRequest(input, context),
    [_A]: _DMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteAccessKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteAccessKeyRequest(input, context),
    [_A]: _DAK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteAccountAliasCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteAccountAliasRequest(input, context),
    [_A]: _DAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteAccountPasswordPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _DAPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteGroupRequest(input, context),
    [_A]: _DG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteGroupPolicyRequest(input, context),
    [_A]: _DGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceProfileRequest(input, context),
    [_A]: _DIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLoginProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLoginProfileRequest(input, context),
    [_A]: _DLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteOpenIDConnectProviderRequest(input, context),
    [_A]: _DOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeletePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeletePolicyRequest(input, context),
    [_A]: _DP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeletePolicyVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeletePolicyVersionRequest(input, context),
    [_A]: _DPV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRoleRequest(input, context),
    [_A]: _DR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteRolePermissionsBoundaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRolePermissionsBoundaryRequest(input, context),
    [_A]: _DRPB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRolePolicyRequest(input, context),
    [_A]: _DRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSAMLProviderRequest(input, context),
    [_A]: _DSAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteServerCertificateRequest(input, context),
    [_A]: _DSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteServiceLinkedRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteServiceLinkedRoleRequest(input, context),
    [_A]: _DSLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteServiceSpecificCredentialCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteServiceSpecificCredentialRequest(input, context),
    [_A]: _DSSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSigningCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSigningCertificateRequest(input, context),
    [_A]: _DSCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSSHPublicKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSSHPublicKeyRequest(input, context),
    [_A]: _DSSHPK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteUserRequest(input, context),
    [_A]: _DU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteUserPermissionsBoundaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteUserPermissionsBoundaryRequest(input, context),
    [_A]: _DUPB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteUserPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteUserPolicyRequest(input, context),
    [_A]: _DUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVirtualMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVirtualMFADeviceRequest(input, context),
    [_A]: _DVMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachGroupPolicyRequest(input, context),
    [_A]: _DGPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachRolePolicyRequest(input, context),
    [_A]: _DRPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachUserPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachUserPolicyRequest(input, context),
    [_A]: _DUPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableOrganizationsRootCredentialsManagementCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableOrganizationsRootCredentialsManagementRequest(input, context),
    [_A]: _DORCM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableOrganizationsRootSessionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableOrganizationsRootSessionsRequest(input, context),
    [_A]: _DORS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableMFADeviceRequest(input, context),
    [_A]: _EMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableOrganizationsRootCredentialsManagementCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableOrganizationsRootCredentialsManagementRequest(input, context),
    [_A]: _EORCM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableOrganizationsRootSessionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableOrganizationsRootSessionsRequest(input, context),
    [_A]: _EORS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateCredentialReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _GCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateOrganizationsAccessReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GenerateOrganizationsAccessReportRequest(input, context),
    [_A]: _GOAR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GenerateServiceLastAccessedDetailsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GenerateServiceLastAccessedDetailsRequest(input, context),
    [_A]: _GSLAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAccessKeyLastUsedCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAccessKeyLastUsedRequest(input, context),
    [_A]: _GAKLU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAccountAuthorizationDetailsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAccountAuthorizationDetailsRequest(input, context),
    [_A]: _GAAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAccountPasswordPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _GAPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAccountSummaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _GAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetContextKeysForCustomPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetContextKeysForCustomPolicyRequest(input, context),
    [_A]: _GCKFCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetContextKeysForPrincipalPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetContextKeysForPrincipalPolicyRequest(input, context),
    [_A]: _GCKFPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCredentialReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  const body = buildFormUrlencodedString({
    [_A]: _GCRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetGroupRequest(input, context),
    [_A]: _GG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetGroupPolicyRequest(input, context),
    [_A]: _GGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetInstanceProfileRequest(input, context),
    [_A]: _GIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetLoginProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetLoginProfileRequest(input, context),
    [_A]: _GLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetMFADeviceRequest(input, context),
    [_A]: _GMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetOpenIDConnectProviderRequest(input, context),
    [_A]: _GOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetOrganizationsAccessReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetOrganizationsAccessReportRequest(input, context),
    [_A]: _GOARe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetPolicyRequest(input, context),
    [_A]: _GP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetPolicyVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetPolicyVersionRequest(input, context),
    [_A]: _GPV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetRoleRequest(input, context),
    [_A]: _GR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetRolePolicyRequest(input, context),
    [_A]: _GRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSAMLProviderRequest(input, context),
    [_A]: _GSAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetServerCertificateRequest(input, context),
    [_A]: _GSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetServiceLastAccessedDetailsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetServiceLastAccessedDetailsRequest(input, context),
    [_A]: _GSLADe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetServiceLastAccessedDetailsWithEntitiesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetServiceLastAccessedDetailsWithEntitiesRequest(input, context),
    [_A]: _GSLADWE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetServiceLinkedRoleDeletionStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetServiceLinkedRoleDeletionStatusRequest(input, context),
    [_A]: _GSLRDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSSHPublicKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSSHPublicKeyRequest(input, context),
    [_A]: _GSSHPK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetUserRequest(input, context),
    [_A]: _GU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetUserPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetUserPolicyRequest(input, context),
    [_A]: _GUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAccessKeysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAccessKeysRequest(input, context),
    [_A]: _LAK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAccountAliasesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAccountAliasesRequest(input, context),
    [_A]: _LAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAttachedGroupPoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAttachedGroupPoliciesRequest(input, context),
    [_A]: _LAGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAttachedRolePoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAttachedRolePoliciesRequest(input, context),
    [_A]: _LARP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListAttachedUserPoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAttachedUserPoliciesRequest(input, context),
    [_A]: _LAUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListEntitiesForPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListEntitiesForPolicyRequest(input, context),
    [_A]: _LEFP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListGroupPoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListGroupPoliciesRequest(input, context),
    [_A]: _LGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListGroupsRequest(input, context),
    [_A]: _LG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListGroupsForUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListGroupsForUserRequest(input, context),
    [_A]: _LGFU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListInstanceProfilesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListInstanceProfilesRequest(input, context),
    [_A]: _LIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListInstanceProfilesForRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListInstanceProfilesForRoleRequest(input, context),
    [_A]: _LIPFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListInstanceProfileTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListInstanceProfileTagsRequest(input, context),
    [_A]: _LIPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListMFADevicesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListMFADevicesRequest(input, context),
    [_A]: _LMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListMFADeviceTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListMFADeviceTagsRequest(input, context),
    [_A]: _LMFADT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListOpenIDConnectProvidersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListOpenIDConnectProvidersRequest(input, context),
    [_A]: _LOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListOpenIDConnectProviderTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListOpenIDConnectProviderTagsRequest(input, context),
    [_A]: _LOIDCPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListOrganizationsFeaturesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListOrganizationsFeaturesRequest(input, context),
    [_A]: _LOF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListPoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListPoliciesRequest(input, context),
    [_A]: _LP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListPoliciesGrantingServiceAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListPoliciesGrantingServiceAccessRequest(input, context),
    [_A]: _LPGSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListPolicyTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListPolicyTagsRequest(input, context),
    [_A]: _LPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListPolicyVersionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListPolicyVersionsRequest(input, context),
    [_A]: _LPV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListRolePoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListRolePoliciesRequest(input, context),
    [_A]: _LRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListRolesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListRolesRequest(input, context),
    [_A]: _LR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListRoleTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListRoleTagsRequest(input, context),
    [_A]: _LRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListSAMLProvidersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListSAMLProvidersRequest(input, context),
    [_A]: _LSAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListSAMLProviderTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListSAMLProviderTagsRequest(input, context),
    [_A]: _LSAMLPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListServerCertificatesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListServerCertificatesRequest(input, context),
    [_A]: _LSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListServerCertificateTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListServerCertificateTagsRequest(input, context),
    [_A]: _LSCT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListServiceSpecificCredentialsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListServiceSpecificCredentialsRequest(input, context),
    [_A]: _LSSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListSigningCertificatesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListSigningCertificatesRequest(input, context),
    [_A]: _LSCi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListSSHPublicKeysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListSSHPublicKeysRequest(input, context),
    [_A]: _LSSHPK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListUserPoliciesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListUserPoliciesRequest(input, context),
    [_A]: _LUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListUsersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListUsersRequest(input, context),
    [_A]: _LU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListUserTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListUserTagsRequest(input, context),
    [_A]: _LUT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListVirtualMFADevicesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListVirtualMFADevicesRequest(input, context),
    [_A]: _LVMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutGroupPolicyRequest(input, context),
    [_A]: _PGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutRolePermissionsBoundaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutRolePermissionsBoundaryRequest(input, context),
    [_A]: _PRPB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutRolePolicyRequest(input, context),
    [_A]: _PRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutUserPermissionsBoundaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutUserPermissionsBoundaryRequest(input, context),
    [_A]: _PUPB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PutUserPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PutUserPolicyRequest(input, context),
    [_A]: _PUP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RemoveClientIDFromOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveClientIDFromOpenIDConnectProviderRequest(input, context),
    [_A]: _RCIDFOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RemoveRoleFromInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveRoleFromInstanceProfileRequest(input, context),
    [_A]: _RRFIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RemoveUserFromGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveUserFromGroupRequest(input, context),
    [_A]: _RUFG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetServiceSpecificCredentialCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetServiceSpecificCredentialRequest(input, context),
    [_A]: _RSSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResyncMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResyncMFADeviceRequest(input, context),
    [_A]: _RMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SetDefaultPolicyVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetDefaultPolicyVersionRequest(input, context),
    [_A]: _SDPV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SetSecurityTokenServicePreferencesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetSecurityTokenServicePreferencesRequest(input, context),
    [_A]: _SSTSP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SimulateCustomPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SimulateCustomPolicyRequest(input, context),
    [_A]: _SCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SimulatePrincipalPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SimulatePrincipalPolicyRequest(input, context),
    [_A]: _SPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagInstanceProfileRequest(input, context),
    [_A]: _TIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagMFADeviceRequest(input, context),
    [_A]: _TMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagOpenIDConnectProviderRequest(input, context),
    [_A]: _TOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagPolicyRequest(input, context),
    [_A]: _TP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagRoleRequest(input, context),
    [_A]: _TR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagSAMLProviderRequest(input, context),
    [_A]: _TSAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagServerCertificateRequest(input, context),
    [_A]: _TSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TagUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TagUserRequest(input, context),
    [_A]: _TU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagInstanceProfileRequest(input, context),
    [_A]: _UIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagMFADeviceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagMFADeviceRequest(input, context),
    [_A]: _UMFAD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagOpenIDConnectProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagOpenIDConnectProviderRequest(input, context),
    [_A]: _UOIDCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagPolicyRequest(input, context),
    [_A]: _UP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagRoleRequest(input, context),
    [_A]: _UR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagSAMLProviderRequest(input, context),
    [_A]: _USAMLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagServerCertificateRequest(input, context),
    [_A]: _USC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UntagUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UntagUserRequest(input, context),
    [_A]: _UU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateAccessKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateAccessKeyRequest(input, context),
    [_A]: _UAK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateAccountPasswordPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateAccountPasswordPolicyRequest(input, context),
    [_A]: _UAPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateAssumeRolePolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateAssumeRolePolicyRequest(input, context),
    [_A]: _UARP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateGroupRequest(input, context),
    [_A]: _UG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateLoginProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateLoginProfileRequest(input, context),
    [_A]: _ULP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateOpenIDConnectProviderThumbprintCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateOpenIDConnectProviderThumbprintRequest(input, context),
    [_A]: _UOIDCPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateRoleRequest(input, context),
    [_A]: _URp,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateRoleDescriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateRoleDescriptionRequest(input, context),
    [_A]: _URD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateSAMLProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateSAMLProviderRequest(input, context),
    [_A]: _USAMLPp,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateServerCertificateRequest(input, context),
    [_A]: _USCp,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateServiceSpecificCredentialCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateServiceSpecificCredentialRequest(input, context),
    [_A]: _USSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateSigningCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateSigningCertificateRequest(input, context),
    [_A]: _USCpd,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateSSHPublicKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateSSHPublicKeyRequest(input, context),
    [_A]: _USSHPK,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateUserCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateUserRequest(input, context),
    [_A]: _UUp,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UploadServerCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UploadServerCertificateRequest(input, context),
    [_A]: _USCpl,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UploadSigningCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UploadSigningCertificateRequest(input, context),
    [_A]: _USCplo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UploadSSHPublicKeyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UploadSSHPublicKeyRequest(input, context),
    [_A]: _USSHPKp,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_AddClientIDToOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AddRoleToInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AddUserToGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AttachGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AttachRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AttachUserPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ChangePasswordCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateAccessKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateAccessKeyResponse(data.CreateAccessKeyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateAccountAliasCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateGroupResponse(data.CreateGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateInstanceProfileResponse(data.CreateInstanceProfileResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLoginProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLoginProfileResponse(data.CreateLoginProfileResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateOpenIDConnectProviderResponse(data.CreateOpenIDConnectProviderResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreatePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreatePolicyResponse(data.CreatePolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreatePolicyVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreatePolicyVersionResponse(data.CreatePolicyVersionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateRoleResponse(data.CreateRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSAMLProviderResponse(data.CreateSAMLProviderResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateServiceLinkedRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateServiceLinkedRoleResponse(data.CreateServiceLinkedRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateServiceSpecificCredentialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateServiceSpecificCredentialResponse(data.CreateServiceSpecificCredentialResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateUserResponse(data.CreateUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVirtualMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVirtualMFADeviceResponse(data.CreateVirtualMFADeviceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeactivateMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteAccessKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteAccountAliasCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteAccountPasswordPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteLoginProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeletePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeletePolicyVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteRolePermissionsBoundaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteServiceLinkedRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteServiceLinkedRoleResponse(data.DeleteServiceLinkedRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteServiceSpecificCredentialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSigningCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSSHPublicKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteUserPermissionsBoundaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteUserPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVirtualMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DetachGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DetachRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DetachUserPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisableOrganizationsRootCredentialsManagementCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableOrganizationsRootCredentialsManagementResponse(data.DisableOrganizationsRootCredentialsManagementResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableOrganizationsRootSessionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableOrganizationsRootSessionsResponse(data.DisableOrganizationsRootSessionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EnableOrganizationsRootCredentialsManagementCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableOrganizationsRootCredentialsManagementResponse(data.EnableOrganizationsRootCredentialsManagementResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableOrganizationsRootSessionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableOrganizationsRootSessionsResponse(data.EnableOrganizationsRootSessionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateCredentialReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GenerateCredentialReportResponse(data.GenerateCredentialReportResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateOrganizationsAccessReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GenerateOrganizationsAccessReportResponse(data.GenerateOrganizationsAccessReportResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GenerateServiceLastAccessedDetailsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GenerateServiceLastAccessedDetailsResponse(data.GenerateServiceLastAccessedDetailsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAccessKeyLastUsedCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAccessKeyLastUsedResponse(data.GetAccessKeyLastUsedResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAccountAuthorizationDetailsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAccountAuthorizationDetailsResponse(data.GetAccountAuthorizationDetailsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAccountPasswordPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAccountPasswordPolicyResponse(data.GetAccountPasswordPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAccountSummaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAccountSummaryResponse(data.GetAccountSummaryResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetContextKeysForCustomPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForCustomPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetContextKeysForPrincipalPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetContextKeysForPolicyResponse(data.GetContextKeysForPrincipalPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCredentialReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetCredentialReportResponse(data.GetCredentialReportResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetGroupResponse(data.GetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetGroupPolicyResponse(data.GetGroupPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetInstanceProfileResponse(data.GetInstanceProfileResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetLoginProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetLoginProfileResponse(data.GetLoginProfileResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetMFADeviceResponse(data.GetMFADeviceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetOpenIDConnectProviderResponse(data.GetOpenIDConnectProviderResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetOrganizationsAccessReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetOrganizationsAccessReportResponse(data.GetOrganizationsAccessReportResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetPolicyResponse(data.GetPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetPolicyVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetPolicyVersionResponse(data.GetPolicyVersionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetRoleResponse(data.GetRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetRolePolicyResponse(data.GetRolePolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSAMLProviderResponse(data.GetSAMLProviderResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetServerCertificateResponse(data.GetServerCertificateResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetServiceLastAccessedDetailsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetServiceLastAccessedDetailsResponse(data.GetServiceLastAccessedDetailsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetServiceLastAccessedDetailsWithEntitiesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetServiceLastAccessedDetailsWithEntitiesResponse(data.GetServiceLastAccessedDetailsWithEntitiesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetServiceLinkedRoleDeletionStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetServiceLinkedRoleDeletionStatusResponse(data.GetServiceLinkedRoleDeletionStatusResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSSHPublicKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSSHPublicKeyResponse(data.GetSSHPublicKeyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetUserResponse(data.GetUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetUserPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetUserPolicyResponse(data.GetUserPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAccessKeysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListAccessKeysResponse(data.ListAccessKeysResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAccountAliasesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListAccountAliasesResponse(data.ListAccountAliasesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAttachedGroupPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListAttachedGroupPoliciesResponse(data.ListAttachedGroupPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAttachedRolePoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListAttachedRolePoliciesResponse(data.ListAttachedRolePoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListAttachedUserPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListAttachedUserPoliciesResponse(data.ListAttachedUserPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListEntitiesForPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListEntitiesForPolicyResponse(data.ListEntitiesForPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListGroupPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListGroupPoliciesResponse(data.ListGroupPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListGroupsResponse(data.ListGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListGroupsForUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListGroupsForUserResponse(data.ListGroupsForUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListInstanceProfilesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListInstanceProfilesResponse(data.ListInstanceProfilesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListInstanceProfilesForRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListInstanceProfilesForRoleResponse(data.ListInstanceProfilesForRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListInstanceProfileTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListInstanceProfileTagsResponse(data.ListInstanceProfileTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListMFADevicesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListMFADevicesResponse(data.ListMFADevicesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListMFADeviceTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListMFADeviceTagsResponse(data.ListMFADeviceTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListOpenIDConnectProvidersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListOpenIDConnectProvidersResponse(data.ListOpenIDConnectProvidersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListOpenIDConnectProviderTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListOpenIDConnectProviderTagsResponse(data.ListOpenIDConnectProviderTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListOrganizationsFeaturesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListOrganizationsFeaturesResponse(data.ListOrganizationsFeaturesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListPoliciesResponse(data.ListPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListPoliciesGrantingServiceAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListPoliciesGrantingServiceAccessResponse(data.ListPoliciesGrantingServiceAccessResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListPolicyTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListPolicyTagsResponse(data.ListPolicyTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListPolicyVersionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListPolicyVersionsResponse(data.ListPolicyVersionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListRolePoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListRolePoliciesResponse(data.ListRolePoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListRolesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListRolesResponse(data.ListRolesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListRoleTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListRoleTagsResponse(data.ListRoleTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListSAMLProvidersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListSAMLProvidersResponse(data.ListSAMLProvidersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListSAMLProviderTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListSAMLProviderTagsResponse(data.ListSAMLProviderTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListServerCertificatesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListServerCertificatesResponse(data.ListServerCertificatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListServerCertificateTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListServerCertificateTagsResponse(data.ListServerCertificateTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListServiceSpecificCredentialsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListServiceSpecificCredentialsResponse(data.ListServiceSpecificCredentialsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListSigningCertificatesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListSigningCertificatesResponse(data.ListSigningCertificatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListSSHPublicKeysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListSSHPublicKeysResponse(data.ListSSHPublicKeysResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListUserPoliciesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListUserPoliciesResponse(data.ListUserPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListUsersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListUsersResponse(data.ListUsersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListUserTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListUserTagsResponse(data.ListUserTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListVirtualMFADevicesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListVirtualMFADevicesResponse(data.ListVirtualMFADevicesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PutGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_PutRolePermissionsBoundaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_PutRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_PutUserPermissionsBoundaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_PutUserPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RemoveClientIDFromOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RemoveRoleFromInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RemoveUserFromGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ResetServiceSpecificCredentialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ResetServiceSpecificCredentialResponse(data.ResetServiceSpecificCredentialResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ResyncMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_SetDefaultPolicyVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_SetSecurityTokenServicePreferencesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_SimulateCustomPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_SimulatePolicyResponse(data.SimulateCustomPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SimulatePrincipalPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_SimulatePolicyResponse(data.SimulatePrincipalPolicyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TagInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_TagUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagMFADeviceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagOpenIDConnectProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UntagUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateAccessKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateAccountPasswordPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateAssumeRolePolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateLoginProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateOpenIDConnectProviderThumbprintCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UpdateRoleResponse(data.UpdateRoleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateRoleDescriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UpdateRoleDescriptionResponse(data.UpdateRoleDescriptionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateSAMLProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UpdateSAMLProviderResponse(data.UpdateSAMLProviderResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateServiceSpecificCredentialCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateSigningCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateSSHPublicKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UpdateUserCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UploadServerCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UploadServerCertificateResponse(data.UploadServerCertificateResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UploadSigningCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UploadSigningCertificateResponse(data.UploadSigningCertificateResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UploadSSHPublicKeyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UploadSSHPublicKeyResponse(data.UploadSSHPublicKeyResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseXmlErrorBody(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidInput":
    case "com.amazonaws.iam#InvalidInputException":
      throw await de_InvalidInputExceptionRes(parsedOutput, context);
    case "LimitExceeded":
    case "com.amazonaws.iam#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "NoSuchEntity":
    case "com.amazonaws.iam#NoSuchEntityException":
      throw await de_NoSuchEntityExceptionRes(parsedOutput, context);
    case "ServiceFailure":
    case "com.amazonaws.iam#ServiceFailureException":
      throw await de_ServiceFailureExceptionRes(parsedOutput, context);
    case "EntityAlreadyExists":
    case "com.amazonaws.iam#EntityAlreadyExistsException":
      throw await de_EntityAlreadyExistsExceptionRes(parsedOutput, context);
    case "UnmodifiableEntity":
    case "com.amazonaws.iam#UnmodifiableEntityException":
      throw await de_UnmodifiableEntityExceptionRes(parsedOutput, context);
    case "PolicyNotAttachable":
    case "com.amazonaws.iam#PolicyNotAttachableException":
      throw await de_PolicyNotAttachableExceptionRes(parsedOutput, context);
    case "EntityTemporarilyUnmodifiable":
    case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
      throw await de_EntityTemporarilyUnmodifiableExceptionRes(parsedOutput, context);
    case "InvalidUserType":
    case "com.amazonaws.iam#InvalidUserTypeException":
      throw await de_InvalidUserTypeExceptionRes(parsedOutput, context);
    case "PasswordPolicyViolation":
    case "com.amazonaws.iam#PasswordPolicyViolationException":
      throw await de_PasswordPolicyViolationExceptionRes(parsedOutput, context);
    case "ConcurrentModification":
    case "com.amazonaws.iam#ConcurrentModificationException":
      throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
    case "OpenIdIdpCommunicationError":
    case "com.amazonaws.iam#OpenIdIdpCommunicationErrorException":
      throw await de_OpenIdIdpCommunicationErrorExceptionRes(parsedOutput, context);
    case "MalformedPolicyDocument":
    case "com.amazonaws.iam#MalformedPolicyDocumentException":
      throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
    case "NotSupportedService":
    case "com.amazonaws.iam#ServiceNotSupportedException":
      throw await de_ServiceNotSupportedExceptionRes(parsedOutput, context);
    case "DeleteConflict":
    case "com.amazonaws.iam#DeleteConflictException":
      throw await de_DeleteConflictExceptionRes(parsedOutput, context);
    case "AccountNotManagementOrDelegatedAdministratorException":
    case "com.amazonaws.iam#AccountNotManagementOrDelegatedAdministratorException":
      throw await de_AccountNotManagementOrDelegatedAdministratorExceptionRes(parsedOutput, context);
    case "OrganizationNotFoundException":
    case "com.amazonaws.iam#OrganizationNotFoundException":
      throw await de_OrganizationNotFoundExceptionRes(parsedOutput, context);
    case "OrganizationNotInAllFeaturesModeException":
    case "com.amazonaws.iam#OrganizationNotInAllFeaturesModeException":
      throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput, context);
    case "ServiceAccessNotEnabledException":
    case "com.amazonaws.iam#ServiceAccessNotEnabledException":
      throw await de_ServiceAccessNotEnabledExceptionRes(parsedOutput, context);
    case "InvalidAuthenticationCode":
    case "com.amazonaws.iam#InvalidAuthenticationCodeException":
      throw await de_InvalidAuthenticationCodeExceptionRes(parsedOutput, context);
    case "CallerIsNotManagementAccountException":
    case "com.amazonaws.iam#CallerIsNotManagementAccountException":
      throw await de_CallerIsNotManagementAccountExceptionRes(parsedOutput, context);
    case "ReportGenerationLimitExceeded":
    case "com.amazonaws.iam#ReportGenerationLimitExceededException":
      throw await de_ReportGenerationLimitExceededExceptionRes(parsedOutput, context);
    case "ReportExpired":
    case "com.amazonaws.iam#CredentialReportExpiredException":
      throw await de_CredentialReportExpiredExceptionRes(parsedOutput, context);
    case "ReportInProgress":
    case "com.amazonaws.iam#CredentialReportNotReadyException":
      throw await de_CredentialReportNotReadyExceptionRes(parsedOutput, context);
    case "ReportNotPresent":
    case "com.amazonaws.iam#CredentialReportNotPresentException":
      throw await de_CredentialReportNotPresentExceptionRes(parsedOutput, context);
    case "UnrecognizedPublicKeyEncoding":
    case "com.amazonaws.iam#UnrecognizedPublicKeyEncodingException":
      throw await de_UnrecognizedPublicKeyEncodingExceptionRes(parsedOutput, context);
    case "PolicyEvaluation":
    case "com.amazonaws.iam#PolicyEvaluationException":
      throw await de_PolicyEvaluationExceptionRes(parsedOutput, context);
    case "KeyPairMismatch":
    case "com.amazonaws.iam#KeyPairMismatchException":
      throw await de_KeyPairMismatchExceptionRes(parsedOutput, context);
    case "MalformedCertificate":
    case "com.amazonaws.iam#MalformedCertificateException":
      throw await de_MalformedCertificateExceptionRes(parsedOutput, context);
    case "DuplicateCertificate":
    case "com.amazonaws.iam#DuplicateCertificateException":
      throw await de_DuplicateCertificateExceptionRes(parsedOutput, context);
    case "InvalidCertificate":
    case "com.amazonaws.iam#InvalidCertificateException":
      throw await de_InvalidCertificateExceptionRes(parsedOutput, context);
    case "DuplicateSSHPublicKey":
    case "com.amazonaws.iam#DuplicateSSHPublicKeyException":
      throw await de_DuplicateSSHPublicKeyExceptionRes(parsedOutput, context);
    case "InvalidPublicKey":
    case "com.amazonaws.iam#InvalidPublicKeyException":
      throw await de_InvalidPublicKeyExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var de_AccountNotManagementOrDelegatedAdministratorExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AccountNotManagementOrDelegatedAdministratorException(body.Error, context);
  const exception = new AccountNotManagementOrDelegatedAdministratorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CallerIsNotManagementAccountExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CallerIsNotManagementAccountException(body.Error, context);
  const exception = new CallerIsNotManagementAccountException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ConcurrentModificationException(body.Error, context);
  const exception = new ConcurrentModificationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CredentialReportExpiredExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CredentialReportExpiredException(body.Error, context);
  const exception = new CredentialReportExpiredException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CredentialReportNotPresentExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CredentialReportNotPresentException(body.Error, context);
  const exception = new CredentialReportNotPresentException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_CredentialReportNotReadyExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CredentialReportNotReadyException(body.Error, context);
  const exception = new CredentialReportNotReadyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DeleteConflictExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DeleteConflictException(body.Error, context);
  const exception = new DeleteConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DuplicateCertificateExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateCertificateException(body.Error, context);
  const exception = new DuplicateCertificateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_DuplicateSSHPublicKeyExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateSSHPublicKeyException(body.Error, context);
  const exception = new DuplicateSSHPublicKeyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_EntityAlreadyExistsExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_EntityAlreadyExistsException(body.Error, context);
  const exception = new EntityAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_EntityTemporarilyUnmodifiableExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_EntityTemporarilyUnmodifiableException(body.Error, context);
  const exception = new EntityTemporarilyUnmodifiableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidAuthenticationCodeExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidAuthenticationCodeException(body.Error, context);
  const exception = new InvalidAuthenticationCodeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidCertificateExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCertificateException(body.Error, context);
  const exception = new InvalidCertificateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidInputExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidInputException(body.Error, context);
  const exception = new InvalidInputException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidPublicKeyExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidPublicKeyException(body.Error, context);
  const exception = new InvalidPublicKeyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidUserTypeExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidUserTypeException(body.Error, context);
  const exception = new InvalidUserTypeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_KeyPairMismatchExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_KeyPairMismatchException(body.Error, context);
  const exception = new KeyPairMismatchException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_LimitExceededException(body.Error, context);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_MalformedCertificateExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_MalformedCertificateException(body.Error, context);
  const exception = new MalformedCertificateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
  const exception = new MalformedPolicyDocumentException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_NoSuchEntityExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NoSuchEntityException(body.Error, context);
  const exception = new NoSuchEntityException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_OpenIdIdpCommunicationErrorExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_OpenIdIdpCommunicationErrorException(body.Error, context);
  const exception = new OpenIdIdpCommunicationErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_OrganizationNotFoundExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_OrganizationNotFoundException(body.Error, context);
  const exception = new OrganizationNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_OrganizationNotInAllFeaturesModeExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_OrganizationNotInAllFeaturesModeException(body.Error, context);
  const exception = new OrganizationNotInAllFeaturesModeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_PasswordPolicyViolationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_PasswordPolicyViolationException(body.Error, context);
  const exception = new PasswordPolicyViolationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_PolicyEvaluationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_PolicyEvaluationException(body.Error, context);
  const exception = new PolicyEvaluationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_PolicyNotAttachableExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_PolicyNotAttachableException(body.Error, context);
  const exception = new PolicyNotAttachableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ReportGenerationLimitExceededExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReportGenerationLimitExceededException(body.Error, context);
  const exception = new ReportGenerationLimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ServiceAccessNotEnabledExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceAccessNotEnabledException(body.Error, context);
  const exception = new ServiceAccessNotEnabledException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceFailureException(body.Error, context);
  const exception = new ServiceFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_ServiceNotSupportedExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceNotSupportedException(body.Error, context);
  const exception = new ServiceNotSupportedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_UnmodifiableEntityExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UnmodifiableEntityException(body.Error, context);
  const exception = new UnmodifiableEntityException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_UnrecognizedPublicKeyEncodingExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UnrecognizedPublicKeyEncodingException(body.Error, context);
  const exception = new UnrecognizedPublicKeyEncodingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var se_ActionNameListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AddClientIDToOpenIDConnectProviderRequest = (input, context) => {
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_CID] != null) {
    entries[_CID] = input[_CID];
  }
  return entries;
};
var se_AddRoleToInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_AddUserToGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_AttachGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_AttachRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_AttachUserPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_ChangePasswordRequest = (input, context) => {
  const entries = {};
  if (input[_OP] != null) {
    entries[_OP] = input[_OP];
  }
  if (input[_NP] != null) {
    entries[_NP] = input[_NP];
  }
  return entries;
};
var se_clientIDListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ContextEntry = (input, context) => {
  var _a;
  const entries = {};
  if (input[_CKN] != null) {
    entries[_CKN] = input[_CKN];
  }
  if (input[_CKV] != null) {
    const memberEntries = se_ContextKeyValueListType(input[_CKV], context);
    if (((_a = input[_CKV]) == null ? void 0 : _a.length) === 0) {
      entries.ContextKeyValues = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ContextKeyValues.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CKT] != null) {
    entries[_CKT] = input[_CKT];
  }
  return entries;
};
var se_ContextEntryListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ContextEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ContextKeyValueListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CreateAccessKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_CreateAccountAliasRequest = (input, context) => {
  const entries = {};
  if (input[_AA] != null) {
    entries[_AA] = input[_AA];
  }
  return entries;
};
var se_CreateGroupRequest = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};
var se_CreateInstanceProfileRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateLoginProfileRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_Pa] != null) {
    entries[_Pa] = input[_Pa];
  }
  if (input[_PRR] != null) {
    entries[_PRR] = input[_PRR];
  }
  return entries;
};
var se_CreateOpenIDConnectProviderRequest = (input, context) => {
  var _a, _b, _c;
  const entries = {};
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_CIDL] != null) {
    const memberEntries = se_clientIDListType(input[_CIDL], context);
    if (((_a = input[_CIDL]) == null ? void 0 : _a.length) === 0) {
      entries.ClientIDList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientIDList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TL] != null) {
    const memberEntries = se_thumbprintListType(input[_TL], context);
    if (((_b = input[_TL]) == null ? void 0 : _b.length) === 0) {
      entries.ThumbprintList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ThumbprintList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_c = input[_T]) == null ? void 0 : _c.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreatePolicyRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreatePolicyVersionRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_SAD] != null) {
    entries[_SAD] = input[_SAD];
  }
  return entries;
};
var se_CreateRoleRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_ARPD] != null) {
    entries[_ARPD] = input[_ARPD];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_MSD] != null) {
    entries[_MSD] = input[_MSD];
  }
  if (input[_PB] != null) {
    entries[_PB] = input[_PB];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateSAMLProviderRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SAMLMD] != null) {
    entries[_SAMLMD] = input[_SAMLMD];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateServiceLinkedRoleRequest = (input, context) => {
  const entries = {};
  if (input[_AWSSN] != null) {
    entries[_AWSSN] = input[_AWSSN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_CS] != null) {
    entries[_CS] = input[_CS];
  }
  return entries;
};
var se_CreateServiceSpecificCredentialRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  return entries;
};
var se_CreateUserRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PB] != null) {
    entries[_PB] = input[_PB];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVirtualMFADeviceRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_VMFADN] != null) {
    entries[_VMFADN] = input[_VMFADN];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeactivateMFADeviceRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  return entries;
};
var se_DeleteAccessKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_AKI] != null) {
    entries[_AKI] = input[_AKI];
  }
  return entries;
};
var se_DeleteAccountAliasRequest = (input, context) => {
  const entries = {};
  if (input[_AA] != null) {
    entries[_AA] = input[_AA];
  }
  return entries;
};
var se_DeleteGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_DeleteGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};
var se_DeleteInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  return entries;
};
var se_DeleteLoginProfileRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_DeleteOpenIDConnectProviderRequest = (input, context) => {
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  return entries;
};
var se_DeletePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_DeletePolicyVersionRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DeleteRolePermissionsBoundaryRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_DeleteRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_DeleteRoleRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_DeleteSAMLProviderRequest = (input, context) => {
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  return entries;
};
var se_DeleteServerCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  return entries;
};
var se_DeleteServiceLinkedRoleRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_DeleteServiceSpecificCredentialRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSCI] != null) {
    entries[_SSCI] = input[_SSCI];
  }
  return entries;
};
var se_DeleteSigningCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_CI] != null) {
    entries[_CI] = input[_CI];
  }
  return entries;
};
var se_DeleteSSHPublicKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSHPKI] != null) {
    entries[_SSHPKI] = input[_SSHPKI];
  }
  return entries;
};
var se_DeleteUserPermissionsBoundaryRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_DeleteUserPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_DeleteUserRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_DeleteVirtualMFADeviceRequest = (input, context) => {
  const entries = {};
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  return entries;
};
var se_DetachGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_DetachRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_DetachUserPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_DisableOrganizationsRootCredentialsManagementRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_DisableOrganizationsRootSessionsRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_EnableMFADeviceRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_AC] != null) {
    entries[_AC] = input[_AC];
  }
  if (input[_ACu] != null) {
    entries[_ACu] = input[_ACu];
  }
  return entries;
};
var se_EnableOrganizationsRootCredentialsManagementRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_EnableOrganizationsRootSessionsRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_entityListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_GenerateOrganizationsAccessReportRequest = (input, context) => {
  const entries = {};
  if (input[_EP] != null) {
    entries[_EP] = input[_EP];
  }
  if (input[_OPI] != null) {
    entries[_OPI] = input[_OPI];
  }
  return entries;
};
var se_GenerateServiceLastAccessedDetailsRequest = (input, context) => {
  const entries = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_G] != null) {
    entries[_G] = input[_G];
  }
  return entries;
};
var se_GetAccessKeyLastUsedRequest = (input, context) => {
  const entries = {};
  if (input[_AKI] != null) {
    entries[_AKI] = input[_AKI];
  }
  return entries;
};
var se_GetAccountAuthorizationDetailsRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_F] != null) {
    const memberEntries = se_entityListType(input[_F], context);
    if (((_a = input[_F]) == null ? void 0 : _a.length) === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
};
var se_GetContextKeysForCustomPolicyRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_PIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
    if (((_a = input[_PIL]) == null ? void 0 : _a.length) === 0) {
      entries.PolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_GetContextKeysForPrincipalPolicyRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_PSA] != null) {
    entries[_PSA] = input[_PSA];
  }
  if (input[_PIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
    if (((_a = input[_PIL]) == null ? void 0 : _a.length) === 0) {
      entries.PolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_GetGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_GetGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_GetInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  return entries;
};
var se_GetLoginProfileRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_GetMFADeviceRequest = (input, context) => {
  const entries = {};
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_GetOpenIDConnectProviderRequest = (input, context) => {
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  return entries;
};
var se_GetOrganizationsAccessReportRequest = (input, context) => {
  const entries = {};
  if (input[_JI] != null) {
    entries[_JI] = input[_JI];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_SK] != null) {
    entries[_SK] = input[_SK];
  }
  return entries;
};
var se_GetPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  return entries;
};
var se_GetPolicyVersionRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_GetRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_GetRoleRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_GetSAMLProviderRequest = (input, context) => {
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  return entries;
};
var se_GetServerCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  return entries;
};
var se_GetServiceLastAccessedDetailsRequest = (input, context) => {
  const entries = {};
  if (input[_JI] != null) {
    entries[_JI] = input[_JI];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
};
var se_GetServiceLastAccessedDetailsWithEntitiesRequest = (input, context) => {
  const entries = {};
  if (input[_JI] != null) {
    entries[_JI] = input[_JI];
  }
  if (input[_SNer] != null) {
    entries[_SNer] = input[_SNer];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
};
var se_GetServiceLinkedRoleDeletionStatusRequest = (input, context) => {
  const entries = {};
  if (input[_DTI] != null) {
    entries[_DTI] = input[_DTI];
  }
  return entries;
};
var se_GetSSHPublicKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSHPKI] != null) {
    entries[_SSHPKI] = input[_SSHPKI];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  return entries;
};
var se_GetUserPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  return entries;
};
var se_GetUserRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_ListAccessKeysRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListAccountAliasesRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListAttachedGroupPoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListAttachedRolePoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListAttachedUserPoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListEntitiesForPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_EF] != null) {
    entries[_EF] = input[_EF];
  }
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_PUF] != null) {
    entries[_PUF] = input[_PUF];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListGroupPoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListGroupsForUserRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListInstanceProfilesForRoleRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListInstanceProfilesRequest = (input, context) => {
  const entries = {};
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListInstanceProfileTagsRequest = (input, context) => {
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListMFADevicesRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListMFADeviceTagsRequest = (input, context) => {
  const entries = {};
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListOpenIDConnectProvidersRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_ListOpenIDConnectProviderTagsRequest = (input, context) => {
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListOrganizationsFeaturesRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_ListPoliciesGrantingServiceAccessRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_SNerv] != null) {
    const memberEntries = se_serviceNamespaceListType(input[_SNerv], context);
    if (((_a = input[_SNerv]) == null ? void 0 : _a.length) === 0) {
      entries.ServiceNamespaces = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceNamespaces.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ListPoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_PUF] != null) {
    entries[_PUF] = input[_PUF];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListPolicyTagsRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListPolicyVersionsRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListRolePoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListRolesRequest = (input, context) => {
  const entries = {};
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListRoleTagsRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListSAMLProvidersRequest = (input, context) => {
  const entries = {};
  return entries;
};
var se_ListSAMLProviderTagsRequest = (input, context) => {
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListServerCertificatesRequest = (input, context) => {
  const entries = {};
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListServerCertificateTagsRequest = (input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListServiceSpecificCredentialsRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  return entries;
};
var se_ListSigningCertificatesRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListSSHPublicKeysRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListUserPoliciesRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListUsersRequest = (input, context) => {
  const entries = {};
  if (input[_PP] != null) {
    entries[_PP] = input[_PP];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListUserTagsRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_ListVirtualMFADevicesRequest = (input, context) => {
  const entries = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  return entries;
};
var se_PutGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  return entries;
};
var se_PutRolePermissionsBoundaryRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PB] != null) {
    entries[_PB] = input[_PB];
  }
  return entries;
};
var se_PutRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  return entries;
};
var se_PutUserPermissionsBoundaryRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PB] != null) {
    entries[_PB] = input[_PB];
  }
  return entries;
};
var se_PutUserPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  return entries;
};
var se_RemoveClientIDFromOpenIDConnectProviderRequest = (input, context) => {
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_CID] != null) {
    entries[_CID] = input[_CID];
  }
  return entries;
};
var se_RemoveRoleFromInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_RemoveUserFromGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  return entries;
};
var se_ResetServiceSpecificCredentialRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSCI] != null) {
    entries[_SSCI] = input[_SSCI];
  }
  return entries;
};
var se_ResourceNameListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ResyncMFADeviceRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_AC] != null) {
    entries[_AC] = input[_AC];
  }
  if (input[_ACu] != null) {
    entries[_ACu] = input[_ACu];
  }
  return entries;
};
var se_serviceNamespaceListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SetDefaultPolicyVersionRequest = (input, context) => {
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_SetSecurityTokenServicePreferencesRequest = (input, context) => {
  const entries = {};
  if (input[_GETV] != null) {
    entries[_GETV] = input[_GETV];
  }
  return entries;
};
var se_SimulateCustomPolicyRequest = (input, context) => {
  var _a, _b, _c, _d, _e2;
  const entries = {};
  if (input[_PIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
    if (((_a = input[_PIL]) == null ? void 0 : _a.length) === 0) {
      entries.PolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PBPIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PBPIL], context);
    if (((_b = input[_PBPIL]) == null ? void 0 : _b.length) === 0) {
      entries.PermissionsBoundaryPolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PermissionsBoundaryPolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AN] != null) {
    const memberEntries = se_ActionNameListType(input[_AN], context);
    if (((_c = input[_AN]) == null ? void 0 : _c.length) === 0) {
      entries.ActionNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActionNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RA] != null) {
    const memberEntries = se_ResourceNameListType(input[_RA], context);
    if (((_d = input[_RA]) == null ? void 0 : _d.length) === 0) {
      entries.ResourceArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RP] != null) {
    entries[_RP] = input[_RP];
  }
  if (input[_RO] != null) {
    entries[_RO] = input[_RO];
  }
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_CE] != null) {
    const memberEntries = se_ContextEntryListType(input[_CE], context);
    if (((_e2 = input[_CE]) == null ? void 0 : _e2.length) === 0) {
      entries.ContextEntries = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ContextEntries.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RHO] != null) {
    entries[_RHO] = input[_RHO];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
};
var se_SimulatePrincipalPolicyRequest = (input, context) => {
  var _a, _b, _c, _d, _e2;
  const entries = {};
  if (input[_PSA] != null) {
    entries[_PSA] = input[_PSA];
  }
  if (input[_PIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PIL], context);
    if (((_a = input[_PIL]) == null ? void 0 : _a.length) === 0) {
      entries.PolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PBPIL] != null) {
    const memberEntries = se_SimulationPolicyListType(input[_PBPIL], context);
    if (((_b = input[_PBPIL]) == null ? void 0 : _b.length) === 0) {
      entries.PermissionsBoundaryPolicyInputList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PermissionsBoundaryPolicyInputList.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AN] != null) {
    const memberEntries = se_ActionNameListType(input[_AN], context);
    if (((_c = input[_AN]) == null ? void 0 : _c.length) === 0) {
      entries.ActionNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActionNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RA] != null) {
    const memberEntries = se_ResourceNameListType(input[_RA], context);
    if (((_d = input[_RA]) == null ? void 0 : _d.length) === 0) {
      entries.ResourceArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RP] != null) {
    entries[_RP] = input[_RP];
  }
  if (input[_RO] != null) {
    entries[_RO] = input[_RO];
  }
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_CE] != null) {
    const memberEntries = se_ContextEntryListType(input[_CE], context);
    if (((_e2 = input[_CE]) == null ? void 0 : _e2.length) === 0) {
      entries.ContextEntries = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ContextEntries.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RHO] != null) {
    entries[_RHO] = input[_RHO];
  }
  if (input[_MI] != null) {
    entries[_MI] = input[_MI];
  }
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  return entries;
};
var se_SimulationPolicyListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_Tag = (input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_TagInstanceProfileRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_tagKeyListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_tagListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TagMFADeviceRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagOpenIDConnectProviderRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagPolicyRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagRoleRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagSAMLProviderRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagServerCertificateRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagUserRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_thumbprintListType = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_UntagInstanceProfileRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_IPN] != null) {
    entries[_IPN] = input[_IPN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagMFADeviceRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagOpenIDConnectProviderRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagPolicyRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagRoleRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagSAMLProviderRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagServerCertificateRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UntagUserRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_tagKeyListType(input[_TK], context);
    if (((_a = input[_TK]) == null ? void 0 : _a.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UpdateAccessKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_AKI] != null) {
    entries[_AKI] = input[_AKI];
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  return entries;
};
var se_UpdateAccountPasswordPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_MPL] != null) {
    entries[_MPL] = input[_MPL];
  }
  if (input[_RS] != null) {
    entries[_RS] = input[_RS];
  }
  if (input[_RNe] != null) {
    entries[_RNe] = input[_RNe];
  }
  if (input[_RUC] != null) {
    entries[_RUC] = input[_RUC];
  }
  if (input[_RLC] != null) {
    entries[_RLC] = input[_RLC];
  }
  if (input[_AUTCP] != null) {
    entries[_AUTCP] = input[_AUTCP];
  }
  if (input[_MPA] != null) {
    entries[_MPA] = input[_MPA];
  }
  if (input[_PRPa] != null) {
    entries[_PRPa] = input[_PRPa];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  return entries;
};
var se_UpdateAssumeRolePolicyRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  return entries;
};
var se_UpdateGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_NPe] != null) {
    entries[_NPe] = input[_NPe];
  }
  if (input[_NGN] != null) {
    entries[_NGN] = input[_NGN];
  }
  return entries;
};
var se_UpdateLoginProfileRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_Pa] != null) {
    entries[_Pa] = input[_Pa];
  }
  if (input[_PRR] != null) {
    entries[_PRR] = input[_PRR];
  }
  return entries;
};
var se_UpdateOpenIDConnectProviderThumbprintRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_OIDCPA] != null) {
    entries[_OIDCPA] = input[_OIDCPA];
  }
  if (input[_TL] != null) {
    const memberEntries = se_thumbprintListType(input[_TL], context);
    if (((_a = input[_TL]) == null ? void 0 : _a.length) === 0) {
      entries.ThumbprintList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ThumbprintList.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UpdateRoleDescriptionRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  return entries;
};
var se_UpdateRoleRequest = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_MSD] != null) {
    entries[_MSD] = input[_MSD];
  }
  return entries;
};
var se_UpdateSAMLProviderRequest = (input, context) => {
  const entries = {};
  if (input[_SAMLMD] != null) {
    entries[_SAMLMD] = input[_SAMLMD];
  }
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  return entries;
};
var se_UpdateServerCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_NPe] != null) {
    entries[_NPe] = input[_NPe];
  }
  if (input[_NSCN] != null) {
    entries[_NSCN] = input[_NSCN];
  }
  return entries;
};
var se_UpdateServiceSpecificCredentialRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSCI] != null) {
    entries[_SSCI] = input[_SSCI];
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  return entries;
};
var se_UpdateSigningCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_CI] != null) {
    entries[_CI] = input[_CI];
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  return entries;
};
var se_UpdateSSHPublicKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSHPKI] != null) {
    entries[_SSHPKI] = input[_SSHPKI];
  }
  if (input[_St] != null) {
    entries[_St] = input[_St];
  }
  return entries;
};
var se_UpdateUserRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_NPe] != null) {
    entries[_NPe] = input[_NPe];
  }
  if (input[_NUN] != null) {
    entries[_NUN] = input[_NUN];
  }
  return entries;
};
var se_UploadServerCertificateRequest = (input, context) => {
  var _a;
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_PK] != null) {
    entries[_PK] = input[_PK];
  }
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_T] != null) {
    const memberEntries = se_tagListType(input[_T], context);
    if (((_a = input[_T]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UploadSigningCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  return entries;
};
var se_UploadSSHPublicKeyRequest = (input, context) => {
  const entries = {};
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_SSHPKB] != null) {
    entries[_SSHPKB] = input[_SSHPKB];
  }
  return entries;
};
var de_AccessDetail = (output, context) => {
  const contents = {};
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  if (output[_SNer] != null) {
    contents[_SNer] = expectString(output[_SNer]);
  }
  if (output[_R] != null) {
    contents[_R] = expectString(output[_R]);
  }
  if (output[_EP] != null) {
    contents[_EP] = expectString(output[_EP]);
  }
  if (output[_LAT] != null) {
    contents[_LAT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LAT]));
  }
  if (output[_TAE] != null) {
    contents[_TAE] = strictParseInt32(output[_TAE]);
  }
  return contents;
};
var de_AccessDetails = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccessDetail(entry, context);
  });
};
var de_AccessKey = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_AKI] != null) {
    contents[_AKI] = expectString(output[_AKI]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_SAK] != null) {
    contents[_SAK] = expectString(output[_SAK]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  return contents;
};
var de_AccessKeyLastUsed = (output, context) => {
  const contents = {};
  if (output[_LUD] != null) {
    contents[_LUD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LUD]));
  }
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  if (output[_R] != null) {
    contents[_R] = expectString(output[_R]);
  }
  return contents;
};
var de_AccessKeyMetadata = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_AKI] != null) {
    contents[_AKI] = expectString(output[_AKI]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  return contents;
};
var de_accessKeyMetadataListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccessKeyMetadata(entry, context);
  });
};
var de_accountAliasListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AccountNotManagementOrDelegatedAdministratorException = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  return contents;
};
var de_ArnListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AttachedPermissionsBoundary = (output, context) => {
  const contents = {};
  if (output[_PBT] != null) {
    contents[_PBT] = expectString(output[_PBT]);
  }
  if (output[_PBA] != null) {
    contents[_PBA] = expectString(output[_PBA]);
  }
  return contents;
};
var de_attachedPoliciesListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AttachedPolicy(entry, context);
  });
};
var de_AttachedPolicy = (output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PA] != null) {
    contents[_PA] = expectString(output[_PA]);
  }
  return contents;
};
var de_CallerIsNotManagementAccountException = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  return contents;
};
var de_certificateListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SigningCertificate(entry, context);
  });
};
var de_CertificationMapType = (output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = expectString(pair["value"]);
    return acc;
  }, {});
};
var de_clientIDListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ConcurrentModificationException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ContextKeyNamesResultListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CreateAccessKeyResponse = (output, context) => {
  const contents = {};
  if (output[_AK] != null) {
    contents[_AK] = de_AccessKey(output[_AK], context);
  }
  return contents;
};
var de_CreateGroupResponse = (output, context) => {
  const contents = {};
  if (output[_Gr] != null) {
    contents[_Gr] = de_Group(output[_Gr], context);
  }
  return contents;
};
var de_CreateInstanceProfileResponse = (output, context) => {
  const contents = {};
  if (output[_IP] != null) {
    contents[_IP] = de_InstanceProfile(output[_IP], context);
  }
  return contents;
};
var de_CreateLoginProfileResponse = (output, context) => {
  const contents = {};
  if (output[_LPo] != null) {
    contents[_LPo] = de_LoginProfile(output[_LPo], context);
  }
  return contents;
};
var de_CreateOpenIDConnectProviderResponse = (output, context) => {
  const contents = {};
  if (output[_OIDCPA] != null) {
    contents[_OIDCPA] = expectString(output[_OIDCPA]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_CreatePolicyResponse = (output, context) => {
  const contents = {};
  if (output[_Po] != null) {
    contents[_Po] = de_Policy(output[_Po], context);
  }
  return contents;
};
var de_CreatePolicyVersionResponse = (output, context) => {
  const contents = {};
  if (output[_PV] != null) {
    contents[_PV] = de_PolicyVersion(output[_PV], context);
  }
  return contents;
};
var de_CreateRoleResponse = (output, context) => {
  const contents = {};
  if (output[_Ro] != null) {
    contents[_Ro] = de_Role(output[_Ro], context);
  }
  return contents;
};
var de_CreateSAMLProviderResponse = (output, context) => {
  const contents = {};
  if (output[_SAMLPA] != null) {
    contents[_SAMLPA] = expectString(output[_SAMLPA]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_CreateServiceLinkedRoleResponse = (output, context) => {
  const contents = {};
  if (output[_Ro] != null) {
    contents[_Ro] = de_Role(output[_Ro], context);
  }
  return contents;
};
var de_CreateServiceSpecificCredentialResponse = (output, context) => {
  const contents = {};
  if (output[_SSC] != null) {
    contents[_SSC] = de_ServiceSpecificCredential(output[_SSC], context);
  }
  return contents;
};
var de_CreateUserResponse = (output, context) => {
  const contents = {};
  if (output[_Us] != null) {
    contents[_Us] = de_User(output[_Us], context);
  }
  return contents;
};
var de_CreateVirtualMFADeviceResponse = (output, context) => {
  const contents = {};
  if (output[_VMFAD] != null) {
    contents[_VMFAD] = de_VirtualMFADevice(output[_VMFAD], context);
  }
  return contents;
};
var de_CredentialReportExpiredException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_CredentialReportNotPresentException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_CredentialReportNotReadyException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_DeleteConflictException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_DeleteServiceLinkedRoleResponse = (output, context) => {
  const contents = {};
  if (output[_DTI] != null) {
    contents[_DTI] = expectString(output[_DTI]);
  }
  return contents;
};
var de_DeletionTaskFailureReasonType = (output, context) => {
  const contents = {};
  if (output[_Re] != null) {
    contents[_Re] = expectString(output[_Re]);
  }
  if (output.RoleUsageList === "") {
    contents[_RUL] = [];
  } else if (output[_RUL] != null && output[_RUL][_me] != null) {
    contents[_RUL] = de_RoleUsageListType(getArrayIfSingleItem(output[_RUL][_me]), context);
  }
  return contents;
};
var de_DisableOrganizationsRootCredentialsManagementResponse = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  if (output.EnabledFeatures === "") {
    contents[_EFn] = [];
  } else if (output[_EFn] != null && output[_EFn][_me] != null) {
    contents[_EFn] = de_FeaturesListType(getArrayIfSingleItem(output[_EFn][_me]), context);
  }
  return contents;
};
var de_DisableOrganizationsRootSessionsResponse = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  if (output.EnabledFeatures === "") {
    contents[_EFn] = [];
  } else if (output[_EFn] != null && output[_EFn][_me] != null) {
    contents[_EFn] = de_FeaturesListType(getArrayIfSingleItem(output[_EFn][_me]), context);
  }
  return contents;
};
var de_DuplicateCertificateException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_DuplicateSSHPublicKeyException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_EnableOrganizationsRootCredentialsManagementResponse = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  if (output.EnabledFeatures === "") {
    contents[_EFn] = [];
  } else if (output[_EFn] != null && output[_EFn][_me] != null) {
    contents[_EFn] = de_FeaturesListType(getArrayIfSingleItem(output[_EFn][_me]), context);
  }
  return contents;
};
var de_EnableOrganizationsRootSessionsResponse = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  if (output.EnabledFeatures === "") {
    contents[_EFn] = [];
  } else if (output[_EFn] != null && output[_EFn][_me] != null) {
    contents[_EFn] = de_FeaturesListType(getArrayIfSingleItem(output[_EFn][_me]), context);
  }
  return contents;
};
var de_EntityAlreadyExistsException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_EntityDetails = (output, context) => {
  const contents = {};
  if (output[_EI] != null) {
    contents[_EI] = de_EntityInfo(output[_EI], context);
  }
  if (output[_LA] != null) {
    contents[_LA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LA]));
  }
  return contents;
};
var de_entityDetailsListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EntityDetails(entry, context);
  });
};
var de_EntityInfo = (output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Ty] != null) {
    contents[_Ty] = expectString(output[_Ty]);
  }
  if (output[_I] != null) {
    contents[_I] = expectString(output[_I]);
  }
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  return contents;
};
var de_EntityTemporarilyUnmodifiableException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ErrorDetails = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_EvalDecisionDetailsType = (output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = expectString(pair["value"]);
    return acc;
  }, {});
};
var de_EvaluationResult = (output, context) => {
  const contents = {};
  if (output[_EAN] != null) {
    contents[_EAN] = expectString(output[_EAN]);
  }
  if (output[_ERN] != null) {
    contents[_ERN] = expectString(output[_ERN]);
  }
  if (output[_ED] != null) {
    contents[_ED] = expectString(output[_ED]);
  }
  if (output.MatchedStatements === "") {
    contents[_MS] = [];
  } else if (output[_MS] != null && output[_MS][_me] != null) {
    contents[_MS] = de_StatementListType(getArrayIfSingleItem(output[_MS][_me]), context);
  }
  if (output.MissingContextValues === "") {
    contents[_MCV] = [];
  } else if (output[_MCV] != null && output[_MCV][_me] != null) {
    contents[_MCV] = de_ContextKeyNamesResultListType(getArrayIfSingleItem(output[_MCV][_me]), context);
  }
  if (output[_ODD] != null) {
    contents[_ODD] = de_OrganizationsDecisionDetail(output[_ODD], context);
  }
  if (output[_PBDD] != null) {
    contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD], context);
  }
  if (output.EvalDecisionDetails === "") {
    contents[_EDD] = {};
  } else if (output[_EDD] != null && output[_EDD][_e] != null) {
    contents[_EDD] = de_EvalDecisionDetailsType(getArrayIfSingleItem(output[_EDD][_e]), context);
  }
  if (output.ResourceSpecificResults === "") {
    contents[_RSR] = [];
  } else if (output[_RSR] != null && output[_RSR][_me] != null) {
    contents[_RSR] = de_ResourceSpecificResultListType(getArrayIfSingleItem(output[_RSR][_me]), context);
  }
  return contents;
};
var de_EvaluationResultsListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EvaluationResult(entry, context);
  });
};
var de_FeaturesListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_GenerateCredentialReportResponse = (output, context) => {
  const contents = {};
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  return contents;
};
var de_GenerateOrganizationsAccessReportResponse = (output, context) => {
  const contents = {};
  if (output[_JI] != null) {
    contents[_JI] = expectString(output[_JI]);
  }
  return contents;
};
var de_GenerateServiceLastAccessedDetailsResponse = (output, context) => {
  const contents = {};
  if (output[_JI] != null) {
    contents[_JI] = expectString(output[_JI]);
  }
  return contents;
};
var de_GetAccessKeyLastUsedResponse = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_AKLU] != null) {
    contents[_AKLU] = de_AccessKeyLastUsed(output[_AKLU], context);
  }
  return contents;
};
var de_GetAccountAuthorizationDetailsResponse = (output, context) => {
  const contents = {};
  if (output.UserDetailList === "") {
    contents[_UDL] = [];
  } else if (output[_UDL] != null && output[_UDL][_me] != null) {
    contents[_UDL] = de_userDetailListType(getArrayIfSingleItem(output[_UDL][_me]), context);
  }
  if (output.GroupDetailList === "") {
    contents[_GDL] = [];
  } else if (output[_GDL] != null && output[_GDL][_me] != null) {
    contents[_GDL] = de_groupDetailListType(getArrayIfSingleItem(output[_GDL][_me]), context);
  }
  if (output.RoleDetailList === "") {
    contents[_RDL] = [];
  } else if (output[_RDL] != null && output[_RDL][_me] != null) {
    contents[_RDL] = de_roleDetailListType(getArrayIfSingleItem(output[_RDL][_me]), context);
  }
  if (output.Policies === "") {
    contents[_Pol] = [];
  } else if (output[_Pol] != null && output[_Pol][_me] != null) {
    contents[_Pol] = de_ManagedPolicyDetailListType(getArrayIfSingleItem(output[_Pol][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_GetAccountPasswordPolicyResponse = (output, context) => {
  const contents = {};
  if (output[_PPa] != null) {
    contents[_PPa] = de_PasswordPolicy(output[_PPa], context);
  }
  return contents;
};
var de_GetAccountSummaryResponse = (output, context) => {
  const contents = {};
  if (output.SummaryMap === "") {
    contents[_SM] = {};
  } else if (output[_SM] != null && output[_SM][_e] != null) {
    contents[_SM] = de_summaryMapType(getArrayIfSingleItem(output[_SM][_e]), context);
  }
  return contents;
};
var de_GetContextKeysForPolicyResponse = (output, context) => {
  const contents = {};
  if (output.ContextKeyNames === "") {
    contents[_CKNo] = [];
  } else if (output[_CKNo] != null && output[_CKNo][_me] != null) {
    contents[_CKNo] = de_ContextKeyNamesResultListType(getArrayIfSingleItem(output[_CKNo][_me]), context);
  }
  return contents;
};
var de_GetCredentialReportResponse = (output, context) => {
  const contents = {};
  if (output[_Co] != null) {
    contents[_Co] = context.base64Decoder(output[_Co]);
  }
  if (output[_RF] != null) {
    contents[_RF] = expectString(output[_RF]);
  }
  if (output[_GT] != null) {
    contents[_GT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_GT]));
  }
  return contents;
};
var de_GetGroupPolicyResponse = (output, context) => {
  const contents = {};
  if (output[_GN] != null) {
    contents[_GN] = expectString(output[_GN]);
  }
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PD] != null) {
    contents[_PD] = expectString(output[_PD]);
  }
  return contents;
};
var de_GetGroupResponse = (output, context) => {
  const contents = {};
  if (output[_Gr] != null) {
    contents[_Gr] = de_Group(output[_Gr], context);
  }
  if (output.Users === "") {
    contents[_Use] = [];
  } else if (output[_Use] != null && output[_Use][_me] != null) {
    contents[_Use] = de_userListType(getArrayIfSingleItem(output[_Use][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_GetInstanceProfileResponse = (output, context) => {
  const contents = {};
  if (output[_IP] != null) {
    contents[_IP] = de_InstanceProfile(output[_IP], context);
  }
  return contents;
};
var de_GetLoginProfileResponse = (output, context) => {
  const contents = {};
  if (output[_LPo] != null) {
    contents[_LPo] = de_LoginProfile(output[_LPo], context);
  }
  return contents;
};
var de_GetMFADeviceResponse = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_SNe] != null) {
    contents[_SNe] = expectString(output[_SNe]);
  }
  if (output[_EDn] != null) {
    contents[_EDn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_EDn]));
  }
  if (output.Certifications === "") {
    contents[_Ce] = {};
  } else if (output[_Ce] != null && output[_Ce][_e] != null) {
    contents[_Ce] = de_CertificationMapType(getArrayIfSingleItem(output[_Ce][_e]), context);
  }
  return contents;
};
var de_GetOpenIDConnectProviderResponse = (output, context) => {
  const contents = {};
  if (output[_U] != null) {
    contents[_U] = expectString(output[_U]);
  }
  if (output.ClientIDList === "") {
    contents[_CIDL] = [];
  } else if (output[_CIDL] != null && output[_CIDL][_me] != null) {
    contents[_CIDL] = de_clientIDListType(getArrayIfSingleItem(output[_CIDL][_me]), context);
  }
  if (output.ThumbprintList === "") {
    contents[_TL] = [];
  } else if (output[_TL] != null && output[_TL][_me] != null) {
    contents[_TL] = de_thumbprintListType(getArrayIfSingleItem(output[_TL][_me]), context);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_GetOrganizationsAccessReportResponse = (output, context) => {
  const contents = {};
  if (output[_JS] != null) {
    contents[_JS] = expectString(output[_JS]);
  }
  if (output[_JCD] != null) {
    contents[_JCD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCD]));
  }
  if (output[_JCDo] != null) {
    contents[_JCDo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCDo]));
  }
  if (output[_NOSA] != null) {
    contents[_NOSA] = strictParseInt32(output[_NOSA]);
  }
  if (output[_NOSNA] != null) {
    contents[_NOSNA] = strictParseInt32(output[_NOSNA]);
  }
  if (output.AccessDetails === "") {
    contents[_AD] = [];
  } else if (output[_AD] != null && output[_AD][_me] != null) {
    contents[_AD] = de_AccessDetails(getArrayIfSingleItem(output[_AD][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_EDr] != null) {
    contents[_EDr] = de_ErrorDetails(output[_EDr], context);
  }
  return contents;
};
var de_GetPolicyResponse = (output, context) => {
  const contents = {};
  if (output[_Po] != null) {
    contents[_Po] = de_Policy(output[_Po], context);
  }
  return contents;
};
var de_GetPolicyVersionResponse = (output, context) => {
  const contents = {};
  if (output[_PV] != null) {
    contents[_PV] = de_PolicyVersion(output[_PV], context);
  }
  return contents;
};
var de_GetRolePolicyResponse = (output, context) => {
  const contents = {};
  if (output[_RN] != null) {
    contents[_RN] = expectString(output[_RN]);
  }
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PD] != null) {
    contents[_PD] = expectString(output[_PD]);
  }
  return contents;
};
var de_GetRoleResponse = (output, context) => {
  const contents = {};
  if (output[_Ro] != null) {
    contents[_Ro] = de_Role(output[_Ro], context);
  }
  return contents;
};
var de_GetSAMLProviderResponse = (output, context) => {
  const contents = {};
  if (output[_SAMLMD] != null) {
    contents[_SAMLMD] = expectString(output[_SAMLMD]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_VU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_VU]));
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_GetServerCertificateResponse = (output, context) => {
  const contents = {};
  if (output[_SC] != null) {
    contents[_SC] = de_ServerCertificate(output[_SC], context);
  }
  return contents;
};
var de_GetServiceLastAccessedDetailsResponse = (output, context) => {
  const contents = {};
  if (output[_JS] != null) {
    contents[_JS] = expectString(output[_JS]);
  }
  if (output[_JT] != null) {
    contents[_JT] = expectString(output[_JT]);
  }
  if (output[_JCD] != null) {
    contents[_JCD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCD]));
  }
  if (output.ServicesLastAccessed === "") {
    contents[_SLA] = [];
  } else if (output[_SLA] != null && output[_SLA][_me] != null) {
    contents[_SLA] = de_ServicesLastAccessed(getArrayIfSingleItem(output[_SLA][_me]), context);
  }
  if (output[_JCDo] != null) {
    contents[_JCDo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCDo]));
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_Er] != null) {
    contents[_Er] = de_ErrorDetails(output[_Er], context);
  }
  return contents;
};
var de_GetServiceLastAccessedDetailsWithEntitiesResponse = (output, context) => {
  const contents = {};
  if (output[_JS] != null) {
    contents[_JS] = expectString(output[_JS]);
  }
  if (output[_JCD] != null) {
    contents[_JCD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCD]));
  }
  if (output[_JCDo] != null) {
    contents[_JCDo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_JCDo]));
  }
  if (output.EntityDetailsList === "") {
    contents[_EDL] = [];
  } else if (output[_EDL] != null && output[_EDL][_me] != null) {
    contents[_EDL] = de_entityDetailsListType(getArrayIfSingleItem(output[_EDL][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_Er] != null) {
    contents[_Er] = de_ErrorDetails(output[_Er], context);
  }
  return contents;
};
var de_GetServiceLinkedRoleDeletionStatusResponse = (output, context) => {
  const contents = {};
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_Re] != null) {
    contents[_Re] = de_DeletionTaskFailureReasonType(output[_Re], context);
  }
  return contents;
};
var de_GetSSHPublicKeyResponse = (output, context) => {
  const contents = {};
  if (output[_SSHPK] != null) {
    contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK], context);
  }
  return contents;
};
var de_GetUserPolicyResponse = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PD] != null) {
    contents[_PD] = expectString(output[_PD]);
  }
  return contents;
};
var de_GetUserResponse = (output, context) => {
  const contents = {};
  if (output[_Us] != null) {
    contents[_Us] = de_User(output[_Us], context);
  }
  return contents;
};
var de_Group = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_GN] != null) {
    contents[_GN] = expectString(output[_GN]);
  }
  if (output[_GI] != null) {
    contents[_GI] = expectString(output[_GI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  return contents;
};
var de_GroupDetail = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_GN] != null) {
    contents[_GN] = expectString(output[_GN]);
  }
  if (output[_GI] != null) {
    contents[_GI] = expectString(output[_GI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output.GroupPolicyList === "") {
    contents[_GPL] = [];
  } else if (output[_GPL] != null && output[_GPL][_me] != null) {
    contents[_GPL] = de_policyDetailListType(getArrayIfSingleItem(output[_GPL][_me]), context);
  }
  if (output.AttachedManagedPolicies === "") {
    contents[_AMP] = [];
  } else if (output[_AMP] != null && output[_AMP][_me] != null) {
    contents[_AMP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AMP][_me]), context);
  }
  return contents;
};
var de_groupDetailListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GroupDetail(entry, context);
  });
};
var de_groupListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Group(entry, context);
  });
};
var de_groupNameListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceProfile = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_IPN] != null) {
    contents[_IPN] = expectString(output[_IPN]);
  }
  if (output[_IPI] != null) {
    contents[_IPI] = expectString(output[_IPI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output.Roles === "") {
    contents[_Rol] = [];
  } else if (output[_Rol] != null && output[_Rol][_me] != null) {
    contents[_Rol] = de_roleListType(getArrayIfSingleItem(output[_Rol][_me]), context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_instanceProfileListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceProfile(entry, context);
  });
};
var de_InvalidAuthenticationCodeException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_InvalidCertificateException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_InvalidInputException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_InvalidPublicKeyException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_InvalidUserTypeException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_KeyPairMismatchException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_LimitExceededException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ListAccessKeysResponse = (output, context) => {
  const contents = {};
  if (output.AccessKeyMetadata === "") {
    contents[_AKM] = [];
  } else if (output[_AKM] != null && output[_AKM][_me] != null) {
    contents[_AKM] = de_accessKeyMetadataListType(getArrayIfSingleItem(output[_AKM][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListAccountAliasesResponse = (output, context) => {
  const contents = {};
  if (output.AccountAliases === "") {
    contents[_AAc] = [];
  } else if (output[_AAc] != null && output[_AAc][_me] != null) {
    contents[_AAc] = de_accountAliasListType(getArrayIfSingleItem(output[_AAc][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListAttachedGroupPoliciesResponse = (output, context) => {
  const contents = {};
  if (output.AttachedPolicies === "") {
    contents[_AP] = [];
  } else if (output[_AP] != null && output[_AP][_me] != null) {
    contents[_AP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AP][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListAttachedRolePoliciesResponse = (output, context) => {
  const contents = {};
  if (output.AttachedPolicies === "") {
    contents[_AP] = [];
  } else if (output[_AP] != null && output[_AP][_me] != null) {
    contents[_AP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AP][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListAttachedUserPoliciesResponse = (output, context) => {
  const contents = {};
  if (output.AttachedPolicies === "") {
    contents[_AP] = [];
  } else if (output[_AP] != null && output[_AP][_me] != null) {
    contents[_AP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AP][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListEntitiesForPolicyResponse = (output, context) => {
  const contents = {};
  if (output.PolicyGroups === "") {
    contents[_PG] = [];
  } else if (output[_PG] != null && output[_PG][_me] != null) {
    contents[_PG] = de_PolicyGroupListType(getArrayIfSingleItem(output[_PG][_me]), context);
  }
  if (output.PolicyUsers === "") {
    contents[_PU] = [];
  } else if (output[_PU] != null && output[_PU][_me] != null) {
    contents[_PU] = de_PolicyUserListType(getArrayIfSingleItem(output[_PU][_me]), context);
  }
  if (output.PolicyRoles === "") {
    contents[_PR] = [];
  } else if (output[_PR] != null && output[_PR][_me] != null) {
    contents[_PR] = de_PolicyRoleListType(getArrayIfSingleItem(output[_PR][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListGroupPoliciesResponse = (output, context) => {
  const contents = {};
  if (output.PolicyNames === "") {
    contents[_PNo] = [];
  } else if (output[_PNo] != null && output[_PNo][_me] != null) {
    contents[_PNo] = de_policyNameListType(getArrayIfSingleItem(output[_PNo][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListGroupsForUserResponse = (output, context) => {
  const contents = {};
  if (output.Groups === "") {
    contents[_Gro] = [];
  } else if (output[_Gro] != null && output[_Gro][_me] != null) {
    contents[_Gro] = de_groupListType(getArrayIfSingleItem(output[_Gro][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListGroupsResponse = (output, context) => {
  const contents = {};
  if (output.Groups === "") {
    contents[_Gro] = [];
  } else if (output[_Gro] != null && output[_Gro][_me] != null) {
    contents[_Gro] = de_groupListType(getArrayIfSingleItem(output[_Gro][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListInstanceProfilesForRoleResponse = (output, context) => {
  const contents = {};
  if (output.InstanceProfiles === "") {
    contents[_IPn] = [];
  } else if (output[_IPn] != null && output[_IPn][_me] != null) {
    contents[_IPn] = de_instanceProfileListType(getArrayIfSingleItem(output[_IPn][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListInstanceProfilesResponse = (output, context) => {
  const contents = {};
  if (output.InstanceProfiles === "") {
    contents[_IPn] = [];
  } else if (output[_IPn] != null && output[_IPn][_me] != null) {
    contents[_IPn] = de_instanceProfileListType(getArrayIfSingleItem(output[_IPn][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListInstanceProfileTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListMFADevicesResponse = (output, context) => {
  const contents = {};
  if (output.MFADevices === "") {
    contents[_MFAD] = [];
  } else if (output[_MFAD] != null && output[_MFAD][_me] != null) {
    contents[_MFAD] = de_mfaDeviceListType(getArrayIfSingleItem(output[_MFAD][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListMFADeviceTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListOpenIDConnectProvidersResponse = (output, context) => {
  const contents = {};
  if (output.OpenIDConnectProviderList === "") {
    contents[_OIDCPL] = [];
  } else if (output[_OIDCPL] != null && output[_OIDCPL][_me] != null) {
    contents[_OIDCPL] = de_OpenIDConnectProviderListType(getArrayIfSingleItem(output[_OIDCPL][_me]), context);
  }
  return contents;
};
var de_ListOpenIDConnectProviderTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListOrganizationsFeaturesResponse = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  if (output.EnabledFeatures === "") {
    contents[_EFn] = [];
  } else if (output[_EFn] != null && output[_EFn][_me] != null) {
    contents[_EFn] = de_FeaturesListType(getArrayIfSingleItem(output[_EFn][_me]), context);
  }
  return contents;
};
var de_ListPoliciesGrantingServiceAccessEntry = (output, context) => {
  const contents = {};
  if (output[_SNer] != null) {
    contents[_SNer] = expectString(output[_SNer]);
  }
  if (output.Policies === "") {
    contents[_Pol] = [];
  } else if (output[_Pol] != null && output[_Pol][_me] != null) {
    contents[_Pol] = de_policyGrantingServiceAccessListType(getArrayIfSingleItem(output[_Pol][_me]), context);
  }
  return contents;
};
var de_ListPoliciesGrantingServiceAccessResponse = (output, context) => {
  const contents = {};
  if (output.PoliciesGrantingServiceAccess === "") {
    contents[_PGSA] = [];
  } else if (output[_PGSA] != null && output[_PGSA][_me] != null) {
    contents[_PGSA] = de_listPolicyGrantingServiceAccessResponseListType(getArrayIfSingleItem(output[_PGSA][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListPoliciesResponse = (output, context) => {
  const contents = {};
  if (output.Policies === "") {
    contents[_Pol] = [];
  } else if (output[_Pol] != null && output[_Pol][_me] != null) {
    contents[_Pol] = de_policyListType(getArrayIfSingleItem(output[_Pol][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_listPolicyGrantingServiceAccessResponseListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ListPoliciesGrantingServiceAccessEntry(entry, context);
  });
};
var de_ListPolicyTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListPolicyVersionsResponse = (output, context) => {
  const contents = {};
  if (output.Versions === "") {
    contents[_Ve] = [];
  } else if (output[_Ve] != null && output[_Ve][_me] != null) {
    contents[_Ve] = de_policyDocumentVersionListType(getArrayIfSingleItem(output[_Ve][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListRolePoliciesResponse = (output, context) => {
  const contents = {};
  if (output.PolicyNames === "") {
    contents[_PNo] = [];
  } else if (output[_PNo] != null && output[_PNo][_me] != null) {
    contents[_PNo] = de_policyNameListType(getArrayIfSingleItem(output[_PNo][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListRolesResponse = (output, context) => {
  const contents = {};
  if (output.Roles === "") {
    contents[_Rol] = [];
  } else if (output[_Rol] != null && output[_Rol][_me] != null) {
    contents[_Rol] = de_roleListType(getArrayIfSingleItem(output[_Rol][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListRoleTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListSAMLProvidersResponse = (output, context) => {
  const contents = {};
  if (output.SAMLProviderList === "") {
    contents[_SAMLPL] = [];
  } else if (output[_SAMLPL] != null && output[_SAMLPL][_me] != null) {
    contents[_SAMLPL] = de_SAMLProviderListType(getArrayIfSingleItem(output[_SAMLPL][_me]), context);
  }
  return contents;
};
var de_ListSAMLProviderTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListServerCertificatesResponse = (output, context) => {
  const contents = {};
  if (output.ServerCertificateMetadataList === "") {
    contents[_SCML] = [];
  } else if (output[_SCML] != null && output[_SCML][_me] != null) {
    contents[_SCML] = de_serverCertificateMetadataListType(getArrayIfSingleItem(output[_SCML][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListServerCertificateTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListServiceSpecificCredentialsResponse = (output, context) => {
  const contents = {};
  if (output.ServiceSpecificCredentials === "") {
    contents[_SSCe] = [];
  } else if (output[_SSCe] != null && output[_SSCe][_me] != null) {
    contents[_SSCe] = de_ServiceSpecificCredentialsListType(getArrayIfSingleItem(output[_SSCe][_me]), context);
  }
  return contents;
};
var de_ListSigningCertificatesResponse = (output, context) => {
  const contents = {};
  if (output.Certificates === "") {
    contents[_Cer] = [];
  } else if (output[_Cer] != null && output[_Cer][_me] != null) {
    contents[_Cer] = de_certificateListType(getArrayIfSingleItem(output[_Cer][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListSSHPublicKeysResponse = (output, context) => {
  const contents = {};
  if (output.SSHPublicKeys === "") {
    contents[_SSHPKu] = [];
  } else if (output[_SSHPKu] != null && output[_SSHPKu][_me] != null) {
    contents[_SSHPKu] = de_SSHPublicKeyListType(getArrayIfSingleItem(output[_SSHPKu][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListUserPoliciesResponse = (output, context) => {
  const contents = {};
  if (output.PolicyNames === "") {
    contents[_PNo] = [];
  } else if (output[_PNo] != null && output[_PNo][_me] != null) {
    contents[_PNo] = de_policyNameListType(getArrayIfSingleItem(output[_PNo][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListUsersResponse = (output, context) => {
  const contents = {};
  if (output.Users === "") {
    contents[_Use] = [];
  } else if (output[_Use] != null && output[_Use][_me] != null) {
    contents[_Use] = de_userListType(getArrayIfSingleItem(output[_Use][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListUserTagsResponse = (output, context) => {
  const contents = {};
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_ListVirtualMFADevicesResponse = (output, context) => {
  const contents = {};
  if (output.VirtualMFADevices === "") {
    contents[_VMFADi] = [];
  } else if (output[_VMFADi] != null && output[_VMFADi][_me] != null) {
    contents[_VMFADi] = de_virtualMFADeviceListType(getArrayIfSingleItem(output[_VMFADi][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_LoginProfile = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_PRR] != null) {
    contents[_PRR] = parseBoolean(output[_PRR]);
  }
  return contents;
};
var de_MalformedCertificateException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_MalformedPolicyDocumentException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ManagedPolicyDetail = (output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PI] != null) {
    contents[_PI] = expectString(output[_PI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_DVI] != null) {
    contents[_DVI] = expectString(output[_DVI]);
  }
  if (output[_ACt] != null) {
    contents[_ACt] = strictParseInt32(output[_ACt]);
  }
  if (output[_PBUC] != null) {
    contents[_PBUC] = strictParseInt32(output[_PBUC]);
  }
  if (output[_IA] != null) {
    contents[_IA] = parseBoolean(output[_IA]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_UD] != null) {
    contents[_UD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UD]));
  }
  if (output.PolicyVersionList === "") {
    contents[_PVL] = [];
  } else if (output[_PVL] != null && output[_PVL][_me] != null) {
    contents[_PVL] = de_policyDocumentVersionListType(getArrayIfSingleItem(output[_PVL][_me]), context);
  }
  return contents;
};
var de_ManagedPolicyDetailListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ManagedPolicyDetail(entry, context);
  });
};
var de_MFADevice = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_SNe] != null) {
    contents[_SNe] = expectString(output[_SNe]);
  }
  if (output[_EDn] != null) {
    contents[_EDn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_EDn]));
  }
  return contents;
};
var de_mfaDeviceListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MFADevice(entry, context);
  });
};
var de_NoSuchEntityException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_OpenIDConnectProviderListEntry = (output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  return contents;
};
var de_OpenIDConnectProviderListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OpenIDConnectProviderListEntry(entry, context);
  });
};
var de_OpenIdIdpCommunicationErrorException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_OrganizationNotFoundException = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  return contents;
};
var de_OrganizationNotInAllFeaturesModeException = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  return contents;
};
var de_OrganizationsDecisionDetail = (output, context) => {
  const contents = {};
  if (output[_ABO] != null) {
    contents[_ABO] = parseBoolean(output[_ABO]);
  }
  return contents;
};
var de_PasswordPolicy = (output, context) => {
  const contents = {};
  if (output[_MPL] != null) {
    contents[_MPL] = strictParseInt32(output[_MPL]);
  }
  if (output[_RS] != null) {
    contents[_RS] = parseBoolean(output[_RS]);
  }
  if (output[_RNe] != null) {
    contents[_RNe] = parseBoolean(output[_RNe]);
  }
  if (output[_RUC] != null) {
    contents[_RUC] = parseBoolean(output[_RUC]);
  }
  if (output[_RLC] != null) {
    contents[_RLC] = parseBoolean(output[_RLC]);
  }
  if (output[_AUTCP] != null) {
    contents[_AUTCP] = parseBoolean(output[_AUTCP]);
  }
  if (output[_EPx] != null) {
    contents[_EPx] = parseBoolean(output[_EPx]);
  }
  if (output[_MPA] != null) {
    contents[_MPA] = strictParseInt32(output[_MPA]);
  }
  if (output[_PRPa] != null) {
    contents[_PRPa] = strictParseInt32(output[_PRPa]);
  }
  if (output[_HE] != null) {
    contents[_HE] = parseBoolean(output[_HE]);
  }
  return contents;
};
var de_PasswordPolicyViolationException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_PermissionsBoundaryDecisionDetail = (output, context) => {
  const contents = {};
  if (output[_ABPB] != null) {
    contents[_ABPB] = parseBoolean(output[_ABPB]);
  }
  return contents;
};
var de_Policy = (output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PI] != null) {
    contents[_PI] = expectString(output[_PI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_DVI] != null) {
    contents[_DVI] = expectString(output[_DVI]);
  }
  if (output[_ACt] != null) {
    contents[_ACt] = strictParseInt32(output[_ACt]);
  }
  if (output[_PBUC] != null) {
    contents[_PBUC] = strictParseInt32(output[_PBUC]);
  }
  if (output[_IA] != null) {
    contents[_IA] = parseBoolean(output[_IA]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_UD] != null) {
    contents[_UD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UD]));
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_PolicyDetail = (output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PD] != null) {
    contents[_PD] = expectString(output[_PD]);
  }
  return contents;
};
var de_policyDetailListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyDetail(entry, context);
  });
};
var de_policyDocumentVersionListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyVersion(entry, context);
  });
};
var de_PolicyEvaluationException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_PolicyGrantingServiceAccess = (output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = expectString(output[_PN]);
  }
  if (output[_PT] != null) {
    contents[_PT] = expectString(output[_PT]);
  }
  if (output[_PA] != null) {
    contents[_PA] = expectString(output[_PA]);
  }
  if (output[_ET] != null) {
    contents[_ET] = expectString(output[_ET]);
  }
  if (output[_EN] != null) {
    contents[_EN] = expectString(output[_EN]);
  }
  return contents;
};
var de_policyGrantingServiceAccessListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyGrantingServiceAccess(entry, context);
  });
};
var de_PolicyGroup = (output, context) => {
  const contents = {};
  if (output[_GN] != null) {
    contents[_GN] = expectString(output[_GN]);
  }
  if (output[_GI] != null) {
    contents[_GI] = expectString(output[_GI]);
  }
  return contents;
};
var de_PolicyGroupListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyGroup(entry, context);
  });
};
var de_policyListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Policy(entry, context);
  });
};
var de_policyNameListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_PolicyNotAttachableException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_PolicyRole = (output, context) => {
  const contents = {};
  if (output[_RN] != null) {
    contents[_RN] = expectString(output[_RN]);
  }
  if (output[_RI] != null) {
    contents[_RI] = expectString(output[_RI]);
  }
  return contents;
};
var de_PolicyRoleListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyRole(entry, context);
  });
};
var de_PolicyUser = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_UI] != null) {
    contents[_UI] = expectString(output[_UI]);
  }
  return contents;
};
var de_PolicyUserListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PolicyUser(entry, context);
  });
};
var de_PolicyVersion = (output, context) => {
  const contents = {};
  if (output[_Do] != null) {
    contents[_Do] = expectString(output[_Do]);
  }
  if (output[_VI] != null) {
    contents[_VI] = expectString(output[_VI]);
  }
  if (output[_IDV] != null) {
    contents[_IDV] = parseBoolean(output[_IDV]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  return contents;
};
var de_Position = (output, context) => {
  const contents = {};
  if (output[_L] != null) {
    contents[_L] = strictParseInt32(output[_L]);
  }
  if (output[_Col] != null) {
    contents[_Col] = strictParseInt32(output[_Col]);
  }
  return contents;
};
var de_ReportGenerationLimitExceededException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ResetServiceSpecificCredentialResponse = (output, context) => {
  const contents = {};
  if (output[_SSC] != null) {
    contents[_SSC] = de_ServiceSpecificCredential(output[_SSC], context);
  }
  return contents;
};
var de_ResourceSpecificResult = (output, context) => {
  const contents = {};
  if (output[_ERN] != null) {
    contents[_ERN] = expectString(output[_ERN]);
  }
  if (output[_ERD] != null) {
    contents[_ERD] = expectString(output[_ERD]);
  }
  if (output.MatchedStatements === "") {
    contents[_MS] = [];
  } else if (output[_MS] != null && output[_MS][_me] != null) {
    contents[_MS] = de_StatementListType(getArrayIfSingleItem(output[_MS][_me]), context);
  }
  if (output.MissingContextValues === "") {
    contents[_MCV] = [];
  } else if (output[_MCV] != null && output[_MCV][_me] != null) {
    contents[_MCV] = de_ContextKeyNamesResultListType(getArrayIfSingleItem(output[_MCV][_me]), context);
  }
  if (output.EvalDecisionDetails === "") {
    contents[_EDD] = {};
  } else if (output[_EDD] != null && output[_EDD][_e] != null) {
    contents[_EDD] = de_EvalDecisionDetailsType(getArrayIfSingleItem(output[_EDD][_e]), context);
  }
  if (output[_PBDD] != null) {
    contents[_PBDD] = de_PermissionsBoundaryDecisionDetail(output[_PBDD], context);
  }
  return contents;
};
var de_ResourceSpecificResultListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceSpecificResult(entry, context);
  });
};
var de_Role = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_RN] != null) {
    contents[_RN] = expectString(output[_RN]);
  }
  if (output[_RI] != null) {
    contents[_RI] = expectString(output[_RI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_ARPD] != null) {
    contents[_ARPD] = expectString(output[_ARPD]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_MSD] != null) {
    contents[_MSD] = strictParseInt32(output[_MSD]);
  }
  if (output[_PB] != null) {
    contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_RLU] != null) {
    contents[_RLU] = de_RoleLastUsed(output[_RLU], context);
  }
  return contents;
};
var de_RoleDetail = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_RN] != null) {
    contents[_RN] = expectString(output[_RN]);
  }
  if (output[_RI] != null) {
    contents[_RI] = expectString(output[_RI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_ARPD] != null) {
    contents[_ARPD] = expectString(output[_ARPD]);
  }
  if (output.InstanceProfileList === "") {
    contents[_IPL] = [];
  } else if (output[_IPL] != null && output[_IPL][_me] != null) {
    contents[_IPL] = de_instanceProfileListType(getArrayIfSingleItem(output[_IPL][_me]), context);
  }
  if (output.RolePolicyList === "") {
    contents[_RPL] = [];
  } else if (output[_RPL] != null && output[_RPL][_me] != null) {
    contents[_RPL] = de_policyDetailListType(getArrayIfSingleItem(output[_RPL][_me]), context);
  }
  if (output.AttachedManagedPolicies === "") {
    contents[_AMP] = [];
  } else if (output[_AMP] != null && output[_AMP][_me] != null) {
    contents[_AMP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AMP][_me]), context);
  }
  if (output[_PB] != null) {
    contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  if (output[_RLU] != null) {
    contents[_RLU] = de_RoleLastUsed(output[_RLU], context);
  }
  return contents;
};
var de_roleDetailListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RoleDetail(entry, context);
  });
};
var de_RoleLastUsed = (output, context) => {
  const contents = {};
  if (output[_LUD] != null) {
    contents[_LUD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LUD]));
  }
  if (output[_R] != null) {
    contents[_R] = expectString(output[_R]);
  }
  return contents;
};
var de_roleListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Role(entry, context);
  });
};
var de_RoleUsageListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RoleUsageType(entry, context);
  });
};
var de_RoleUsageType = (output, context) => {
  const contents = {};
  if (output[_R] != null) {
    contents[_R] = expectString(output[_R]);
  }
  if (output.Resources === "") {
    contents[_Res] = [];
  } else if (output[_Res] != null && output[_Res][_me] != null) {
    contents[_Res] = de_ArnListType(getArrayIfSingleItem(output[_Res][_me]), context);
  }
  return contents;
};
var de_SAMLProviderListEntry = (output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_VU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_VU]));
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  return contents;
};
var de_SAMLProviderListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SAMLProviderListEntry(entry, context);
  });
};
var de_ServerCertificate = (output, context) => {
  const contents = {};
  if (output[_SCM] != null) {
    contents[_SCM] = de_ServerCertificateMetadata(output[_SCM], context);
  }
  if (output[_CB] != null) {
    contents[_CB] = expectString(output[_CB]);
  }
  if (output[_CC] != null) {
    contents[_CC] = expectString(output[_CC]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_ServerCertificateMetadata = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_SCN] != null) {
    contents[_SCN] = expectString(output[_SCN]);
  }
  if (output[_SCI] != null) {
    contents[_SCI] = expectString(output[_SCI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_UDp] != null) {
    contents[_UDp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UDp]));
  }
  if (output[_Ex] != null) {
    contents[_Ex] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_Ex]));
  }
  return contents;
};
var de_serverCertificateMetadataListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServerCertificateMetadata(entry, context);
  });
};
var de_ServiceAccessNotEnabledException = (output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  return contents;
};
var de_ServiceFailureException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ServiceLastAccessed = (output, context) => {
  const contents = {};
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  if (output[_LA] != null) {
    contents[_LA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LA]));
  }
  if (output[_SNer] != null) {
    contents[_SNer] = expectString(output[_SNer]);
  }
  if (output[_LAE] != null) {
    contents[_LAE] = expectString(output[_LAE]);
  }
  if (output[_LAR] != null) {
    contents[_LAR] = expectString(output[_LAR]);
  }
  if (output[_TAE] != null) {
    contents[_TAE] = strictParseInt32(output[_TAE]);
  }
  if (output.TrackedActionsLastAccessed === "") {
    contents[_TALA] = [];
  } else if (output[_TALA] != null && output[_TALA][_me] != null) {
    contents[_TALA] = de_TrackedActionsLastAccessed(getArrayIfSingleItem(output[_TALA][_me]), context);
  }
  return contents;
};
var de_ServiceNotSupportedException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_ServicesLastAccessed = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServiceLastAccessed(entry, context);
  });
};
var de_ServiceSpecificCredential = (output, context) => {
  const contents = {};
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  if (output[_SUN] != null) {
    contents[_SUN] = expectString(output[_SUN]);
  }
  if (output[_SP] != null) {
    contents[_SP] = expectString(output[_SP]);
  }
  if (output[_SSCI] != null) {
    contents[_SSCI] = expectString(output[_SSCI]);
  }
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  return contents;
};
var de_ServiceSpecificCredentialMetadata = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_SUN] != null) {
    contents[_SUN] = expectString(output[_SUN]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_SSCI] != null) {
    contents[_SSCI] = expectString(output[_SSCI]);
  }
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  return contents;
};
var de_ServiceSpecificCredentialsListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServiceSpecificCredentialMetadata(entry, context);
  });
};
var de_SigningCertificate = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_CI] != null) {
    contents[_CI] = expectString(output[_CI]);
  }
  if (output[_CB] != null) {
    contents[_CB] = expectString(output[_CB]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_UDp] != null) {
    contents[_UDp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UDp]));
  }
  return contents;
};
var de_SimulatePolicyResponse = (output, context) => {
  const contents = {};
  if (output.EvaluationResults === "") {
    contents[_ER] = [];
  } else if (output[_ER] != null && output[_ER][_me] != null) {
    contents[_ER] = de_EvaluationResultsListType(getArrayIfSingleItem(output[_ER][_me]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  return contents;
};
var de_SSHPublicKey = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_SSHPKI] != null) {
    contents[_SSHPKI] = expectString(output[_SSHPKI]);
  }
  if (output[_Fi] != null) {
    contents[_Fi] = expectString(output[_Fi]);
  }
  if (output[_SSHPKB] != null) {
    contents[_SSHPKB] = expectString(output[_SSHPKB]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_UDp] != null) {
    contents[_UDp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UDp]));
  }
  return contents;
};
var de_SSHPublicKeyListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SSHPublicKeyMetadata(entry, context);
  });
};
var de_SSHPublicKeyMetadata = (output, context) => {
  const contents = {};
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_SSHPKI] != null) {
    contents[_SSHPKI] = expectString(output[_SSHPKI]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_UDp] != null) {
    contents[_UDp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_UDp]));
  }
  return contents;
};
var de_Statement = (output, context) => {
  const contents = {};
  if (output[_SPI] != null) {
    contents[_SPI] = expectString(output[_SPI]);
  }
  if (output[_SPT] != null) {
    contents[_SPT] = expectString(output[_SPT]);
  }
  if (output[_SPt] != null) {
    contents[_SPt] = de_Position(output[_SPt], context);
  }
  if (output[_EPn] != null) {
    contents[_EPn] = de_Position(output[_EPn], context);
  }
  return contents;
};
var de_StatementListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Statement(entry, context);
  });
};
var de_summaryMapType = (output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = strictParseInt32(pair["value"]);
    return acc;
  }, {});
};
var de_Tag = (output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = expectString(output[_K]);
  }
  if (output[_Va] != null) {
    contents[_Va] = expectString(output[_Va]);
  }
  return contents;
};
var de_tagListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Tag(entry, context);
  });
};
var de_thumbprintListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_TrackedActionLastAccessed = (output, context) => {
  const contents = {};
  if (output[_ANc] != null) {
    contents[_ANc] = expectString(output[_ANc]);
  }
  if (output[_LAEa] != null) {
    contents[_LAEa] = expectString(output[_LAEa]);
  }
  if (output[_LATa] != null) {
    contents[_LATa] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LATa]));
  }
  if (output[_LARa] != null) {
    contents[_LARa] = expectString(output[_LARa]);
  }
  return contents;
};
var de_TrackedActionsLastAccessed = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrackedActionLastAccessed(entry, context);
  });
};
var de_UnmodifiableEntityException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_UnrecognizedPublicKeyEncodingException = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_m] = expectString(output[_m]);
  }
  return contents;
};
var de_UpdateRoleDescriptionResponse = (output, context) => {
  const contents = {};
  if (output[_Ro] != null) {
    contents[_Ro] = de_Role(output[_Ro], context);
  }
  return contents;
};
var de_UpdateRoleResponse = (output, context) => {
  const contents = {};
  return contents;
};
var de_UpdateSAMLProviderResponse = (output, context) => {
  const contents = {};
  if (output[_SAMLPA] != null) {
    contents[_SAMLPA] = expectString(output[_SAMLPA]);
  }
  return contents;
};
var de_UploadServerCertificateResponse = (output, context) => {
  const contents = {};
  if (output[_SCM] != null) {
    contents[_SCM] = de_ServerCertificateMetadata(output[_SCM], context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_UploadSigningCertificateResponse = (output, context) => {
  const contents = {};
  if (output[_Cert] != null) {
    contents[_Cert] = de_SigningCertificate(output[_Cert], context);
  }
  return contents;
};
var de_UploadSSHPublicKeyResponse = (output, context) => {
  const contents = {};
  if (output[_SSHPK] != null) {
    contents[_SSHPK] = de_SSHPublicKey(output[_SSHPK], context);
  }
  return contents;
};
var de_User = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_UI] != null) {
    contents[_UI] = expectString(output[_UI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_PLU] != null) {
    contents[_PLU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_PLU]));
  }
  if (output[_PB] != null) {
    contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_UserDetail = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = expectString(output[_P]);
  }
  if (output[_UN] != null) {
    contents[_UN] = expectString(output[_UN]);
  }
  if (output[_UI] != null) {
    contents[_UI] = expectString(output[_UI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output.UserPolicyList === "") {
    contents[_UPL] = [];
  } else if (output[_UPL] != null && output[_UPL][_me] != null) {
    contents[_UPL] = de_policyDetailListType(getArrayIfSingleItem(output[_UPL][_me]), context);
  }
  if (output.GroupList === "") {
    contents[_GL] = [];
  } else if (output[_GL] != null && output[_GL][_me] != null) {
    contents[_GL] = de_groupNameListType(getArrayIfSingleItem(output[_GL][_me]), context);
  }
  if (output.AttachedManagedPolicies === "") {
    contents[_AMP] = [];
  } else if (output[_AMP] != null && output[_AMP][_me] != null) {
    contents[_AMP] = de_attachedPoliciesListType(getArrayIfSingleItem(output[_AMP][_me]), context);
  }
  if (output[_PB] != null) {
    contents[_PB] = de_AttachedPermissionsBoundary(output[_PB], context);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_userDetailListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UserDetail(entry, context);
  });
};
var de_userListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_User(entry, context);
  });
};
var de_VirtualMFADevice = (output, context) => {
  const contents = {};
  if (output[_SNe] != null) {
    contents[_SNe] = expectString(output[_SNe]);
  }
  if (output[_BSS] != null) {
    contents[_BSS] = context.base64Decoder(output[_BSS]);
  }
  if (output[_QRCPNG] != null) {
    contents[_QRCPNG] = context.base64Decoder(output[_QRCPNG]);
  }
  if (output[_Us] != null) {
    contents[_Us] = de_User(output[_Us], context);
  }
  if (output[_EDn] != null) {
    contents[_EDn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_EDn]));
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_me] != null) {
    contents[_T] = de_tagListType(getArrayIfSingleItem(output[_T][_me]), context);
  }
  return contents;
};
var de_virtualMFADeviceListType = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VirtualMFADevice(entry, context);
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var throwDefaultError = withBaseException(IAMServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2010-05-08";
var _A = "Action";
var _AA = "AccountAlias";
var _AAc = "AccountAliases";
var _ABO = "AllowedByOrganizations";
var _ABPB = "AllowedByPermissionsBoundary";
var _AC = "AuthenticationCode1";
var _ACIDTOIDCP = "AddClientIDToOpenIDConnectProvider";
var _ACt = "AttachmentCount";
var _ACu = "AuthenticationCode2";
var _AD = "AccessDetails";
var _AGP = "AttachGroupPolicy";
var _AK = "AccessKey";
var _AKI = "AccessKeyId";
var _AKLU = "AccessKeyLastUsed";
var _AKM = "AccessKeyMetadata";
var _AMP = "AttachedManagedPolicies";
var _AN = "ActionNames";
var _ANc = "ActionName";
var _AP = "AttachedPolicies";
var _ARP = "AttachRolePolicy";
var _ARPD = "AssumeRolePolicyDocument";
var _ARTIP = "AddRoleToInstanceProfile";
var _AS = "AssignmentStatus";
var _AUP = "AttachUserPolicy";
var _AUTCP = "AllowUsersToChangePassword";
var _AUTG = "AddUserToGroup";
var _AWSSN = "AWSServiceName";
var _Ar = "Arn";
var _BSS = "Base32StringSeed";
var _C = "Code";
var _CA = "CallerArn";
var _CAA = "CreateAccountAlias";
var _CAK = "CreateAccessKey";
var _CB = "CertificateBody";
var _CC = "CertificateChain";
var _CD = "CreateDate";
var _CE = "ContextEntries";
var _CG = "CreateGroup";
var _CI = "CertificateId";
var _CID = "ClientID";
var _CIDL = "ClientIDList";
var _CIP = "CreateInstanceProfile";
var _CKN = "ContextKeyName";
var _CKNo = "ContextKeyNames";
var _CKT = "ContextKeyType";
var _CKV = "ContextKeyValues";
var _CLP = "CreateLoginProfile";
var _COIDCP = "CreateOpenIDConnectProvider";
var _CP = "ChangePassword";
var _CPV = "CreatePolicyVersion";
var _CPr = "CreatePolicy";
var _CR = "CreateRole";
var _CS = "CustomSuffix";
var _CSAMLP = "CreateSAMLProvider";
var _CSLR = "CreateServiceLinkedRole";
var _CSSC = "CreateServiceSpecificCredential";
var _CU = "CreateUser";
var _CVMFAD = "CreateVirtualMFADevice";
var _Ce = "Certifications";
var _Cer = "Certificates";
var _Cert = "Certificate";
var _Co = "Content";
var _Col = "Column";
var _D = "Description";
var _DAA = "DeleteAccountAlias";
var _DAK = "DeleteAccessKey";
var _DAPP = "DeleteAccountPasswordPolicy";
var _DG = "DeleteGroup";
var _DGP = "DeleteGroupPolicy";
var _DGPe = "DetachGroupPolicy";
var _DIP = "DeleteInstanceProfile";
var _DLP = "DeleteLoginProfile";
var _DMFAD = "DeactivateMFADevice";
var _DOIDCP = "DeleteOpenIDConnectProvider";
var _DORCM = "DisableOrganizationsRootCredentialsManagement";
var _DORS = "DisableOrganizationsRootSessions";
var _DP = "DeletePolicy";
var _DPV = "DeletePolicyVersion";
var _DR = "DeleteRole";
var _DRP = "DeleteRolePolicy";
var _DRPB = "DeleteRolePermissionsBoundary";
var _DRPe = "DetachRolePolicy";
var _DSAMLP = "DeleteSAMLProvider";
var _DSC = "DeleteServerCertificate";
var _DSCe = "DeleteSigningCertificate";
var _DSLR = "DeleteServiceLinkedRole";
var _DSSC = "DeleteServiceSpecificCredential";
var _DSSHPK = "DeleteSSHPublicKey";
var _DTI = "DeletionTaskId";
var _DU = "DeleteUser";
var _DUP = "DeleteUserPolicy";
var _DUPB = "DeleteUserPermissionsBoundary";
var _DUPe = "DetachUserPolicy";
var _DVI = "DefaultVersionId";
var _DVMFAD = "DeleteVirtualMFADevice";
var _Do = "Document";
var _E = "Encoding";
var _EAN = "EvalActionName";
var _ED = "EvalDecision";
var _EDD = "EvalDecisionDetails";
var _EDL = "EntityDetailsList";
var _EDn = "EnableDate";
var _EDr = "ErrorDetails";
var _EF = "EntityFilter";
var _EFn = "EnabledFeatures";
var _EI = "EntityInfo";
var _EMFAD = "EnableMFADevice";
var _EN = "EntityName";
var _EORCM = "EnableOrganizationsRootCredentialsManagement";
var _EORS = "EnableOrganizationsRootSessions";
var _EP = "EntityPath";
var _EPn = "EndPosition";
var _EPx = "ExpirePasswords";
var _ER = "EvaluationResults";
var _ERD = "EvalResourceDecision";
var _ERN = "EvalResourceName";
var _ET = "EntityType";
var _Er = "Error";
var _Ex = "Expiration";
var _F = "Filter";
var _Fi = "Fingerprint";
var _G = "Granularity";
var _GAAD = "GetAccountAuthorizationDetails";
var _GAKLU = "GetAccessKeyLastUsed";
var _GAPP = "GetAccountPasswordPolicy";
var _GAS = "GetAccountSummary";
var _GCKFCP = "GetContextKeysForCustomPolicy";
var _GCKFPP = "GetContextKeysForPrincipalPolicy";
var _GCR = "GenerateCredentialReport";
var _GCRe = "GetCredentialReport";
var _GDL = "GroupDetailList";
var _GETV = "GlobalEndpointTokenVersion";
var _GG = "GetGroup";
var _GGP = "GetGroupPolicy";
var _GI = "GroupId";
var _GIP = "GetInstanceProfile";
var _GL = "GroupList";
var _GLP = "GetLoginProfile";
var _GMFAD = "GetMFADevice";
var _GN = "GroupName";
var _GOAR = "GenerateOrganizationsAccessReport";
var _GOARe = "GetOrganizationsAccessReport";
var _GOIDCP = "GetOpenIDConnectProvider";
var _GP = "GetPolicy";
var _GPL = "GroupPolicyList";
var _GPV = "GetPolicyVersion";
var _GR = "GetRole";
var _GRP = "GetRolePolicy";
var _GSAMLP = "GetSAMLProvider";
var _GSC = "GetServerCertificate";
var _GSLAD = "GenerateServiceLastAccessedDetails";
var _GSLADWE = "GetServiceLastAccessedDetailsWithEntities";
var _GSLADe = "GetServiceLastAccessedDetails";
var _GSLRDS = "GetServiceLinkedRoleDeletionStatus";
var _GSSHPK = "GetSSHPublicKey";
var _GT = "GeneratedTime";
var _GU = "GetUser";
var _GUP = "GetUserPolicy";
var _Gr = "Group";
var _Gro = "Groups";
var _HE = "HardExpiry";
var _I = "Id";
var _IA = "IsAttachable";
var _IDV = "IsDefaultVersion";
var _IP = "InstanceProfile";
var _IPI = "InstanceProfileId";
var _IPL = "InstanceProfileList";
var _IPN = "InstanceProfileName";
var _IPn = "InstanceProfiles";
var _IT = "IsTruncated";
var _JCD = "JobCreationDate";
var _JCDo = "JobCompletionDate";
var _JI = "JobId";
var _JS = "JobStatus";
var _JT = "JobType";
var _K = "Key";
var _L = "Line";
var _LA = "LastAuthenticated";
var _LAA = "ListAccountAliases";
var _LAE = "LastAuthenticatedEntity";
var _LAEa = "LastAccessedEntity";
var _LAGP = "ListAttachedGroupPolicies";
var _LAK = "ListAccessKeys";
var _LAR = "LastAuthenticatedRegion";
var _LARP = "ListAttachedRolePolicies";
var _LARa = "LastAccessedRegion";
var _LAT = "LastAuthenticatedTime";
var _LATa = "LastAccessedTime";
var _LAUP = "ListAttachedUserPolicies";
var _LEFP = "ListEntitiesForPolicy";
var _LG = "ListGroups";
var _LGFU = "ListGroupsForUser";
var _LGP = "ListGroupPolicies";
var _LIP = "ListInstanceProfiles";
var _LIPFR = "ListInstanceProfilesForRole";
var _LIPT = "ListInstanceProfileTags";
var _LMFAD = "ListMFADevices";
var _LMFADT = "ListMFADeviceTags";
var _LOF = "ListOrganizationsFeatures";
var _LOIDCP = "ListOpenIDConnectProviders";
var _LOIDCPT = "ListOpenIDConnectProviderTags";
var _LP = "ListPolicies";
var _LPGSA = "ListPoliciesGrantingServiceAccess";
var _LPT = "ListPolicyTags";
var _LPV = "ListPolicyVersions";
var _LPo = "LoginProfile";
var _LR = "ListRoles";
var _LRP = "ListRolePolicies";
var _LRT = "ListRoleTags";
var _LSAMLP = "ListSAMLProviders";
var _LSAMLPT = "ListSAMLProviderTags";
var _LSC = "ListServerCertificates";
var _LSCT = "ListServerCertificateTags";
var _LSCi = "ListSigningCertificates";
var _LSSC = "ListServiceSpecificCredentials";
var _LSSHPK = "ListSSHPublicKeys";
var _LU = "ListUsers";
var _LUD = "LastUsedDate";
var _LUP = "ListUserPolicies";
var _LUT = "ListUserTags";
var _LVMFAD = "ListVirtualMFADevices";
var _M = "Marker";
var _MCV = "MissingContextValues";
var _MFAD = "MFADevices";
var _MI = "MaxItems";
var _MPA = "MaxPasswordAge";
var _MPL = "MinimumPasswordLength";
var _MS = "MatchedStatements";
var _MSD = "MaxSessionDuration";
var _Me = "Message";
var _N = "Name";
var _NGN = "NewGroupName";
var _NOSA = "NumberOfServicesAccessible";
var _NOSNA = "NumberOfServicesNotAccessed";
var _NP = "NewPassword";
var _NPe = "NewPath";
var _NSCN = "NewServerCertificateName";
var _NUN = "NewUserName";
var _OA = "OnlyAttached";
var _ODD = "OrganizationsDecisionDetail";
var _OI = "OrganizationId";
var _OIDCPA = "OpenIDConnectProviderArn";
var _OIDCPL = "OpenIDConnectProviderList";
var _OP = "OldPassword";
var _OPI = "OrganizationsPolicyId";
var _P = "Path";
var _PA = "PolicyArn";
var _PB = "PermissionsBoundary";
var _PBA = "PermissionsBoundaryArn";
var _PBDD = "PermissionsBoundaryDecisionDetail";
var _PBPIL = "PermissionsBoundaryPolicyInputList";
var _PBT = "PermissionsBoundaryType";
var _PBUC = "PermissionsBoundaryUsageCount";
var _PD = "PolicyDocument";
var _PG = "PolicyGroups";
var _PGP = "PutGroupPolicy";
var _PGSA = "PoliciesGrantingServiceAccess";
var _PI = "PolicyId";
var _PIL = "PolicyInputList";
var _PK = "PrivateKey";
var _PLU = "PasswordLastUsed";
var _PN = "PolicyName";
var _PNo = "PolicyNames";
var _PP = "PathPrefix";
var _PPa = "PasswordPolicy";
var _PR = "PolicyRoles";
var _PRP = "PutRolePolicy";
var _PRPB = "PutRolePermissionsBoundary";
var _PRPa = "PasswordReusePrevention";
var _PRR = "PasswordResetRequired";
var _PSA = "PolicySourceArn";
var _PT = "PolicyType";
var _PU = "PolicyUsers";
var _PUF = "PolicyUsageFilter";
var _PUP = "PutUserPolicy";
var _PUPB = "PutUserPermissionsBoundary";
var _PV = "PolicyVersion";
var _PVL = "PolicyVersionList";
var _Pa = "Password";
var _Po = "Policy";
var _Pol = "Policies";
var _QRCPNG = "QRCodePNG";
var _R = "Region";
var _RA = "ResourceArns";
var _RCIDFOIDCP = "RemoveClientIDFromOpenIDConnectProvider";
var _RDL = "RoleDetailList";
var _RF = "ReportFormat";
var _RHO = "ResourceHandlingOption";
var _RI = "RoleId";
var _RLC = "RequireLowercaseCharacters";
var _RLU = "RoleLastUsed";
var _RMFAD = "ResyncMFADevice";
var _RN = "RoleName";
var _RNe = "RequireNumbers";
var _RO = "ResourceOwner";
var _RP = "ResourcePolicy";
var _RPL = "RolePolicyList";
var _RRFIP = "RemoveRoleFromInstanceProfile";
var _RS = "RequireSymbols";
var _RSR = "ResourceSpecificResults";
var _RSSC = "ResetServiceSpecificCredential";
var _RUC = "RequireUppercaseCharacters";
var _RUFG = "RemoveUserFromGroup";
var _RUL = "RoleUsageList";
var _Re = "Reason";
var _Res = "Resources";
var _Ro = "Role";
var _Rol = "Roles";
var _S = "Scope";
var _SAD = "SetAsDefault";
var _SAK = "SecretAccessKey";
var _SAMLMD = "SAMLMetadataDocument";
var _SAMLPA = "SAMLProviderArn";
var _SAMLPL = "SAMLProviderList";
var _SC = "ServerCertificate";
var _SCI = "ServerCertificateId";
var _SCM = "ServerCertificateMetadata";
var _SCML = "ServerCertificateMetadataList";
var _SCN = "ServerCertificateName";
var _SCP = "SimulateCustomPolicy";
var _SDPV = "SetDefaultPolicyVersion";
var _SK = "SortKey";
var _SLA = "ServicesLastAccessed";
var _SM = "SummaryMap";
var _SN = "ServiceName";
var _SNe = "SerialNumber";
var _SNer = "ServiceNamespace";
var _SNerv = "ServiceNamespaces";
var _SP = "ServicePassword";
var _SPI = "SourcePolicyId";
var _SPP = "SimulatePrincipalPolicy";
var _SPT = "SourcePolicyType";
var _SPt = "StartPosition";
var _SSC = "ServiceSpecificCredential";
var _SSCI = "ServiceSpecificCredentialId";
var _SSCe = "ServiceSpecificCredentials";
var _SSHPK = "SSHPublicKey";
var _SSHPKB = "SSHPublicKeyBody";
var _SSHPKI = "SSHPublicKeyId";
var _SSHPKu = "SSHPublicKeys";
var _SSTSP = "SetSecurityTokenServicePreferences";
var _SUN = "ServiceUserName";
var _St = "Status";
var _Sta = "State";
var _T = "Tags";
var _TAE = "TotalAuthenticatedEntities";
var _TALA = "TrackedActionsLastAccessed";
var _TIP = "TagInstanceProfile";
var _TK = "TagKeys";
var _TL = "ThumbprintList";
var _TMFAD = "TagMFADevice";
var _TOIDCP = "TagOpenIDConnectProvider";
var _TP = "TagPolicy";
var _TR = "TagRole";
var _TSAMLP = "TagSAMLProvider";
var _TSC = "TagServerCertificate";
var _TU = "TagUser";
var _Ty = "Type";
var _U = "Url";
var _UAK = "UpdateAccessKey";
var _UAPP = "UpdateAccountPasswordPolicy";
var _UARP = "UpdateAssumeRolePolicy";
var _UD = "UpdateDate";
var _UDL = "UserDetailList";
var _UDp = "UploadDate";
var _UG = "UpdateGroup";
var _UI = "UserId";
var _UIP = "UntagInstanceProfile";
var _ULP = "UpdateLoginProfile";
var _UMFAD = "UntagMFADevice";
var _UN = "UserName";
var _UOIDCP = "UntagOpenIDConnectProvider";
var _UOIDCPT = "UpdateOpenIDConnectProviderThumbprint";
var _UP = "UntagPolicy";
var _UPL = "UserPolicyList";
var _UR = "UntagRole";
var _URD = "UpdateRoleDescription";
var _URp = "UpdateRole";
var _USAMLP = "UntagSAMLProvider";
var _USAMLPp = "UpdateSAMLProvider";
var _USC = "UntagServerCertificate";
var _USCp = "UpdateServerCertificate";
var _USCpd = "UpdateSigningCertificate";
var _USCpl = "UploadServerCertificate";
var _USCplo = "UploadSigningCertificate";
var _USSC = "UpdateServiceSpecificCredential";
var _USSHPK = "UpdateSSHPublicKey";
var _USSHPKp = "UploadSSHPublicKey";
var _UU = "UntagUser";
var _UUp = "UpdateUser";
var _Us = "User";
var _Use = "Users";
var _V = "Version";
var _VI = "VersionId";
var _VMFAD = "VirtualMFADevice";
var _VMFADN = "VirtualMFADeviceName";
var _VMFADi = "VirtualMFADevices";
var _VU = "ValidUntil";
var _Va = "Value";
var _Ve = "Versions";
var _e = "entry";
var _m = "message";
var _me = "member";
var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
var loadQueryErrorCode = (output, data) => {
  var _a;
  if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AddClientIDToOpenIDConnectProviderCommand.js
var AddClientIDToOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AddClientIDToOpenIDConnectProvider", {}).n("IAMClient", "AddClientIDToOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_AddClientIDToOpenIDConnectProviderCommand).de(de_AddClientIDToOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AddRoleToInstanceProfileCommand.js
var AddRoleToInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AddRoleToInstanceProfile", {}).n("IAMClient", "AddRoleToInstanceProfileCommand").f(void 0, void 0).ser(se_AddRoleToInstanceProfileCommand).de(de_AddRoleToInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AddUserToGroupCommand.js
var AddUserToGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AddUserToGroup", {}).n("IAMClient", "AddUserToGroupCommand").f(void 0, void 0).ser(se_AddUserToGroupCommand).de(de_AddUserToGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AttachGroupPolicyCommand.js
var AttachGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AttachGroupPolicy", {}).n("IAMClient", "AttachGroupPolicyCommand").f(void 0, void 0).ser(se_AttachGroupPolicyCommand).de(de_AttachGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AttachRolePolicyCommand.js
var AttachRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AttachRolePolicy", {}).n("IAMClient", "AttachRolePolicyCommand").f(void 0, void 0).ser(se_AttachRolePolicyCommand).de(de_AttachRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/AttachUserPolicyCommand.js
var AttachUserPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "AttachUserPolicy", {}).n("IAMClient", "AttachUserPolicyCommand").f(void 0, void 0).ser(se_AttachUserPolicyCommand).de(de_AttachUserPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ChangePasswordCommand.js
var ChangePasswordCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ChangePassword", {}).n("IAMClient", "ChangePasswordCommand").f(ChangePasswordRequestFilterSensitiveLog, void 0).ser(se_ChangePasswordCommand).de(de_ChangePasswordCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateAccessKeyCommand.js
var CreateAccessKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateAccessKey", {}).n("IAMClient", "CreateAccessKeyCommand").f(void 0, CreateAccessKeyResponseFilterSensitiveLog).ser(se_CreateAccessKeyCommand).de(de_CreateAccessKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateAccountAliasCommand.js
var CreateAccountAliasCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateAccountAlias", {}).n("IAMClient", "CreateAccountAliasCommand").f(void 0, void 0).ser(se_CreateAccountAliasCommand).de(de_CreateAccountAliasCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateGroupCommand.js
var CreateGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateGroup", {}).n("IAMClient", "CreateGroupCommand").f(void 0, void 0).ser(se_CreateGroupCommand).de(de_CreateGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateInstanceProfileCommand.js
var CreateInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateInstanceProfile", {}).n("IAMClient", "CreateInstanceProfileCommand").f(void 0, void 0).ser(se_CreateInstanceProfileCommand).de(de_CreateInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateLoginProfileCommand.js
var CreateLoginProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateLoginProfile", {}).n("IAMClient", "CreateLoginProfileCommand").f(CreateLoginProfileRequestFilterSensitiveLog, void 0).ser(se_CreateLoginProfileCommand).de(de_CreateLoginProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateOpenIDConnectProviderCommand.js
var CreateOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateOpenIDConnectProvider", {}).n("IAMClient", "CreateOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_CreateOpenIDConnectProviderCommand).de(de_CreateOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreatePolicyCommand.js
var CreatePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreatePolicy", {}).n("IAMClient", "CreatePolicyCommand").f(void 0, void 0).ser(se_CreatePolicyCommand).de(de_CreatePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreatePolicyVersionCommand.js
var CreatePolicyVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreatePolicyVersion", {}).n("IAMClient", "CreatePolicyVersionCommand").f(void 0, void 0).ser(se_CreatePolicyVersionCommand).de(de_CreatePolicyVersionCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateRoleCommand.js
var CreateRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateRole", {}).n("IAMClient", "CreateRoleCommand").f(void 0, void 0).ser(se_CreateRoleCommand).de(de_CreateRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateSAMLProviderCommand.js
var CreateSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateSAMLProvider", {}).n("IAMClient", "CreateSAMLProviderCommand").f(void 0, void 0).ser(se_CreateSAMLProviderCommand).de(de_CreateSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateServiceLinkedRoleCommand.js
var CreateServiceLinkedRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateServiceLinkedRole", {}).n("IAMClient", "CreateServiceLinkedRoleCommand").f(void 0, void 0).ser(se_CreateServiceLinkedRoleCommand).de(de_CreateServiceLinkedRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateServiceSpecificCredentialCommand.js
var CreateServiceSpecificCredentialCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateServiceSpecificCredential", {}).n("IAMClient", "CreateServiceSpecificCredentialCommand").f(void 0, CreateServiceSpecificCredentialResponseFilterSensitiveLog).ser(se_CreateServiceSpecificCredentialCommand).de(de_CreateServiceSpecificCredentialCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateUserCommand.js
var CreateUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateUser", {}).n("IAMClient", "CreateUserCommand").f(void 0, void 0).ser(se_CreateUserCommand).de(de_CreateUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/CreateVirtualMFADeviceCommand.js
var CreateVirtualMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "CreateVirtualMFADevice", {}).n("IAMClient", "CreateVirtualMFADeviceCommand").f(void 0, CreateVirtualMFADeviceResponseFilterSensitiveLog).ser(se_CreateVirtualMFADeviceCommand).de(de_CreateVirtualMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeactivateMFADeviceCommand.js
var DeactivateMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeactivateMFADevice", {}).n("IAMClient", "DeactivateMFADeviceCommand").f(void 0, void 0).ser(se_DeactivateMFADeviceCommand).de(de_DeactivateMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteAccessKeyCommand.js
var DeleteAccessKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteAccessKey", {}).n("IAMClient", "DeleteAccessKeyCommand").f(void 0, void 0).ser(se_DeleteAccessKeyCommand).de(de_DeleteAccessKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteAccountAliasCommand.js
var DeleteAccountAliasCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteAccountAlias", {}).n("IAMClient", "DeleteAccountAliasCommand").f(void 0, void 0).ser(se_DeleteAccountAliasCommand).de(de_DeleteAccountAliasCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteAccountPasswordPolicyCommand.js
var DeleteAccountPasswordPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteAccountPasswordPolicy", {}).n("IAMClient", "DeleteAccountPasswordPolicyCommand").f(void 0, void 0).ser(se_DeleteAccountPasswordPolicyCommand).de(de_DeleteAccountPasswordPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteGroupCommand.js
var DeleteGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteGroup", {}).n("IAMClient", "DeleteGroupCommand").f(void 0, void 0).ser(se_DeleteGroupCommand).de(de_DeleteGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteGroupPolicyCommand.js
var DeleteGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteGroupPolicy", {}).n("IAMClient", "DeleteGroupPolicyCommand").f(void 0, void 0).ser(se_DeleteGroupPolicyCommand).de(de_DeleteGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteInstanceProfileCommand.js
var DeleteInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteInstanceProfile", {}).n("IAMClient", "DeleteInstanceProfileCommand").f(void 0, void 0).ser(se_DeleteInstanceProfileCommand).de(de_DeleteInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteLoginProfileCommand.js
var DeleteLoginProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteLoginProfile", {}).n("IAMClient", "DeleteLoginProfileCommand").f(void 0, void 0).ser(se_DeleteLoginProfileCommand).de(de_DeleteLoginProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteOpenIDConnectProviderCommand.js
var DeleteOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteOpenIDConnectProvider", {}).n("IAMClient", "DeleteOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_DeleteOpenIDConnectProviderCommand).de(de_DeleteOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeletePolicyCommand.js
var DeletePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeletePolicy", {}).n("IAMClient", "DeletePolicyCommand").f(void 0, void 0).ser(se_DeletePolicyCommand).de(de_DeletePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeletePolicyVersionCommand.js
var DeletePolicyVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeletePolicyVersion", {}).n("IAMClient", "DeletePolicyVersionCommand").f(void 0, void 0).ser(se_DeletePolicyVersionCommand).de(de_DeletePolicyVersionCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteRoleCommand.js
var DeleteRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteRole", {}).n("IAMClient", "DeleteRoleCommand").f(void 0, void 0).ser(se_DeleteRoleCommand).de(de_DeleteRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteRolePermissionsBoundaryCommand.js
var DeleteRolePermissionsBoundaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteRolePermissionsBoundary", {}).n("IAMClient", "DeleteRolePermissionsBoundaryCommand").f(void 0, void 0).ser(se_DeleteRolePermissionsBoundaryCommand).de(de_DeleteRolePermissionsBoundaryCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteRolePolicyCommand.js
var DeleteRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteRolePolicy", {}).n("IAMClient", "DeleteRolePolicyCommand").f(void 0, void 0).ser(se_DeleteRolePolicyCommand).de(de_DeleteRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteSAMLProviderCommand.js
var DeleteSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteSAMLProvider", {}).n("IAMClient", "DeleteSAMLProviderCommand").f(void 0, void 0).ser(se_DeleteSAMLProviderCommand).de(de_DeleteSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteServerCertificateCommand.js
var DeleteServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteServerCertificate", {}).n("IAMClient", "DeleteServerCertificateCommand").f(void 0, void 0).ser(se_DeleteServerCertificateCommand).de(de_DeleteServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteServiceLinkedRoleCommand.js
var DeleteServiceLinkedRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteServiceLinkedRole", {}).n("IAMClient", "DeleteServiceLinkedRoleCommand").f(void 0, void 0).ser(se_DeleteServiceLinkedRoleCommand).de(de_DeleteServiceLinkedRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteServiceSpecificCredentialCommand.js
var DeleteServiceSpecificCredentialCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteServiceSpecificCredential", {}).n("IAMClient", "DeleteServiceSpecificCredentialCommand").f(void 0, void 0).ser(se_DeleteServiceSpecificCredentialCommand).de(de_DeleteServiceSpecificCredentialCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteSigningCertificateCommand.js
var DeleteSigningCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteSigningCertificate", {}).n("IAMClient", "DeleteSigningCertificateCommand").f(void 0, void 0).ser(se_DeleteSigningCertificateCommand).de(de_DeleteSigningCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteSSHPublicKeyCommand.js
var DeleteSSHPublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteSSHPublicKey", {}).n("IAMClient", "DeleteSSHPublicKeyCommand").f(void 0, void 0).ser(se_DeleteSSHPublicKeyCommand).de(de_DeleteSSHPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteUserCommand.js
var DeleteUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteUser", {}).n("IAMClient", "DeleteUserCommand").f(void 0, void 0).ser(se_DeleteUserCommand).de(de_DeleteUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteUserPermissionsBoundaryCommand.js
var DeleteUserPermissionsBoundaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteUserPermissionsBoundary", {}).n("IAMClient", "DeleteUserPermissionsBoundaryCommand").f(void 0, void 0).ser(se_DeleteUserPermissionsBoundaryCommand).de(de_DeleteUserPermissionsBoundaryCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteUserPolicyCommand.js
var DeleteUserPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteUserPolicy", {}).n("IAMClient", "DeleteUserPolicyCommand").f(void 0, void 0).ser(se_DeleteUserPolicyCommand).de(de_DeleteUserPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DeleteVirtualMFADeviceCommand.js
var DeleteVirtualMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DeleteVirtualMFADevice", {}).n("IAMClient", "DeleteVirtualMFADeviceCommand").f(void 0, void 0).ser(se_DeleteVirtualMFADeviceCommand).de(de_DeleteVirtualMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DetachGroupPolicyCommand.js
var DetachGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DetachGroupPolicy", {}).n("IAMClient", "DetachGroupPolicyCommand").f(void 0, void 0).ser(se_DetachGroupPolicyCommand).de(de_DetachGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DetachRolePolicyCommand.js
var DetachRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DetachRolePolicy", {}).n("IAMClient", "DetachRolePolicyCommand").f(void 0, void 0).ser(se_DetachRolePolicyCommand).de(de_DetachRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DetachUserPolicyCommand.js
var DetachUserPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DetachUserPolicy", {}).n("IAMClient", "DetachUserPolicyCommand").f(void 0, void 0).ser(se_DetachUserPolicyCommand).de(de_DetachUserPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DisableOrganizationsRootCredentialsManagementCommand.js
var DisableOrganizationsRootCredentialsManagementCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DisableOrganizationsRootCredentialsManagement", {}).n("IAMClient", "DisableOrganizationsRootCredentialsManagementCommand").f(void 0, void 0).ser(se_DisableOrganizationsRootCredentialsManagementCommand).de(de_DisableOrganizationsRootCredentialsManagementCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/DisableOrganizationsRootSessionsCommand.js
var DisableOrganizationsRootSessionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "DisableOrganizationsRootSessions", {}).n("IAMClient", "DisableOrganizationsRootSessionsCommand").f(void 0, void 0).ser(se_DisableOrganizationsRootSessionsCommand).de(de_DisableOrganizationsRootSessionsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/EnableMFADeviceCommand.js
var EnableMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "EnableMFADevice", {}).n("IAMClient", "EnableMFADeviceCommand").f(void 0, void 0).ser(se_EnableMFADeviceCommand).de(de_EnableMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/EnableOrganizationsRootCredentialsManagementCommand.js
var EnableOrganizationsRootCredentialsManagementCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "EnableOrganizationsRootCredentialsManagement", {}).n("IAMClient", "EnableOrganizationsRootCredentialsManagementCommand").f(void 0, void 0).ser(se_EnableOrganizationsRootCredentialsManagementCommand).de(de_EnableOrganizationsRootCredentialsManagementCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/EnableOrganizationsRootSessionsCommand.js
var EnableOrganizationsRootSessionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "EnableOrganizationsRootSessions", {}).n("IAMClient", "EnableOrganizationsRootSessionsCommand").f(void 0, void 0).ser(se_EnableOrganizationsRootSessionsCommand).de(de_EnableOrganizationsRootSessionsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GenerateCredentialReportCommand.js
var GenerateCredentialReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GenerateCredentialReport", {}).n("IAMClient", "GenerateCredentialReportCommand").f(void 0, void 0).ser(se_GenerateCredentialReportCommand).de(de_GenerateCredentialReportCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GenerateOrganizationsAccessReportCommand.js
var GenerateOrganizationsAccessReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GenerateOrganizationsAccessReport", {}).n("IAMClient", "GenerateOrganizationsAccessReportCommand").f(void 0, void 0).ser(se_GenerateOrganizationsAccessReportCommand).de(de_GenerateOrganizationsAccessReportCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GenerateServiceLastAccessedDetailsCommand.js
var GenerateServiceLastAccessedDetailsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GenerateServiceLastAccessedDetails", {}).n("IAMClient", "GenerateServiceLastAccessedDetailsCommand").f(void 0, void 0).ser(se_GenerateServiceLastAccessedDetailsCommand).de(de_GenerateServiceLastAccessedDetailsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetAccessKeyLastUsedCommand.js
var GetAccessKeyLastUsedCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetAccessKeyLastUsed", {}).n("IAMClient", "GetAccessKeyLastUsedCommand").f(void 0, void 0).ser(se_GetAccessKeyLastUsedCommand).de(de_GetAccessKeyLastUsedCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetAccountAuthorizationDetailsCommand.js
var GetAccountAuthorizationDetailsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetAccountAuthorizationDetails", {}).n("IAMClient", "GetAccountAuthorizationDetailsCommand").f(void 0, void 0).ser(se_GetAccountAuthorizationDetailsCommand).de(de_GetAccountAuthorizationDetailsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetAccountPasswordPolicyCommand.js
var GetAccountPasswordPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetAccountPasswordPolicy", {}).n("IAMClient", "GetAccountPasswordPolicyCommand").f(void 0, void 0).ser(se_GetAccountPasswordPolicyCommand).de(de_GetAccountPasswordPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetAccountSummaryCommand.js
var GetAccountSummaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetAccountSummary", {}).n("IAMClient", "GetAccountSummaryCommand").f(void 0, void 0).ser(se_GetAccountSummaryCommand).de(de_GetAccountSummaryCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetContextKeysForCustomPolicyCommand.js
var GetContextKeysForCustomPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetContextKeysForCustomPolicy", {}).n("IAMClient", "GetContextKeysForCustomPolicyCommand").f(void 0, void 0).ser(se_GetContextKeysForCustomPolicyCommand).de(de_GetContextKeysForCustomPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetContextKeysForPrincipalPolicyCommand.js
var GetContextKeysForPrincipalPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetContextKeysForPrincipalPolicy", {}).n("IAMClient", "GetContextKeysForPrincipalPolicyCommand").f(void 0, void 0).ser(se_GetContextKeysForPrincipalPolicyCommand).de(de_GetContextKeysForPrincipalPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetCredentialReportCommand.js
var GetCredentialReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetCredentialReport", {}).n("IAMClient", "GetCredentialReportCommand").f(void 0, void 0).ser(se_GetCredentialReportCommand).de(de_GetCredentialReportCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetGroupCommand.js
var GetGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetGroup", {}).n("IAMClient", "GetGroupCommand").f(void 0, void 0).ser(se_GetGroupCommand).de(de_GetGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetGroupPolicyCommand.js
var GetGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetGroupPolicy", {}).n("IAMClient", "GetGroupPolicyCommand").f(void 0, void 0).ser(se_GetGroupPolicyCommand).de(de_GetGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetInstanceProfileCommand.js
var GetInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetInstanceProfile", {}).n("IAMClient", "GetInstanceProfileCommand").f(void 0, void 0).ser(se_GetInstanceProfileCommand).de(de_GetInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetLoginProfileCommand.js
var GetLoginProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetLoginProfile", {}).n("IAMClient", "GetLoginProfileCommand").f(void 0, void 0).ser(se_GetLoginProfileCommand).de(de_GetLoginProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetMFADeviceCommand.js
var GetMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetMFADevice", {}).n("IAMClient", "GetMFADeviceCommand").f(void 0, void 0).ser(se_GetMFADeviceCommand).de(de_GetMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetOpenIDConnectProviderCommand.js
var GetOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetOpenIDConnectProvider", {}).n("IAMClient", "GetOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_GetOpenIDConnectProviderCommand).de(de_GetOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetOrganizationsAccessReportCommand.js
var GetOrganizationsAccessReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetOrganizationsAccessReport", {}).n("IAMClient", "GetOrganizationsAccessReportCommand").f(void 0, void 0).ser(se_GetOrganizationsAccessReportCommand).de(de_GetOrganizationsAccessReportCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetPolicyCommand.js
var GetPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetPolicy", {}).n("IAMClient", "GetPolicyCommand").f(void 0, void 0).ser(se_GetPolicyCommand).de(de_GetPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetPolicyVersionCommand.js
var GetPolicyVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetPolicyVersion", {}).n("IAMClient", "GetPolicyVersionCommand").f(void 0, void 0).ser(se_GetPolicyVersionCommand).de(de_GetPolicyVersionCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetRoleCommand.js
var GetRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetRole", {}).n("IAMClient", "GetRoleCommand").f(void 0, void 0).ser(se_GetRoleCommand).de(de_GetRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetRolePolicyCommand.js
var GetRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetRolePolicy", {}).n("IAMClient", "GetRolePolicyCommand").f(void 0, void 0).ser(se_GetRolePolicyCommand).de(de_GetRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetSAMLProviderCommand.js
var GetSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetSAMLProvider", {}).n("IAMClient", "GetSAMLProviderCommand").f(void 0, void 0).ser(se_GetSAMLProviderCommand).de(de_GetSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetServerCertificateCommand.js
var GetServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetServerCertificate", {}).n("IAMClient", "GetServerCertificateCommand").f(void 0, void 0).ser(se_GetServerCertificateCommand).de(de_GetServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetServiceLastAccessedDetailsCommand.js
var GetServiceLastAccessedDetailsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetails", {}).n("IAMClient", "GetServiceLastAccessedDetailsCommand").f(void 0, void 0).ser(se_GetServiceLastAccessedDetailsCommand).de(de_GetServiceLastAccessedDetailsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetServiceLastAccessedDetailsWithEntitiesCommand.js
var GetServiceLastAccessedDetailsWithEntitiesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetServiceLastAccessedDetailsWithEntities", {}).n("IAMClient", "GetServiceLastAccessedDetailsWithEntitiesCommand").f(void 0, void 0).ser(se_GetServiceLastAccessedDetailsWithEntitiesCommand).de(de_GetServiceLastAccessedDetailsWithEntitiesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetServiceLinkedRoleDeletionStatusCommand.js
var GetServiceLinkedRoleDeletionStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetServiceLinkedRoleDeletionStatus", {}).n("IAMClient", "GetServiceLinkedRoleDeletionStatusCommand").f(void 0, void 0).ser(se_GetServiceLinkedRoleDeletionStatusCommand).de(de_GetServiceLinkedRoleDeletionStatusCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetSSHPublicKeyCommand.js
var GetSSHPublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetSSHPublicKey", {}).n("IAMClient", "GetSSHPublicKeyCommand").f(void 0, void 0).ser(se_GetSSHPublicKeyCommand).de(de_GetSSHPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetUserCommand.js
var GetUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetUser", {}).n("IAMClient", "GetUserCommand").f(void 0, void 0).ser(se_GetUserCommand).de(de_GetUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/GetUserPolicyCommand.js
var GetUserPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "GetUserPolicy", {}).n("IAMClient", "GetUserPolicyCommand").f(void 0, void 0).ser(se_GetUserPolicyCommand).de(de_GetUserPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListAccessKeysCommand.js
var ListAccessKeysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListAccessKeys", {}).n("IAMClient", "ListAccessKeysCommand").f(void 0, void 0).ser(se_ListAccessKeysCommand).de(de_ListAccessKeysCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListAccountAliasesCommand.js
var ListAccountAliasesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListAccountAliases", {}).n("IAMClient", "ListAccountAliasesCommand").f(void 0, void 0).ser(se_ListAccountAliasesCommand).de(de_ListAccountAliasesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListAttachedGroupPoliciesCommand.js
var ListAttachedGroupPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListAttachedGroupPolicies", {}).n("IAMClient", "ListAttachedGroupPoliciesCommand").f(void 0, void 0).ser(se_ListAttachedGroupPoliciesCommand).de(de_ListAttachedGroupPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListAttachedRolePoliciesCommand.js
var ListAttachedRolePoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListAttachedRolePolicies", {}).n("IAMClient", "ListAttachedRolePoliciesCommand").f(void 0, void 0).ser(se_ListAttachedRolePoliciesCommand).de(de_ListAttachedRolePoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListAttachedUserPoliciesCommand.js
var ListAttachedUserPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListAttachedUserPolicies", {}).n("IAMClient", "ListAttachedUserPoliciesCommand").f(void 0, void 0).ser(se_ListAttachedUserPoliciesCommand).de(de_ListAttachedUserPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListEntitiesForPolicyCommand.js
var ListEntitiesForPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListEntitiesForPolicy", {}).n("IAMClient", "ListEntitiesForPolicyCommand").f(void 0, void 0).ser(se_ListEntitiesForPolicyCommand).de(de_ListEntitiesForPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListGroupPoliciesCommand.js
var ListGroupPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListGroupPolicies", {}).n("IAMClient", "ListGroupPoliciesCommand").f(void 0, void 0).ser(se_ListGroupPoliciesCommand).de(de_ListGroupPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListGroupsCommand.js
var ListGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListGroups", {}).n("IAMClient", "ListGroupsCommand").f(void 0, void 0).ser(se_ListGroupsCommand).de(de_ListGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListGroupsForUserCommand.js
var ListGroupsForUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListGroupsForUser", {}).n("IAMClient", "ListGroupsForUserCommand").f(void 0, void 0).ser(se_ListGroupsForUserCommand).de(de_ListGroupsForUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListInstanceProfilesCommand.js
var ListInstanceProfilesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListInstanceProfiles", {}).n("IAMClient", "ListInstanceProfilesCommand").f(void 0, void 0).ser(se_ListInstanceProfilesCommand).de(de_ListInstanceProfilesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListInstanceProfilesForRoleCommand.js
var ListInstanceProfilesForRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListInstanceProfilesForRole", {}).n("IAMClient", "ListInstanceProfilesForRoleCommand").f(void 0, void 0).ser(se_ListInstanceProfilesForRoleCommand).de(de_ListInstanceProfilesForRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListInstanceProfileTagsCommand.js
var ListInstanceProfileTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListInstanceProfileTags", {}).n("IAMClient", "ListInstanceProfileTagsCommand").f(void 0, void 0).ser(se_ListInstanceProfileTagsCommand).de(de_ListInstanceProfileTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListMFADevicesCommand.js
var ListMFADevicesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListMFADevices", {}).n("IAMClient", "ListMFADevicesCommand").f(void 0, void 0).ser(se_ListMFADevicesCommand).de(de_ListMFADevicesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListMFADeviceTagsCommand.js
var ListMFADeviceTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListMFADeviceTags", {}).n("IAMClient", "ListMFADeviceTagsCommand").f(void 0, void 0).ser(se_ListMFADeviceTagsCommand).de(de_ListMFADeviceTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListOpenIDConnectProvidersCommand.js
var ListOpenIDConnectProvidersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviders", {}).n("IAMClient", "ListOpenIDConnectProvidersCommand").f(void 0, void 0).ser(se_ListOpenIDConnectProvidersCommand).de(de_ListOpenIDConnectProvidersCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListOpenIDConnectProviderTagsCommand.js
var ListOpenIDConnectProviderTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListOpenIDConnectProviderTags", {}).n("IAMClient", "ListOpenIDConnectProviderTagsCommand").f(void 0, void 0).ser(se_ListOpenIDConnectProviderTagsCommand).de(de_ListOpenIDConnectProviderTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListOrganizationsFeaturesCommand.js
var ListOrganizationsFeaturesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListOrganizationsFeatures", {}).n("IAMClient", "ListOrganizationsFeaturesCommand").f(void 0, void 0).ser(se_ListOrganizationsFeaturesCommand).de(de_ListOrganizationsFeaturesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListPoliciesCommand.js
var ListPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListPolicies", {}).n("IAMClient", "ListPoliciesCommand").f(void 0, void 0).ser(se_ListPoliciesCommand).de(de_ListPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListPoliciesGrantingServiceAccessCommand.js
var ListPoliciesGrantingServiceAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListPoliciesGrantingServiceAccess", {}).n("IAMClient", "ListPoliciesGrantingServiceAccessCommand").f(void 0, void 0).ser(se_ListPoliciesGrantingServiceAccessCommand).de(de_ListPoliciesGrantingServiceAccessCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListPolicyTagsCommand.js
var ListPolicyTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListPolicyTags", {}).n("IAMClient", "ListPolicyTagsCommand").f(void 0, void 0).ser(se_ListPolicyTagsCommand).de(de_ListPolicyTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListPolicyVersionsCommand.js
var ListPolicyVersionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListPolicyVersions", {}).n("IAMClient", "ListPolicyVersionsCommand").f(void 0, void 0).ser(se_ListPolicyVersionsCommand).de(de_ListPolicyVersionsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListRolePoliciesCommand.js
var ListRolePoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListRolePolicies", {}).n("IAMClient", "ListRolePoliciesCommand").f(void 0, void 0).ser(se_ListRolePoliciesCommand).de(de_ListRolePoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListRolesCommand.js
var ListRolesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListRoles", {}).n("IAMClient", "ListRolesCommand").f(void 0, void 0).ser(se_ListRolesCommand).de(de_ListRolesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListRoleTagsCommand.js
var ListRoleTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListRoleTags", {}).n("IAMClient", "ListRoleTagsCommand").f(void 0, void 0).ser(se_ListRoleTagsCommand).de(de_ListRoleTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListSAMLProvidersCommand.js
var ListSAMLProvidersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListSAMLProviders", {}).n("IAMClient", "ListSAMLProvidersCommand").f(void 0, void 0).ser(se_ListSAMLProvidersCommand).de(de_ListSAMLProvidersCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListSAMLProviderTagsCommand.js
var ListSAMLProviderTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListSAMLProviderTags", {}).n("IAMClient", "ListSAMLProviderTagsCommand").f(void 0, void 0).ser(se_ListSAMLProviderTagsCommand).de(de_ListSAMLProviderTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListServerCertificatesCommand.js
var ListServerCertificatesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListServerCertificates", {}).n("IAMClient", "ListServerCertificatesCommand").f(void 0, void 0).ser(se_ListServerCertificatesCommand).de(de_ListServerCertificatesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListServerCertificateTagsCommand.js
var ListServerCertificateTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListServerCertificateTags", {}).n("IAMClient", "ListServerCertificateTagsCommand").f(void 0, void 0).ser(se_ListServerCertificateTagsCommand).de(de_ListServerCertificateTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListServiceSpecificCredentialsCommand.js
var ListServiceSpecificCredentialsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListServiceSpecificCredentials", {}).n("IAMClient", "ListServiceSpecificCredentialsCommand").f(void 0, void 0).ser(se_ListServiceSpecificCredentialsCommand).de(de_ListServiceSpecificCredentialsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListSigningCertificatesCommand.js
var ListSigningCertificatesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListSigningCertificates", {}).n("IAMClient", "ListSigningCertificatesCommand").f(void 0, void 0).ser(se_ListSigningCertificatesCommand).de(de_ListSigningCertificatesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListSSHPublicKeysCommand.js
var ListSSHPublicKeysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListSSHPublicKeys", {}).n("IAMClient", "ListSSHPublicKeysCommand").f(void 0, void 0).ser(se_ListSSHPublicKeysCommand).de(de_ListSSHPublicKeysCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListUserPoliciesCommand.js
var ListUserPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListUserPolicies", {}).n("IAMClient", "ListUserPoliciesCommand").f(void 0, void 0).ser(se_ListUserPoliciesCommand).de(de_ListUserPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListUsersCommand.js
var ListUsersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListUsers", {}).n("IAMClient", "ListUsersCommand").f(void 0, void 0).ser(se_ListUsersCommand).de(de_ListUsersCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListUserTagsCommand.js
var ListUserTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListUserTags", {}).n("IAMClient", "ListUserTagsCommand").f(void 0, void 0).ser(se_ListUserTagsCommand).de(de_ListUserTagsCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ListVirtualMFADevicesCommand.js
var ListVirtualMFADevicesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ListVirtualMFADevices", {}).n("IAMClient", "ListVirtualMFADevicesCommand").f(void 0, ListVirtualMFADevicesResponseFilterSensitiveLog).ser(se_ListVirtualMFADevicesCommand).de(de_ListVirtualMFADevicesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/PutGroupPolicyCommand.js
var PutGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "PutGroupPolicy", {}).n("IAMClient", "PutGroupPolicyCommand").f(void 0, void 0).ser(se_PutGroupPolicyCommand).de(de_PutGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/PutRolePermissionsBoundaryCommand.js
var PutRolePermissionsBoundaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "PutRolePermissionsBoundary", {}).n("IAMClient", "PutRolePermissionsBoundaryCommand").f(void 0, void 0).ser(se_PutRolePermissionsBoundaryCommand).de(de_PutRolePermissionsBoundaryCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/PutRolePolicyCommand.js
var PutRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "PutRolePolicy", {}).n("IAMClient", "PutRolePolicyCommand").f(void 0, void 0).ser(se_PutRolePolicyCommand).de(de_PutRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/PutUserPermissionsBoundaryCommand.js
var PutUserPermissionsBoundaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "PutUserPermissionsBoundary", {}).n("IAMClient", "PutUserPermissionsBoundaryCommand").f(void 0, void 0).ser(se_PutUserPermissionsBoundaryCommand).de(de_PutUserPermissionsBoundaryCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/PutUserPolicyCommand.js
var PutUserPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "PutUserPolicy", {}).n("IAMClient", "PutUserPolicyCommand").f(void 0, void 0).ser(se_PutUserPolicyCommand).de(de_PutUserPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/RemoveClientIDFromOpenIDConnectProviderCommand.js
var RemoveClientIDFromOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "RemoveClientIDFromOpenIDConnectProvider", {}).n("IAMClient", "RemoveClientIDFromOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_RemoveClientIDFromOpenIDConnectProviderCommand).de(de_RemoveClientIDFromOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/RemoveRoleFromInstanceProfileCommand.js
var RemoveRoleFromInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "RemoveRoleFromInstanceProfile", {}).n("IAMClient", "RemoveRoleFromInstanceProfileCommand").f(void 0, void 0).ser(se_RemoveRoleFromInstanceProfileCommand).de(de_RemoveRoleFromInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/RemoveUserFromGroupCommand.js
var RemoveUserFromGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "RemoveUserFromGroup", {}).n("IAMClient", "RemoveUserFromGroupCommand").f(void 0, void 0).ser(se_RemoveUserFromGroupCommand).de(de_RemoveUserFromGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ResetServiceSpecificCredentialCommand.js
var ResetServiceSpecificCredentialCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ResetServiceSpecificCredential", {}).n("IAMClient", "ResetServiceSpecificCredentialCommand").f(void 0, ResetServiceSpecificCredentialResponseFilterSensitiveLog).ser(se_ResetServiceSpecificCredentialCommand).de(de_ResetServiceSpecificCredentialCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/ResyncMFADeviceCommand.js
var ResyncMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "ResyncMFADevice", {}).n("IAMClient", "ResyncMFADeviceCommand").f(void 0, void 0).ser(se_ResyncMFADeviceCommand).de(de_ResyncMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/SetDefaultPolicyVersionCommand.js
var SetDefaultPolicyVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "SetDefaultPolicyVersion", {}).n("IAMClient", "SetDefaultPolicyVersionCommand").f(void 0, void 0).ser(se_SetDefaultPolicyVersionCommand).de(de_SetDefaultPolicyVersionCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/SetSecurityTokenServicePreferencesCommand.js
var SetSecurityTokenServicePreferencesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "SetSecurityTokenServicePreferences", {}).n("IAMClient", "SetSecurityTokenServicePreferencesCommand").f(void 0, void 0).ser(se_SetSecurityTokenServicePreferencesCommand).de(de_SetSecurityTokenServicePreferencesCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/SimulateCustomPolicyCommand.js
var SimulateCustomPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "SimulateCustomPolicy", {}).n("IAMClient", "SimulateCustomPolicyCommand").f(void 0, void 0).ser(se_SimulateCustomPolicyCommand).de(de_SimulateCustomPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/SimulatePrincipalPolicyCommand.js
var SimulatePrincipalPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "SimulatePrincipalPolicy", {}).n("IAMClient", "SimulatePrincipalPolicyCommand").f(void 0, void 0).ser(se_SimulatePrincipalPolicyCommand).de(de_SimulatePrincipalPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagInstanceProfileCommand.js
var TagInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagInstanceProfile", {}).n("IAMClient", "TagInstanceProfileCommand").f(void 0, void 0).ser(se_TagInstanceProfileCommand).de(de_TagInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagMFADeviceCommand.js
var TagMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagMFADevice", {}).n("IAMClient", "TagMFADeviceCommand").f(void 0, void 0).ser(se_TagMFADeviceCommand).de(de_TagMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagOpenIDConnectProviderCommand.js
var TagOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagOpenIDConnectProvider", {}).n("IAMClient", "TagOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_TagOpenIDConnectProviderCommand).de(de_TagOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagPolicyCommand.js
var TagPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagPolicy", {}).n("IAMClient", "TagPolicyCommand").f(void 0, void 0).ser(se_TagPolicyCommand).de(de_TagPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagRoleCommand.js
var TagRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagRole", {}).n("IAMClient", "TagRoleCommand").f(void 0, void 0).ser(se_TagRoleCommand).de(de_TagRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagSAMLProviderCommand.js
var TagSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagSAMLProvider", {}).n("IAMClient", "TagSAMLProviderCommand").f(void 0, void 0).ser(se_TagSAMLProviderCommand).de(de_TagSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagServerCertificateCommand.js
var TagServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagServerCertificate", {}).n("IAMClient", "TagServerCertificateCommand").f(void 0, void 0).ser(se_TagServerCertificateCommand).de(de_TagServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/TagUserCommand.js
var TagUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "TagUser", {}).n("IAMClient", "TagUserCommand").f(void 0, void 0).ser(se_TagUserCommand).de(de_TagUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagInstanceProfileCommand.js
var UntagInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagInstanceProfile", {}).n("IAMClient", "UntagInstanceProfileCommand").f(void 0, void 0).ser(se_UntagInstanceProfileCommand).de(de_UntagInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagMFADeviceCommand.js
var UntagMFADeviceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagMFADevice", {}).n("IAMClient", "UntagMFADeviceCommand").f(void 0, void 0).ser(se_UntagMFADeviceCommand).de(de_UntagMFADeviceCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagOpenIDConnectProviderCommand.js
var UntagOpenIDConnectProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagOpenIDConnectProvider", {}).n("IAMClient", "UntagOpenIDConnectProviderCommand").f(void 0, void 0).ser(se_UntagOpenIDConnectProviderCommand).de(de_UntagOpenIDConnectProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagPolicyCommand.js
var UntagPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagPolicy", {}).n("IAMClient", "UntagPolicyCommand").f(void 0, void 0).ser(se_UntagPolicyCommand).de(de_UntagPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagRoleCommand.js
var UntagRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagRole", {}).n("IAMClient", "UntagRoleCommand").f(void 0, void 0).ser(se_UntagRoleCommand).de(de_UntagRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagSAMLProviderCommand.js
var UntagSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagSAMLProvider", {}).n("IAMClient", "UntagSAMLProviderCommand").f(void 0, void 0).ser(se_UntagSAMLProviderCommand).de(de_UntagSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagServerCertificateCommand.js
var UntagServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagServerCertificate", {}).n("IAMClient", "UntagServerCertificateCommand").f(void 0, void 0).ser(se_UntagServerCertificateCommand).de(de_UntagServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UntagUserCommand.js
var UntagUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UntagUser", {}).n("IAMClient", "UntagUserCommand").f(void 0, void 0).ser(se_UntagUserCommand).de(de_UntagUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateAccessKeyCommand.js
var UpdateAccessKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateAccessKey", {}).n("IAMClient", "UpdateAccessKeyCommand").f(void 0, void 0).ser(se_UpdateAccessKeyCommand).de(de_UpdateAccessKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateAccountPasswordPolicyCommand.js
var UpdateAccountPasswordPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateAccountPasswordPolicy", {}).n("IAMClient", "UpdateAccountPasswordPolicyCommand").f(void 0, void 0).ser(se_UpdateAccountPasswordPolicyCommand).de(de_UpdateAccountPasswordPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateAssumeRolePolicyCommand.js
var UpdateAssumeRolePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateAssumeRolePolicy", {}).n("IAMClient", "UpdateAssumeRolePolicyCommand").f(void 0, void 0).ser(se_UpdateAssumeRolePolicyCommand).de(de_UpdateAssumeRolePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateGroupCommand.js
var UpdateGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateGroup", {}).n("IAMClient", "UpdateGroupCommand").f(void 0, void 0).ser(se_UpdateGroupCommand).de(de_UpdateGroupCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateLoginProfileCommand.js
var UpdateLoginProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateLoginProfile", {}).n("IAMClient", "UpdateLoginProfileCommand").f(UpdateLoginProfileRequestFilterSensitiveLog, void 0).ser(se_UpdateLoginProfileCommand).de(de_UpdateLoginProfileCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateOpenIDConnectProviderThumbprintCommand.js
var UpdateOpenIDConnectProviderThumbprintCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateOpenIDConnectProviderThumbprint", {}).n("IAMClient", "UpdateOpenIDConnectProviderThumbprintCommand").f(void 0, void 0).ser(se_UpdateOpenIDConnectProviderThumbprintCommand).de(de_UpdateOpenIDConnectProviderThumbprintCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateRoleCommand.js
var UpdateRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateRole", {}).n("IAMClient", "UpdateRoleCommand").f(void 0, void 0).ser(se_UpdateRoleCommand).de(de_UpdateRoleCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateRoleDescriptionCommand.js
var UpdateRoleDescriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateRoleDescription", {}).n("IAMClient", "UpdateRoleDescriptionCommand").f(void 0, void 0).ser(se_UpdateRoleDescriptionCommand).de(de_UpdateRoleDescriptionCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateSAMLProviderCommand.js
var UpdateSAMLProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateSAMLProvider", {}).n("IAMClient", "UpdateSAMLProviderCommand").f(void 0, void 0).ser(se_UpdateSAMLProviderCommand).de(de_UpdateSAMLProviderCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateServerCertificateCommand.js
var UpdateServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateServerCertificate", {}).n("IAMClient", "UpdateServerCertificateCommand").f(void 0, void 0).ser(se_UpdateServerCertificateCommand).de(de_UpdateServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateServiceSpecificCredentialCommand.js
var UpdateServiceSpecificCredentialCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateServiceSpecificCredential", {}).n("IAMClient", "UpdateServiceSpecificCredentialCommand").f(void 0, void 0).ser(se_UpdateServiceSpecificCredentialCommand).de(de_UpdateServiceSpecificCredentialCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateSigningCertificateCommand.js
var UpdateSigningCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateSigningCertificate", {}).n("IAMClient", "UpdateSigningCertificateCommand").f(void 0, void 0).ser(se_UpdateSigningCertificateCommand).de(de_UpdateSigningCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateSSHPublicKeyCommand.js
var UpdateSSHPublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateSSHPublicKey", {}).n("IAMClient", "UpdateSSHPublicKeyCommand").f(void 0, void 0).ser(se_UpdateSSHPublicKeyCommand).de(de_UpdateSSHPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UpdateUserCommand.js
var UpdateUserCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UpdateUser", {}).n("IAMClient", "UpdateUserCommand").f(void 0, void 0).ser(se_UpdateUserCommand).de(de_UpdateUserCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UploadServerCertificateCommand.js
var UploadServerCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UploadServerCertificate", {}).n("IAMClient", "UploadServerCertificateCommand").f(UploadServerCertificateRequestFilterSensitiveLog, void 0).ser(se_UploadServerCertificateCommand).de(de_UploadServerCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UploadSigningCertificateCommand.js
var UploadSigningCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UploadSigningCertificate", {}).n("IAMClient", "UploadSigningCertificateCommand").f(void 0, void 0).ser(se_UploadSigningCertificateCommand).de(de_UploadSigningCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/commands/UploadSSHPublicKeyCommand.js
var UploadSSHPublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSIdentityManagementV20100508", "UploadSSHPublicKey", {}).n("IAMClient", "UploadSSHPublicKeyCommand").f(void 0, void 0).ser(se_UploadSSHPublicKeyCommand).de(de_UploadSSHPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-iam/dist-es/IAM.js
var commands = {
  AddClientIDToOpenIDConnectProviderCommand,
  AddRoleToInstanceProfileCommand,
  AddUserToGroupCommand,
  AttachGroupPolicyCommand,
  AttachRolePolicyCommand,
  AttachUserPolicyCommand,
  ChangePasswordCommand,
  CreateAccessKeyCommand,
  CreateAccountAliasCommand,
  CreateGroupCommand,
  CreateInstanceProfileCommand,
  CreateLoginProfileCommand,
  CreateOpenIDConnectProviderCommand,
  CreatePolicyCommand,
  CreatePolicyVersionCommand,
  CreateRoleCommand,
  CreateSAMLProviderCommand,
  CreateServiceLinkedRoleCommand,
  CreateServiceSpecificCredentialCommand,
  CreateUserCommand,
  CreateVirtualMFADeviceCommand,
  DeactivateMFADeviceCommand,
  DeleteAccessKeyCommand,
  DeleteAccountAliasCommand,
  DeleteAccountPasswordPolicyCommand,
  DeleteGroupCommand,
  DeleteGroupPolicyCommand,
  DeleteInstanceProfileCommand,
  DeleteLoginProfileCommand,
  DeleteOpenIDConnectProviderCommand,
  DeletePolicyCommand,
  DeletePolicyVersionCommand,
  DeleteRoleCommand,
  DeleteRolePermissionsBoundaryCommand,
  DeleteRolePolicyCommand,
  DeleteSAMLProviderCommand,
  DeleteServerCertificateCommand,
  DeleteServiceLinkedRoleCommand,
  DeleteServiceSpecificCredentialCommand,
  DeleteSigningCertificateCommand,
  DeleteSSHPublicKeyCommand,
  DeleteUserCommand,
  DeleteUserPermissionsBoundaryCommand,
  DeleteUserPolicyCommand,
  DeleteVirtualMFADeviceCommand,
  DetachGroupPolicyCommand,
  DetachRolePolicyCommand,
  DetachUserPolicyCommand,
  DisableOrganizationsRootCredentialsManagementCommand,
  DisableOrganizationsRootSessionsCommand,
  EnableMFADeviceCommand,
  EnableOrganizationsRootCredentialsManagementCommand,
  EnableOrganizationsRootSessionsCommand,
  GenerateCredentialReportCommand,
  GenerateOrganizationsAccessReportCommand,
  GenerateServiceLastAccessedDetailsCommand,
  GetAccessKeyLastUsedCommand,
  GetAccountAuthorizationDetailsCommand,
  GetAccountPasswordPolicyCommand,
  GetAccountSummaryCommand,
  GetContextKeysForCustomPolicyCommand,
  GetContextKeysForPrincipalPolicyCommand,
  GetCredentialReportCommand,
  GetGroupCommand,
  GetGroupPolicyCommand,
  GetInstanceProfileCommand,
  GetLoginProfileCommand,
  GetMFADeviceCommand,
  GetOpenIDConnectProviderCommand,
  GetOrganizationsAccessReportCommand,
  GetPolicyCommand,
  GetPolicyVersionCommand,
  GetRoleCommand,
  GetRolePolicyCommand,
  GetSAMLProviderCommand,
  GetServerCertificateCommand,
  GetServiceLastAccessedDetailsCommand,
  GetServiceLastAccessedDetailsWithEntitiesCommand,
  GetServiceLinkedRoleDeletionStatusCommand,
  GetSSHPublicKeyCommand,
  GetUserCommand,
  GetUserPolicyCommand,
  ListAccessKeysCommand,
  ListAccountAliasesCommand,
  ListAttachedGroupPoliciesCommand,
  ListAttachedRolePoliciesCommand,
  ListAttachedUserPoliciesCommand,
  ListEntitiesForPolicyCommand,
  ListGroupPoliciesCommand,
  ListGroupsCommand,
  ListGroupsForUserCommand,
  ListInstanceProfilesCommand,
  ListInstanceProfilesForRoleCommand,
  ListInstanceProfileTagsCommand,
  ListMFADevicesCommand,
  ListMFADeviceTagsCommand,
  ListOpenIDConnectProvidersCommand,
  ListOpenIDConnectProviderTagsCommand,
  ListOrganizationsFeaturesCommand,
  ListPoliciesCommand,
  ListPoliciesGrantingServiceAccessCommand,
  ListPolicyTagsCommand,
  ListPolicyVersionsCommand,
  ListRolePoliciesCommand,
  ListRolesCommand,
  ListRoleTagsCommand,
  ListSAMLProvidersCommand,
  ListSAMLProviderTagsCommand,
  ListServerCertificatesCommand,
  ListServerCertificateTagsCommand,
  ListServiceSpecificCredentialsCommand,
  ListSigningCertificatesCommand,
  ListSSHPublicKeysCommand,
  ListUserPoliciesCommand,
  ListUsersCommand,
  ListUserTagsCommand,
  ListVirtualMFADevicesCommand,
  PutGroupPolicyCommand,
  PutRolePermissionsBoundaryCommand,
  PutRolePolicyCommand,
  PutUserPermissionsBoundaryCommand,
  PutUserPolicyCommand,
  RemoveClientIDFromOpenIDConnectProviderCommand,
  RemoveRoleFromInstanceProfileCommand,
  RemoveUserFromGroupCommand,
  ResetServiceSpecificCredentialCommand,
  ResyncMFADeviceCommand,
  SetDefaultPolicyVersionCommand,
  SetSecurityTokenServicePreferencesCommand,
  SimulateCustomPolicyCommand,
  SimulatePrincipalPolicyCommand,
  TagInstanceProfileCommand,
  TagMFADeviceCommand,
  TagOpenIDConnectProviderCommand,
  TagPolicyCommand,
  TagRoleCommand,
  TagSAMLProviderCommand,
  TagServerCertificateCommand,
  TagUserCommand,
  UntagInstanceProfileCommand,
  UntagMFADeviceCommand,
  UntagOpenIDConnectProviderCommand,
  UntagPolicyCommand,
  UntagRoleCommand,
  UntagSAMLProviderCommand,
  UntagServerCertificateCommand,
  UntagUserCommand,
  UpdateAccessKeyCommand,
  UpdateAccountPasswordPolicyCommand,
  UpdateAssumeRolePolicyCommand,
  UpdateGroupCommand,
  UpdateLoginProfileCommand,
  UpdateOpenIDConnectProviderThumbprintCommand,
  UpdateRoleCommand,
  UpdateRoleDescriptionCommand,
  UpdateSAMLProviderCommand,
  UpdateServerCertificateCommand,
  UpdateServiceSpecificCredentialCommand,
  UpdateSigningCertificateCommand,
  UpdateSSHPublicKeyCommand,
  UpdateUserCommand,
  UploadServerCertificateCommand,
  UploadSigningCertificateCommand,
  UploadSSHPublicKeyCommand
};
var IAM = class extends IAMClient {
};
createAggregatedClient(commands, IAM);

// node_modules/@aws-sdk/client-iam/dist-es/pagination/GetAccountAuthorizationDetailsPaginator.js
var paginateGetAccountAuthorizationDetails = createPaginator(IAMClient, GetAccountAuthorizationDetailsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/GetGroupPaginator.js
var paginateGetGroup = createPaginator(IAMClient, GetGroupCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListAccessKeysPaginator.js
var paginateListAccessKeys = createPaginator(IAMClient, ListAccessKeysCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListAccountAliasesPaginator.js
var paginateListAccountAliases = createPaginator(IAMClient, ListAccountAliasesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListAttachedGroupPoliciesPaginator.js
var paginateListAttachedGroupPolicies = createPaginator(IAMClient, ListAttachedGroupPoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListAttachedRolePoliciesPaginator.js
var paginateListAttachedRolePolicies = createPaginator(IAMClient, ListAttachedRolePoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListAttachedUserPoliciesPaginator.js
var paginateListAttachedUserPolicies = createPaginator(IAMClient, ListAttachedUserPoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListEntitiesForPolicyPaginator.js
var paginateListEntitiesForPolicy = createPaginator(IAMClient, ListEntitiesForPolicyCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListGroupPoliciesPaginator.js
var paginateListGroupPolicies = createPaginator(IAMClient, ListGroupPoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListGroupsForUserPaginator.js
var paginateListGroupsForUser = createPaginator(IAMClient, ListGroupsForUserCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListGroupsPaginator.js
var paginateListGroups = createPaginator(IAMClient, ListGroupsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListInstanceProfileTagsPaginator.js
var paginateListInstanceProfileTags = createPaginator(IAMClient, ListInstanceProfileTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListInstanceProfilesForRolePaginator.js
var paginateListInstanceProfilesForRole = createPaginator(IAMClient, ListInstanceProfilesForRoleCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListInstanceProfilesPaginator.js
var paginateListInstanceProfiles = createPaginator(IAMClient, ListInstanceProfilesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListMFADeviceTagsPaginator.js
var paginateListMFADeviceTags = createPaginator(IAMClient, ListMFADeviceTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListMFADevicesPaginator.js
var paginateListMFADevices = createPaginator(IAMClient, ListMFADevicesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListOpenIDConnectProviderTagsPaginator.js
var paginateListOpenIDConnectProviderTags = createPaginator(IAMClient, ListOpenIDConnectProviderTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListPoliciesPaginator.js
var paginateListPolicies = createPaginator(IAMClient, ListPoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListPolicyTagsPaginator.js
var paginateListPolicyTags = createPaginator(IAMClient, ListPolicyTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListPolicyVersionsPaginator.js
var paginateListPolicyVersions = createPaginator(IAMClient, ListPolicyVersionsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListRolePoliciesPaginator.js
var paginateListRolePolicies = createPaginator(IAMClient, ListRolePoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListRoleTagsPaginator.js
var paginateListRoleTags = createPaginator(IAMClient, ListRoleTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListRolesPaginator.js
var paginateListRoles = createPaginator(IAMClient, ListRolesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListSAMLProviderTagsPaginator.js
var paginateListSAMLProviderTags = createPaginator(IAMClient, ListSAMLProviderTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListSSHPublicKeysPaginator.js
var paginateListSSHPublicKeys = createPaginator(IAMClient, ListSSHPublicKeysCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListServerCertificateTagsPaginator.js
var paginateListServerCertificateTags = createPaginator(IAMClient, ListServerCertificateTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListServerCertificatesPaginator.js
var paginateListServerCertificates = createPaginator(IAMClient, ListServerCertificatesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListSigningCertificatesPaginator.js
var paginateListSigningCertificates = createPaginator(IAMClient, ListSigningCertificatesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListUserPoliciesPaginator.js
var paginateListUserPolicies = createPaginator(IAMClient, ListUserPoliciesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListUserTagsPaginator.js
var paginateListUserTags = createPaginator(IAMClient, ListUserTagsCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListUsersPaginator.js
var paginateListUsers = createPaginator(IAMClient, ListUsersCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/ListVirtualMFADevicesPaginator.js
var paginateListVirtualMFADevices = createPaginator(IAMClient, ListVirtualMFADevicesCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/SimulateCustomPolicyPaginator.js
var paginateSimulateCustomPolicy = createPaginator(IAMClient, SimulateCustomPolicyCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/pagination/SimulatePrincipalPolicyPaginator.js
var paginateSimulatePrincipalPolicy = createPaginator(IAMClient, SimulatePrincipalPolicyCommand, "Marker", "Marker", "MaxItems");

// node_modules/@aws-sdk/client-iam/dist-es/waiters/waitForInstanceProfileExists.js
var checkState = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetInstanceProfileCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NoSuchEntityException") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceProfileExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
var waitUntilInstanceProfileExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-iam/dist-es/waiters/waitForPolicyExists.js
var checkState2 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetPolicyCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NoSuchEntityException") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForPolicyExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
};
var waitUntilPolicyExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-iam/dist-es/waiters/waitForRoleExists.js
var checkState3 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetRoleCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NoSuchEntityException") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForRoleExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
};
var waitUntilRoleExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-iam/dist-es/waiters/waitForUserExists.js
var checkState4 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetUserCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NoSuchEntityException") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForUserExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState4);
};
var waitUntilUserExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState4);
  return checkExceptions(result);
};
export {
  Command as $Command,
  AccessAdvisorUsageGranularityType,
  AccessKeyFilterSensitiveLog,
  AccountNotManagementOrDelegatedAdministratorException,
  AddClientIDToOpenIDConnectProviderCommand,
  AddRoleToInstanceProfileCommand,
  AddUserToGroupCommand,
  AssignmentStatusType,
  AttachGroupPolicyCommand,
  AttachRolePolicyCommand,
  AttachUserPolicyCommand,
  CallerIsNotManagementAccountException,
  ChangePasswordCommand,
  ChangePasswordRequestFilterSensitiveLog,
  ConcurrentModificationException,
  ContextKeyTypeEnum,
  CreateAccessKeyCommand,
  CreateAccessKeyResponseFilterSensitiveLog,
  CreateAccountAliasCommand,
  CreateGroupCommand,
  CreateInstanceProfileCommand,
  CreateLoginProfileCommand,
  CreateLoginProfileRequestFilterSensitiveLog,
  CreateOpenIDConnectProviderCommand,
  CreatePolicyCommand,
  CreatePolicyVersionCommand,
  CreateRoleCommand,
  CreateSAMLProviderCommand,
  CreateServiceLinkedRoleCommand,
  CreateServiceSpecificCredentialCommand,
  CreateServiceSpecificCredentialResponseFilterSensitiveLog,
  CreateUserCommand,
  CreateVirtualMFADeviceCommand,
  CreateVirtualMFADeviceResponseFilterSensitiveLog,
  CredentialReportExpiredException,
  CredentialReportNotPresentException,
  CredentialReportNotReadyException,
  DeactivateMFADeviceCommand,
  DeleteAccessKeyCommand,
  DeleteAccountAliasCommand,
  DeleteAccountPasswordPolicyCommand,
  DeleteConflictException,
  DeleteGroupCommand,
  DeleteGroupPolicyCommand,
  DeleteInstanceProfileCommand,
  DeleteLoginProfileCommand,
  DeleteOpenIDConnectProviderCommand,
  DeletePolicyCommand,
  DeletePolicyVersionCommand,
  DeleteRoleCommand,
  DeleteRolePermissionsBoundaryCommand,
  DeleteRolePolicyCommand,
  DeleteSAMLProviderCommand,
  DeleteSSHPublicKeyCommand,
  DeleteServerCertificateCommand,
  DeleteServiceLinkedRoleCommand,
  DeleteServiceSpecificCredentialCommand,
  DeleteSigningCertificateCommand,
  DeleteUserCommand,
  DeleteUserPermissionsBoundaryCommand,
  DeleteUserPolicyCommand,
  DeleteVirtualMFADeviceCommand,
  DeletionTaskStatusType,
  DetachGroupPolicyCommand,
  DetachRolePolicyCommand,
  DetachUserPolicyCommand,
  DisableOrganizationsRootCredentialsManagementCommand,
  DisableOrganizationsRootSessionsCommand,
  DuplicateCertificateException,
  DuplicateSSHPublicKeyException,
  EnableMFADeviceCommand,
  EnableOrganizationsRootCredentialsManagementCommand,
  EnableOrganizationsRootSessionsCommand,
  EncodingType,
  EntityAlreadyExistsException,
  EntityTemporarilyUnmodifiableException,
  EntityType,
  FeatureType,
  GenerateCredentialReportCommand,
  GenerateOrganizationsAccessReportCommand,
  GenerateServiceLastAccessedDetailsCommand,
  GetAccessKeyLastUsedCommand,
  GetAccountAuthorizationDetailsCommand,
  GetAccountPasswordPolicyCommand,
  GetAccountSummaryCommand,
  GetContextKeysForCustomPolicyCommand,
  GetContextKeysForPrincipalPolicyCommand,
  GetCredentialReportCommand,
  GetGroupCommand,
  GetGroupPolicyCommand,
  GetInstanceProfileCommand,
  GetLoginProfileCommand,
  GetMFADeviceCommand,
  GetOpenIDConnectProviderCommand,
  GetOrganizationsAccessReportCommand,
  GetPolicyCommand,
  GetPolicyVersionCommand,
  GetRoleCommand,
  GetRolePolicyCommand,
  GetSAMLProviderCommand,
  GetSSHPublicKeyCommand,
  GetServerCertificateCommand,
  GetServiceLastAccessedDetailsCommand,
  GetServiceLastAccessedDetailsWithEntitiesCommand,
  GetServiceLinkedRoleDeletionStatusCommand,
  GetUserCommand,
  GetUserPolicyCommand,
  GlobalEndpointTokenVersion,
  IAM,
  IAMClient,
  IAMServiceException,
  InvalidAuthenticationCodeException,
  InvalidCertificateException,
  InvalidInputException,
  InvalidPublicKeyException,
  InvalidUserTypeException,
  JobStatusType,
  KeyPairMismatchException,
  LimitExceededException,
  ListAccessKeysCommand,
  ListAccountAliasesCommand,
  ListAttachedGroupPoliciesCommand,
  ListAttachedRolePoliciesCommand,
  ListAttachedUserPoliciesCommand,
  ListEntitiesForPolicyCommand,
  ListGroupPoliciesCommand,
  ListGroupsCommand,
  ListGroupsForUserCommand,
  ListInstanceProfileTagsCommand,
  ListInstanceProfilesCommand,
  ListInstanceProfilesForRoleCommand,
  ListMFADeviceTagsCommand,
  ListMFADevicesCommand,
  ListOpenIDConnectProviderTagsCommand,
  ListOpenIDConnectProvidersCommand,
  ListOrganizationsFeaturesCommand,
  ListPoliciesCommand,
  ListPoliciesGrantingServiceAccessCommand,
  ListPolicyTagsCommand,
  ListPolicyVersionsCommand,
  ListRolePoliciesCommand,
  ListRoleTagsCommand,
  ListRolesCommand,
  ListSAMLProviderTagsCommand,
  ListSAMLProvidersCommand,
  ListSSHPublicKeysCommand,
  ListServerCertificateTagsCommand,
  ListServerCertificatesCommand,
  ListServiceSpecificCredentialsCommand,
  ListSigningCertificatesCommand,
  ListUserPoliciesCommand,
  ListUserTagsCommand,
  ListUsersCommand,
  ListVirtualMFADevicesCommand,
  ListVirtualMFADevicesResponseFilterSensitiveLog,
  MalformedCertificateException,
  MalformedPolicyDocumentException,
  NoSuchEntityException,
  OpenIdIdpCommunicationErrorException,
  OrganizationNotFoundException,
  OrganizationNotInAllFeaturesModeException,
  PasswordPolicyViolationException,
  PermissionsBoundaryAttachmentType,
  PolicyEvaluationDecisionType,
  PolicyEvaluationException,
  PolicyNotAttachableException,
  PolicyOwnerEntityType,
  PolicyScopeType,
  PolicySourceType,
  PolicyType,
  PolicyUsageType,
  PutGroupPolicyCommand,
  PutRolePermissionsBoundaryCommand,
  PutRolePolicyCommand,
  PutUserPermissionsBoundaryCommand,
  PutUserPolicyCommand,
  RemoveClientIDFromOpenIDConnectProviderCommand,
  RemoveRoleFromInstanceProfileCommand,
  RemoveUserFromGroupCommand,
  ReportFormatType,
  ReportGenerationLimitExceededException,
  ReportStateType,
  ResetServiceSpecificCredentialCommand,
  ResetServiceSpecificCredentialResponseFilterSensitiveLog,
  ResyncMFADeviceCommand,
  ServiceAccessNotEnabledException,
  ServiceFailureException,
  ServiceNotSupportedException,
  ServiceSpecificCredentialFilterSensitiveLog,
  SetDefaultPolicyVersionCommand,
  SetSecurityTokenServicePreferencesCommand,
  SimulateCustomPolicyCommand,
  SimulatePrincipalPolicyCommand,
  SortKeyType,
  StatusType,
  SummaryKeyType,
  TagInstanceProfileCommand,
  TagMFADeviceCommand,
  TagOpenIDConnectProviderCommand,
  TagPolicyCommand,
  TagRoleCommand,
  TagSAMLProviderCommand,
  TagServerCertificateCommand,
  TagUserCommand,
  UnmodifiableEntityException,
  UnrecognizedPublicKeyEncodingException,
  UntagInstanceProfileCommand,
  UntagMFADeviceCommand,
  UntagOpenIDConnectProviderCommand,
  UntagPolicyCommand,
  UntagRoleCommand,
  UntagSAMLProviderCommand,
  UntagServerCertificateCommand,
  UntagUserCommand,
  UpdateAccessKeyCommand,
  UpdateAccountPasswordPolicyCommand,
  UpdateAssumeRolePolicyCommand,
  UpdateGroupCommand,
  UpdateLoginProfileCommand,
  UpdateLoginProfileRequestFilterSensitiveLog,
  UpdateOpenIDConnectProviderThumbprintCommand,
  UpdateRoleCommand,
  UpdateRoleDescriptionCommand,
  UpdateSAMLProviderCommand,
  UpdateSSHPublicKeyCommand,
  UpdateServerCertificateCommand,
  UpdateServiceSpecificCredentialCommand,
  UpdateSigningCertificateCommand,
  UpdateUserCommand,
  UploadSSHPublicKeyCommand,
  UploadServerCertificateCommand,
  UploadServerCertificateRequestFilterSensitiveLog,
  UploadSigningCertificateCommand,
  VirtualMFADeviceFilterSensitiveLog,
  Client as __Client,
  paginateGetAccountAuthorizationDetails,
  paginateGetGroup,
  paginateListAccessKeys,
  paginateListAccountAliases,
  paginateListAttachedGroupPolicies,
  paginateListAttachedRolePolicies,
  paginateListAttachedUserPolicies,
  paginateListEntitiesForPolicy,
  paginateListGroupPolicies,
  paginateListGroups,
  paginateListGroupsForUser,
  paginateListInstanceProfileTags,
  paginateListInstanceProfiles,
  paginateListInstanceProfilesForRole,
  paginateListMFADeviceTags,
  paginateListMFADevices,
  paginateListOpenIDConnectProviderTags,
  paginateListPolicies,
  paginateListPolicyTags,
  paginateListPolicyVersions,
  paginateListRolePolicies,
  paginateListRoleTags,
  paginateListRoles,
  paginateListSAMLProviderTags,
  paginateListSSHPublicKeys,
  paginateListServerCertificateTags,
  paginateListServerCertificates,
  paginateListSigningCertificates,
  paginateListUserPolicies,
  paginateListUserTags,
  paginateListUsers,
  paginateListVirtualMFADevices,
  paginateSimulateCustomPolicy,
  paginateSimulatePrincipalPolicy,
  waitForInstanceProfileExists,
  waitForPolicyExists,
  waitForRoleExists,
  waitForUserExists,
  waitUntilInstanceProfileExists,
  waitUntilPolicyExists,
  waitUntilRoleExists,
  waitUntilUserExists
};
//# sourceMappingURL=@aws-sdk_client-iam.js.map
