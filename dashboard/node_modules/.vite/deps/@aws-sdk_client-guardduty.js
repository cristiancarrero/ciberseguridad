import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  _json,
  awsEndpointFunctions,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  customEndpointFunctions,
  decorateServiceException,
  expectBoolean,
  expectInt32,
  expectLong,
  expectNonNull,
  expectNumber,
  expectObject,
  expectString,
  fromBase64,
  fromUtf8,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  limitedParseDouble,
  loadConfigsForDefaultMode,
  loadRestJsonErrorCode,
  map,
  normalizeProvider,
  parseEpochTimestamp,
  parseJsonBody,
  parseJsonErrorBody,
  parseUrl,
  requestBuilder,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  take,
  toBase64,
  toUtf8,
  v4_default,
  withBaseException
} from "./chunk-QZRTEARY.js";
import "./chunk-XU5PFWOA.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@aws-sdk/client-guardduty/dist-es/auth/httpAuthSchemeProvider.js
var defaultGuardDutyHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "guardduty",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultGuardDutyHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-guardduty/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "guardduty"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-guardduty/package.json
var package_default = {
  name: "@aws-sdk/client-guardduty",
  description: "AWS SDK for JavaScript Guardduty Client for Node.js, Browser and React Native",
  version: "3.726.1",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-guardduty",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo guardduty"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/client-sso-oidc": "3.726.0",
    "@aws-sdk/client-sts": "3.726.1",
    "@aws-sdk/core": "3.723.0",
    "@aws-sdk/credential-provider-node": "3.726.0",
    "@aws-sdk/middleware-host-header": "3.723.0",
    "@aws-sdk/middleware-logger": "3.723.0",
    "@aws-sdk/middleware-recursion-detection": "3.723.0",
    "@aws-sdk/middleware-user-agent": "3.726.0",
    "@aws-sdk/region-config-resolver": "3.723.0",
    "@aws-sdk/types": "3.723.0",
    "@aws-sdk/util-endpoints": "3.726.0",
    "@aws-sdk/util-user-agent-browser": "3.723.0",
    "@aws-sdk/util-user-agent-node": "3.726.0",
    "@smithy/config-resolver": "^4.0.0",
    "@smithy/core": "^3.0.0",
    "@smithy/fetch-http-handler": "^5.0.0",
    "@smithy/hash-node": "^4.0.0",
    "@smithy/invalid-dependency": "^4.0.0",
    "@smithy/middleware-content-length": "^4.0.0",
    "@smithy/middleware-endpoint": "^4.0.0",
    "@smithy/middleware-retry": "^4.0.0",
    "@smithy/middleware-serde": "^4.0.0",
    "@smithy/middleware-stack": "^4.0.0",
    "@smithy/node-config-provider": "^4.0.0",
    "@smithy/node-http-handler": "^4.0.0",
    "@smithy/protocol-http": "^5.0.0",
    "@smithy/smithy-client": "^4.0.0",
    "@smithy/types": "^4.0.0",
    "@smithy/url-parser": "^4.0.0",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.0",
    "@smithy/util-defaults-mode-node": "^4.0.0",
    "@smithy/util-endpoints": "^3.0.0",
    "@smithy/util-middleware": "^4.0.0",
    "@smithy/util-retry": "^4.0.0",
    "@smithy/util-utf8": "^4.0.0",
    "@types/uuid": "^9.0.1",
    tslib: "^2.6.2",
    uuid: "^9.0.1"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.2.2"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-guardduty",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-guardduty"
  }
};

// node_modules/@aws-sdk/client-guardduty/dist-es/endpoint/ruleset.js
var u = "required";
var v = "fn";
var w = "argv";
var x = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "getAttr";
var i = { [u]: false, "type": "String" };
var j = { [u]: true, "default": false, "type": "Boolean" };
var k = { [x]: "Endpoint" };
var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
var n = {};
var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
var p = { [x]: g };
var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
var r = [l];
var s = [m];
var t = [{ [x]: "Region" }];
var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://guardduty-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://guardduty.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://guardduty-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://guardduty.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://guardduty.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-guardduty/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-guardduty/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2017-11-28",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultGuardDutyHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "GuardDuty",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-guardduty/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-guardduty/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-guardduty/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-guardduty/dist-es/GuardDutyClient.js
var GuardDutyClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    __publicField(this, "config");
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultGuardDutyHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-guardduty/dist-es/models/GuardDutyServiceException.js
var GuardDutyServiceException = class _GuardDutyServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _GuardDutyServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-guardduty/dist-es/models/models_0.js
var BadRequestException = class _BadRequestException extends GuardDutyServiceException {
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "BadRequestException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    __publicField(this, "Type");
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
    this.Type = opts.Type;
  }
};
var InternalServerErrorException = class _InternalServerErrorException extends GuardDutyServiceException {
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "InternalServerErrorException");
    __publicField(this, "$fault", "server");
    __publicField(this, "Message");
    __publicField(this, "Type");
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
    this.Message = opts.Message;
    this.Type = opts.Type;
  }
};
var AccessDeniedException = class _AccessDeniedException extends GuardDutyServiceException {
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "AccessDeniedException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    __publicField(this, "Type");
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.Message = opts.Message;
    this.Type = opts.Type;
  }
};
var FreeTrialFeatureResult = {
  CLOUD_TRAIL: "CLOUD_TRAIL",
  DNS_LOGS: "DNS_LOGS",
  EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION",
  EC2_RUNTIME_MONITORING: "EC2_RUNTIME_MONITORING",
  EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS",
  EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING",
  FARGATE_RUNTIME_MONITORING: "FARGATE_RUNTIME_MONITORING",
  FLOW_LOGS: "FLOW_LOGS",
  LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS",
  RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var MfaStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AdminStatus = {
  DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS",
  ENABLED: "ENABLED"
};
var ProfileSubtype = {
  FREQUENT: "FREQUENT",
  INFREQUENT: "INFREQUENT",
  RARE: "RARE",
  UNSEEN: "UNSEEN"
};
var ProfileType = {
  FREQUENCY: "FREQUENCY"
};
var AutoEnableMembers = {
  ALL: "ALL",
  NEW: "NEW",
  NONE: "NONE"
};
var DataSourceStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ConflictException = class _ConflictException extends GuardDutyServiceException {
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConflictException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    __publicField(this, "Type");
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
    this.Type = opts.Type;
  }
};
var CoverageStatus = {
  HEALTHY: "HEALTHY",
  UNHEALTHY: "UNHEALTHY"
};
var ResourceType = {
  EC2: "EC2",
  ECS: "ECS",
  EKS: "EKS"
};
var ManagementType = {
  AUTO_MANAGED: "AUTO_MANAGED",
  DISABLED: "DISABLED",
  MANUAL: "MANUAL"
};
var CoverageFilterCriterionKey = {
  ACCOUNT_ID: "ACCOUNT_ID",
  ADDON_VERSION: "ADDON_VERSION",
  AGENT_VERSION: "AGENT_VERSION",
  CLUSTER_ARN: "CLUSTER_ARN",
  CLUSTER_NAME: "CLUSTER_NAME",
  COVERAGE_STATUS: "COVERAGE_STATUS",
  ECS_CLUSTER_NAME: "ECS_CLUSTER_NAME",
  EKS_CLUSTER_NAME: "EKS_CLUSTER_NAME",
  INSTANCE_ID: "INSTANCE_ID",
  MANAGEMENT_TYPE: "MANAGEMENT_TYPE",
  RESOURCE_TYPE: "RESOURCE_TYPE"
};
var CoverageSortKey = {
  ACCOUNT_ID: "ACCOUNT_ID",
  ADDON_VERSION: "ADDON_VERSION",
  CLUSTER_NAME: "CLUSTER_NAME",
  COVERAGE_STATUS: "COVERAGE_STATUS",
  ECS_CLUSTER_NAME: "ECS_CLUSTER_NAME",
  EKS_CLUSTER_NAME: "EKS_CLUSTER_NAME",
  INSTANCE_ID: "INSTANCE_ID",
  ISSUE: "ISSUE",
  UPDATED_AT: "UPDATED_AT"
};
var OrderBy = {
  ASC: "ASC",
  DESC: "DESC"
};
var CoverageStatisticsType = {
  COUNT_BY_COVERAGE_STATUS: "COUNT_BY_COVERAGE_STATUS",
  COUNT_BY_RESOURCE_TYPE: "COUNT_BY_RESOURCE_TYPE"
};
var FeatureAdditionalConfiguration = {
  EC2_AGENT_MANAGEMENT: "EC2_AGENT_MANAGEMENT",
  ECS_FARGATE_AGENT_MANAGEMENT: "ECS_FARGATE_AGENT_MANAGEMENT",
  EKS_ADDON_MANAGEMENT: "EKS_ADDON_MANAGEMENT"
};
var FeatureStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DetectorFeature = {
  EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION",
  EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS",
  EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING",
  LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS",
  RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS",
  RUNTIME_MONITORING: "RUNTIME_MONITORING",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var FindingPublishingFrequency = {
  FIFTEEN_MINUTES: "FIFTEEN_MINUTES",
  ONE_HOUR: "ONE_HOUR",
  SIX_HOURS: "SIX_HOURS"
};
var FilterAction = {
  ARCHIVE: "ARCHIVE",
  NOOP: "NOOP"
};
var IpSetFormat = {
  ALIEN_VAULT: "ALIEN_VAULT",
  FIRE_EYE: "FIRE_EYE",
  OTX_CSV: "OTX_CSV",
  PROOF_POINT: "PROOF_POINT",
  STIX: "STIX",
  TXT: "TXT"
};
var MalwareProtectionPlanTaggingActionStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DestinationType = {
  S3: "S3"
};
var ThreatIntelSetFormat = {
  ALIEN_VAULT: "ALIEN_VAULT",
  FIRE_EYE: "FIRE_EYE",
  OTX_CSV: "OTX_CSV",
  PROOF_POINT: "PROOF_POINT",
  STIX: "STIX",
  TXT: "TXT"
};
var CriterionKey = {
  ACCOUNT_ID: "ACCOUNT_ID",
  EC2_INSTANCE_ARN: "EC2_INSTANCE_ARN",
  GUARDDUTY_FINDING_ID: "GUARDDUTY_FINDING_ID",
  SCAN_ID: "SCAN_ID",
  SCAN_START_TIME: "SCAN_START_TIME",
  SCAN_STATUS: "SCAN_STATUS",
  SCAN_TYPE: "SCAN_TYPE"
};
var DataSource = {
  CLOUD_TRAIL: "CLOUD_TRAIL",
  DNS_LOGS: "DNS_LOGS",
  EC2_MALWARE_SCAN: "EC2_MALWARE_SCAN",
  FLOW_LOGS: "FLOW_LOGS",
  KUBERNETES_AUDIT_LOGS: "KUBERNETES_AUDIT_LOGS",
  S3_LOGS: "S3_LOGS"
};
var ResourceNotFoundException = class _ResourceNotFoundException extends GuardDutyServiceException {
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ResourceNotFoundException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    __publicField(this, "Type");
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
    this.Type = opts.Type;
  }
};
var ScanResult = {
  CLEAN: "CLEAN",
  INFECTED: "INFECTED"
};
var ScanStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  RUNNING: "RUNNING",
  SKIPPED: "SKIPPED"
};
var ScanType = {
  GUARDDUTY_INITIATED: "GUARDDUTY_INITIATED",
  ON_DEMAND: "ON_DEMAND"
};
var OrgFeatureStatus = {
  ALL: "ALL",
  NEW: "NEW",
  NONE: "NONE"
};
var OrgFeatureAdditionalConfiguration = {
  EC2_AGENT_MANAGEMENT: "EC2_AGENT_MANAGEMENT",
  ECS_FARGATE_AGENT_MANAGEMENT: "ECS_FARGATE_AGENT_MANAGEMENT",
  EKS_ADDON_MANAGEMENT: "EKS_ADDON_MANAGEMENT"
};
var OrgFeature = {
  EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION",
  EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS",
  EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING",
  LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS",
  RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS",
  RUNTIME_MONITORING: "RUNTIME_MONITORING",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var PublishingStatus = {
  PENDING_VERIFICATION: "PENDING_VERIFICATION",
  PUBLISHING: "PUBLISHING",
  STOPPED: "STOPPED",
  UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY: "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY"
};
var NetworkDirection = {
  INBOUND: "INBOUND",
  OUTBOUND: "OUTBOUND"
};
var PublicAccessStatus = {
  ALLOWED: "ALLOWED",
  BLOCKED: "BLOCKED"
};
var PublicAclIgnoreBehavior = {
  IGNORED: "IGNORED",
  NOT_IGNORED: "NOT_IGNORED"
};
var PublicBucketRestrictBehavior = {
  NOT_RESTRICTED: "NOT_RESTRICTED",
  RESTRICTED: "RESTRICTED"
};
var FindingResourceType = {
  ACCESS_KEY: "ACCESS_KEY",
  EC2_INSTANCE: "EC2_INSTANCE",
  EC2_NETWORK_INTERFACE: "EC2_NETWORK_INTERFACE",
  S3_BUCKET: "S3_BUCKET",
  S3_OBJECT: "S3_OBJECT"
};
var IndicatorType = {
  ATTACK_TACTIC: "ATTACK_TACTIC",
  ATTACK_TECHNIQUE: "ATTACK_TECHNIQUE",
  HIGH_RISK_API: "HIGH_RISK_API",
  MALICIOUS_IP: "MALICIOUS_IP",
  SUSPICIOUS_NETWORK: "SUSPICIOUS_NETWORK",
  SUSPICIOUS_USER_AGENT: "SUSPICIOUS_USER_AGENT",
  TOR_IP: "TOR_IP",
  UNUSUAL_API_FOR_ACCOUNT: "UNUSUAL_API_FOR_ACCOUNT",
  UNUSUAL_ASN_FOR_ACCOUNT: "UNUSUAL_ASN_FOR_ACCOUNT",
  UNUSUAL_ASN_FOR_USER: "UNUSUAL_ASN_FOR_USER"
};
var SignalType = {
  CLOUD_TRAIL: "CLOUD_TRAIL",
  FINDING: "FINDING",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var DetectorFeatureResult = {
  CLOUD_TRAIL: "CLOUD_TRAIL",
  DNS_LOGS: "DNS_LOGS",
  EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION",
  EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS",
  EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING",
  FLOW_LOGS: "FLOW_LOGS",
  LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS",
  RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS",
  RUNTIME_MONITORING: "RUNTIME_MONITORING",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var DetectorStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var EbsSnapshotPreservation = {
  NO_RETENTION: "NO_RETENTION",
  RETENTION_WITH_FINDING: "RETENTION_WITH_FINDING"
};
var Feedback = {
  NOT_USEFUL: "NOT_USEFUL",
  USEFUL: "USEFUL"
};
var FindingStatisticType = {
  COUNT_BY_SEVERITY: "COUNT_BY_SEVERITY"
};
var GroupByType = {
  ACCOUNT: "ACCOUNT",
  DATE: "DATE",
  FINDING_TYPE: "FINDING_TYPE",
  RESOURCE: "RESOURCE",
  SEVERITY: "SEVERITY"
};
var AccountDetailFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Email && { Email: SENSITIVE_STRING }
});
var RemoteIpDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.IpAddressV4 && { IpAddressV4: SENSITIVE_STRING },
  ...obj.IpAddressV6 && { IpAddressV6: SENSITIVE_STRING }
});
var AwsApiCallActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.RemoteIpDetails && { RemoteIpDetails: RemoteIpDetailsFilterSensitiveLog(obj.RemoteIpDetails) }
});
var KubernetesApiCallActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.RemoteIpDetails && { RemoteIpDetails: RemoteIpDetailsFilterSensitiveLog(obj.RemoteIpDetails) }
});
var LocalIpDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.IpAddressV4 && { IpAddressV4: SENSITIVE_STRING },
  ...obj.IpAddressV6 && { IpAddressV6: SENSITIVE_STRING }
});
var NetworkConnectionActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LocalIpDetails && { LocalIpDetails: LocalIpDetailsFilterSensitiveLog(obj.LocalIpDetails) },
  ...obj.RemoteIpDetails && { RemoteIpDetails: RemoteIpDetailsFilterSensitiveLog(obj.RemoteIpDetails) }
});
var PortProbeDetailFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LocalIpDetails && { LocalIpDetails: LocalIpDetailsFilterSensitiveLog(obj.LocalIpDetails) },
  ...obj.RemoteIpDetails && { RemoteIpDetails: RemoteIpDetailsFilterSensitiveLog(obj.RemoteIpDetails) }
});
var PortProbeActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PortProbeDetails && {
    PortProbeDetails: obj.PortProbeDetails.map((item) => PortProbeDetailFilterSensitiveLog(item))
  }
});
var RdsLoginAttemptActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.RemoteIpDetails && { RemoteIpDetails: RemoteIpDetailsFilterSensitiveLog(obj.RemoteIpDetails) }
});
var ActionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AwsApiCallAction && { AwsApiCallAction: AwsApiCallActionFilterSensitiveLog(obj.AwsApiCallAction) },
  ...obj.NetworkConnectionAction && {
    NetworkConnectionAction: NetworkConnectionActionFilterSensitiveLog(obj.NetworkConnectionAction)
  },
  ...obj.PortProbeAction && { PortProbeAction: PortProbeActionFilterSensitiveLog(obj.PortProbeAction) },
  ...obj.KubernetesApiCallAction && {
    KubernetesApiCallAction: KubernetesApiCallActionFilterSensitiveLog(obj.KubernetesApiCallAction)
  },
  ...obj.RdsLoginAttemptAction && {
    RdsLoginAttemptAction: RdsLoginAttemptActionFilterSensitiveLog(obj.RdsLoginAttemptAction)
  }
});
var CreateMembersRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AccountDetails && {
    AccountDetails: obj.AccountDetails.map((item) => AccountDetailFilterSensitiveLog(item))
  }
});
var PrivateIpAddressDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PrivateIpAddress && { PrivateIpAddress: SENSITIVE_STRING }
});
var Ec2NetworkInterfaceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PrivateIpAddresses && {
    PrivateIpAddresses: obj.PrivateIpAddresses.map((item) => PrivateIpAddressDetailsFilterSensitiveLog(item))
  }
});
var ResourceDataFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Ec2NetworkInterface && {
    Ec2NetworkInterface: Ec2NetworkInterfaceFilterSensitiveLog(obj.Ec2NetworkInterface)
  }
});
var ResourceV2FilterSensitiveLog = (obj) => ({
  ...obj
});
var SequenceFilterSensitiveLog = (obj) => ({
  ...obj
});
var DetectionFilterSensitiveLog = (obj) => ({
  ...obj
});
var NetworkInterfaceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PrivateIpAddress && { PrivateIpAddress: SENSITIVE_STRING },
  ...obj.PrivateIpAddresses && {
    PrivateIpAddresses: obj.PrivateIpAddresses.map((item) => PrivateIpAddressDetailsFilterSensitiveLog(item))
  }
});
var InstanceDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.NetworkInterfaces && {
    NetworkInterfaces: obj.NetworkInterfaces.map((item) => NetworkInterfaceFilterSensitiveLog(item))
  }
});
var ResourceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.InstanceDetails && { InstanceDetails: InstanceDetailsFilterSensitiveLog(obj.InstanceDetails) }
});
var ServiceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Action && { Action: ActionFilterSensitiveLog(obj.Action) }
});
var FindingFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }
});
var GetFindingsResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Findings && { Findings: obj.Findings.map((item) => FindingFilterSensitiveLog(item)) }
});

// node_modules/@aws-sdk/client-guardduty/dist-es/protocols/Aws_restJson1.js
var se_AcceptAdministratorInvitationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/administrator");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    administratorId: [, , `AdministratorId`],
    invitationId: [, , `InvitationId`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_AcceptInvitationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/master");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    invitationId: [, , `InvitationId`],
    masterId: [, , `MasterId`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ArchiveFindingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/archive");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingIds: [, (_) => _json(_), `FindingIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateDetectorCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector");
  let body;
  body = JSON.stringify(take(input, {
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
    enable: [, , `Enable`],
    features: [, (_) => se_DetectorFeatureConfigurations(_, context), `Features`],
    findingPublishingFrequency: [, , `FindingPublishingFrequency`],
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateFilterCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/filter");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    action: [, , `Action`],
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    description: [, , `Description`],
    findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
    name: [, , `Name`],
    rank: [, , `Rank`],
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateIPSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/ipset");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    activate: [, , `Activate`],
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    format: [, , `Format`],
    location: [, , `Location`],
    name: [, , `Name`],
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateMalwareProtectionPlanCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/malware-protection-plan");
  let body;
  body = JSON.stringify(take(input, {
    actions: [, (_) => se_MalwareProtectionPlanActions(_, context), `Actions`],
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    protectedResource: [, (_) => se_CreateProtectedResource(_, context), `ProtectedResource`],
    role: [, , `Role`],
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountDetails: [, (_) => se_AccountDetails(_, context), `AccountDetails`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreatePublishingDestinationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/publishingDestination");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    destinationProperties: [, (_) => se_DestinationProperties(_, context), `DestinationProperties`],
    destinationType: [, , `DestinationType`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateSampleFindingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/create");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingTypes: [, (_) => _json(_), `FindingTypes`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateThreatIntelSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/threatintelset");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    activate: [, , `Activate`],
    clientToken: [true, (_) => _ ?? v4_default(), `ClientToken`],
    format: [, , `Format`],
    location: [, , `Location`],
    name: [, , `Name`],
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeclineInvitationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/invitation/decline");
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeleteDetectorCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteFilterCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/filter/{FilterName}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("FilterName", () => input.FilterName, "{FilterName}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteInvitationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/invitation/delete");
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeleteIPSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/ipset/{IpSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteMalwareProtectionPlanCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/malware-protection-plan/{MalwareProtectionPlanId}");
  b2.p("MalwareProtectionPlanId", () => input.MalwareProtectionPlanId, "{MalwareProtectionPlanId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/delete");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeletePublishingDestinationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteThreatIntelSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DescribeMalwareScansCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/malware-scans");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    filterCriteria: [, (_) => se_FilterCriteria(_, context), `FilterCriteria`],
    maxResults: [, , `MaxResults`],
    nextToken: [, , `NextToken`],
    sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DescribeOrganizationConfigurationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/admin");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_DescribePublishingDestinationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_DisableOrganizationAdminAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/admin/disable");
  let body;
  body = JSON.stringify(take(input, {
    adminAccountId: [, , `AdminAccountId`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DisassociateFromAdministratorAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/administrator/disassociate");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DisassociateFromMasterAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/master/disassociate");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DisassociateMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/disassociate");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_EnableOrganizationAdminAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/admin/enable");
  let body;
  body = JSON.stringify(take(input, {
    adminAccountId: [, , `AdminAccountId`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetAdministratorAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/administrator");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCoverageStatisticsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/coverage/statistics");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    filterCriteria: [, (_) => se_CoverageFilterCriteria(_, context), `FilterCriteria`],
    statisticsType: [, (_) => _json(_), `StatisticsType`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetDetectorCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFilterCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/filter/{FilterName}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("FilterName", () => input.FilterName, "{FilterName}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFindingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/get");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingIds: [, (_) => _json(_), `FindingIds`],
    sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetFindingsStatisticsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/statistics");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
    findingStatisticTypes: [, (_) => _json(_), `FindingStatisticTypes`],
    groupBy: [, , `GroupBy`],
    maxResults: [, , `MaxResults`],
    orderBy: [, , `OrderBy`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetInvitationsCountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/invitation/count");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetIPSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/ipset/{IpSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetMalwareProtectionPlanCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/malware-protection-plan/{MalwareProtectionPlanId}");
  b2.p("MalwareProtectionPlanId", () => input.MalwareProtectionPlanId, "{MalwareProtectionPlanId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetMalwareScanSettingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/malware-scan-settings");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetMasterAccountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/master");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetMemberDetectorsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/detector/get");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/get");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetOrganizationStatisticsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/organization/statistics");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetRemainingFreeTrialDaysCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/freeTrial/daysRemaining");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetThreatIntelSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetUsageStatisticsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/usage/statistics");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    maxResults: [, , `MaxResults`],
    nextToken: [, , `NextToken`],
    unit: [, , `Unit`],
    usageCriteria: [, (_) => se_UsageCriteria(_, context), `UsageCriteria`],
    usageStatisticsType: [, , `UsageStatisticType`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_InviteMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/invite");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`],
    disableEmailNotification: [, , `DisableEmailNotification`],
    message: [, , `Message`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListCoverageCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/coverage");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    filterCriteria: [, (_) => se_CoverageFilterCriteria(_, context), `FilterCriteria`],
    maxResults: [, , `MaxResults`],
    nextToken: [, , `NextToken`],
    sortCriteria: [, (_) => se_CoverageSortCriteria(_, context), `SortCriteria`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListDetectorsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector");
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListFiltersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/filter");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListFindingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
    maxResults: [, , `MaxResults`],
    nextToken: [, , `NextToken`],
    sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListInvitationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/invitation");
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListIPSetsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/ipset");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListMalwareProtectionPlansCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/malware-protection-plan");
  const query = map({
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/member");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_oA]: [, input[_OA]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListOrganizationAdminAccountsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/admin");
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListPublishingDestinationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/publishingDestination");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/tags/{ResourceArn}");
  b2.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_ListThreatIntelSetsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/detector/{DetectorId}/threatintelset");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  const query = map({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_StartMalwareScanCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/malware-scan/start");
  let body;
  body = JSON.stringify(take(input, {
    resourceArn: [, , `ResourceArn`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartMonitoringMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/start");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StopMonitoringMembersCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/stop");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_TagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/tags/{ResourceArn}");
  b2.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(take(input, {
    tags: [, (_) => _json(_), `Tags`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UnarchiveFindingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/unarchive");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    findingIds: [, (_) => _json(_), `FindingIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UntagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/tags/{ResourceArn}");
  b2.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = map({
    [_tK]: [expectNonNull(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []]
  });
  let body;
  b2.m("DELETE").h(headers).q(query).b(body);
  return b2.build();
};
var se_UpdateDetectorCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
    enable: [, , `Enable`],
    features: [, (_) => se_DetectorFeatureConfigurations(_, context), `Features`],
    findingPublishingFrequency: [, , `FindingPublishingFrequency`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateFilterCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/filter/{FilterName}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("FilterName", () => input.FilterName, "{FilterName}", false);
  let body;
  body = JSON.stringify(take(input, {
    action: [, , `Action`],
    description: [, , `Description`],
    findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
    rank: [, , `Rank`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateFindingsFeedbackCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/findings/feedback");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    comments: [, , `Comments`],
    feedback: [, , `Feedback`],
    findingIds: [, (_) => _json(_), `FindingIds`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateIPSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/ipset/{IpSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
  let body;
  body = JSON.stringify(take(input, {
    activate: [, , `Activate`],
    location: [, , `Location`],
    name: [, , `Name`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateMalwareProtectionPlanCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/malware-protection-plan/{MalwareProtectionPlanId}");
  b2.p("MalwareProtectionPlanId", () => input.MalwareProtectionPlanId, "{MalwareProtectionPlanId}", false);
  let body;
  body = JSON.stringify(take(input, {
    actions: [, (_) => se_MalwareProtectionPlanActions(_, context), `Actions`],
    protectedResource: [, (_) => se_UpdateProtectedResource(_, context), `ProtectedResource`],
    role: [, , `Role`]
  }));
  b2.m("PATCH").h(headers).b(body);
  return b2.build();
};
var se_UpdateMalwareScanSettingsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/malware-scan-settings");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    ebsSnapshotPreservation: [, , `EbsSnapshotPreservation`],
    scanResourceCriteria: [, (_) => se_ScanResourceCriteria(_, context), `ScanResourceCriteria`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateMemberDetectorsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/member/detector/update");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    accountIds: [, (_) => _json(_), `AccountIds`],
    dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
    features: [, (_) => se_MemberFeaturesConfigurations(_, context), `Features`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateOrganizationConfigurationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/admin");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  let body;
  body = JSON.stringify(take(input, {
    autoEnable: [, , `AutoEnable`],
    autoEnableOrganizationMembers: [, , `AutoEnableOrganizationMembers`],
    dataSources: [, (_) => se_OrganizationDataSourceConfigurations(_, context), `DataSources`],
    features: [, (_) => se_OrganizationFeaturesConfigurations(_, context), `Features`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdatePublishingDestinationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
  let body;
  body = JSON.stringify(take(input, {
    destinationProperties: [, (_) => se_DestinationProperties(_, context), `DestinationProperties`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateThreatIntelSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
  b2.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
  b2.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
  let body;
  body = JSON.stringify(take(input, {
    activate: [, , `Activate`],
    location: [, , `Location`],
    name: [, , `Name`]
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_AcceptAdministratorInvitationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_AcceptInvitationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_ArchiveFindingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_CreateDetectorCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    DetectorId: [, expectString, `detectorId`],
    UnprocessedDataSources: [, (_) => de_UnprocessedDataSourcesResult(_, context), `unprocessedDataSources`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateFilterCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Name: [, expectString, `name`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateIPSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    IpSetId: [, expectString, `ipSetId`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateMalwareProtectionPlanCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    MalwareProtectionPlanId: [, expectString, `malwareProtectionPlanId`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreatePublishingDestinationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    DestinationId: [, expectString, `destinationId`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CreateSampleFindingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_CreateThreatIntelSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    ThreatIntelSetId: [, expectString, `threatIntelSetId`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeclineInvitationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteDetectorCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteFilterCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteInvitationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeleteIPSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteMalwareProtectionPlanCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DeletePublishingDestinationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteThreatIntelSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DescribeMalwareScansCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    NextToken: [, expectString, `nextToken`],
    Scans: [, (_) => de_Scans(_, context), `scans`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DescribeOrganizationConfigurationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    AutoEnable: [, expectBoolean, `autoEnable`],
    AutoEnableOrganizationMembers: [, expectString, `autoEnableOrganizationMembers`],
    DataSources: [, (_) => de_OrganizationDataSourceConfigurationsResult(_, context), `dataSources`],
    Features: [, (_) => de_OrganizationFeaturesConfigurationsResults(_, context), `features`],
    MemberAccountLimitReached: [, expectBoolean, `memberAccountLimitReached`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DescribePublishingDestinationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    DestinationId: [, expectString, `destinationId`],
    DestinationProperties: [, (_) => de_DestinationProperties(_, context), `destinationProperties`],
    DestinationType: [, expectString, `destinationType`],
    PublishingFailureStartTimestamp: [, expectLong, `publishingFailureStartTimestamp`],
    Status: [, expectString, `status`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_DisableOrganizationAdminAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DisassociateFromAdministratorAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DisassociateFromMasterAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DisassociateMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_EnableOrganizationAdminAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_GetAdministratorAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Administrator: [, (_) => de_Administrator(_, context), `administrator`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetCoverageStatisticsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    CoverageStatistics: [, (_) => de_CoverageStatistics(_, context), `coverageStatistics`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetDetectorCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    CreatedAt: [, expectString, `createdAt`],
    DataSources: [, (_) => de_DataSourceConfigurationsResult(_, context), `dataSources`],
    Features: [, (_) => de_DetectorFeatureConfigurationsResults(_, context), `features`],
    FindingPublishingFrequency: [, expectString, `findingPublishingFrequency`],
    ServiceRole: [, expectString, `serviceRole`],
    Status: [, expectString, `status`],
    Tags: [, _json, `tags`],
    UpdatedAt: [, expectString, `updatedAt`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetFilterCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Action: [, expectString, `action`],
    Description: [, expectString, `description`],
    FindingCriteria: [, (_) => de_FindingCriteria(_, context), `findingCriteria`],
    Name: [, expectString, `name`],
    Rank: [, expectInt32, `rank`],
    Tags: [, _json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetFindingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Findings: [, (_) => de_Findings(_, context), `findings`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetFindingsStatisticsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    FindingStatistics: [, (_) => de_FindingStatistics(_, context), `findingStatistics`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetInvitationsCountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    InvitationsCount: [, expectInt32, `invitationsCount`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetIPSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Format: [, expectString, `format`],
    Location: [, expectString, `location`],
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    Tags: [, _json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetMalwareProtectionPlanCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Actions: [, (_) => de_MalwareProtectionPlanActions(_, context), `actions`],
    Arn: [, expectString, `arn`],
    CreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    ProtectedResource: [, (_) => de_CreateProtectedResource(_, context), `protectedResource`],
    Role: [, expectString, `role`],
    Status: [, expectString, `status`],
    StatusReasons: [, (_) => de_MalwareProtectionPlanStatusReasonsList(_, context), `statusReasons`],
    Tags: [, _json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetMalwareScanSettingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    EbsSnapshotPreservation: [, expectString, `ebsSnapshotPreservation`],
    ScanResourceCriteria: [, (_) => de_ScanResourceCriteria(_, context), `scanResourceCriteria`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetMasterAccountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Master: [, (_) => de_Master(_, context), `master`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetMemberDetectorsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    MemberDataSourceConfigurations: [, (_) => de_MemberDataSourceConfigurations(_, context), `members`],
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Members: [, (_) => de_Members(_, context), `members`],
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetOrganizationStatisticsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    OrganizationDetails: [, (_) => de_OrganizationDetails(_, context), `organizationDetails`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetRemainingFreeTrialDaysCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Accounts: [, (_) => de_AccountFreeTrialInfos(_, context), `accounts`],
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetThreatIntelSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Format: [, expectString, `format`],
    Location: [, expectString, `location`],
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    Tags: [, _json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetUsageStatisticsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    NextToken: [, expectString, `nextToken`],
    UsageStatistics: [, (_) => de_UsageStatistics(_, context), `usageStatistics`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_InviteMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListCoverageCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    NextToken: [, expectString, `nextToken`],
    Resources: [, (_) => de_CoverageResources(_, context), `resources`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListDetectorsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    DetectorIds: [, _json, `detectorIds`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListFiltersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    FilterNames: [, _json, `filterNames`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListFindingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    FindingIds: [, _json, `findingIds`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListInvitationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Invitations: [, (_) => de_Invitations(_, context), `invitations`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListIPSetsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    IpSetIds: [, _json, `ipSetIds`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListMalwareProtectionPlansCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    MalwareProtectionPlans: [, (_) => de_MalwareProtectionPlansSummary(_, context), `malwareProtectionPlans`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Members: [, (_) => de_Members(_, context), `members`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListOrganizationAdminAccountsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    AdminAccounts: [, (_) => de_AdminAccounts(_, context), `adminAccounts`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListPublishingDestinationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Destinations: [, (_) => de_Destinations(_, context), `destinations`],
    NextToken: [, expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Tags: [, _json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ListThreatIntelSetsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    NextToken: [, expectString, `nextToken`],
    ThreatIntelSetIds: [, _json, `threatIntelSetIds`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartMalwareScanCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    ScanId: [, expectString, `scanId`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartMonitoringMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StopMonitoringMembersCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UnarchiveFindingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateDetectorCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateFilterCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    Name: [, expectString, `name`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateFindingsFeedbackCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateIPSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateMalwareProtectionPlanCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateMalwareScanSettingsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateMemberDetectorsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`]
  });
  Object.assign(contents, doc);
  return contents;
};
var de_UpdateOrganizationConfigurationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdatePublishingDestinationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateThreatIntelSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.guardduty#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.guardduty#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "AccessDeniedException":
    case "com.amazonaws.guardduty#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.guardduty#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.guardduty#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(GuardDutyServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: [, expectString, `message`],
    Type: [, expectString, `__type`]
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_BadRequestExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: [, expectString, `message`],
    Type: [, expectString, `__type`]
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: [, expectString, `message`],
    Type: [, expectString, `__type`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: [, expectString, `message`],
    Type: [, expectString, `__type`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: [, expectString, `message`],
    Type: [, expectString, `__type`]
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var se_AccountDetail = (input, context) => {
  return take(input, {
    accountId: [, , `AccountId`],
    email: [, , `Email`]
  });
};
var se_AccountDetails = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_AccountDetail(entry, context);
  });
};
var se_Condition = (input, context) => {
  return take(input, {
    eq: [, _json, `Eq`],
    equals: [, _json, `Equals`],
    greaterThan: [, , `GreaterThan`],
    greaterThanOrEqual: [, , `GreaterThanOrEqual`],
    gt: [, , `Gt`],
    gte: [, , `Gte`],
    lessThan: [, , `LessThan`],
    lessThanOrEqual: [, , `LessThanOrEqual`],
    lt: [, , `Lt`],
    lte: [, , `Lte`],
    neq: [, _json, `Neq`],
    notEquals: [, _json, `NotEquals`]
  });
};
var se_CoverageFilterCondition = (input, context) => {
  return take(input, {
    equals: [, _json, `Equals`],
    notEquals: [, _json, `NotEquals`]
  });
};
var se_CoverageFilterCriteria = (input, context) => {
  return take(input, {
    filterCriterion: [, (_) => se_CoverageFilterCriterionList(_, context), `FilterCriterion`]
  });
};
var se_CoverageFilterCriterion = (input, context) => {
  return take(input, {
    criterionKey: [, , `CriterionKey`],
    filterCondition: [, (_) => se_CoverageFilterCondition(_, context), `FilterCondition`]
  });
};
var se_CoverageFilterCriterionList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_CoverageFilterCriterion(entry, context);
  });
};
var se_CoverageSortCriteria = (input, context) => {
  return take(input, {
    attributeName: [, , `AttributeName`],
    orderBy: [, , `OrderBy`]
  });
};
var se_CreateProtectedResource = (input, context) => {
  return take(input, {
    s3Bucket: [, (_) => se_CreateS3BucketResource(_, context), `S3Bucket`]
  });
};
var se_CreateS3BucketResource = (input, context) => {
  return take(input, {
    bucketName: [, , `BucketName`],
    objectPrefixes: [, _json, `ObjectPrefixes`]
  });
};
var se_Criterion = (input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_Condition(value, context);
    return acc;
  }, {});
};
var se_DataSourceConfigurations = (input, context) => {
  return take(input, {
    kubernetes: [, (_) => se_KubernetesConfiguration(_, context), `Kubernetes`],
    malwareProtection: [, (_) => se_MalwareProtectionConfiguration(_, context), `MalwareProtection`],
    s3Logs: [, (_) => se_S3LogsConfiguration(_, context), `S3Logs`]
  });
};
var se_DestinationProperties = (input, context) => {
  return take(input, {
    destinationArn: [, , `DestinationArn`],
    kmsKeyArn: [, , `KmsKeyArn`]
  });
};
var se_DetectorAdditionalConfiguration = (input, context) => {
  return take(input, {
    name: [, , `Name`],
    status: [, , `Status`]
  });
};
var se_DetectorAdditionalConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_DetectorAdditionalConfiguration(entry, context);
  });
};
var se_DetectorFeatureConfiguration = (input, context) => {
  return take(input, {
    additionalConfiguration: [, (_) => se_DetectorAdditionalConfigurations(_, context), `AdditionalConfiguration`],
    name: [, , `Name`],
    status: [, , `Status`]
  });
};
var se_DetectorFeatureConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_DetectorFeatureConfiguration(entry, context);
  });
};
var se_FilterCondition = (input, context) => {
  return take(input, {
    equalsValue: [, , `EqualsValue`],
    greaterThan: [, , `GreaterThan`],
    lessThan: [, , `LessThan`]
  });
};
var se_FilterCriteria = (input, context) => {
  return take(input, {
    filterCriterion: [, (_) => se_FilterCriterionList(_, context), `FilterCriterion`]
  });
};
var se_FilterCriterion = (input, context) => {
  return take(input, {
    criterionKey: [, , `CriterionKey`],
    filterCondition: [, (_) => se_FilterCondition(_, context), `FilterCondition`]
  });
};
var se_FilterCriterionList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_FilterCriterion(entry, context);
  });
};
var se_FindingCriteria = (input, context) => {
  return take(input, {
    criterion: [, (_) => se_Criterion(_, context), `Criterion`]
  });
};
var se_KubernetesAuditLogsConfiguration = (input, context) => {
  return take(input, {
    enable: [, , `Enable`]
  });
};
var se_KubernetesConfiguration = (input, context) => {
  return take(input, {
    auditLogs: [, (_) => se_KubernetesAuditLogsConfiguration(_, context), `AuditLogs`]
  });
};
var se_MalwareProtectionConfiguration = (input, context) => {
  return take(input, {
    scanEc2InstanceWithFindings: [, (_) => se_ScanEc2InstanceWithFindings(_, context), `ScanEc2InstanceWithFindings`]
  });
};
var se_MalwareProtectionPlanActions = (input, context) => {
  return take(input, {
    tagging: [, (_) => se_MalwareProtectionPlanTaggingAction(_, context), `Tagging`]
  });
};
var se_MalwareProtectionPlanTaggingAction = (input, context) => {
  return take(input, {
    status: [, , `Status`]
  });
};
var se_MapEquals = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_ScanConditionPair(entry, context);
  });
};
var se_MemberAdditionalConfiguration = (input, context) => {
  return take(input, {
    name: [, , `Name`],
    status: [, , `Status`]
  });
};
var se_MemberAdditionalConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_MemberAdditionalConfiguration(entry, context);
  });
};
var se_MemberFeaturesConfiguration = (input, context) => {
  return take(input, {
    additionalConfiguration: [, (_) => se_MemberAdditionalConfigurations(_, context), `AdditionalConfiguration`],
    name: [, , `Name`],
    status: [, , `Status`]
  });
};
var se_MemberFeaturesConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_MemberFeaturesConfiguration(entry, context);
  });
};
var se_OrganizationAdditionalConfiguration = (input, context) => {
  return take(input, {
    autoEnable: [, , `AutoEnable`],
    name: [, , `Name`]
  });
};
var se_OrganizationAdditionalConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_OrganizationAdditionalConfiguration(entry, context);
  });
};
var se_OrganizationDataSourceConfigurations = (input, context) => {
  return take(input, {
    kubernetes: [, (_) => se_OrganizationKubernetesConfiguration(_, context), `Kubernetes`],
    malwareProtection: [, (_) => se_OrganizationMalwareProtectionConfiguration(_, context), `MalwareProtection`],
    s3Logs: [, (_) => se_OrganizationS3LogsConfiguration(_, context), `S3Logs`]
  });
};
var se_OrganizationEbsVolumes = (input, context) => {
  return take(input, {
    autoEnable: [, , `AutoEnable`]
  });
};
var se_OrganizationFeatureConfiguration = (input, context) => {
  return take(input, {
    additionalConfiguration: [, (_) => se_OrganizationAdditionalConfigurations(_, context), `AdditionalConfiguration`],
    autoEnable: [, , `AutoEnable`],
    name: [, , `Name`]
  });
};
var se_OrganizationFeaturesConfigurations = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_OrganizationFeatureConfiguration(entry, context);
  });
};
var se_OrganizationKubernetesAuditLogsConfiguration = (input, context) => {
  return take(input, {
    autoEnable: [, , `AutoEnable`]
  });
};
var se_OrganizationKubernetesConfiguration = (input, context) => {
  return take(input, {
    auditLogs: [, (_) => se_OrganizationKubernetesAuditLogsConfiguration(_, context), `AuditLogs`]
  });
};
var se_OrganizationMalwareProtectionConfiguration = (input, context) => {
  return take(input, {
    scanEc2InstanceWithFindings: [
      ,
      (_) => se_OrganizationScanEc2InstanceWithFindings(_, context),
      `ScanEc2InstanceWithFindings`
    ]
  });
};
var se_OrganizationS3LogsConfiguration = (input, context) => {
  return take(input, {
    autoEnable: [, , `AutoEnable`]
  });
};
var se_OrganizationScanEc2InstanceWithFindings = (input, context) => {
  return take(input, {
    ebsVolumes: [, (_) => se_OrganizationEbsVolumes(_, context), `EbsVolumes`]
  });
};
var se_S3LogsConfiguration = (input, context) => {
  return take(input, {
    enable: [, , `Enable`]
  });
};
var se_ScanCondition = (input, context) => {
  return take(input, {
    mapEquals: [, (_) => se_MapEquals(_, context), `MapEquals`]
  });
};
var se_ScanConditionPair = (input, context) => {
  return take(input, {
    key: [, , `Key`],
    value: [, , `Value`]
  });
};
var se_ScanCriterion = (input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_ScanCondition(value, context);
    return acc;
  }, {});
};
var se_ScanEc2InstanceWithFindings = (input, context) => {
  return take(input, {
    ebsVolumes: [, , `EbsVolumes`]
  });
};
var se_ScanResourceCriteria = (input, context) => {
  return take(input, {
    exclude: [, (_) => se_ScanCriterion(_, context), `Exclude`],
    include: [, (_) => se_ScanCriterion(_, context), `Include`]
  });
};
var se_SortCriteria = (input, context) => {
  return take(input, {
    attributeName: [, , `AttributeName`],
    orderBy: [, , `OrderBy`]
  });
};
var se_UpdateProtectedResource = (input, context) => {
  return take(input, {
    s3Bucket: [, (_) => se_UpdateS3BucketResource(_, context), `S3Bucket`]
  });
};
var se_UpdateS3BucketResource = (input, context) => {
  return take(input, {
    objectPrefixes: [, _json, `ObjectPrefixes`]
  });
};
var se_UsageCriteria = (input, context) => {
  return take(input, {
    accountIds: [, _json, `AccountIds`],
    dataSources: [, _json, `DataSources`],
    features: [, _json, `Features`],
    resources: [, _json, `Resources`]
  });
};
var de_AccessControlList = (output, context) => {
  return take(output, {
    AllowsPublicReadAccess: [, expectBoolean, `allowsPublicReadAccess`],
    AllowsPublicWriteAccess: [, expectBoolean, `allowsPublicWriteAccess`]
  });
};
var de_AccessKey = (output, context) => {
  return take(output, {
    PrincipalId: [, expectString, `principalId`],
    UserName: [, expectString, `userName`],
    UserType: [, expectString, `userType`]
  });
};
var de_AccessKeyDetails = (output, context) => {
  return take(output, {
    AccessKeyId: [, expectString, `accessKeyId`],
    PrincipalId: [, expectString, `principalId`],
    UserName: [, expectString, `userName`],
    UserType: [, expectString, `userType`]
  });
};
var de_Account = (output, context) => {
  return take(output, {
    Name: [, expectString, `account`],
    Uid: [, expectString, `uid`]
  });
};
var de_AccountFreeTrialInfo = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    DataSources: [, (_) => de_DataSourcesFreeTrial(_, context), `dataSources`],
    Features: [, (_) => de_FreeTrialFeatureConfigurationsResults(_, context), `features`]
  });
};
var de_AccountFreeTrialInfos = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccountFreeTrialInfo(entry, context);
  });
  return retVal;
};
var de_AccountLevelPermissions = (output, context) => {
  return take(output, {
    BlockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`]
  });
};
var de_AccountStatistics = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    LastGeneratedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastGeneratedAt`],
    TotalFindings: [, expectInt32, `totalFindings`]
  });
};
var de_Action = (output, context) => {
  return take(output, {
    ActionType: [, expectString, `actionType`],
    AwsApiCallAction: [, (_) => de_AwsApiCallAction(_, context), `awsApiCallAction`],
    DnsRequestAction: [, (_) => de_DnsRequestAction(_, context), `dnsRequestAction`],
    KubernetesApiCallAction: [, (_) => de_KubernetesApiCallAction(_, context), `kubernetesApiCallAction`],
    KubernetesPermissionCheckedDetails: [
      ,
      (_) => de_KubernetesPermissionCheckedDetails(_, context),
      `kubernetesPermissionCheckedDetails`
    ],
    KubernetesRoleBindingDetails: [
      ,
      (_) => de_KubernetesRoleBindingDetails(_, context),
      `kubernetesRoleBindingDetails`
    ],
    KubernetesRoleDetails: [, (_) => de_KubernetesRoleDetails(_, context), `kubernetesRoleDetails`],
    NetworkConnectionAction: [, (_) => de_NetworkConnectionAction(_, context), `networkConnectionAction`],
    PortProbeAction: [, (_) => de_PortProbeAction(_, context), `portProbeAction`],
    RdsLoginAttemptAction: [, (_) => de_RdsLoginAttemptAction(_, context), `rdsLoginAttemptAction`]
  });
};
var de_Actor = (output, context) => {
  return take(output, {
    Id: [, expectString, `id`],
    Session: [, (_) => de_Session(_, context), `session`],
    User: [, (_) => de_User(_, context), `user`]
  });
};
var de_Actors = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Actor(entry, context);
  });
  return retVal;
};
var de_AddonDetails = (output, context) => {
  return take(output, {
    AddonStatus: [, expectString, `addonStatus`],
    AddonVersion: [, expectString, `addonVersion`]
  });
};
var de_AdminAccount = (output, context) => {
  return take(output, {
    AdminAccountId: [, expectString, `adminAccountId`],
    AdminStatus: [, expectString, `adminStatus`]
  });
};
var de_AdminAccounts = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AdminAccount(entry, context);
  });
  return retVal;
};
var de_Administrator = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    InvitationId: [, expectString, `invitationId`],
    InvitedAt: [, expectString, `invitedAt`],
    RelationshipStatus: [, expectString, `relationshipStatus`]
  });
};
var de_AgentDetails = (output, context) => {
  return take(output, {
    Version: [, expectString, `version`]
  });
};
var de_Anomaly = (output, context) => {
  return take(output, {
    Profiles: [, (_) => de_AnomalyProfiles(_, context), `profiles`],
    Unusual: [, (_) => de_AnomalyUnusual(_, context), `unusual`]
  });
};
var de_AnomalyObject = (output, context) => {
  return take(output, {
    Observations: [, (_) => de_Observations(_, context), `observations`],
    ProfileSubtype: [, expectString, `profileSubtype`],
    ProfileType: [, expectString, `profileType`]
  });
};
var de_AnomalyProfileFeatureObjects = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AnomalyObject(entry, context);
  });
  return retVal;
};
var de_AnomalyProfileFeatures = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AnomalyProfileFeatureObjects(value, context);
    return acc;
  }, {});
};
var de_AnomalyProfiles = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AnomalyProfileFeatures(value, context);
    return acc;
  }, {});
};
var de_AnomalyUnusual = (output, context) => {
  return take(output, {
    Behavior: [, (_) => de_Behavior(_, context), `behavior`]
  });
};
var de_AnomalyUnusualBehaviorFeature = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AnomalyObject(value, context);
    return acc;
  }, {});
};
var de_AutonomousSystem = (output, context) => {
  return take(output, {
    Name: [, expectString, `name`],
    Number: [, expectInt32, `number`]
  });
};
var de_AwsApiCallAction = (output, context) => {
  return take(output, {
    AffectedResources: [, _json, `affectedResources`],
    Api: [, expectString, `api`],
    CallerType: [, expectString, `callerType`],
    DomainDetails: [, (_) => de_DomainDetails(_, context), `domainDetails`],
    ErrorCode: [, expectString, `errorCode`],
    RemoteAccountDetails: [, (_) => de_RemoteAccountDetails(_, context), `remoteAccountDetails`],
    RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
    ServiceName: [, expectString, `serviceName`],
    UserAgent: [, expectString, `userAgent`]
  });
};
var de_Behavior = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AnomalyUnusualBehaviorFeature(value, context);
    return acc;
  }, {});
};
var de_BlockPublicAccess = (output, context) => {
  return take(output, {
    BlockPublicAcls: [, expectBoolean, `blockPublicAcls`],
    BlockPublicPolicy: [, expectBoolean, `blockPublicPolicy`],
    IgnorePublicAcls: [, expectBoolean, `ignorePublicAcls`],
    RestrictPublicBuckets: [, expectBoolean, `restrictPublicBuckets`]
  });
};
var de_BucketLevelPermissions = (output, context) => {
  return take(output, {
    AccessControlList: [, (_) => de_AccessControlList(_, context), `accessControlList`],
    BlockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`],
    BucketPolicy: [, (_) => de_BucketPolicy(_, context), `bucketPolicy`]
  });
};
var de_BucketPolicy = (output, context) => {
  return take(output, {
    AllowsPublicReadAccess: [, expectBoolean, `allowsPublicReadAccess`],
    AllowsPublicWriteAccess: [, expectBoolean, `allowsPublicWriteAccess`]
  });
};
var de_City = (output, context) => {
  return take(output, {
    CityName: [, expectString, `cityName`]
  });
};
var de_CloudTrailConfigurationResult = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_Condition = (output, context) => {
  return take(output, {
    Eq: [, _json, `eq`],
    Equals: [, _json, `equals`],
    GreaterThan: [, expectLong, `greaterThan`],
    GreaterThanOrEqual: [, expectLong, `greaterThanOrEqual`],
    Gt: [, expectInt32, `gt`],
    Gte: [, expectInt32, `gte`],
    LessThan: [, expectLong, `lessThan`],
    LessThanOrEqual: [, expectLong, `lessThanOrEqual`],
    Lt: [, expectInt32, `lt`],
    Lte: [, expectInt32, `lte`],
    Neq: [, _json, `neq`],
    NotEquals: [, _json, `notEquals`]
  });
};
var de_Container = (output, context) => {
  return take(output, {
    ContainerRuntime: [, expectString, `containerRuntime`],
    Id: [, expectString, `id`],
    Image: [, expectString, `image`],
    ImagePrefix: [, expectString, `imagePrefix`],
    Name: [, expectString, `name`],
    SecurityContext: [, (_) => de_SecurityContext(_, context), `securityContext`],
    VolumeMounts: [, (_) => de_VolumeMounts(_, context), `volumeMounts`]
  });
};
var de_ContainerInstanceDetails = (output, context) => {
  return take(output, {
    CompatibleContainerInstances: [, expectLong, `compatibleContainerInstances`],
    CoveredContainerInstances: [, expectLong, `coveredContainerInstances`]
  });
};
var de_Containers = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Container(entry, context);
  });
  return retVal;
};
var de_Country = (output, context) => {
  return take(output, {
    CountryCode: [, expectString, `countryCode`],
    CountryName: [, expectString, `countryName`]
  });
};
var de_CoverageEc2InstanceDetails = (output, context) => {
  return take(output, {
    AgentDetails: [, (_) => de_AgentDetails(_, context), `agentDetails`],
    ClusterArn: [, expectString, `clusterArn`],
    InstanceId: [, expectString, `instanceId`],
    InstanceType: [, expectString, `instanceType`],
    ManagementType: [, expectString, `managementType`]
  });
};
var de_CoverageEcsClusterDetails = (output, context) => {
  return take(output, {
    ClusterName: [, expectString, `clusterName`],
    ContainerInstanceDetails: [, (_) => de_ContainerInstanceDetails(_, context), `containerInstanceDetails`],
    FargateDetails: [, (_) => de_FargateDetails(_, context), `fargateDetails`]
  });
};
var de_CoverageEksClusterDetails = (output, context) => {
  return take(output, {
    AddonDetails: [, (_) => de_AddonDetails(_, context), `addonDetails`],
    ClusterName: [, expectString, `clusterName`],
    CompatibleNodes: [, expectLong, `compatibleNodes`],
    CoveredNodes: [, expectLong, `coveredNodes`],
    ManagementType: [, expectString, `managementType`]
  });
};
var de_CoverageResource = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    CoverageStatus: [, expectString, `coverageStatus`],
    DetectorId: [, expectString, `detectorId`],
    Issue: [, expectString, `issue`],
    ResourceDetails: [, (_) => de_CoverageResourceDetails(_, context), `resourceDetails`],
    ResourceId: [, expectString, `resourceId`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_CoverageResourceDetails = (output, context) => {
  return take(output, {
    Ec2InstanceDetails: [, (_) => de_CoverageEc2InstanceDetails(_, context), `ec2InstanceDetails`],
    EcsClusterDetails: [, (_) => de_CoverageEcsClusterDetails(_, context), `ecsClusterDetails`],
    EksClusterDetails: [, (_) => de_CoverageEksClusterDetails(_, context), `eksClusterDetails`],
    ResourceType: [, expectString, `resourceType`]
  });
};
var de_CoverageResources = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CoverageResource(entry, context);
  });
  return retVal;
};
var de_CoverageStatistics = (output, context) => {
  return take(output, {
    CountByCoverageStatus: [, _json, `countByCoverageStatus`],
    CountByResourceType: [, _json, `countByResourceType`]
  });
};
var de_CreateProtectedResource = (output, context) => {
  return take(output, {
    S3Bucket: [, (_) => de_CreateS3BucketResource(_, context), `s3Bucket`]
  });
};
var de_CreateS3BucketResource = (output, context) => {
  return take(output, {
    BucketName: [, expectString, `bucketName`],
    ObjectPrefixes: [, _json, `objectPrefixes`]
  });
};
var de_Criterion = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_Condition(value, context);
    return acc;
  }, {});
};
var de_DataSourceConfigurationsResult = (output, context) => {
  return take(output, {
    CloudTrail: [, (_) => de_CloudTrailConfigurationResult(_, context), `cloudTrail`],
    DNSLogs: [, (_) => de_DNSLogsConfigurationResult(_, context), `dnsLogs`],
    FlowLogs: [, (_) => de_FlowLogsConfigurationResult(_, context), `flowLogs`],
    Kubernetes: [, (_) => de_KubernetesConfigurationResult(_, context), `kubernetes`],
    MalwareProtection: [, (_) => de_MalwareProtectionConfigurationResult(_, context), `malwareProtection`],
    S3Logs: [, (_) => de_S3LogsConfigurationResult(_, context), `s3Logs`]
  });
};
var de_DataSourceFreeTrial = (output, context) => {
  return take(output, {
    FreeTrialDaysRemaining: [, expectInt32, `freeTrialDaysRemaining`]
  });
};
var de_DataSourcesFreeTrial = (output, context) => {
  return take(output, {
    CloudTrail: [, (_) => de_DataSourceFreeTrial(_, context), `cloudTrail`],
    DnsLogs: [, (_) => de_DataSourceFreeTrial(_, context), `dnsLogs`],
    FlowLogs: [, (_) => de_DataSourceFreeTrial(_, context), `flowLogs`],
    Kubernetes: [, (_) => de_KubernetesDataSourceFreeTrial(_, context), `kubernetes`],
    MalwareProtection: [, (_) => de_MalwareProtectionDataSourceFreeTrial(_, context), `malwareProtection`],
    S3Logs: [, (_) => de_DataSourceFreeTrial(_, context), `s3Logs`]
  });
};
var de_DateStatistics = (output, context) => {
  return take(output, {
    Date: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `date`],
    LastGeneratedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastGeneratedAt`],
    Severity: [, limitedParseDouble, `severity`],
    TotalFindings: [, expectInt32, `totalFindings`]
  });
};
var de_DefaultServerSideEncryption = (output, context) => {
  return take(output, {
    EncryptionType: [, expectString, `encryptionType`],
    KmsMasterKeyArn: [, expectString, `kmsMasterKeyArn`]
  });
};
var de_Destination = (output, context) => {
  return take(output, {
    DestinationId: [, expectString, `destinationId`],
    DestinationType: [, expectString, `destinationType`],
    Status: [, expectString, `status`]
  });
};
var de_DestinationProperties = (output, context) => {
  return take(output, {
    DestinationArn: [, expectString, `destinationArn`],
    KmsKeyArn: [, expectString, `kmsKeyArn`]
  });
};
var de_Destinations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Destination(entry, context);
  });
  return retVal;
};
var de_Detection = (output, context) => {
  return take(output, {
    Anomaly: [, (_) => de_Anomaly(_, context), `anomaly`],
    Sequence: [, (_) => de_Sequence(_, context), `sequence`]
  });
};
var de_DetectorAdditionalConfigurationResult = (output, context) => {
  return take(output, {
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_DetectorAdditionalConfigurationResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DetectorAdditionalConfigurationResult(entry, context);
  });
  return retVal;
};
var de_DetectorFeatureConfigurationResult = (output, context) => {
  return take(output, {
    AdditionalConfiguration: [
      ,
      (_) => de_DetectorAdditionalConfigurationResults(_, context),
      `additionalConfiguration`
    ],
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_DetectorFeatureConfigurationsResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DetectorFeatureConfigurationResult(entry, context);
  });
  return retVal;
};
var de_DNSLogsConfigurationResult = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_DnsRequestAction = (output, context) => {
  return take(output, {
    Blocked: [, expectBoolean, `blocked`],
    Domain: [, expectString, `domain`],
    DomainWithSuffix: [, expectString, `domainWithSuffix`],
    Protocol: [, expectString, `protocol`]
  });
};
var de_DomainDetails = (output, context) => {
  return take(output, {
    Domain: [, expectString, `domain`]
  });
};
var de_EbsVolumeDetails = (output, context) => {
  return take(output, {
    ScannedVolumeDetails: [, (_) => de_VolumeDetails(_, context), `scannedVolumeDetails`],
    SkippedVolumeDetails: [, (_) => de_VolumeDetails(_, context), `skippedVolumeDetails`]
  });
};
var de_EbsVolumeScanDetails = (output, context) => {
  return take(output, {
    ScanCompletedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `scanCompletedAt`],
    ScanDetections: [, (_) => de_ScanDetections(_, context), `scanDetections`],
    ScanId: [, expectString, `scanId`],
    ScanStartedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `scanStartedAt`],
    ScanType: [, expectString, `scanType`],
    Sources: [, _json, `sources`],
    TriggerFindingId: [, expectString, `triggerFindingId`]
  });
};
var de_EbsVolumesResult = (output, context) => {
  return take(output, {
    Reason: [, expectString, `reason`],
    Status: [, expectString, `status`]
  });
};
var de_Ec2Instance = (output, context) => {
  return take(output, {
    AvailabilityZone: [, expectString, `availabilityZone`],
    Ec2NetworkInterfaceUids: [, _json, `ec2NetworkInterfaceUids`],
    IamInstanceProfile: (_) => de_IamInstanceProfile(_, context),
    ImageDescription: [, expectString, `imageDescription`],
    InstanceState: [, expectString, `instanceState`],
    InstanceType: [, expectString, `instanceType`],
    OutpostArn: [, expectString, `outpostArn`],
    Platform: [, expectString, `platform`],
    ProductCodes: [, (_) => de_ProductCodes(_, context), `productCodes`]
  });
};
var de_Ec2NetworkInterface = (output, context) => {
  return take(output, {
    Ipv6Addresses: [, _json, `ipv6Addresses`],
    PrivateIpAddresses: [, (_) => de_PrivateIpAddresses(_, context), `privateIpAddresses`],
    PublicIp: [, expectString, `publicIp`],
    SecurityGroups: [, (_) => de_SecurityGroups(_, context), `securityGroups`],
    SubNetId: [, expectString, `subNetId`],
    VpcId: [, expectString, `vpcId`]
  });
};
var de_EcsClusterDetails = (output, context) => {
  return take(output, {
    ActiveServicesCount: [, expectInt32, `activeServicesCount`],
    Arn: [, expectString, `arn`],
    Name: [, expectString, `name`],
    RegisteredContainerInstancesCount: [, expectInt32, `registeredContainerInstancesCount`],
    RunningTasksCount: [, expectInt32, `runningTasksCount`],
    Status: [, expectString, `status`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    TaskDetails: [, (_) => de_EcsTaskDetails(_, context), `taskDetails`]
  });
};
var de_EcsTaskDetails = (output, context) => {
  return take(output, {
    Arn: [, expectString, `arn`],
    Containers: [, (_) => de_Containers(_, context), `containers`],
    DefinitionArn: [, expectString, `definitionArn`],
    Group: [, expectString, `group`],
    LaunchType: [, expectString, `launchType`],
    StartedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `startedAt`],
    StartedBy: [, expectString, `startedBy`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    TaskCreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    Version: [, expectString, `version`],
    Volumes: [, (_) => de_Volumes(_, context), `volumes`]
  });
};
var de_EksClusterDetails = (output, context) => {
  return take(output, {
    Arn: [, expectString, `arn`],
    CreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    VpcId: [, expectString, `vpcId`]
  });
};
var de_Evidence = (output, context) => {
  return take(output, {
    ThreatIntelligenceDetails: [, (_) => de_ThreatIntelligenceDetails(_, context), `threatIntelligenceDetails`]
  });
};
var de_FargateDetails = (output, context) => {
  return take(output, {
    Issues: [, _json, `issues`],
    ManagementType: [, expectString, `managementType`]
  });
};
var de_FilePaths = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScanFilePath(entry, context);
  });
  return retVal;
};
var de_Finding = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    Arn: [, expectString, `arn`],
    AssociatedAttackSequenceArn: [, expectString, `associatedAttackSequenceArn`],
    Confidence: [, limitedParseDouble, `confidence`],
    CreatedAt: [, expectString, `createdAt`],
    Description: [, expectString, `description`],
    Id: [, expectString, `id`],
    Partition: [, expectString, `partition`],
    Region: [, expectString, `region`],
    Resource: [, (_) => de_Resource(_, context), `resource`],
    SchemaVersion: [, expectString, `schemaVersion`],
    Service: [, (_) => de_Service(_, context), `service`],
    Severity: [, limitedParseDouble, `severity`],
    Title: [, expectString, `title`],
    Type: [, expectString, `type`],
    UpdatedAt: [, expectString, `updatedAt`]
  });
};
var de_FindingCriteria = (output, context) => {
  return take(output, {
    Criterion: [, (_) => de_Criterion(_, context), `criterion`]
  });
};
var de_Findings = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Finding(entry, context);
  });
  return retVal;
};
var de_FindingStatistics = (output, context) => {
  return take(output, {
    CountBySeverity: [, _json, `countBySeverity`],
    GroupedByAccount: [, (_) => de_GroupedByAccount(_, context), `groupedByAccount`],
    GroupedByDate: [, (_) => de_GroupedByDate(_, context), `groupedByDate`],
    GroupedByFindingType: [, (_) => de_GroupedByFindingType(_, context), `groupedByFindingType`],
    GroupedByResource: [, (_) => de_GroupedByResource(_, context), `groupedByResource`],
    GroupedBySeverity: [, (_) => de_GroupedBySeverity(_, context), `groupedBySeverity`]
  });
};
var de_FindingTypeStatistics = (output, context) => {
  return take(output, {
    FindingType: [, expectString, `findingType`],
    LastGeneratedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastGeneratedAt`],
    TotalFindings: [, expectInt32, `totalFindings`]
  });
};
var de_FlowLogsConfigurationResult = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_FreeTrialFeatureConfigurationResult = (output, context) => {
  return take(output, {
    FreeTrialDaysRemaining: [, expectInt32, `freeTrialDaysRemaining`],
    Name: [, expectString, `name`]
  });
};
var de_FreeTrialFeatureConfigurationsResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FreeTrialFeatureConfigurationResult(entry, context);
  });
  return retVal;
};
var de_GeoLocation = (output, context) => {
  return take(output, {
    Lat: [, limitedParseDouble, `lat`],
    Lon: [, limitedParseDouble, `lon`]
  });
};
var de_GroupedByAccount = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccountStatistics(entry, context);
  });
  return retVal;
};
var de_GroupedByDate = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DateStatistics(entry, context);
  });
  return retVal;
};
var de_GroupedByFindingType = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FindingTypeStatistics(entry, context);
  });
  return retVal;
};
var de_GroupedByResource = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceStatistics(entry, context);
  });
  return retVal;
};
var de_GroupedBySeverity = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SeverityStatistics(entry, context);
  });
  return retVal;
};
var de_HighestSeverityThreatDetails = (output, context) => {
  return take(output, {
    Count: [, expectInt32, `count`],
    Severity: [, expectString, `severity`],
    ThreatName: [, expectString, `threatName`]
  });
};
var de_HostPath = (output, context) => {
  return take(output, {
    Path: [, expectString, `path`]
  });
};
var de_IamInstanceProfile = (output, context) => {
  return take(output, {
    Arn: [, expectString, `arn`],
    Id: [, expectString, `id`]
  });
};
var de_ImpersonatedUser = (output, context) => {
  return take(output, {
    Groups: [, _json, `groups`],
    Username: [, expectString, `username`]
  });
};
var de_Indicator = (output, context) => {
  return take(output, {
    Key: [, expectString, `key`],
    Title: [, expectString, `title`],
    Values: [, _json, `values`]
  });
};
var de_Indicators = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Indicator(entry, context);
  });
  return retVal;
};
var de_InstanceDetails = (output, context) => {
  return take(output, {
    AvailabilityZone: [, expectString, `availabilityZone`],
    IamInstanceProfile: [, (_) => de_IamInstanceProfile(_, context), `iamInstanceProfile`],
    ImageDescription: [, expectString, `imageDescription`],
    ImageId: [, expectString, `imageId`],
    InstanceId: [, expectString, `instanceId`],
    InstanceState: [, expectString, `instanceState`],
    InstanceType: [, expectString, `instanceType`],
    LaunchTime: [, expectString, `launchTime`],
    NetworkInterfaces: [, (_) => de_NetworkInterfaces(_, context), `networkInterfaces`],
    OutpostArn: [, expectString, `outpostArn`],
    Platform: [, expectString, `platform`],
    ProductCodes: [, (_) => de_ProductCodes(_, context), `productCodes`],
    Tags: [, (_) => de_Tags(_, context), `tags`]
  });
};
var de_Invitation = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    InvitationId: [, expectString, `invitationId`],
    InvitedAt: [, expectString, `invitedAt`],
    RelationshipStatus: [, expectString, `relationshipStatus`]
  });
};
var de_Invitations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Invitation(entry, context);
  });
  return retVal;
};
var de_ItemPath = (output, context) => {
  return take(output, {
    Hash: [, expectString, `hash`],
    NestedItemPath: [, expectString, `nestedItemPath`]
  });
};
var de_ItemPaths = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ItemPath(entry, context);
  });
  return retVal;
};
var de_KubernetesApiCallAction = (output, context) => {
  return take(output, {
    Namespace: [, expectString, `namespace`],
    Parameters: [, expectString, `parameters`],
    RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
    RequestUri: [, expectString, `requestUri`],
    Resource: [, expectString, `resource`],
    ResourceName: [, expectString, `resourceName`],
    SourceIps: [, _json, `sourceIPs`],
    StatusCode: [, expectInt32, `statusCode`],
    Subresource: [, expectString, `subresource`],
    UserAgent: [, expectString, `userAgent`],
    Verb: [, expectString, `verb`]
  });
};
var de_KubernetesAuditLogsConfigurationResult = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_KubernetesConfigurationResult = (output, context) => {
  return take(output, {
    AuditLogs: [, (_) => de_KubernetesAuditLogsConfigurationResult(_, context), `auditLogs`]
  });
};
var de_KubernetesDataSourceFreeTrial = (output, context) => {
  return take(output, {
    AuditLogs: [, (_) => de_DataSourceFreeTrial(_, context), `auditLogs`]
  });
};
var de_KubernetesDetails = (output, context) => {
  return take(output, {
    KubernetesUserDetails: [, (_) => de_KubernetesUserDetails(_, context), `kubernetesUserDetails`],
    KubernetesWorkloadDetails: [, (_) => de_KubernetesWorkloadDetails(_, context), `kubernetesWorkloadDetails`]
  });
};
var de_KubernetesPermissionCheckedDetails = (output, context) => {
  return take(output, {
    Allowed: [, expectBoolean, `allowed`],
    Namespace: [, expectString, `namespace`],
    Resource: [, expectString, `resource`],
    Verb: [, expectString, `verb`]
  });
};
var de_KubernetesRoleBindingDetails = (output, context) => {
  return take(output, {
    Kind: [, expectString, `kind`],
    Name: [, expectString, `name`],
    RoleRefKind: [, expectString, `roleRefKind`],
    RoleRefName: [, expectString, `roleRefName`],
    Uid: [, expectString, `uid`]
  });
};
var de_KubernetesRoleDetails = (output, context) => {
  return take(output, {
    Kind: [, expectString, `kind`],
    Name: [, expectString, `name`],
    Uid: [, expectString, `uid`]
  });
};
var de_KubernetesUserDetails = (output, context) => {
  return take(output, {
    Groups: [, _json, `groups`],
    ImpersonatedUser: [, (_) => de_ImpersonatedUser(_, context), `impersonatedUser`],
    SessionName: [, _json, `sessionName`],
    Uid: [, expectString, `uid`],
    Username: [, expectString, `username`]
  });
};
var de_KubernetesWorkloadDetails = (output, context) => {
  return take(output, {
    Containers: [, (_) => de_Containers(_, context), `containers`],
    HostIPC: [, expectBoolean, `hostIPC`],
    HostNetwork: [, expectBoolean, `hostNetwork`],
    HostPID: [, expectBoolean, `hostPID`],
    Name: [, expectString, `name`],
    Namespace: [, expectString, `namespace`],
    ServiceAccountName: [, expectString, `serviceAccountName`],
    Type: [, expectString, `type`],
    Uid: [, expectString, `uid`],
    Volumes: [, (_) => de_Volumes(_, context), `volumes`]
  });
};
var de_LambdaDetails = (output, context) => {
  return take(output, {
    Description: [, expectString, `description`],
    FunctionArn: [, expectString, `functionArn`],
    FunctionName: [, expectString, `functionName`],
    FunctionVersion: [, expectString, `functionVersion`],
    LastModifiedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastModifiedAt`],
    RevisionId: [, expectString, `revisionId`],
    Role: [, expectString, `role`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    VpcConfig: [, (_) => de_VpcConfig(_, context), `vpcConfig`]
  });
};
var de_Lineage = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LineageObject(entry, context);
  });
  return retVal;
};
var de_LineageObject = (output, context) => {
  return take(output, {
    Euid: [, expectInt32, `euid`],
    ExecutablePath: [, expectString, `executablePath`],
    Name: [, expectString, `name`],
    NamespacePid: [, expectInt32, `namespacePid`],
    ParentUuid: [, expectString, `parentUuid`],
    Pid: [, expectInt32, `pid`],
    StartTime: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `startTime`],
    UserId: [, expectInt32, `userId`],
    Uuid: [, expectString, `uuid`]
  });
};
var de_LocalIpDetails = (output, context) => {
  return take(output, {
    IpAddressV4: [, expectString, `ipAddressV4`],
    IpAddressV6: [, expectString, `ipAddressV6`]
  });
};
var de_LocalPortDetails = (output, context) => {
  return take(output, {
    Port: [, expectInt32, `port`],
    PortName: [, expectString, `portName`]
  });
};
var de_LoginAttribute = (output, context) => {
  return take(output, {
    Application: [, expectString, `application`],
    FailedLoginAttempts: [, expectInt32, `failedLoginAttempts`],
    SuccessfulLoginAttempts: [, expectInt32, `successfulLoginAttempts`],
    User: [, expectString, `user`]
  });
};
var de_LoginAttributes = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LoginAttribute(entry, context);
  });
  return retVal;
};
var de_MalwareProtectionConfigurationResult = (output, context) => {
  return take(output, {
    ScanEc2InstanceWithFindings: [
      ,
      (_) => de_ScanEc2InstanceWithFindingsResult(_, context),
      `scanEc2InstanceWithFindings`
    ],
    ServiceRole: [, expectString, `serviceRole`]
  });
};
var de_MalwareProtectionDataSourceFreeTrial = (output, context) => {
  return take(output, {
    ScanEc2InstanceWithFindings: [, (_) => de_DataSourceFreeTrial(_, context), `scanEc2InstanceWithFindings`]
  });
};
var de_MalwareProtectionPlanActions = (output, context) => {
  return take(output, {
    Tagging: [, (_) => de_MalwareProtectionPlanTaggingAction(_, context), `tagging`]
  });
};
var de_MalwareProtectionPlansSummary = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MalwareProtectionPlanSummary(entry, context);
  });
  return retVal;
};
var de_MalwareProtectionPlanStatusReason = (output, context) => {
  return take(output, {
    Code: [, expectString, `code`],
    Message: [, expectString, `message`]
  });
};
var de_MalwareProtectionPlanStatusReasonsList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MalwareProtectionPlanStatusReason(entry, context);
  });
  return retVal;
};
var de_MalwareProtectionPlanSummary = (output, context) => {
  return take(output, {
    MalwareProtectionPlanId: [, expectString, `malwareProtectionPlanId`]
  });
};
var de_MalwareProtectionPlanTaggingAction = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_MalwareScanDetails = (output, context) => {
  return take(output, {
    Threats: [, (_) => de_Threats(_, context), `threats`]
  });
};
var de_MapEquals = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScanConditionPair(entry, context);
  });
  return retVal;
};
var de_Master = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    InvitationId: [, expectString, `invitationId`],
    InvitedAt: [, expectString, `invitedAt`],
    RelationshipStatus: [, expectString, `relationshipStatus`]
  });
};
var de_Member = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    AdministratorId: [, expectString, `administratorId`],
    DetectorId: [, expectString, `detectorId`],
    Email: [, expectString, `email`],
    InvitedAt: [, expectString, `invitedAt`],
    MasterId: [, expectString, `masterId`],
    RelationshipStatus: [, expectString, `relationshipStatus`],
    UpdatedAt: [, expectString, `updatedAt`]
  });
};
var de_MemberAdditionalConfigurationResult = (output, context) => {
  return take(output, {
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_MemberAdditionalConfigurationResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MemberAdditionalConfigurationResult(entry, context);
  });
  return retVal;
};
var de_MemberDataSourceConfiguration = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    DataSources: [, (_) => de_DataSourceConfigurationsResult(_, context), `dataSources`],
    Features: [, (_) => de_MemberFeaturesConfigurationsResults(_, context), `features`]
  });
};
var de_MemberDataSourceConfigurations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MemberDataSourceConfiguration(entry, context);
  });
  return retVal;
};
var de_MemberFeaturesConfigurationResult = (output, context) => {
  return take(output, {
    AdditionalConfiguration: [
      ,
      (_) => de_MemberAdditionalConfigurationResults(_, context),
      `additionalConfiguration`
    ],
    Name: [, expectString, `name`],
    Status: [, expectString, `status`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_MemberFeaturesConfigurationsResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MemberFeaturesConfigurationResult(entry, context);
  });
  return retVal;
};
var de_Members = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Member(entry, context);
  });
  return retVal;
};
var de_NetworkConnection = (output, context) => {
  return take(output, {
    Direction: [, expectString, `direction`]
  });
};
var de_NetworkConnectionAction = (output, context) => {
  return take(output, {
    Blocked: [, expectBoolean, `blocked`],
    ConnectionDirection: [, expectString, `connectionDirection`],
    LocalIpDetails: [, (_) => de_LocalIpDetails(_, context), `localIpDetails`],
    LocalNetworkInterface: [, expectString, `localNetworkInterface`],
    LocalPortDetails: [, (_) => de_LocalPortDetails(_, context), `localPortDetails`],
    Protocol: [, expectString, `protocol`],
    RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
    RemotePortDetails: [, (_) => de_RemotePortDetails(_, context), `remotePortDetails`]
  });
};
var de_NetworkEndpoint = (output, context) => {
  return take(output, {
    AutonomousSystem: [, (_) => de_AutonomousSystem(_, context), `autonomousSystem`],
    Connection: [, (_) => de_NetworkConnection(_, context), `connection`],
    Domain: [, expectString, `domain`],
    Id: [, expectString, `id`],
    Ip: [, expectString, `ip`],
    Location: [, (_) => de_NetworkGeoLocation(_, context), `location`],
    Port: [, expectInt32, `port`]
  });
};
var de_NetworkEndpoints = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkEndpoint(entry, context);
  });
  return retVal;
};
var de_NetworkGeoLocation = (output, context) => {
  return take(output, {
    City: [, expectString, `city`],
    Country: [, expectString, `country`],
    Latitude: [, limitedParseDouble, `lat`],
    Longitude: [, limitedParseDouble, `lon`]
  });
};
var de_NetworkInterface = (output, context) => {
  return take(output, {
    Ipv6Addresses: [, _json, `ipv6Addresses`],
    NetworkInterfaceId: [, expectString, `networkInterfaceId`],
    PrivateDnsName: [, expectString, `privateDnsName`],
    PrivateIpAddress: [, expectString, `privateIpAddress`],
    PrivateIpAddresses: [, (_) => de_PrivateIpAddresses(_, context), `privateIpAddresses`],
    PublicDnsName: [, expectString, `publicDnsName`],
    PublicIp: [, expectString, `publicIp`],
    SecurityGroups: [, (_) => de_SecurityGroups(_, context), `securityGroups`],
    SubnetId: [, expectString, `subnetId`],
    VpcId: [, expectString, `vpcId`]
  });
};
var de_NetworkInterfaces = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInterface(entry, context);
  });
  return retVal;
};
var de_Observations = (output, context) => {
  return take(output, {
    Text: [, _json, `text`]
  });
};
var de_Organization = (output, context) => {
  return take(output, {
    Asn: [, expectString, `asn`],
    AsnOrg: [, expectString, `asnOrg`],
    Isp: [, expectString, `isp`],
    Org: [, expectString, `org`]
  });
};
var de_OrganizationAdditionalConfigurationResult = (output, context) => {
  return take(output, {
    AutoEnable: [, expectString, `autoEnable`],
    Name: [, expectString, `name`]
  });
};
var de_OrganizationAdditionalConfigurationResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationAdditionalConfigurationResult(entry, context);
  });
  return retVal;
};
var de_OrganizationDataSourceConfigurationsResult = (output, context) => {
  return take(output, {
    Kubernetes: [, (_) => de_OrganizationKubernetesConfigurationResult(_, context), `kubernetes`],
    MalwareProtection: [
      ,
      (_) => de_OrganizationMalwareProtectionConfigurationResult(_, context),
      `malwareProtection`
    ],
    S3Logs: [, (_) => de_OrganizationS3LogsConfigurationResult(_, context), `s3Logs`]
  });
};
var de_OrganizationDetails = (output, context) => {
  return take(output, {
    OrganizationStatistics: [, (_) => de_OrganizationStatistics(_, context), `organizationStatistics`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_OrganizationEbsVolumesResult = (output, context) => {
  return take(output, {
    AutoEnable: [, expectBoolean, `autoEnable`]
  });
};
var de_OrganizationFeatureConfigurationResult = (output, context) => {
  return take(output, {
    AdditionalConfiguration: [
      ,
      (_) => de_OrganizationAdditionalConfigurationResults(_, context),
      `additionalConfiguration`
    ],
    AutoEnable: [, expectString, `autoEnable`],
    Name: [, expectString, `name`]
  });
};
var de_OrganizationFeaturesConfigurationsResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationFeatureConfigurationResult(entry, context);
  });
  return retVal;
};
var de_OrganizationFeatureStatistics = (output, context) => {
  return take(output, {
    AdditionalConfiguration: [
      ,
      (_) => de_OrganizationFeatureStatisticsAdditionalConfigurations(_, context),
      `additionalConfiguration`
    ],
    EnabledAccountsCount: [, expectInt32, `enabledAccountsCount`],
    Name: [, expectString, `name`]
  });
};
var de_OrganizationFeatureStatisticsAdditionalConfiguration = (output, context) => {
  return take(output, {
    EnabledAccountsCount: [, expectInt32, `enabledAccountsCount`],
    Name: [, expectString, `name`]
  });
};
var de_OrganizationFeatureStatisticsAdditionalConfigurations = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationFeatureStatisticsAdditionalConfiguration(entry, context);
  });
  return retVal;
};
var de_OrganizationFeatureStatisticsResults = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationFeatureStatistics(entry, context);
  });
  return retVal;
};
var de_OrganizationKubernetesAuditLogsConfigurationResult = (output, context) => {
  return take(output, {
    AutoEnable: [, expectBoolean, `autoEnable`]
  });
};
var de_OrganizationKubernetesConfigurationResult = (output, context) => {
  return take(output, {
    AuditLogs: [, (_) => de_OrganizationKubernetesAuditLogsConfigurationResult(_, context), `auditLogs`]
  });
};
var de_OrganizationMalwareProtectionConfigurationResult = (output, context) => {
  return take(output, {
    ScanEc2InstanceWithFindings: [
      ,
      (_) => de_OrganizationScanEc2InstanceWithFindingsResult(_, context),
      `scanEc2InstanceWithFindings`
    ]
  });
};
var de_OrganizationS3LogsConfigurationResult = (output, context) => {
  return take(output, {
    AutoEnable: [, expectBoolean, `autoEnable`]
  });
};
var de_OrganizationScanEc2InstanceWithFindingsResult = (output, context) => {
  return take(output, {
    EbsVolumes: [, (_) => de_OrganizationEbsVolumesResult(_, context), `ebsVolumes`]
  });
};
var de_OrganizationStatistics = (output, context) => {
  return take(output, {
    ActiveAccountsCount: [, expectInt32, `activeAccountsCount`],
    CountByFeature: [, (_) => de_OrganizationFeatureStatisticsResults(_, context), `countByFeature`],
    EnabledAccountsCount: [, expectInt32, `enabledAccountsCount`],
    MemberAccountsCount: [, expectInt32, `memberAccountsCount`],
    TotalAccountsCount: [, expectInt32, `totalAccountsCount`]
  });
};
var de_Owner = (output, context) => {
  return take(output, {
    Id: [, expectString, `id`]
  });
};
var de_PermissionConfiguration = (output, context) => {
  return take(output, {
    AccountLevelPermissions: [, (_) => de_AccountLevelPermissions(_, context), `accountLevelPermissions`],
    BucketLevelPermissions: [, (_) => de_BucketLevelPermissions(_, context), `bucketLevelPermissions`]
  });
};
var de_PortProbeAction = (output, context) => {
  return take(output, {
    Blocked: [, expectBoolean, `blocked`],
    PortProbeDetails: [, (_) => de_PortProbeDetails(_, context), `portProbeDetails`]
  });
};
var de_PortProbeDetail = (output, context) => {
  return take(output, {
    LocalIpDetails: [, (_) => de_LocalIpDetails(_, context), `localIpDetails`],
    LocalPortDetails: [, (_) => de_LocalPortDetails(_, context), `localPortDetails`],
    RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`]
  });
};
var de_PortProbeDetails = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PortProbeDetail(entry, context);
  });
  return retVal;
};
var de_PrivateIpAddressDetails = (output, context) => {
  return take(output, {
    PrivateDnsName: [, expectString, `privateDnsName`],
    PrivateIpAddress: [, expectString, `privateIpAddress`]
  });
};
var de_PrivateIpAddresses = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrivateIpAddressDetails(entry, context);
  });
  return retVal;
};
var de_ProcessDetails = (output, context) => {
  return take(output, {
    Euid: [, expectInt32, `euid`],
    ExecutablePath: [, expectString, `executablePath`],
    ExecutableSha256: [, expectString, `executableSha256`],
    Lineage: [, (_) => de_Lineage(_, context), `lineage`],
    Name: [, expectString, `name`],
    NamespacePid: [, expectInt32, `namespacePid`],
    ParentUuid: [, expectString, `parentUuid`],
    Pid: [, expectInt32, `pid`],
    Pwd: [, expectString, `pwd`],
    StartTime: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `startTime`],
    User: [, expectString, `user`],
    UserId: [, expectInt32, `userId`],
    Uuid: [, expectString, `uuid`]
  });
};
var de_ProductCode = (output, context) => {
  return take(output, {
    Code: [, expectString, `productCodeId`],
    ProductType: [, expectString, `productCodeType`]
  });
};
var de_ProductCodes = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ProductCode(entry, context);
  });
  return retVal;
};
var de_PublicAccess = (output, context) => {
  return take(output, {
    EffectivePermission: [, expectString, `effectivePermission`],
    PermissionConfiguration: [, (_) => de_PermissionConfiguration(_, context), `permissionConfiguration`]
  });
};
var de_PublicAccessConfiguration = (output, context) => {
  return take(output, {
    PublicAclAccess: [, expectString, `publicAclAccess`],
    PublicAclIgnoreBehavior: [, expectString, `publicAclIgnoreBehavior`],
    PublicBucketRestrictBehavior: [, expectString, `publicBucketRestrictBehavior`],
    PublicPolicyAccess: [, expectString, `publicPolicyAccess`]
  });
};
var de_RdsDbInstanceDetails = (output, context) => {
  return take(output, {
    DbClusterIdentifier: [, expectString, `dbClusterIdentifier`],
    DbInstanceArn: [, expectString, `dbInstanceArn`],
    DbInstanceIdentifier: [, expectString, `dbInstanceIdentifier`],
    Engine: [, expectString, `engine`],
    EngineVersion: [, expectString, `engineVersion`],
    Tags: [, (_) => de_Tags(_, context), `tags`]
  });
};
var de_RdsDbUserDetails = (output, context) => {
  return take(output, {
    Application: [, expectString, `application`],
    AuthMethod: [, expectString, `authMethod`],
    Database: [, expectString, `database`],
    Ssl: [, expectString, `ssl`],
    User: [, expectString, `user`]
  });
};
var de_RdsLimitlessDbDetails = (output, context) => {
  return take(output, {
    DbClusterIdentifier: [, expectString, `dbClusterIdentifier`],
    DbShardGroupArn: [, expectString, `dbShardGroupArn`],
    DbShardGroupIdentifier: [, expectString, `dbShardGroupIdentifier`],
    DbShardGroupResourceId: [, expectString, `dbShardGroupResourceId`],
    Engine: [, expectString, `engine`],
    EngineVersion: [, expectString, `engineVersion`],
    Tags: [, (_) => de_Tags(_, context), `tags`]
  });
};
var de_RdsLoginAttemptAction = (output, context) => {
  return take(output, {
    LoginAttributes: (_) => de_LoginAttributes(_, context),
    RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`]
  });
};
var de_RemoteAccountDetails = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    Affiliated: [, expectBoolean, `affiliated`]
  });
};
var de_RemoteIpDetails = (output, context) => {
  return take(output, {
    City: [, (_) => de_City(_, context), `city`],
    Country: [, (_) => de_Country(_, context), `country`],
    GeoLocation: [, (_) => de_GeoLocation(_, context), `geoLocation`],
    IpAddressV4: [, expectString, `ipAddressV4`],
    IpAddressV6: [, expectString, `ipAddressV6`],
    Organization: [, (_) => de_Organization(_, context), `organization`]
  });
};
var de_RemotePortDetails = (output, context) => {
  return take(output, {
    Port: [, expectInt32, `port`],
    PortName: [, expectString, `portName`]
  });
};
var de_Resource = (output, context) => {
  return take(output, {
    AccessKeyDetails: [, (_) => de_AccessKeyDetails(_, context), `accessKeyDetails`],
    ContainerDetails: [, (_) => de_Container(_, context), `containerDetails`],
    EbsVolumeDetails: [, (_) => de_EbsVolumeDetails(_, context), `ebsVolumeDetails`],
    EcsClusterDetails: [, (_) => de_EcsClusterDetails(_, context), `ecsClusterDetails`],
    EksClusterDetails: [, (_) => de_EksClusterDetails(_, context), `eksClusterDetails`],
    InstanceDetails: [, (_) => de_InstanceDetails(_, context), `instanceDetails`],
    KubernetesDetails: [, (_) => de_KubernetesDetails(_, context), `kubernetesDetails`],
    LambdaDetails: [, (_) => de_LambdaDetails(_, context), `lambdaDetails`],
    RdsDbInstanceDetails: [, (_) => de_RdsDbInstanceDetails(_, context), `rdsDbInstanceDetails`],
    RdsDbUserDetails: [, (_) => de_RdsDbUserDetails(_, context), `rdsDbUserDetails`],
    RdsLimitlessDbDetails: [, (_) => de_RdsLimitlessDbDetails(_, context), `rdsLimitlessDbDetails`],
    ResourceType: [, expectString, `resourceType`],
    S3BucketDetails: [, (_) => de_S3BucketDetails(_, context), `s3BucketDetails`]
  });
};
var de_ResourceData = (output, context) => {
  return take(output, {
    AccessKey: [, (_) => de_AccessKey(_, context), `accessKey`],
    Ec2Instance: [, (_) => de_Ec2Instance(_, context), `ec2Instance`],
    Ec2NetworkInterface: [, (_) => de_Ec2NetworkInterface(_, context), `ec2NetworkInterface`],
    S3Bucket: [, (_) => de_S3Bucket(_, context), `s3Bucket`],
    S3Object: [, (_) => de_S3Object(_, context), `s3Object`]
  });
};
var de_ResourceDetails = (output, context) => {
  return take(output, {
    InstanceArn: [, expectString, `instanceArn`]
  });
};
var de_Resources = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceV2(entry, context);
  });
  return retVal;
};
var de_ResourceStatistics = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    LastGeneratedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastGeneratedAt`],
    ResourceId: [, expectString, `resourceId`],
    ResourceType: [, expectString, `resourceType`],
    TotalFindings: [, expectInt32, `totalFindings`]
  });
};
var de_ResourceV2 = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    CloudPartition: [, expectString, `cloudPartition`],
    Data: [, (_) => de_ResourceData(_, context), `data`],
    Name: [, expectString, `name`],
    Region: [, expectString, `region`],
    ResourceType: [, expectString, `resourceType`],
    Service: [, expectString, `service`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    Uid: [, expectString, `uid`]
  });
};
var de_RuntimeContext = (output, context) => {
  return take(output, {
    AddressFamily: [, expectString, `addressFamily`],
    CommandLineExample: [, expectString, `commandLineExample`],
    FileSystemType: [, expectString, `fileSystemType`],
    Flags: [, _json, `flags`],
    IanaProtocolNumber: [, expectInt32, `ianaProtocolNumber`],
    LdPreloadValue: [, expectString, `ldPreloadValue`],
    LibraryPath: [, expectString, `libraryPath`],
    MemoryRegions: [, _json, `memoryRegions`],
    ModifiedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `modifiedAt`],
    ModifyingProcess: [, (_) => de_ProcessDetails(_, context), `modifyingProcess`],
    ModuleFilePath: [, expectString, `moduleFilePath`],
    ModuleName: [, expectString, `moduleName`],
    ModuleSha256: [, expectString, `moduleSha256`],
    MountSource: [, expectString, `mountSource`],
    MountTarget: [, expectString, `mountTarget`],
    ReleaseAgentPath: [, expectString, `releaseAgentPath`],
    RuncBinaryPath: [, expectString, `runcBinaryPath`],
    ScriptPath: [, expectString, `scriptPath`],
    ServiceName: [, expectString, `serviceName`],
    ShellHistoryFilePath: [, expectString, `shellHistoryFilePath`],
    SocketPath: [, expectString, `socketPath`],
    TargetProcess: [, (_) => de_ProcessDetails(_, context), `targetProcess`],
    ThreatFilePath: [, expectString, `threatFilePath`],
    ToolCategory: [, expectString, `toolCategory`],
    ToolName: [, expectString, `toolName`]
  });
};
var de_RuntimeDetails = (output, context) => {
  return take(output, {
    Context: [, (_) => de_RuntimeContext(_, context), `context`],
    Process: [, (_) => de_ProcessDetails(_, context), `process`]
  });
};
var de_S3Bucket = (output, context) => {
  return take(output, {
    AccountPublicAccess: [, (_) => de_PublicAccessConfiguration(_, context), `accountPublicAccess`],
    BucketPublicAccess: [, (_) => de_PublicAccessConfiguration(_, context), `bucketPublicAccess`],
    CreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    EffectivePermission: [, expectString, `effectivePermission`],
    EncryptionKeyArn: [, expectString, `encryptionKeyArn`],
    EncryptionType: [, expectString, `encryptionType`],
    OwnerId: [, expectString, `ownerId`],
    PublicReadAccess: [, expectString, `publicReadAccess`],
    PublicWriteAccess: [, expectString, `publicWriteAccess`],
    S3ObjectUids: [, _json, `s3ObjectUids`]
  });
};
var de_S3BucketDetail = (output, context) => {
  return take(output, {
    Arn: [, expectString, `arn`],
    CreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    DefaultServerSideEncryption: [
      ,
      (_) => de_DefaultServerSideEncryption(_, context),
      `defaultServerSideEncryption`
    ],
    Name: [, expectString, `name`],
    Owner: [, (_) => de_Owner(_, context), `owner`],
    PublicAccess: [, (_) => de_PublicAccess(_, context), `publicAccess`],
    S3ObjectDetails: [, (_) => de_S3ObjectDetails(_, context), `s3ObjectDetails`],
    Tags: [, (_) => de_Tags(_, context), `tags`],
    Type: [, expectString, `type`]
  });
};
var de_S3BucketDetails = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_S3BucketDetail(entry, context);
  });
  return retVal;
};
var de_S3LogsConfigurationResult = (output, context) => {
  return take(output, {
    Status: [, expectString, `status`]
  });
};
var de_S3Object = (output, context) => {
  return take(output, {
    ETag: [, expectString, `eTag`],
    Key: [, expectString, `key`],
    VersionId: [, expectString, `versionId`]
  });
};
var de_S3ObjectDetail = (output, context) => {
  return take(output, {
    ETag: [, expectString, `eTag`],
    Hash: [, expectString, `hash`],
    Key: [, expectString, `key`],
    ObjectArn: [, expectString, `objectArn`],
    VersionId: [, expectString, `versionId`]
  });
};
var de_S3ObjectDetails = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_S3ObjectDetail(entry, context);
  });
  return retVal;
};
var de_Scan = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    AdminDetectorId: [, expectString, `adminDetectorId`],
    AttachedVolumes: [, (_) => de_VolumeDetails(_, context), `attachedVolumes`],
    DetectorId: [, expectString, `detectorId`],
    FailureReason: [, expectString, `failureReason`],
    FileCount: [, expectLong, `fileCount`],
    ResourceDetails: [, (_) => de_ResourceDetails(_, context), `resourceDetails`],
    ScanEndTime: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `scanEndTime`],
    ScanId: [, expectString, `scanId`],
    ScanResultDetails: [, (_) => de_ScanResultDetails(_, context), `scanResultDetails`],
    ScanStartTime: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `scanStartTime`],
    ScanStatus: [, expectString, `scanStatus`],
    ScanType: [, expectString, `scanType`],
    TotalBytes: [, expectLong, `totalBytes`],
    TriggerDetails: [, (_) => de_TriggerDetails(_, context), `triggerDetails`]
  });
};
var de_ScanCondition = (output, context) => {
  return take(output, {
    MapEquals: [, (_) => de_MapEquals(_, context), `mapEquals`]
  });
};
var de_ScanConditionPair = (output, context) => {
  return take(output, {
    Key: [, expectString, `key`],
    Value: [, expectString, `value`]
  });
};
var de_ScanCriterion = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_ScanCondition(value, context);
    return acc;
  }, {});
};
var de_ScanDetections = (output, context) => {
  return take(output, {
    HighestSeverityThreatDetails: [
      ,
      (_) => de_HighestSeverityThreatDetails(_, context),
      `highestSeverityThreatDetails`
    ],
    ScannedItemCount: [, (_) => de_ScannedItemCount(_, context), `scannedItemCount`],
    ThreatDetectedByName: [, (_) => de_ThreatDetectedByName(_, context), `threatDetectedByName`],
    ThreatsDetectedItemCount: [, (_) => de_ThreatsDetectedItemCount(_, context), `threatsDetectedItemCount`]
  });
};
var de_ScanEc2InstanceWithFindingsResult = (output, context) => {
  return take(output, {
    EbsVolumes: [, (_) => de_EbsVolumesResult(_, context), `ebsVolumes`]
  });
};
var de_ScanFilePath = (output, context) => {
  return take(output, {
    FileName: [, expectString, `fileName`],
    FilePath: [, expectString, `filePath`],
    Hash: [, expectString, `hash`],
    VolumeArn: [, expectString, `volumeArn`]
  });
};
var de_ScannedItemCount = (output, context) => {
  return take(output, {
    Files: [, expectInt32, `files`],
    TotalGb: [, expectInt32, `totalGb`],
    Volumes: [, expectInt32, `volumes`]
  });
};
var de_ScanResourceCriteria = (output, context) => {
  return take(output, {
    Exclude: [, (_) => de_ScanCriterion(_, context), `exclude`],
    Include: [, (_) => de_ScanCriterion(_, context), `include`]
  });
};
var de_ScanResultDetails = (output, context) => {
  return take(output, {
    ScanResult: [, expectString, `scanResult`]
  });
};
var de_Scans = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Scan(entry, context);
  });
  return retVal;
};
var de_ScanThreatName = (output, context) => {
  return take(output, {
    FilePaths: [, (_) => de_FilePaths(_, context), `filePaths`],
    ItemCount: [, expectInt32, `itemCount`],
    Name: [, expectString, `name`],
    Severity: [, expectString, `severity`]
  });
};
var de_ScanThreatNames = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScanThreatName(entry, context);
  });
  return retVal;
};
var de_SecurityContext = (output, context) => {
  return take(output, {
    AllowPrivilegeEscalation: [, expectBoolean, `allowPrivilegeEscalation`],
    Privileged: [, expectBoolean, `privileged`]
  });
};
var de_SecurityGroup = (output, context) => {
  return take(output, {
    GroupId: [, expectString, `groupId`],
    GroupName: [, expectString, `groupName`]
  });
};
var de_SecurityGroups = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroup(entry, context);
  });
  return retVal;
};
var de_Sequence = (output, context) => {
  return take(output, {
    Actors: [, (_) => de_Actors(_, context), `actors`],
    Description: [, expectString, `description`],
    Endpoints: [, (_) => de_NetworkEndpoints(_, context), `endpoints`],
    Resources: [, (_) => de_Resources(_, context), `resources`],
    SequenceIndicators: [, (_) => de_Indicators(_, context), `sequenceIndicators`],
    Signals: [, (_) => de_Signals(_, context), `signals`],
    Uid: [, expectString, `uid`]
  });
};
var de_Service = (output, context) => {
  return take(output, {
    Action: [, (_) => de_Action(_, context), `action`],
    AdditionalInfo: [, (_) => de_ServiceAdditionalInfo(_, context), `additionalInfo`],
    Archived: [, expectBoolean, `archived`],
    Count: [, expectInt32, `count`],
    Detection: [, (_) => de_Detection(_, context), `detection`],
    DetectorId: [, expectString, `detectorId`],
    EbsVolumeScanDetails: [, (_) => de_EbsVolumeScanDetails(_, context), `ebsVolumeScanDetails`],
    EventFirstSeen: [, expectString, `eventFirstSeen`],
    EventLastSeen: [, expectString, `eventLastSeen`],
    Evidence: [, (_) => de_Evidence(_, context), `evidence`],
    FeatureName: [, expectString, `featureName`],
    MalwareScanDetails: [, (_) => de_MalwareScanDetails(_, context), `malwareScanDetails`],
    ResourceRole: [, expectString, `resourceRole`],
    RuntimeDetails: [, (_) => de_RuntimeDetails(_, context), `runtimeDetails`],
    ServiceName: [, expectString, `serviceName`],
    UserFeedback: [, expectString, `userFeedback`]
  });
};
var de_ServiceAdditionalInfo = (output, context) => {
  return take(output, {
    Type: [, expectString, `type`],
    Value: [, expectString, `value`]
  });
};
var de_Session = (output, context) => {
  return take(output, {
    CreatedTime: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdTime`],
    Issuer: [, expectString, `issuer`],
    MfaStatus: [, expectString, `mfaStatus`],
    Uid: [, expectString, `uid`]
  });
};
var de_SeverityStatistics = (output, context) => {
  return take(output, {
    LastGeneratedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastGeneratedAt`],
    Severity: [, limitedParseDouble, `severity`],
    TotalFindings: [, expectInt32, `totalFindings`]
  });
};
var de_Signal = (output, context) => {
  return take(output, {
    ActorIds: [, _json, `actorIds`],
    Count: [, expectInt32, `count`],
    CreatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `createdAt`],
    Description: [, expectString, `description`],
    EndpointIds: [, _json, `endpointIds`],
    FirstSeenAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `firstSeenAt`],
    LastSeenAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `lastSeenAt`],
    Name: [, expectString, `name`],
    ResourceUids: [, _json, `resourceUids`],
    Severity: [, limitedParseDouble, `severity`],
    SignalIndicators: [, (_) => de_Indicators(_, context), `signalIndicators`],
    Type: [, expectString, `type`],
    Uid: [, expectString, `uid`],
    UpdatedAt: [, (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))), `updatedAt`]
  });
};
var de_Signals = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Signal(entry, context);
  });
  return retVal;
};
var de_Tag = (output, context) => {
  return take(output, {
    Key: [, expectString, `key`],
    Value: [, expectString, `value`]
  });
};
var de_Tags = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Tag(entry, context);
  });
  return retVal;
};
var de_Threat = (output, context) => {
  return take(output, {
    ItemPaths: [, (_) => de_ItemPaths(_, context), `itemPaths`],
    Name: [, expectString, `name`],
    Source: [, expectString, `source`]
  });
};
var de_ThreatDetectedByName = (output, context) => {
  return take(output, {
    ItemCount: [, expectInt32, `itemCount`],
    Shortened: [, expectBoolean, `shortened`],
    ThreatNames: [, (_) => de_ScanThreatNames(_, context), `threatNames`],
    UniqueThreatNameCount: [, expectInt32, `uniqueThreatNameCount`]
  });
};
var de_ThreatIntelligenceDetail = (output, context) => {
  return take(output, {
    ThreatFileSha256: [, expectString, `threatFileSha256`],
    ThreatListName: [, expectString, `threatListName`],
    ThreatNames: [, _json, `threatNames`]
  });
};
var de_ThreatIntelligenceDetails = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ThreatIntelligenceDetail(entry, context);
  });
  return retVal;
};
var de_Threats = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Threat(entry, context);
  });
  return retVal;
};
var de_ThreatsDetectedItemCount = (output, context) => {
  return take(output, {
    Files: [, expectInt32, `files`]
  });
};
var de_Total = (output, context) => {
  return take(output, {
    Amount: [, expectString, `amount`],
    Unit: [, expectString, `unit`]
  });
};
var de_TriggerDetails = (output, context) => {
  return take(output, {
    Description: [, expectString, `description`],
    GuardDutyFindingId: [, expectString, `guardDutyFindingId`]
  });
};
var de_UnprocessedAccount = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    Result: [, expectString, `result`]
  });
};
var de_UnprocessedAccounts = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UnprocessedAccount(entry, context);
  });
  return retVal;
};
var de_UnprocessedDataSourcesResult = (output, context) => {
  return take(output, {
    MalwareProtection: [, (_) => de_MalwareProtectionConfigurationResult(_, context), `malwareProtection`]
  });
};
var de_UsageAccountResult = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    Total: [, (_) => de_Total(_, context), `total`]
  });
};
var de_UsageAccountResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageAccountResult(entry, context);
  });
  return retVal;
};
var de_UsageDataSourceResult = (output, context) => {
  return take(output, {
    DataSource: [, expectString, `dataSource`],
    Total: [, (_) => de_Total(_, context), `total`]
  });
};
var de_UsageDataSourceResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageDataSourceResult(entry, context);
  });
  return retVal;
};
var de_UsageFeatureResult = (output, context) => {
  return take(output, {
    Feature: [, expectString, `feature`],
    Total: [, (_) => de_Total(_, context), `total`]
  });
};
var de_UsageFeatureResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageFeatureResult(entry, context);
  });
  return retVal;
};
var de_UsageResourceResult = (output, context) => {
  return take(output, {
    Resource: [, expectString, `resource`],
    Total: [, (_) => de_Total(_, context), `total`]
  });
};
var de_UsageResourceResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageResourceResult(entry, context);
  });
  return retVal;
};
var de_UsageStatistics = (output, context) => {
  return take(output, {
    SumByAccount: [, (_) => de_UsageAccountResultList(_, context), `sumByAccount`],
    SumByDataSource: [, (_) => de_UsageDataSourceResultList(_, context), `sumByDataSource`],
    SumByFeature: [, (_) => de_UsageFeatureResultList(_, context), `sumByFeature`],
    SumByResource: [, (_) => de_UsageResourceResultList(_, context), `sumByResource`],
    TopAccountsByFeature: [, (_) => de_UsageTopAccountsResultList(_, context), `topAccountsByFeature`],
    TopResources: [, (_) => de_UsageResourceResultList(_, context), `topResources`]
  });
};
var de_UsageTopAccountResult = (output, context) => {
  return take(output, {
    AccountId: [, expectString, `accountId`],
    Total: [, (_) => de_Total(_, context), `total`]
  });
};
var de_UsageTopAccountsByFeatureList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageTopAccountResult(entry, context);
  });
  return retVal;
};
var de_UsageTopAccountsResult = (output, context) => {
  return take(output, {
    Accounts: [, (_) => de_UsageTopAccountsByFeatureList(_, context), `accounts`],
    Feature: [, expectString, `feature`]
  });
};
var de_UsageTopAccountsResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UsageTopAccountsResult(entry, context);
  });
  return retVal;
};
var de_User = (output, context) => {
  return take(output, {
    Account: [, (_) => de_Account(_, context), `account`],
    CredentialUid: [, expectString, `credentialUid`],
    Name: [, expectString, `name`],
    Type: [, expectString, `type`],
    Uid: [, expectString, `uid`]
  });
};
var de_Volume = (output, context) => {
  return take(output, {
    HostPath: [, (_) => de_HostPath(_, context), `hostPath`],
    Name: [, expectString, `name`]
  });
};
var de_VolumeDetail = (output, context) => {
  return take(output, {
    DeviceName: [, expectString, `deviceName`],
    EncryptionType: [, expectString, `encryptionType`],
    KmsKeyArn: [, expectString, `kmsKeyArn`],
    SnapshotArn: [, expectString, `snapshotArn`],
    VolumeArn: [, expectString, `volumeArn`],
    VolumeSizeInGB: [, expectInt32, `volumeSizeInGB`],
    VolumeType: [, expectString, `volumeType`]
  });
};
var de_VolumeDetails = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeDetail(entry, context);
  });
  return retVal;
};
var de_VolumeMount = (output, context) => {
  return take(output, {
    MountPath: [, expectString, `mountPath`],
    Name: [, expectString, `name`]
  });
};
var de_VolumeMounts = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeMount(entry, context);
  });
  return retVal;
};
var de_Volumes = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Volume(entry, context);
  });
  return retVal;
};
var de_VpcConfig = (output, context) => {
  return take(output, {
    SecurityGroups: [, (_) => de_SecurityGroups(_, context), `securityGroups`],
    SubnetIds: [, _json, `subnetIds`],
    VpcId: [, expectString, `vpcId`]
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _MR = "MaxResults";
var _NT = "NextToken";
var _OA = "OnlyAssociated";
var _TK = "TagKeys";
var _mR = "maxResults";
var _nT = "nextToken";
var _oA = "onlyAssociated";
var _tK = "tagKeys";

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/AcceptAdministratorInvitationCommand.js
var AcceptAdministratorInvitationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "AcceptAdministratorInvitation", {}).n("GuardDutyClient", "AcceptAdministratorInvitationCommand").f(void 0, void 0).ser(se_AcceptAdministratorInvitationCommand).de(de_AcceptAdministratorInvitationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/AcceptInvitationCommand.js
var AcceptInvitationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "AcceptInvitation", {}).n("GuardDutyClient", "AcceptInvitationCommand").f(void 0, void 0).ser(se_AcceptInvitationCommand).de(de_AcceptInvitationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ArchiveFindingsCommand.js
var ArchiveFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ArchiveFindings", {}).n("GuardDutyClient", "ArchiveFindingsCommand").f(void 0, void 0).ser(se_ArchiveFindingsCommand).de(de_ArchiveFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateDetectorCommand.js
var CreateDetectorCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateDetector", {}).n("GuardDutyClient", "CreateDetectorCommand").f(void 0, void 0).ser(se_CreateDetectorCommand).de(de_CreateDetectorCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateFilterCommand.js
var CreateFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateFilter", {}).n("GuardDutyClient", "CreateFilterCommand").f(void 0, void 0).ser(se_CreateFilterCommand).de(de_CreateFilterCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateIPSetCommand.js
var CreateIPSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateIPSet", {}).n("GuardDutyClient", "CreateIPSetCommand").f(void 0, void 0).ser(se_CreateIPSetCommand).de(de_CreateIPSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateMalwareProtectionPlanCommand.js
var CreateMalwareProtectionPlanCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateMalwareProtectionPlan", {}).n("GuardDutyClient", "CreateMalwareProtectionPlanCommand").f(void 0, void 0).ser(se_CreateMalwareProtectionPlanCommand).de(de_CreateMalwareProtectionPlanCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateMembersCommand.js
var CreateMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateMembers", {}).n("GuardDutyClient", "CreateMembersCommand").f(CreateMembersRequestFilterSensitiveLog, void 0).ser(se_CreateMembersCommand).de(de_CreateMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreatePublishingDestinationCommand.js
var CreatePublishingDestinationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreatePublishingDestination", {}).n("GuardDutyClient", "CreatePublishingDestinationCommand").f(void 0, void 0).ser(se_CreatePublishingDestinationCommand).de(de_CreatePublishingDestinationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateSampleFindingsCommand.js
var CreateSampleFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateSampleFindings", {}).n("GuardDutyClient", "CreateSampleFindingsCommand").f(void 0, void 0).ser(se_CreateSampleFindingsCommand).de(de_CreateSampleFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/CreateThreatIntelSetCommand.js
var CreateThreatIntelSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "CreateThreatIntelSet", {}).n("GuardDutyClient", "CreateThreatIntelSetCommand").f(void 0, void 0).ser(se_CreateThreatIntelSetCommand).de(de_CreateThreatIntelSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeclineInvitationsCommand.js
var DeclineInvitationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeclineInvitations", {}).n("GuardDutyClient", "DeclineInvitationsCommand").f(void 0, void 0).ser(se_DeclineInvitationsCommand).de(de_DeclineInvitationsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteDetectorCommand.js
var DeleteDetectorCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteDetector", {}).n("GuardDutyClient", "DeleteDetectorCommand").f(void 0, void 0).ser(se_DeleteDetectorCommand).de(de_DeleteDetectorCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteFilterCommand.js
var DeleteFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteFilter", {}).n("GuardDutyClient", "DeleteFilterCommand").f(void 0, void 0).ser(se_DeleteFilterCommand).de(de_DeleteFilterCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteInvitationsCommand.js
var DeleteInvitationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteInvitations", {}).n("GuardDutyClient", "DeleteInvitationsCommand").f(void 0, void 0).ser(se_DeleteInvitationsCommand).de(de_DeleteInvitationsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteIPSetCommand.js
var DeleteIPSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteIPSet", {}).n("GuardDutyClient", "DeleteIPSetCommand").f(void 0, void 0).ser(se_DeleteIPSetCommand).de(de_DeleteIPSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteMalwareProtectionPlanCommand.js
var DeleteMalwareProtectionPlanCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteMalwareProtectionPlan", {}).n("GuardDutyClient", "DeleteMalwareProtectionPlanCommand").f(void 0, void 0).ser(se_DeleteMalwareProtectionPlanCommand).de(de_DeleteMalwareProtectionPlanCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteMembersCommand.js
var DeleteMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteMembers", {}).n("GuardDutyClient", "DeleteMembersCommand").f(void 0, void 0).ser(se_DeleteMembersCommand).de(de_DeleteMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeletePublishingDestinationCommand.js
var DeletePublishingDestinationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeletePublishingDestination", {}).n("GuardDutyClient", "DeletePublishingDestinationCommand").f(void 0, void 0).ser(se_DeletePublishingDestinationCommand).de(de_DeletePublishingDestinationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DeleteThreatIntelSetCommand.js
var DeleteThreatIntelSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DeleteThreatIntelSet", {}).n("GuardDutyClient", "DeleteThreatIntelSetCommand").f(void 0, void 0).ser(se_DeleteThreatIntelSetCommand).de(de_DeleteThreatIntelSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DescribeMalwareScansCommand.js
var DescribeMalwareScansCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DescribeMalwareScans", {}).n("GuardDutyClient", "DescribeMalwareScansCommand").f(void 0, void 0).ser(se_DescribeMalwareScansCommand).de(de_DescribeMalwareScansCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DescribeOrganizationConfigurationCommand.js
var DescribeOrganizationConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DescribeOrganizationConfiguration", {}).n("GuardDutyClient", "DescribeOrganizationConfigurationCommand").f(void 0, void 0).ser(se_DescribeOrganizationConfigurationCommand).de(de_DescribeOrganizationConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DescribePublishingDestinationCommand.js
var DescribePublishingDestinationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DescribePublishingDestination", {}).n("GuardDutyClient", "DescribePublishingDestinationCommand").f(void 0, void 0).ser(se_DescribePublishingDestinationCommand).de(de_DescribePublishingDestinationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DisableOrganizationAdminAccountCommand.js
var DisableOrganizationAdminAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DisableOrganizationAdminAccount", {}).n("GuardDutyClient", "DisableOrganizationAdminAccountCommand").f(void 0, void 0).ser(se_DisableOrganizationAdminAccountCommand).de(de_DisableOrganizationAdminAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DisassociateFromAdministratorAccountCommand.js
var DisassociateFromAdministratorAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DisassociateFromAdministratorAccount", {}).n("GuardDutyClient", "DisassociateFromAdministratorAccountCommand").f(void 0, void 0).ser(se_DisassociateFromAdministratorAccountCommand).de(de_DisassociateFromAdministratorAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DisassociateFromMasterAccountCommand.js
var DisassociateFromMasterAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DisassociateFromMasterAccount", {}).n("GuardDutyClient", "DisassociateFromMasterAccountCommand").f(void 0, void 0).ser(se_DisassociateFromMasterAccountCommand).de(de_DisassociateFromMasterAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/DisassociateMembersCommand.js
var DisassociateMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "DisassociateMembers", {}).n("GuardDutyClient", "DisassociateMembersCommand").f(void 0, void 0).ser(se_DisassociateMembersCommand).de(de_DisassociateMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/EnableOrganizationAdminAccountCommand.js
var EnableOrganizationAdminAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "EnableOrganizationAdminAccount", {}).n("GuardDutyClient", "EnableOrganizationAdminAccountCommand").f(void 0, void 0).ser(se_EnableOrganizationAdminAccountCommand).de(de_EnableOrganizationAdminAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetAdministratorAccountCommand.js
var GetAdministratorAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetAdministratorAccount", {}).n("GuardDutyClient", "GetAdministratorAccountCommand").f(void 0, void 0).ser(se_GetAdministratorAccountCommand).de(de_GetAdministratorAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetCoverageStatisticsCommand.js
var GetCoverageStatisticsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetCoverageStatistics", {}).n("GuardDutyClient", "GetCoverageStatisticsCommand").f(void 0, void 0).ser(se_GetCoverageStatisticsCommand).de(de_GetCoverageStatisticsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetDetectorCommand.js
var GetDetectorCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetDetector", {}).n("GuardDutyClient", "GetDetectorCommand").f(void 0, void 0).ser(se_GetDetectorCommand).de(de_GetDetectorCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetFilterCommand.js
var GetFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetFilter", {}).n("GuardDutyClient", "GetFilterCommand").f(void 0, void 0).ser(se_GetFilterCommand).de(de_GetFilterCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetFindingsCommand.js
var GetFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetFindings", {}).n("GuardDutyClient", "GetFindingsCommand").f(void 0, GetFindingsResponseFilterSensitiveLog).ser(se_GetFindingsCommand).de(de_GetFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetFindingsStatisticsCommand.js
var GetFindingsStatisticsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetFindingsStatistics", {}).n("GuardDutyClient", "GetFindingsStatisticsCommand").f(void 0, void 0).ser(se_GetFindingsStatisticsCommand).de(de_GetFindingsStatisticsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetInvitationsCountCommand.js
var GetInvitationsCountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetInvitationsCount", {}).n("GuardDutyClient", "GetInvitationsCountCommand").f(void 0, void 0).ser(se_GetInvitationsCountCommand).de(de_GetInvitationsCountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetIPSetCommand.js
var GetIPSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetIPSet", {}).n("GuardDutyClient", "GetIPSetCommand").f(void 0, void 0).ser(se_GetIPSetCommand).de(de_GetIPSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetMalwareProtectionPlanCommand.js
var GetMalwareProtectionPlanCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetMalwareProtectionPlan", {}).n("GuardDutyClient", "GetMalwareProtectionPlanCommand").f(void 0, void 0).ser(se_GetMalwareProtectionPlanCommand).de(de_GetMalwareProtectionPlanCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetMalwareScanSettingsCommand.js
var GetMalwareScanSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetMalwareScanSettings", {}).n("GuardDutyClient", "GetMalwareScanSettingsCommand").f(void 0, void 0).ser(se_GetMalwareScanSettingsCommand).de(de_GetMalwareScanSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetMasterAccountCommand.js
var GetMasterAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetMasterAccount", {}).n("GuardDutyClient", "GetMasterAccountCommand").f(void 0, void 0).ser(se_GetMasterAccountCommand).de(de_GetMasterAccountCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetMemberDetectorsCommand.js
var GetMemberDetectorsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetMemberDetectors", {}).n("GuardDutyClient", "GetMemberDetectorsCommand").f(void 0, void 0).ser(se_GetMemberDetectorsCommand).de(de_GetMemberDetectorsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/models/models_1.js
var IpSetStatus = {
  ACTIVATING: "ACTIVATING",
  ACTIVE: "ACTIVE",
  DEACTIVATING: "DEACTIVATING",
  DELETED: "DELETED",
  DELETE_PENDING: "DELETE_PENDING",
  ERROR: "ERROR",
  INACTIVE: "INACTIVE"
};
var MalwareProtectionPlanStatus = {
  ACTIVE: "ACTIVE",
  ERROR: "ERROR",
  WARNING: "WARNING"
};
var ScanCriterionKey = {
  EC2_INSTANCE_TAG: "EC2_INSTANCE_TAG"
};
var ThreatIntelSetStatus = {
  ACTIVATING: "ACTIVATING",
  ACTIVE: "ACTIVE",
  DEACTIVATING: "DEACTIVATING",
  DELETED: "DELETED",
  DELETE_PENDING: "DELETE_PENDING",
  ERROR: "ERROR",
  INACTIVE: "INACTIVE"
};
var UsageFeature = {
  CLOUD_TRAIL: "CLOUD_TRAIL",
  DNS_LOGS: "DNS_LOGS",
  EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION",
  EC2_RUNTIME_MONITORING: "EC2_RUNTIME_MONITORING",
  EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS",
  EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING",
  FARGATE_RUNTIME_MONITORING: "FARGATE_RUNTIME_MONITORING",
  FLOW_LOGS: "FLOW_LOGS",
  LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS",
  RDS_DBI_PROTECTION_PROVISIONED: "RDS_DBI_PROTECTION_PROVISIONED",
  RDS_DBI_PROTECTION_SERVERLESS: "RDS_DBI_PROTECTION_SERVERLESS",
  RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS",
  S3_DATA_EVENTS: "S3_DATA_EVENTS"
};
var UsageStatisticType = {
  SUM_BY_ACCOUNT: "SUM_BY_ACCOUNT",
  SUM_BY_DATA_SOURCE: "SUM_BY_DATA_SOURCE",
  SUM_BY_FEATURES: "SUM_BY_FEATURES",
  SUM_BY_RESOURCE: "SUM_BY_RESOURCE",
  TOP_ACCOUNTS_BY_FEATURE: "TOP_ACCOUNTS_BY_FEATURE",
  TOP_RESOURCES: "TOP_RESOURCES"
};
var MemberFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Email && { Email: SENSITIVE_STRING }
});
var GetMembersResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Members && { Members: obj.Members.map((item) => MemberFilterSensitiveLog(item)) }
});
var ListMembersResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Members && { Members: obj.Members.map((item) => MemberFilterSensitiveLog(item)) }
});

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetMembersCommand.js
var GetMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetMembers", {}).n("GuardDutyClient", "GetMembersCommand").f(void 0, GetMembersResponseFilterSensitiveLog).ser(se_GetMembersCommand).de(de_GetMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetOrganizationStatisticsCommand.js
var GetOrganizationStatisticsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetOrganizationStatistics", {}).n("GuardDutyClient", "GetOrganizationStatisticsCommand").f(void 0, void 0).ser(se_GetOrganizationStatisticsCommand).de(de_GetOrganizationStatisticsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetRemainingFreeTrialDaysCommand.js
var GetRemainingFreeTrialDaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetRemainingFreeTrialDays", {}).n("GuardDutyClient", "GetRemainingFreeTrialDaysCommand").f(void 0, void 0).ser(se_GetRemainingFreeTrialDaysCommand).de(de_GetRemainingFreeTrialDaysCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetThreatIntelSetCommand.js
var GetThreatIntelSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetThreatIntelSet", {}).n("GuardDutyClient", "GetThreatIntelSetCommand").f(void 0, void 0).ser(se_GetThreatIntelSetCommand).de(de_GetThreatIntelSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/GetUsageStatisticsCommand.js
var GetUsageStatisticsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "GetUsageStatistics", {}).n("GuardDutyClient", "GetUsageStatisticsCommand").f(void 0, void 0).ser(se_GetUsageStatisticsCommand).de(de_GetUsageStatisticsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/InviteMembersCommand.js
var InviteMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "InviteMembers", {}).n("GuardDutyClient", "InviteMembersCommand").f(void 0, void 0).ser(se_InviteMembersCommand).de(de_InviteMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListCoverageCommand.js
var ListCoverageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListCoverage", {}).n("GuardDutyClient", "ListCoverageCommand").f(void 0, void 0).ser(se_ListCoverageCommand).de(de_ListCoverageCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListDetectorsCommand.js
var ListDetectorsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListDetectors", {}).n("GuardDutyClient", "ListDetectorsCommand").f(void 0, void 0).ser(se_ListDetectorsCommand).de(de_ListDetectorsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListFiltersCommand.js
var ListFiltersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListFilters", {}).n("GuardDutyClient", "ListFiltersCommand").f(void 0, void 0).ser(se_ListFiltersCommand).de(de_ListFiltersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListFindingsCommand.js
var ListFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListFindings", {}).n("GuardDutyClient", "ListFindingsCommand").f(void 0, void 0).ser(se_ListFindingsCommand).de(de_ListFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListInvitationsCommand.js
var ListInvitationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListInvitations", {}).n("GuardDutyClient", "ListInvitationsCommand").f(void 0, void 0).ser(se_ListInvitationsCommand).de(de_ListInvitationsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListIPSetsCommand.js
var ListIPSetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListIPSets", {}).n("GuardDutyClient", "ListIPSetsCommand").f(void 0, void 0).ser(se_ListIPSetsCommand).de(de_ListIPSetsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListMalwareProtectionPlansCommand.js
var ListMalwareProtectionPlansCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListMalwareProtectionPlans", {}).n("GuardDutyClient", "ListMalwareProtectionPlansCommand").f(void 0, void 0).ser(se_ListMalwareProtectionPlansCommand).de(de_ListMalwareProtectionPlansCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListMembersCommand.js
var ListMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListMembers", {}).n("GuardDutyClient", "ListMembersCommand").f(void 0, ListMembersResponseFilterSensitiveLog).ser(se_ListMembersCommand).de(de_ListMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListOrganizationAdminAccountsCommand.js
var ListOrganizationAdminAccountsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListOrganizationAdminAccounts", {}).n("GuardDutyClient", "ListOrganizationAdminAccountsCommand").f(void 0, void 0).ser(se_ListOrganizationAdminAccountsCommand).de(de_ListOrganizationAdminAccountsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListPublishingDestinationsCommand.js
var ListPublishingDestinationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListPublishingDestinations", {}).n("GuardDutyClient", "ListPublishingDestinationsCommand").f(void 0, void 0).ser(se_ListPublishingDestinationsCommand).de(de_ListPublishingDestinationsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListTagsForResource", {}).n("GuardDutyClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/ListThreatIntelSetsCommand.js
var ListThreatIntelSetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "ListThreatIntelSets", {}).n("GuardDutyClient", "ListThreatIntelSetsCommand").f(void 0, void 0).ser(se_ListThreatIntelSetsCommand).de(de_ListThreatIntelSetsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/StartMalwareScanCommand.js
var StartMalwareScanCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "StartMalwareScan", {}).n("GuardDutyClient", "StartMalwareScanCommand").f(void 0, void 0).ser(se_StartMalwareScanCommand).de(de_StartMalwareScanCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/StartMonitoringMembersCommand.js
var StartMonitoringMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "StartMonitoringMembers", {}).n("GuardDutyClient", "StartMonitoringMembersCommand").f(void 0, void 0).ser(se_StartMonitoringMembersCommand).de(de_StartMonitoringMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/StopMonitoringMembersCommand.js
var StopMonitoringMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "StopMonitoringMembers", {}).n("GuardDutyClient", "StopMonitoringMembersCommand").f(void 0, void 0).ser(se_StopMonitoringMembersCommand).de(de_StopMonitoringMembersCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "TagResource", {}).n("GuardDutyClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UnarchiveFindingsCommand.js
var UnarchiveFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UnarchiveFindings", {}).n("GuardDutyClient", "UnarchiveFindingsCommand").f(void 0, void 0).ser(se_UnarchiveFindingsCommand).de(de_UnarchiveFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UntagResource", {}).n("GuardDutyClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateDetectorCommand.js
var UpdateDetectorCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateDetector", {}).n("GuardDutyClient", "UpdateDetectorCommand").f(void 0, void 0).ser(se_UpdateDetectorCommand).de(de_UpdateDetectorCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateFilterCommand.js
var UpdateFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateFilter", {}).n("GuardDutyClient", "UpdateFilterCommand").f(void 0, void 0).ser(se_UpdateFilterCommand).de(de_UpdateFilterCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateFindingsFeedbackCommand.js
var UpdateFindingsFeedbackCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateFindingsFeedback", {}).n("GuardDutyClient", "UpdateFindingsFeedbackCommand").f(void 0, void 0).ser(se_UpdateFindingsFeedbackCommand).de(de_UpdateFindingsFeedbackCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateIPSetCommand.js
var UpdateIPSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateIPSet", {}).n("GuardDutyClient", "UpdateIPSetCommand").f(void 0, void 0).ser(se_UpdateIPSetCommand).de(de_UpdateIPSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateMalwareProtectionPlanCommand.js
var UpdateMalwareProtectionPlanCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateMalwareProtectionPlan", {}).n("GuardDutyClient", "UpdateMalwareProtectionPlanCommand").f(void 0, void 0).ser(se_UpdateMalwareProtectionPlanCommand).de(de_UpdateMalwareProtectionPlanCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateMalwareScanSettingsCommand.js
var UpdateMalwareScanSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateMalwareScanSettings", {}).n("GuardDutyClient", "UpdateMalwareScanSettingsCommand").f(void 0, void 0).ser(se_UpdateMalwareScanSettingsCommand).de(de_UpdateMalwareScanSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateMemberDetectorsCommand.js
var UpdateMemberDetectorsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateMemberDetectors", {}).n("GuardDutyClient", "UpdateMemberDetectorsCommand").f(void 0, void 0).ser(se_UpdateMemberDetectorsCommand).de(de_UpdateMemberDetectorsCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateOrganizationConfigurationCommand.js
var UpdateOrganizationConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateOrganizationConfiguration", {}).n("GuardDutyClient", "UpdateOrganizationConfigurationCommand").f(void 0, void 0).ser(se_UpdateOrganizationConfigurationCommand).de(de_UpdateOrganizationConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdatePublishingDestinationCommand.js
var UpdatePublishingDestinationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdatePublishingDestination", {}).n("GuardDutyClient", "UpdatePublishingDestinationCommand").f(void 0, void 0).ser(se_UpdatePublishingDestinationCommand).de(de_UpdatePublishingDestinationCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/commands/UpdateThreatIntelSetCommand.js
var UpdateThreatIntelSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("GuardDutyAPIService", "UpdateThreatIntelSet", {}).n("GuardDutyClient", "UpdateThreatIntelSetCommand").f(void 0, void 0).ser(se_UpdateThreatIntelSetCommand).de(de_UpdateThreatIntelSetCommand).build() {
};

// node_modules/@aws-sdk/client-guardduty/dist-es/GuardDuty.js
var commands = {
  AcceptAdministratorInvitationCommand,
  AcceptInvitationCommand,
  ArchiveFindingsCommand,
  CreateDetectorCommand,
  CreateFilterCommand,
  CreateIPSetCommand,
  CreateMalwareProtectionPlanCommand,
  CreateMembersCommand,
  CreatePublishingDestinationCommand,
  CreateSampleFindingsCommand,
  CreateThreatIntelSetCommand,
  DeclineInvitationsCommand,
  DeleteDetectorCommand,
  DeleteFilterCommand,
  DeleteInvitationsCommand,
  DeleteIPSetCommand,
  DeleteMalwareProtectionPlanCommand,
  DeleteMembersCommand,
  DeletePublishingDestinationCommand,
  DeleteThreatIntelSetCommand,
  DescribeMalwareScansCommand,
  DescribeOrganizationConfigurationCommand,
  DescribePublishingDestinationCommand,
  DisableOrganizationAdminAccountCommand,
  DisassociateFromAdministratorAccountCommand,
  DisassociateFromMasterAccountCommand,
  DisassociateMembersCommand,
  EnableOrganizationAdminAccountCommand,
  GetAdministratorAccountCommand,
  GetCoverageStatisticsCommand,
  GetDetectorCommand,
  GetFilterCommand,
  GetFindingsCommand,
  GetFindingsStatisticsCommand,
  GetInvitationsCountCommand,
  GetIPSetCommand,
  GetMalwareProtectionPlanCommand,
  GetMalwareScanSettingsCommand,
  GetMasterAccountCommand,
  GetMemberDetectorsCommand,
  GetMembersCommand,
  GetOrganizationStatisticsCommand,
  GetRemainingFreeTrialDaysCommand,
  GetThreatIntelSetCommand,
  GetUsageStatisticsCommand,
  InviteMembersCommand,
  ListCoverageCommand,
  ListDetectorsCommand,
  ListFiltersCommand,
  ListFindingsCommand,
  ListInvitationsCommand,
  ListIPSetsCommand,
  ListMalwareProtectionPlansCommand,
  ListMembersCommand,
  ListOrganizationAdminAccountsCommand,
  ListPublishingDestinationsCommand,
  ListTagsForResourceCommand,
  ListThreatIntelSetsCommand,
  StartMalwareScanCommand,
  StartMonitoringMembersCommand,
  StopMonitoringMembersCommand,
  TagResourceCommand,
  UnarchiveFindingsCommand,
  UntagResourceCommand,
  UpdateDetectorCommand,
  UpdateFilterCommand,
  UpdateFindingsFeedbackCommand,
  UpdateIPSetCommand,
  UpdateMalwareProtectionPlanCommand,
  UpdateMalwareScanSettingsCommand,
  UpdateMemberDetectorsCommand,
  UpdateOrganizationConfigurationCommand,
  UpdatePublishingDestinationCommand,
  UpdateThreatIntelSetCommand
};
var GuardDuty = class extends GuardDutyClient {
};
createAggregatedClient(commands, GuardDuty);

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/DescribeMalwareScansPaginator.js
var paginateDescribeMalwareScans = createPaginator(GuardDutyClient, DescribeMalwareScansCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/DescribeOrganizationConfigurationPaginator.js
var paginateDescribeOrganizationConfiguration = createPaginator(GuardDutyClient, DescribeOrganizationConfigurationCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/GetUsageStatisticsPaginator.js
var paginateGetUsageStatistics = createPaginator(GuardDutyClient, GetUsageStatisticsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListCoveragePaginator.js
var paginateListCoverage = createPaginator(GuardDutyClient, ListCoverageCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListDetectorsPaginator.js
var paginateListDetectors = createPaginator(GuardDutyClient, ListDetectorsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListFiltersPaginator.js
var paginateListFilters = createPaginator(GuardDutyClient, ListFiltersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListFindingsPaginator.js
var paginateListFindings = createPaginator(GuardDutyClient, ListFindingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListIPSetsPaginator.js
var paginateListIPSets = createPaginator(GuardDutyClient, ListIPSetsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListInvitationsPaginator.js
var paginateListInvitations = createPaginator(GuardDutyClient, ListInvitationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListMembersPaginator.js
var paginateListMembers = createPaginator(GuardDutyClient, ListMembersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListOrganizationAdminAccountsPaginator.js
var paginateListOrganizationAdminAccounts = createPaginator(GuardDutyClient, ListOrganizationAdminAccountsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListPublishingDestinationsPaginator.js
var paginateListPublishingDestinations = createPaginator(GuardDutyClient, ListPublishingDestinationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-guardduty/dist-es/pagination/ListThreatIntelSetsPaginator.js
var paginateListThreatIntelSets = createPaginator(GuardDutyClient, ListThreatIntelSetsCommand, "NextToken", "NextToken", "MaxResults");
export {
  Command as $Command,
  AcceptAdministratorInvitationCommand,
  AcceptInvitationCommand,
  AccessDeniedException,
  AccountDetailFilterSensitiveLog,
  ActionFilterSensitiveLog,
  AdminStatus,
  ArchiveFindingsCommand,
  AutoEnableMembers,
  AwsApiCallActionFilterSensitiveLog,
  BadRequestException,
  ConflictException,
  CoverageFilterCriterionKey,
  CoverageSortKey,
  CoverageStatisticsType,
  CoverageStatus,
  CreateDetectorCommand,
  CreateFilterCommand,
  CreateIPSetCommand,
  CreateMalwareProtectionPlanCommand,
  CreateMembersCommand,
  CreateMembersRequestFilterSensitiveLog,
  CreatePublishingDestinationCommand,
  CreateSampleFindingsCommand,
  CreateThreatIntelSetCommand,
  CriterionKey,
  DataSource,
  DataSourceStatus,
  DeclineInvitationsCommand,
  DeleteDetectorCommand,
  DeleteFilterCommand,
  DeleteIPSetCommand,
  DeleteInvitationsCommand,
  DeleteMalwareProtectionPlanCommand,
  DeleteMembersCommand,
  DeletePublishingDestinationCommand,
  DeleteThreatIntelSetCommand,
  DescribeMalwareScansCommand,
  DescribeOrganizationConfigurationCommand,
  DescribePublishingDestinationCommand,
  DestinationType,
  DetectionFilterSensitiveLog,
  DetectorFeature,
  DetectorFeatureResult,
  DetectorStatus,
  DisableOrganizationAdminAccountCommand,
  DisassociateFromAdministratorAccountCommand,
  DisassociateFromMasterAccountCommand,
  DisassociateMembersCommand,
  EbsSnapshotPreservation,
  Ec2NetworkInterfaceFilterSensitiveLog,
  EnableOrganizationAdminAccountCommand,
  FeatureAdditionalConfiguration,
  FeatureStatus,
  Feedback,
  FilterAction,
  FindingFilterSensitiveLog,
  FindingPublishingFrequency,
  FindingResourceType,
  FindingStatisticType,
  FreeTrialFeatureResult,
  GetAdministratorAccountCommand,
  GetCoverageStatisticsCommand,
  GetDetectorCommand,
  GetFilterCommand,
  GetFindingsCommand,
  GetFindingsResponseFilterSensitiveLog,
  GetFindingsStatisticsCommand,
  GetIPSetCommand,
  GetInvitationsCountCommand,
  GetMalwareProtectionPlanCommand,
  GetMalwareScanSettingsCommand,
  GetMasterAccountCommand,
  GetMemberDetectorsCommand,
  GetMembersCommand,
  GetMembersResponseFilterSensitiveLog,
  GetOrganizationStatisticsCommand,
  GetRemainingFreeTrialDaysCommand,
  GetThreatIntelSetCommand,
  GetUsageStatisticsCommand,
  GroupByType,
  GuardDuty,
  GuardDutyClient,
  GuardDutyServiceException,
  IndicatorType,
  InstanceDetailsFilterSensitiveLog,
  InternalServerErrorException,
  InviteMembersCommand,
  IpSetFormat,
  IpSetStatus,
  KubernetesApiCallActionFilterSensitiveLog,
  ListCoverageCommand,
  ListDetectorsCommand,
  ListFiltersCommand,
  ListFindingsCommand,
  ListIPSetsCommand,
  ListInvitationsCommand,
  ListMalwareProtectionPlansCommand,
  ListMembersCommand,
  ListMembersResponseFilterSensitiveLog,
  ListOrganizationAdminAccountsCommand,
  ListPublishingDestinationsCommand,
  ListTagsForResourceCommand,
  ListThreatIntelSetsCommand,
  LocalIpDetailsFilterSensitiveLog,
  MalwareProtectionPlanStatus,
  MalwareProtectionPlanTaggingActionStatus,
  ManagementType,
  MemberFilterSensitiveLog,
  MfaStatus,
  NetworkConnectionActionFilterSensitiveLog,
  NetworkDirection,
  NetworkInterfaceFilterSensitiveLog,
  OrderBy,
  OrgFeature,
  OrgFeatureAdditionalConfiguration,
  OrgFeatureStatus,
  PortProbeActionFilterSensitiveLog,
  PortProbeDetailFilterSensitiveLog,
  PrivateIpAddressDetailsFilterSensitiveLog,
  ProfileSubtype,
  ProfileType,
  PublicAccessStatus,
  PublicAclIgnoreBehavior,
  PublicBucketRestrictBehavior,
  PublishingStatus,
  RdsLoginAttemptActionFilterSensitiveLog,
  RemoteIpDetailsFilterSensitiveLog,
  ResourceDataFilterSensitiveLog,
  ResourceFilterSensitiveLog,
  ResourceNotFoundException,
  ResourceType,
  ResourceV2FilterSensitiveLog,
  ScanCriterionKey,
  ScanResult,
  ScanStatus,
  ScanType,
  SequenceFilterSensitiveLog,
  ServiceFilterSensitiveLog,
  SignalType,
  StartMalwareScanCommand,
  StartMonitoringMembersCommand,
  StopMonitoringMembersCommand,
  TagResourceCommand,
  ThreatIntelSetFormat,
  ThreatIntelSetStatus,
  UnarchiveFindingsCommand,
  UntagResourceCommand,
  UpdateDetectorCommand,
  UpdateFilterCommand,
  UpdateFindingsFeedbackCommand,
  UpdateIPSetCommand,
  UpdateMalwareProtectionPlanCommand,
  UpdateMalwareScanSettingsCommand,
  UpdateMemberDetectorsCommand,
  UpdateOrganizationConfigurationCommand,
  UpdatePublishingDestinationCommand,
  UpdateThreatIntelSetCommand,
  UsageFeature,
  UsageStatisticType,
  Client as __Client,
  paginateDescribeMalwareScans,
  paginateDescribeOrganizationConfiguration,
  paginateGetUsageStatistics,
  paginateListCoverage,
  paginateListDetectors,
  paginateListFilters,
  paginateListFindings,
  paginateListIPSets,
  paginateListInvitations,
  paginateListMembers,
  paginateListOrganizationAdminAccounts,
  paginateListPublishingDestinations,
  paginateListThreatIntelSets
};
//# sourceMappingURL=@aws-sdk_client-guardduty.js.map
