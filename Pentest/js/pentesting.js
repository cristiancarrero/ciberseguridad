class PentestingLab {
    constructor() {
        this.initializeElements();
        this.bindEvents();
        this.currentTool = null;
        this.isRunning = false;
    }

    initializeElements() {
        this.toolButtons = document.querySelectorAll('.tool-btn');
        this.startButton = document.getElementById('startTest');
        this.stopButton = document.getElementById('stopTest');
        this.saveButton = document.getElementById('saveReport');
        this.clearButton = document.querySelector('.clear-terminal');
        this.terminal = document.querySelector('.terminal-content');
        this.configPanel = document.querySelector('.config-panel');
        this.logoutButton = document.querySelector('.logout-btn');
    }

    bindEvents() {
        this.toolButtons.forEach(btn => {
            btn.addEventListener('click', () => this.selectTool(btn));
        });

        this.startButton.addEventListener('click', () => this.startTest());
        this.stopButton.addEventListener('click', () => this.stopTest());
        this.saveButton.addEventListener('click', () => this.saveReport());
        this.clearButton.addEventListener('click', () => this.clearTerminal());
        this.logoutButton.addEventListener('click', () => this.logout());
    }

    logout() {
        // Limpiar la sesión
        localStorage.removeItem('isLoggedIn');
        localStorage.removeItem('userToken');
        localStorage.removeItem('userData');
        
        // Redirigir al index
        window.location.href = 'index.html';
    }

    selectTool(button) {
        // Remover clase activa de todos los botones
        this.toolButtons.forEach(btn => btn.classList.remove('active'));
        
        // Activar el botón seleccionado
        button.classList.add('active');
        
        // Actualizar herramienta actual
        this.currentTool = button.dataset.tool;
        
        // Mostrar configuración de la herramienta
        this.showToolConfig(this.currentTool);
        
        this.log(`[*] Herramienta seleccionada: ${button.textContent.trim()}`);
    }

    showToolConfig(tool) {
        // Configuraciones específicas para cada herramienta
        const configs = {
            'port-scanner': `
                <h3>Configuración de Port Scanner</h3>
                <div class="config-form">
                    <div class="form-group">
                        <label>Target IP/Domain:</label>
                        <input type="text" id="target" placeholder="ejemplo.com">
                    </div>
                    <div class="form-group">
                        <label>Port Range:</label>
                        <input type="text" id="ports" placeholder="1-1000">
                    </div>
                </div>
            `,
            'subdomain-enum': `
                <h3>Configuración de Subdomain Enumeration</h3>
                <div class="config-form">
                    <div class="form-group">
                        <label>Domain:</label>
                        <input type="text" id="domain" placeholder="ejemplo.com">
                    </div>
                </div>
            `,
            // Añadir más configuraciones para otras herramientas
        };

        this.configPanel.innerHTML = configs[tool] || '<p>Seleccione una herramienta para comenzar</p>';
    }

    startTest() {
        if (!this.currentTool) {
            this.log('[!] Error: Ninguna herramienta seleccionada');
            return;
        }

        if (this.isRunning) {
            this.log('[!] Ya hay una prueba en ejecución');
            return;
        }

        this.isRunning = true;
        this.log(`[+] Iniciando ${this.currentTool}...`);
        
        // Simular progreso
        this.simulateProgress();
    }

    stopTest() {
        if (!this.isRunning) {
            this.log('[!] No hay pruebas en ejecución');
            return;
        }

        this.isRunning = false;
        this.log('[!] Prueba detenida');
    }

    saveReport() {
        this.log('[*] Generando reporte...');
        
        setTimeout(() => {
            this.log('[+] Reporte guardado: pentest_report.pdf');
        }, 1500);
    }

    simulateProgress() {
        if (!this.isRunning) return;

        const stages = {
            'port-scanner': [
                'Iniciando escaneo de puertos...',
                'Analizando puertos comunes...',
                'Detectando servicios...',
                'Identificando versiones...',
                'Escaneo completado.'
            ],
            'subdomain-enum': [
                'Iniciando enumeración de subdominios...',
                'Consultando registros DNS...',
                'Realizando búsqueda recursiva...',
                'Verificando subdominios activos...',
                'Enumeración completada.'
            ]
        };

        const currentStages = stages[this.currentTool] || [];
        let i = 0;

        const interval = setInterval(() => {
            if (!this.isRunning || i >= currentStages.length) {
                clearInterval(interval);
                if (this.isRunning) {
                    this.isRunning = false;
                    this.log('[+] Prueba completada');
                }
                return;
            }

            this.log(`[*] ${currentStages[i]}`);
            i++;
        }, 2000);
    }

    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        this.terminal.innerHTML += `[${timestamp}] ${message}\n`;
        this.terminal.scrollTop = this.terminal.scrollHeight;
    }

    clearTerminal() {
        this.terminal.innerHTML = '';
    }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
    window.pentestingLab = new PentestingLab();
}); 