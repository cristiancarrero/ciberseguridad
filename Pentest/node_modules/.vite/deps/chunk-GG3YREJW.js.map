{
  "version": 3,
  "sources": ["../../@aws-sdk/xml-builder/dist-es/escape-element.js", "../../@aws-sdk/xml-builder/dist-es/XmlText.js", "../../@aws-sdk/xml-builder/dist-es/escape-attribute.js", "../../@aws-sdk/xml-builder/dist-es/XmlNode.js"],
  "sourcesContent": ["export function escapeElement(value) {\n    return value\n        .replace(/&/g, \"&amp;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&apos;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\r/g, \"&#x0D;\")\n        .replace(/\\n/g, \"&#x0A;\")\n        .replace(/\\u0085/g, \"&#x85;\")\n        .replace(/\\u2028/, \"&#x2028;\");\n}\n", "import { escapeElement } from \"./escape-element\";\nexport class XmlText {\n    value;\n    constructor(value) {\n        this.value = value;\n    }\n    toString() {\n        return escapeElement(\"\" + this.value);\n    }\n}\n", "export function escapeAttribute(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\n", "import { escapeAttribute } from \"./escape-attribute\";\nimport { XmlText } from \"./XmlText\";\nexport class XmlNode {\n    name;\n    children;\n    attributes = {};\n    static of(name, childText, withName) {\n        const node = new XmlNode(name);\n        if (childText !== undefined) {\n            node.addChildNode(new XmlText(childText));\n        }\n        if (withName !== undefined) {\n            node.withName(withName);\n        }\n        return node;\n    }\n    constructor(name, children = []) {\n        this.name = name;\n        this.children = children;\n    }\n    withName(name) {\n        this.name = name;\n        return this;\n    }\n    addAttribute(name, value) {\n        this.attributes[name] = value;\n        return this;\n    }\n    addChildNode(child) {\n        this.children.push(child);\n        return this;\n    }\n    removeAttribute(name) {\n        delete this.attributes[name];\n        return this;\n    }\n    n(name) {\n        this.name = name;\n        return this;\n    }\n    c(child) {\n        this.children.push(child);\n        return this;\n    }\n    a(name, value) {\n        if (value != null) {\n            this.attributes[name] = value;\n        }\n        return this;\n    }\n    cc(input, field, withName = field) {\n        if (input[field] != null) {\n            const node = XmlNode.of(field, input[field]).withName(withName);\n            this.c(node);\n        }\n    }\n    l(input, listName, memberName, valueProvider) {\n        if (input[listName] != null) {\n            const nodes = valueProvider();\n            nodes.map((node) => {\n                node.withName(memberName);\n                this.c(node);\n            });\n        }\n    }\n    lc(input, listName, memberName, valueProvider) {\n        if (input[listName] != null) {\n            const nodes = valueProvider();\n            const containerNode = new XmlNode(memberName);\n            nodes.map((node) => {\n                containerNode.c(node);\n            });\n            this.c(containerNode);\n        }\n    }\n    toString() {\n        const hasChildren = Boolean(this.children.length);\n        let xmlText = `<${this.name}`;\n        const attributes = this.attributes;\n        for (const attributeName of Object.keys(attributes)) {\n            const attribute = attributes[attributeName];\n            if (attribute != null) {\n                xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n            }\n        }\n        return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
