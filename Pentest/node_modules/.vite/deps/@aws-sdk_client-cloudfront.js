import {
  XmlNode
} from "./chunk-GG3YREJW.js";
import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  WaiterState,
  awsEndpointFunctions,
  calculateBodyLength,
  checkExceptions,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  createWaiter,
  customEndpointFunctions,
  decorateServiceException,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  fromUtf8,
  getArrayIfSingleItem,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  isSerializableHeaderValue,
  loadConfigsForDefaultMode,
  loadRestXmlErrorCode,
  map,
  normalizeProvider,
  parseBoolean,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  parseXmlBody,
  parseXmlErrorBody,
  requestBuilder,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  strictParseFloat,
  strictParseInt32,
  strictParseLong,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-76OIWYIL.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@aws-sdk/client-cloudfront/dist-es/auth/httpAuthSchemeProvider.js
var defaultCloudFrontHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "cloudfront",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultCloudFrontHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "cloudfront"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-cloudfront/package.json
var package_default = {
  name: "@aws-sdk/client-cloudfront",
  description: "AWS SDK for JavaScript Cloudfront Client for Node.js, Browser and React Native",
  version: "3.731.1",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-cloudfront",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo cloudfront"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.731.0",
    "@aws-sdk/credential-provider-node": "3.731.1",
    "@aws-sdk/middleware-host-header": "3.731.0",
    "@aws-sdk/middleware-logger": "3.731.0",
    "@aws-sdk/middleware-recursion-detection": "3.731.0",
    "@aws-sdk/middleware-user-agent": "3.731.0",
    "@aws-sdk/region-config-resolver": "3.731.0",
    "@aws-sdk/types": "3.731.0",
    "@aws-sdk/util-endpoints": "3.731.0",
    "@aws-sdk/util-user-agent-browser": "3.731.0",
    "@aws-sdk/util-user-agent-node": "3.731.0",
    "@aws-sdk/xml-builder": "3.723.0",
    "@smithy/config-resolver": "^4.0.0",
    "@smithy/core": "^3.0.0",
    "@smithy/fetch-http-handler": "^5.0.0",
    "@smithy/hash-node": "^4.0.0",
    "@smithy/invalid-dependency": "^4.0.0",
    "@smithy/middleware-content-length": "^4.0.0",
    "@smithy/middleware-endpoint": "^4.0.0",
    "@smithy/middleware-retry": "^4.0.0",
    "@smithy/middleware-serde": "^4.0.0",
    "@smithy/middleware-stack": "^4.0.0",
    "@smithy/node-config-provider": "^4.0.0",
    "@smithy/node-http-handler": "^4.0.0",
    "@smithy/protocol-http": "^5.0.0",
    "@smithy/smithy-client": "^4.0.0",
    "@smithy/types": "^4.0.0",
    "@smithy/url-parser": "^4.0.0",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.0",
    "@smithy/util-defaults-mode-node": "^4.0.0",
    "@smithy/util-endpoints": "^3.0.0",
    "@smithy/util-middleware": "^4.0.0",
    "@smithy/util-retry": "^4.0.0",
    "@smithy/util-stream": "^4.0.0",
    "@smithy/util-utf8": "^4.0.0",
    "@smithy/util-waiter": "^4.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.2.2"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudfront",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudfront"
  }
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/endpoint/ruleset.js
var A = "required";
var B = "fn";
var C = "argv";
var D = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "stringEquals";
var i = "sigv4";
var j = "cloudfront";
var k = { [A]: false, "type": "String" };
var l = { [A]: true, "default": false, "type": "Boolean" };
var m = { [D]: "Endpoint" };
var n = { [B]: c, [C]: [{ [D]: "UseFIPS" }, true] };
var o = { [B]: c, [C]: [{ [D]: "UseDualStack" }, true] };
var p = {};
var q = { [B]: h, [C]: [{ [B]: "getAttr", [C]: [{ [D]: g }, "name"] }, "aws"] };
var r = { [B]: "getAttr", [C]: [{ [D]: g }, "name"] };
var s = { [B]: c, [C]: [{ [D]: "UseFIPS" }, false] };
var t = { [B]: c, [C]: [{ [D]: "UseDualStack" }, false] };
var u = { "authSchemes": [{ "name": i, "signingName": j, "signingRegion": "us-east-1" }] };
var v = { [B]: "getAttr", [C]: [{ [D]: g }, "supportsFIPS"] };
var w = { [B]: c, [C]: [true, { [B]: "getAttr", [C]: [{ [D]: g }, "supportsDualStack"] }] };
var x = [n];
var y = [o];
var z = [{ [D]: "Region" }];
var _data = { version: "1.0", parameters: { Region: k, UseDualStack: l, UseFIPS: l, Endpoint: k }, rules: [{ conditions: [{ [B]: b, [C]: [m] }], rules: [{ conditions: x, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: y, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: m, properties: p, headers: p }, type: e }], type: f }, { conditions: [{ [B]: b, [C]: z }], rules: [{ conditions: [{ [B]: "aws.partition", [C]: z, assign: g }], rules: [{ conditions: [q, s, t], endpoint: { url: "https://cloudfront.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [q, n, t], endpoint: { url: "https://cloudfront-fips.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [{ [B]: h, [C]: [r, "aws-cn"] }, s, t], endpoint: { url: "https://cloudfront.cn-northwest-1.amazonaws.com.cn", properties: { authSchemes: [{ name: i, signingName: j, signingRegion: "cn-northwest-1" }] }, headers: p }, type: e }, { conditions: [n, o], rules: [{ conditions: [{ [B]: c, [C]: [a, v] }, w], rules: [{ endpoint: { url: "https://cloudfront-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: x, rules: [{ conditions: [{ [B]: c, [C]: [v, a] }], rules: [{ endpoint: { url: "https://cloudfront-fips.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: y, rules: [{ conditions: [w], rules: [{ endpoint: { url: "https://cloudfront.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://cloudfront.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-cloudfront/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-cloudfront/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2020-05-31",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultCloudFrontHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "CloudFront",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/CloudFrontClient.js
var CloudFrontClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    __publicField(this, "config");
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultCloudFrontHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/models/CloudFrontServiceException.js
var CloudFrontServiceException = class _CloudFrontServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _CloudFrontServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/models/models_0.js
var ResponseHeadersPolicyAccessControlAllowMethodsValues = {
  ALL: "ALL",
  DELETE: "DELETE",
  GET: "GET",
  HEAD: "HEAD",
  OPTIONS: "OPTIONS",
  PATCH: "PATCH",
  POST: "POST",
  PUT: "PUT"
};
var AccessDenied = class _AccessDenied extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "AccessDenied",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "AccessDenied");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _AccessDenied.prototype);
    this.Message = opts.Message;
  }
};
var ICPRecordalStatus = {
  APPROVED: "APPROVED",
  PENDING: "PENDING",
  SUSPENDED: "SUSPENDED"
};
var Method = {
  DELETE: "DELETE",
  GET: "GET",
  HEAD: "HEAD",
  OPTIONS: "OPTIONS",
  PATCH: "PATCH",
  POST: "POST",
  PUT: "PUT"
};
var IllegalUpdate = class _IllegalUpdate extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "IllegalUpdate",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "IllegalUpdate");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _IllegalUpdate.prototype);
    this.Message = opts.Message;
  }
};
var InvalidArgument = class _InvalidArgument extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidArgument",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidArgument");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidArgument.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchDistribution = class _NoSuchDistribution extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchDistribution",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchDistribution");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchDistribution.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionCNAMEs = class _TooManyDistributionCNAMEs extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionCNAMEs",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionCNAMEs");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionCNAMEs.prototype);
    this.Message = opts.Message;
  }
};
var BatchTooLarge = class _BatchTooLarge extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "BatchTooLarge",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "BatchTooLarge");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _BatchTooLarge.prototype);
    this.Message = opts.Message;
  }
};
var ItemSelection = {
  all: "all",
  none: "none",
  whitelist: "whitelist"
};
var EventType = {
  origin_request: "origin-request",
  origin_response: "origin-response",
  viewer_request: "viewer-request",
  viewer_response: "viewer-response"
};
var ViewerProtocolPolicy = {
  allow_all: "allow-all",
  https_only: "https-only",
  redirect_to_https: "redirect-to-https"
};
var CachePolicyCookieBehavior = {
  all: "all",
  allExcept: "allExcept",
  none: "none",
  whitelist: "whitelist"
};
var CachePolicyHeaderBehavior = {
  none: "none",
  whitelist: "whitelist"
};
var CachePolicyQueryStringBehavior = {
  all: "all",
  allExcept: "allExcept",
  none: "none",
  whitelist: "whitelist"
};
var CachePolicyAlreadyExists = class _CachePolicyAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CachePolicyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CachePolicyAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CachePolicyAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var CachePolicyInUse = class _CachePolicyInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CachePolicyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CachePolicyInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CachePolicyInUse.prototype);
    this.Message = opts.Message;
  }
};
var CachePolicyType = {
  custom: "custom",
  managed: "managed"
};
var CannotChangeImmutablePublicKeyFields = class _CannotChangeImmutablePublicKeyFields extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CannotChangeImmutablePublicKeyFields",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CannotChangeImmutablePublicKeyFields");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CannotChangeImmutablePublicKeyFields.prototype);
    this.Message = opts.Message;
  }
};
var CannotDeleteEntityWhileInUse = class _CannotDeleteEntityWhileInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CannotDeleteEntityWhileInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CannotDeleteEntityWhileInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CannotDeleteEntityWhileInUse.prototype);
    this.Message = opts.Message;
  }
};
var CannotUpdateEntityWhileInUse = class _CannotUpdateEntityWhileInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CannotUpdateEntityWhileInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CannotUpdateEntityWhileInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CannotUpdateEntityWhileInUse.prototype);
    this.Message = opts.Message;
  }
};
var CertificateSource = {
  acm: "acm",
  cloudfront: "cloudfront",
  iam: "iam"
};
var CNAMEAlreadyExists = class _CNAMEAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CNAMEAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CNAMEAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CNAMEAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var HttpVersion = {
  http1_1: "http1.1",
  http2: "http2",
  http2and3: "http2and3",
  http3: "http3"
};
var OriginGroupSelectionCriteria = {
  Default: "default",
  MediaQualityBased: "media-quality-based"
};
var OriginProtocolPolicy = {
  http_only: "http-only",
  https_only: "https-only",
  match_viewer: "match-viewer"
};
var SslProtocol = {
  SSLv3: "SSLv3",
  TLSv1: "TLSv1",
  TLSv1_1: "TLSv1.1",
  TLSv1_2: "TLSv1.2"
};
var PriceClass = {
  PriceClass_100: "PriceClass_100",
  PriceClass_200: "PriceClass_200",
  PriceClass_All: "PriceClass_All"
};
var GeoRestrictionType = {
  blacklist: "blacklist",
  none: "none",
  whitelist: "whitelist"
};
var MinimumProtocolVersion = {
  SSLv3: "SSLv3",
  TLSv1: "TLSv1",
  TLSv1_1_2016: "TLSv1.1_2016",
  TLSv1_2016: "TLSv1_2016",
  TLSv1_2_2018: "TLSv1.2_2018",
  TLSv1_2_2019: "TLSv1.2_2019",
  TLSv1_2_2021: "TLSv1.2_2021"
};
var SSLSupportMethod = {
  sni_only: "sni-only",
  static_ip: "static-ip",
  vip: "vip"
};
var DistributionAlreadyExists = class _DistributionAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "DistributionAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DistributionAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _DistributionAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior = class _IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior.prototype);
    this.Message = opts.Message;
  }
};
var InconsistentQuantities = class _InconsistentQuantities extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InconsistentQuantities",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InconsistentQuantities");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InconsistentQuantities.prototype);
    this.Message = opts.Message;
  }
};
var InvalidDefaultRootObject = class _InvalidDefaultRootObject extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidDefaultRootObject",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidDefaultRootObject");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidDefaultRootObject.prototype);
    this.Message = opts.Message;
  }
};
var InvalidErrorCode = class _InvalidErrorCode extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidErrorCode",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidErrorCode");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidErrorCode.prototype);
    this.Message = opts.Message;
  }
};
var InvalidForwardCookies = class _InvalidForwardCookies extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidForwardCookies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidForwardCookies");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidForwardCookies.prototype);
    this.Message = opts.Message;
  }
};
var InvalidFunctionAssociation = class _InvalidFunctionAssociation extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidFunctionAssociation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidFunctionAssociation");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidFunctionAssociation.prototype);
    this.Message = opts.Message;
  }
};
var InvalidGeoRestrictionParameter = class _InvalidGeoRestrictionParameter extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidGeoRestrictionParameter",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidGeoRestrictionParameter");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidGeoRestrictionParameter.prototype);
    this.Message = opts.Message;
  }
};
var InvalidHeadersForS3Origin = class _InvalidHeadersForS3Origin extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidHeadersForS3Origin",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidHeadersForS3Origin");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidHeadersForS3Origin.prototype);
    this.Message = opts.Message;
  }
};
var InvalidIfMatchVersion = class _InvalidIfMatchVersion extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidIfMatchVersion",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidIfMatchVersion");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidIfMatchVersion.prototype);
    this.Message = opts.Message;
  }
};
var InvalidLambdaFunctionAssociation = class _InvalidLambdaFunctionAssociation extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidLambdaFunctionAssociation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidLambdaFunctionAssociation");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidLambdaFunctionAssociation.prototype);
    this.Message = opts.Message;
  }
};
var InvalidLocationCode = class _InvalidLocationCode extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidLocationCode",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidLocationCode");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidLocationCode.prototype);
    this.Message = opts.Message;
  }
};
var InvalidMinimumProtocolVersion = class _InvalidMinimumProtocolVersion extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidMinimumProtocolVersion",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidMinimumProtocolVersion");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidMinimumProtocolVersion.prototype);
    this.Message = opts.Message;
  }
};
var InvalidOrigin = class _InvalidOrigin extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidOrigin",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidOrigin");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidOrigin.prototype);
    this.Message = opts.Message;
  }
};
var InvalidOriginAccessControl = class _InvalidOriginAccessControl extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidOriginAccessControl",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidOriginAccessControl");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidOriginAccessControl.prototype);
    this.Message = opts.Message;
  }
};
var InvalidOriginAccessIdentity = class _InvalidOriginAccessIdentity extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidOriginAccessIdentity",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidOriginAccessIdentity");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidOriginAccessIdentity.prototype);
    this.Message = opts.Message;
  }
};
var InvalidOriginKeepaliveTimeout = class _InvalidOriginKeepaliveTimeout extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidOriginKeepaliveTimeout",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidOriginKeepaliveTimeout");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidOriginKeepaliveTimeout.prototype);
    this.Message = opts.Message;
  }
};
var InvalidOriginReadTimeout = class _InvalidOriginReadTimeout extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidOriginReadTimeout",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidOriginReadTimeout");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidOriginReadTimeout.prototype);
    this.Message = opts.Message;
  }
};
var InvalidProtocolSettings = class _InvalidProtocolSettings extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidProtocolSettings",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidProtocolSettings");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidProtocolSettings.prototype);
    this.Message = opts.Message;
  }
};
var InvalidQueryStringParameters = class _InvalidQueryStringParameters extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidQueryStringParameters",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidQueryStringParameters");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidQueryStringParameters.prototype);
    this.Message = opts.Message;
  }
};
var InvalidRelativePath = class _InvalidRelativePath extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidRelativePath",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidRelativePath");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidRelativePath.prototype);
    this.Message = opts.Message;
  }
};
var InvalidRequiredProtocol = class _InvalidRequiredProtocol extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidRequiredProtocol",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidRequiredProtocol");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidRequiredProtocol.prototype);
    this.Message = opts.Message;
  }
};
var InvalidResponseCode = class _InvalidResponseCode extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidResponseCode",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidResponseCode");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidResponseCode.prototype);
    this.Message = opts.Message;
  }
};
var InvalidTTLOrder = class _InvalidTTLOrder extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidTTLOrder",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidTTLOrder");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidTTLOrder.prototype);
    this.Message = opts.Message;
  }
};
var InvalidViewerCertificate = class _InvalidViewerCertificate extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidViewerCertificate",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidViewerCertificate");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidViewerCertificate.prototype);
    this.Message = opts.Message;
  }
};
var InvalidWebACLId = class _InvalidWebACLId extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidWebACLId",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidWebACLId");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidWebACLId.prototype);
    this.Message = opts.Message;
  }
};
var MissingBody = class _MissingBody extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "MissingBody",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "MissingBody");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _MissingBody.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchCachePolicy = class _NoSuchCachePolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchCachePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchCachePolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchCachePolicy.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchFieldLevelEncryptionConfig = class _NoSuchFieldLevelEncryptionConfig extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchFieldLevelEncryptionConfig",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchFieldLevelEncryptionConfig");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchFieldLevelEncryptionConfig.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchOrigin = class _NoSuchOrigin extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchOrigin",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchOrigin");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchOrigin.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchOriginRequestPolicy = class _NoSuchOriginRequestPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchOriginRequestPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchOriginRequestPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchOriginRequestPolicy.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchRealtimeLogConfig = class _NoSuchRealtimeLogConfig extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchRealtimeLogConfig",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchRealtimeLogConfig");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchRealtimeLogConfig.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchResponseHeadersPolicy = class _NoSuchResponseHeadersPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchResponseHeadersPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchResponseHeadersPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchResponseHeadersPolicy.prototype);
    this.Message = opts.Message;
  }
};
var PreconditionFailed = class _PreconditionFailed extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "PreconditionFailed",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PreconditionFailed");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _PreconditionFailed.prototype);
    this.Message = opts.Message;
  }
};
var RealtimeLogConfigOwnerMismatch = class _RealtimeLogConfigOwnerMismatch extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "RealtimeLogConfigOwnerMismatch",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "RealtimeLogConfigOwnerMismatch");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _RealtimeLogConfigOwnerMismatch.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCacheBehaviors = class _TooManyCacheBehaviors extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCacheBehaviors",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCacheBehaviors");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCacheBehaviors.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCertificates = class _TooManyCertificates extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCertificates",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCertificates");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCertificates.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCookieNamesInWhiteList = class _TooManyCookieNamesInWhiteList extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCookieNamesInWhiteList",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCookieNamesInWhiteList");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCookieNamesInWhiteList.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributions = class _TooManyDistributions extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributions",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributions");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributions.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToCachePolicy = class _TooManyDistributionsAssociatedToCachePolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToCachePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToCachePolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToCachePolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToFieldLevelEncryptionConfig = class _TooManyDistributionsAssociatedToFieldLevelEncryptionConfig extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToFieldLevelEncryptionConfig",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToFieldLevelEncryptionConfig");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToFieldLevelEncryptionConfig.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToKeyGroup = class _TooManyDistributionsAssociatedToKeyGroup extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToKeyGroup",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToKeyGroup");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToKeyGroup.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToOriginAccessControl = class _TooManyDistributionsAssociatedToOriginAccessControl extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToOriginAccessControl",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToOriginAccessControl");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToOriginAccessControl.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToOriginRequestPolicy = class _TooManyDistributionsAssociatedToOriginRequestPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToOriginRequestPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToOriginRequestPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToOriginRequestPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsAssociatedToResponseHeadersPolicy = class _TooManyDistributionsAssociatedToResponseHeadersPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsAssociatedToResponseHeadersPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsAssociatedToResponseHeadersPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsAssociatedToResponseHeadersPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsWithFunctionAssociations = class _TooManyDistributionsWithFunctionAssociations extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsWithFunctionAssociations",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsWithFunctionAssociations");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsWithFunctionAssociations.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsWithLambdaAssociations = class _TooManyDistributionsWithLambdaAssociations extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsWithLambdaAssociations",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsWithLambdaAssociations");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsWithLambdaAssociations.prototype);
    this.Message = opts.Message;
  }
};
var TooManyDistributionsWithSingleFunctionARN = class _TooManyDistributionsWithSingleFunctionARN extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyDistributionsWithSingleFunctionARN",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyDistributionsWithSingleFunctionARN");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyDistributionsWithSingleFunctionARN.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFunctionAssociations = class _TooManyFunctionAssociations extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFunctionAssociations",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFunctionAssociations");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFunctionAssociations.prototype);
    this.Message = opts.Message;
  }
};
var TooManyHeadersInForwardedValues = class _TooManyHeadersInForwardedValues extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyHeadersInForwardedValues",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyHeadersInForwardedValues");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyHeadersInForwardedValues.prototype);
    this.Message = opts.Message;
  }
};
var TooManyKeyGroupsAssociatedToDistribution = class _TooManyKeyGroupsAssociatedToDistribution extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyKeyGroupsAssociatedToDistribution",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyKeyGroupsAssociatedToDistribution");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyKeyGroupsAssociatedToDistribution.prototype);
    this.Message = opts.Message;
  }
};
var TooManyLambdaFunctionAssociations = class _TooManyLambdaFunctionAssociations extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyLambdaFunctionAssociations",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyLambdaFunctionAssociations");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyLambdaFunctionAssociations.prototype);
    this.Message = opts.Message;
  }
};
var TooManyOriginCustomHeaders = class _TooManyOriginCustomHeaders extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyOriginCustomHeaders",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyOriginCustomHeaders");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyOriginCustomHeaders.prototype);
    this.Message = opts.Message;
  }
};
var TooManyOriginGroupsPerDistribution = class _TooManyOriginGroupsPerDistribution extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyOriginGroupsPerDistribution",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyOriginGroupsPerDistribution");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyOriginGroupsPerDistribution.prototype);
    this.Message = opts.Message;
  }
};
var TooManyOrigins = class _TooManyOrigins extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyOrigins",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyOrigins");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyOrigins.prototype);
    this.Message = opts.Message;
  }
};
var TooManyQueryStringParameters = class _TooManyQueryStringParameters extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyQueryStringParameters",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyQueryStringParameters");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyQueryStringParameters.prototype);
    this.Message = opts.Message;
  }
};
var TooManyTrustedSigners = class _TooManyTrustedSigners extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyTrustedSigners",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyTrustedSigners");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyTrustedSigners.prototype);
    this.Message = opts.Message;
  }
};
var TrustedKeyGroupDoesNotExist = class _TrustedKeyGroupDoesNotExist extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TrustedKeyGroupDoesNotExist",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TrustedKeyGroupDoesNotExist");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TrustedKeyGroupDoesNotExist.prototype);
    this.Message = opts.Message;
  }
};
var TrustedSignerDoesNotExist = class _TrustedSignerDoesNotExist extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TrustedSignerDoesNotExist",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TrustedSignerDoesNotExist");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TrustedSignerDoesNotExist.prototype);
    this.Message = opts.Message;
  }
};
var EntityAlreadyExists = class _EntityAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "EntityAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntityAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _EntityAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var EntityLimitExceeded = class _EntityLimitExceeded extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "EntityLimitExceeded",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntityLimitExceeded");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _EntityLimitExceeded.prototype);
    this.Message = opts.Message;
  }
};
var InvalidTagging = class _InvalidTagging extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidTagging",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidTagging");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidTagging.prototype);
    this.Message = opts.Message;
  }
};
var UnsupportedOperation = class _UnsupportedOperation extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "UnsupportedOperation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "UnsupportedOperation");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _UnsupportedOperation.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCachePolicies = class _TooManyCachePolicies extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCachePolicies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCachePolicies");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCachePolicies.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCookiesInCachePolicy = class _TooManyCookiesInCachePolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCookiesInCachePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCookiesInCachePolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCookiesInCachePolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyHeadersInCachePolicy = class _TooManyHeadersInCachePolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyHeadersInCachePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyHeadersInCachePolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyHeadersInCachePolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyQueryStringsInCachePolicy = class _TooManyQueryStringsInCachePolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyQueryStringsInCachePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyQueryStringsInCachePolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyQueryStringsInCachePolicy.prototype);
    this.Message = opts.Message;
  }
};
var CloudFrontOriginAccessIdentityAlreadyExists = class _CloudFrontOriginAccessIdentityAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CloudFrontOriginAccessIdentityAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CloudFrontOriginAccessIdentityAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CloudFrontOriginAccessIdentityAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCloudFrontOriginAccessIdentities = class _TooManyCloudFrontOriginAccessIdentities extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCloudFrontOriginAccessIdentities",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCloudFrontOriginAccessIdentities");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCloudFrontOriginAccessIdentities.prototype);
    this.Message = opts.Message;
  }
};
var ContinuousDeploymentPolicyAlreadyExists = class _ContinuousDeploymentPolicyAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "ContinuousDeploymentPolicyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ContinuousDeploymentPolicyAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ContinuousDeploymentPolicyAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var ContinuousDeploymentPolicyType = {
  SingleHeader: "SingleHeader",
  SingleWeight: "SingleWeight"
};
var StagingDistributionInUse = class _StagingDistributionInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "StagingDistributionInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "StagingDistributionInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _StagingDistributionInUse.prototype);
    this.Message = opts.Message;
  }
};
var TooManyContinuousDeploymentPolicies = class _TooManyContinuousDeploymentPolicies extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyContinuousDeploymentPolicies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyContinuousDeploymentPolicies");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyContinuousDeploymentPolicies.prototype);
    this.Message = opts.Message;
  }
};
var ContinuousDeploymentPolicyInUse = class _ContinuousDeploymentPolicyInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "ContinuousDeploymentPolicyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ContinuousDeploymentPolicyInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ContinuousDeploymentPolicyInUse.prototype);
    this.Message = opts.Message;
  }
};
var EntityNotFound = class _EntityNotFound extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "EntityNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntityNotFound");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _EntityNotFound.prototype);
    this.Message = opts.Message;
  }
};
var IllegalOriginAccessConfiguration = class _IllegalOriginAccessConfiguration extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "IllegalOriginAccessConfiguration",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "IllegalOriginAccessConfiguration");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _IllegalOriginAccessConfiguration.prototype);
    this.Message = opts.Message;
  }
};
var InvalidDomainNameForOriginAccessControl = class _InvalidDomainNameForOriginAccessControl extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "InvalidDomainNameForOriginAccessControl",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidDomainNameForOriginAccessControl");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _InvalidDomainNameForOriginAccessControl.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchContinuousDeploymentPolicy = class _NoSuchContinuousDeploymentPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchContinuousDeploymentPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchContinuousDeploymentPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchContinuousDeploymentPolicy.prototype);
    this.Message = opts.Message;
  }
};
var Format = {
  URLEncoded: "URLEncoded"
};
var FieldLevelEncryptionConfigAlreadyExists = class _FieldLevelEncryptionConfigAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FieldLevelEncryptionConfigAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FieldLevelEncryptionConfigAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FieldLevelEncryptionConfigAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchFieldLevelEncryptionProfile = class _NoSuchFieldLevelEncryptionProfile extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchFieldLevelEncryptionProfile",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchFieldLevelEncryptionProfile");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchFieldLevelEncryptionProfile.prototype);
    this.Message = opts.Message;
  }
};
var QueryArgProfileEmpty = class _QueryArgProfileEmpty extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "QueryArgProfileEmpty",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "QueryArgProfileEmpty");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _QueryArgProfileEmpty.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionConfigs = class _TooManyFieldLevelEncryptionConfigs extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionConfigs",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionConfigs");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionConfigs.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionContentTypeProfiles = class _TooManyFieldLevelEncryptionContentTypeProfiles extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionContentTypeProfiles",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionContentTypeProfiles");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionContentTypeProfiles.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionQueryArgProfiles = class _TooManyFieldLevelEncryptionQueryArgProfiles extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionQueryArgProfiles",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionQueryArgProfiles");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionQueryArgProfiles.prototype);
    this.Message = opts.Message;
  }
};
var FieldLevelEncryptionProfileAlreadyExists = class _FieldLevelEncryptionProfileAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FieldLevelEncryptionProfileAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FieldLevelEncryptionProfileAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FieldLevelEncryptionProfileAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var FieldLevelEncryptionProfileSizeExceeded = class _FieldLevelEncryptionProfileSizeExceeded extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FieldLevelEncryptionProfileSizeExceeded",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FieldLevelEncryptionProfileSizeExceeded");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FieldLevelEncryptionProfileSizeExceeded.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchPublicKey = class _NoSuchPublicKey extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchPublicKey",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchPublicKey");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchPublicKey.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionEncryptionEntities = class _TooManyFieldLevelEncryptionEncryptionEntities extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionEncryptionEntities",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionEncryptionEntities");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionEncryptionEntities.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionFieldPatterns = class _TooManyFieldLevelEncryptionFieldPatterns extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionFieldPatterns",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionFieldPatterns");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionFieldPatterns.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFieldLevelEncryptionProfiles = class _TooManyFieldLevelEncryptionProfiles extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFieldLevelEncryptionProfiles",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFieldLevelEncryptionProfiles");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFieldLevelEncryptionProfiles.prototype);
    this.Message = opts.Message;
  }
};
var FunctionRuntime = {
  cloudfront_js_1_0: "cloudfront-js-1.0",
  cloudfront_js_2_0: "cloudfront-js-2.0"
};
var FunctionStage = {
  DEVELOPMENT: "DEVELOPMENT",
  LIVE: "LIVE"
};
var FunctionAlreadyExists = class _FunctionAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FunctionAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FunctionAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FunctionAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var FunctionSizeLimitExceeded = class _FunctionSizeLimitExceeded extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FunctionSizeLimitExceeded",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FunctionSizeLimitExceeded");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FunctionSizeLimitExceeded.prototype);
    this.Message = opts.Message;
  }
};
var TooManyFunctions = class _TooManyFunctions extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyFunctions",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyFunctions");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyFunctions.prototype);
    this.Message = opts.Message;
  }
};
var TooManyInvalidationsInProgress = class _TooManyInvalidationsInProgress extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyInvalidationsInProgress",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyInvalidationsInProgress");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyInvalidationsInProgress.prototype);
    this.Message = opts.Message;
  }
};
var KeyGroupAlreadyExists = class _KeyGroupAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "KeyGroupAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeyGroupAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _KeyGroupAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyKeyGroups = class _TooManyKeyGroups extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyKeyGroups",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyKeyGroups");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyKeyGroups.prototype);
    this.Message = opts.Message;
  }
};
var TooManyPublicKeysInKeyGroup = class _TooManyPublicKeysInKeyGroup extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyPublicKeysInKeyGroup",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyPublicKeysInKeyGroup");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyPublicKeysInKeyGroup.prototype);
    this.Message = opts.Message;
  }
};
var ImportSourceType = {
  S3: "S3"
};
var EntitySizeLimitExceeded = class _EntitySizeLimitExceeded extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "EntitySizeLimitExceeded",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "EntitySizeLimitExceeded");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _EntitySizeLimitExceeded.prototype);
    this.Message = opts.Message;
  }
};
var RealtimeMetricsSubscriptionStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var MonitoringSubscriptionAlreadyExists = class _MonitoringSubscriptionAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "MonitoringSubscriptionAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "MonitoringSubscriptionAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _MonitoringSubscriptionAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var OriginAccessControlOriginTypes = {
  lambda: "lambda",
  mediapackagev2: "mediapackagev2",
  mediastore: "mediastore",
  s3: "s3"
};
var OriginAccessControlSigningBehaviors = {
  always: "always",
  never: "never",
  no_override: "no-override"
};
var OriginAccessControlSigningProtocols = {
  sigv4: "sigv4"
};
var OriginAccessControlAlreadyExists = class _OriginAccessControlAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "OriginAccessControlAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OriginAccessControlAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OriginAccessControlAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyOriginAccessControls = class _TooManyOriginAccessControls extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyOriginAccessControls",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyOriginAccessControls");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyOriginAccessControls.prototype);
    this.Message = opts.Message;
  }
};
var OriginRequestPolicyCookieBehavior = {
  all: "all",
  allExcept: "allExcept",
  none: "none",
  whitelist: "whitelist"
};
var OriginRequestPolicyHeaderBehavior = {
  allExcept: "allExcept",
  allViewer: "allViewer",
  allViewerAndWhitelistCloudFront: "allViewerAndWhitelistCloudFront",
  none: "none",
  whitelist: "whitelist"
};
var OriginRequestPolicyQueryStringBehavior = {
  all: "all",
  allExcept: "allExcept",
  none: "none",
  whitelist: "whitelist"
};
var OriginRequestPolicyAlreadyExists = class _OriginRequestPolicyAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "OriginRequestPolicyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OriginRequestPolicyAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OriginRequestPolicyAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCookiesInOriginRequestPolicy = class _TooManyCookiesInOriginRequestPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCookiesInOriginRequestPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCookiesInOriginRequestPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCookiesInOriginRequestPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyHeadersInOriginRequestPolicy = class _TooManyHeadersInOriginRequestPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyHeadersInOriginRequestPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyHeadersInOriginRequestPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyHeadersInOriginRequestPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyOriginRequestPolicies = class _TooManyOriginRequestPolicies extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyOriginRequestPolicies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyOriginRequestPolicies");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyOriginRequestPolicies.prototype);
    this.Message = opts.Message;
  }
};
var TooManyQueryStringsInOriginRequestPolicy = class _TooManyQueryStringsInOriginRequestPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyQueryStringsInOriginRequestPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyQueryStringsInOriginRequestPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyQueryStringsInOriginRequestPolicy.prototype);
    this.Message = opts.Message;
  }
};
var PublicKeyAlreadyExists = class _PublicKeyAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "PublicKeyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PublicKeyAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _PublicKeyAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyPublicKeys = class _TooManyPublicKeys extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyPublicKeys",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyPublicKeys");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyPublicKeys.prototype);
    this.Message = opts.Message;
  }
};
var RealtimeLogConfigAlreadyExists = class _RealtimeLogConfigAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "RealtimeLogConfigAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "RealtimeLogConfigAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _RealtimeLogConfigAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyRealtimeLogConfigs = class _TooManyRealtimeLogConfigs extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyRealtimeLogConfigs",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyRealtimeLogConfigs");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyRealtimeLogConfigs.prototype);
    this.Message = opts.Message;
  }
};
var OriginCustomHeaderFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.HeaderValue && { HeaderValue: SENSITIVE_STRING }
});
var CustomHeadersFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Items && { Items: obj.Items.map((item) => OriginCustomHeaderFilterSensitiveLog(item)) }
});
var OriginFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.CustomHeaders && { CustomHeaders: CustomHeadersFilterSensitiveLog(obj.CustomHeaders) }
});
var OriginsFilterSensitiveLog = (obj) => ({
  ...obj
});
var DistributionConfigFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Comment && { Comment: SENSITIVE_STRING }
});
var DistributionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfig && { DistributionConfig: DistributionConfigFilterSensitiveLog(obj.DistributionConfig) }
});
var CopyDistributionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var CreateDistributionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfig && { DistributionConfig: DistributionConfigFilterSensitiveLog(obj.DistributionConfig) }
});
var CreateDistributionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var DistributionConfigWithTagsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfig && { DistributionConfig: DistributionConfigFilterSensitiveLog(obj.DistributionConfig) }
});
var CreateDistributionWithTagsRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfigWithTags && {
    DistributionConfigWithTags: DistributionConfigWithTagsFilterSensitiveLog(obj.DistributionConfigWithTags)
  }
});
var CreateDistributionWithTagsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var CreateFunctionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.FunctionCode && { FunctionCode: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-cloudfront/dist-es/models/models_1.js
var FrameOptionsList = {
  DENY: "DENY",
  SAMEORIGIN: "SAMEORIGIN"
};
var ReferrerPolicyList = {
  no_referrer: "no-referrer",
  no_referrer_when_downgrade: "no-referrer-when-downgrade",
  origin: "origin",
  origin_when_cross_origin: "origin-when-cross-origin",
  same_origin: "same-origin",
  strict_origin: "strict-origin",
  strict_origin_when_cross_origin: "strict-origin-when-cross-origin",
  unsafe_url: "unsafe-url"
};
var ResponseHeadersPolicyAlreadyExists = class _ResponseHeadersPolicyAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "ResponseHeadersPolicyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ResponseHeadersPolicyAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ResponseHeadersPolicyAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooLongCSPInResponseHeadersPolicy = class _TooLongCSPInResponseHeadersPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooLongCSPInResponseHeadersPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooLongCSPInResponseHeadersPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooLongCSPInResponseHeadersPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyCustomHeadersInResponseHeadersPolicy = class _TooManyCustomHeadersInResponseHeadersPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyCustomHeadersInResponseHeadersPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyCustomHeadersInResponseHeadersPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyCustomHeadersInResponseHeadersPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyRemoveHeadersInResponseHeadersPolicy = class _TooManyRemoveHeadersInResponseHeadersPolicy extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyRemoveHeadersInResponseHeadersPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyRemoveHeadersInResponseHeadersPolicy");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyRemoveHeadersInResponseHeadersPolicy.prototype);
    this.Message = opts.Message;
  }
};
var TooManyResponseHeadersPolicies = class _TooManyResponseHeadersPolicies extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyResponseHeadersPolicies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyResponseHeadersPolicies");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyResponseHeadersPolicies.prototype);
    this.Message = opts.Message;
  }
};
var StreamingDistributionAlreadyExists = class _StreamingDistributionAlreadyExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "StreamingDistributionAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "StreamingDistributionAlreadyExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _StreamingDistributionAlreadyExists.prototype);
    this.Message = opts.Message;
  }
};
var TooManyStreamingDistributionCNAMEs = class _TooManyStreamingDistributionCNAMEs extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyStreamingDistributionCNAMEs",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyStreamingDistributionCNAMEs");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyStreamingDistributionCNAMEs.prototype);
    this.Message = opts.Message;
  }
};
var TooManyStreamingDistributions = class _TooManyStreamingDistributions extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TooManyStreamingDistributions",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyStreamingDistributions");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TooManyStreamingDistributions.prototype);
    this.Message = opts.Message;
  }
};
var IllegalDelete = class _IllegalDelete extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "IllegalDelete",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "IllegalDelete");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _IllegalDelete.prototype);
    this.Message = opts.Message;
  }
};
var CloudFrontOriginAccessIdentityInUse = class _CloudFrontOriginAccessIdentityInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "CloudFrontOriginAccessIdentityInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CloudFrontOriginAccessIdentityInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CloudFrontOriginAccessIdentityInUse.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchCloudFrontOriginAccessIdentity = class _NoSuchCloudFrontOriginAccessIdentity extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchCloudFrontOriginAccessIdentity",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchCloudFrontOriginAccessIdentity");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchCloudFrontOriginAccessIdentity.prototype);
    this.Message = opts.Message;
  }
};
var DistributionNotDisabled = class _DistributionNotDisabled extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "DistributionNotDisabled",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DistributionNotDisabled");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _DistributionNotDisabled.prototype);
    this.Message = opts.Message;
  }
};
var FieldLevelEncryptionConfigInUse = class _FieldLevelEncryptionConfigInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FieldLevelEncryptionConfigInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FieldLevelEncryptionConfigInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FieldLevelEncryptionConfigInUse.prototype);
    this.Message = opts.Message;
  }
};
var FieldLevelEncryptionProfileInUse = class _FieldLevelEncryptionProfileInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FieldLevelEncryptionProfileInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FieldLevelEncryptionProfileInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FieldLevelEncryptionProfileInUse.prototype);
    this.Message = opts.Message;
  }
};
var FunctionInUse = class _FunctionInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "FunctionInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "FunctionInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _FunctionInUse.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchFunctionExists = class _NoSuchFunctionExists extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchFunctionExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchFunctionExists");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchFunctionExists.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchResource = class _NoSuchResource extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchResource",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchResource");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchResource.prototype);
    this.Message = opts.Message;
  }
};
var ResourceInUse = class _ResourceInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "ResourceInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ResourceInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ResourceInUse.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchMonitoringSubscription = class _NoSuchMonitoringSubscription extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchMonitoringSubscription",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchMonitoringSubscription");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchMonitoringSubscription.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchOriginAccessControl = class _NoSuchOriginAccessControl extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchOriginAccessControl",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchOriginAccessControl");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchOriginAccessControl.prototype);
    this.Message = opts.Message;
  }
};
var OriginAccessControlInUse = class _OriginAccessControlInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "OriginAccessControlInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OriginAccessControlInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OriginAccessControlInUse.prototype);
    this.Message = opts.Message;
  }
};
var OriginRequestPolicyInUse = class _OriginRequestPolicyInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "OriginRequestPolicyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "OriginRequestPolicyInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _OriginRequestPolicyInUse.prototype);
    this.Message = opts.Message;
  }
};
var PublicKeyInUse = class _PublicKeyInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "PublicKeyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PublicKeyInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _PublicKeyInUse.prototype);
    this.Message = opts.Message;
  }
};
var RealtimeLogConfigInUse = class _RealtimeLogConfigInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "RealtimeLogConfigInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "RealtimeLogConfigInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _RealtimeLogConfigInUse.prototype);
    this.Message = opts.Message;
  }
};
var ResponseHeadersPolicyInUse = class _ResponseHeadersPolicyInUse extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "ResponseHeadersPolicyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ResponseHeadersPolicyInUse");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _ResponseHeadersPolicyInUse.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchStreamingDistribution = class _NoSuchStreamingDistribution extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchStreamingDistribution",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchStreamingDistribution");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchStreamingDistribution.prototype);
    this.Message = opts.Message;
  }
};
var StreamingDistributionNotDisabled = class _StreamingDistributionNotDisabled extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "StreamingDistributionNotDisabled",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "StreamingDistributionNotDisabled");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _StreamingDistributionNotDisabled.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchInvalidation = class _NoSuchInvalidation extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "NoSuchInvalidation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchInvalidation");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchInvalidation.prototype);
    this.Message = opts.Message;
  }
};
var OriginRequestPolicyType = {
  custom: "custom",
  managed: "managed"
};
var ResponseHeadersPolicyType = {
  custom: "custom",
  managed: "managed"
};
var TestFunctionFailed = class _TestFunctionFailed extends CloudFrontServiceException {
  constructor(opts) {
    super({
      name: "TestFunctionFailed",
      $fault: "server",
      ...opts
    });
    __publicField(this, "name", "TestFunctionFailed");
    __publicField(this, "$fault", "server");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _TestFunctionFailed.prototype);
    this.Message = opts.Message;
  }
};
var GetDistributionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var GetDistributionConfigResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfig && { DistributionConfig: DistributionConfigFilterSensitiveLog(obj.DistributionConfig) }
});
var GetFunctionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.FunctionCode && { FunctionCode: SENSITIVE_STRING }
});
var DistributionSummaryFilterSensitiveLog = (obj) => ({
  ...obj
});
var DistributionListFilterSensitiveLog = (obj) => ({
  ...obj
});
var ListDistributionsResultFilterSensitiveLog = (obj) => ({
  ...obj
});
var ListDistributionsByAnycastIpListIdResultFilterSensitiveLog = (obj) => ({
  ...obj
});
var ListDistributionsByRealtimeLogConfigResultFilterSensitiveLog = (obj) => ({
  ...obj
});
var ListDistributionsByWebACLIdResultFilterSensitiveLog = (obj) => ({
  ...obj
});
var TestFunctionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.EventObject && { EventObject: SENSITIVE_STRING }
});
var TestResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.FunctionExecutionLogs && { FunctionExecutionLogs: SENSITIVE_STRING },
  ...obj.FunctionErrorMessage && { FunctionErrorMessage: SENSITIVE_STRING },
  ...obj.FunctionOutput && { FunctionOutput: SENSITIVE_STRING }
});
var TestFunctionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TestResult && { TestResult: TestResultFilterSensitiveLog(obj.TestResult) }
});
var UpdateDistributionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DistributionConfig && { DistributionConfig: DistributionConfigFilterSensitiveLog(obj.DistributionConfig) }
});
var UpdateDistributionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var UpdateDistributionWithStagingConfigResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Distribution && { Distribution: DistributionFilterSensitiveLog(obj.Distribution) }
});
var UpdateFunctionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.FunctionCode && { FunctionCode: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-cloudfront/dist-es/protocols/Aws_restXml.js
var se_AssociateAliasCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution/{TargetDistributionId}/associate-alias");
  b2.p("TargetDistributionId", () => input.TargetDistributionId, "{TargetDistributionId}", false);
  const query = map({
    [_A]: [, expectNonNull(input[_A], `Alias`)]
  });
  let body;
  b2.m("PUT").h(headers).q(query).b(body);
  return b2.build();
};
var se_CopyDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_s]: [() => isSerializableHeaderValue(input[_S]), () => input[_S].toString()],
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/distribution/{PrimaryDistributionId}/copy");
  b2.p("PrimaryDistributionId", () => input.PrimaryDistributionId, "{PrimaryDistributionId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CDR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateAnycastIpListCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/anycast-ip-list");
  let body;
  body = _ve;
  const bn = new XmlNode(_CAILR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_IC] != null) {
    bn.c(XmlNode.of(_i, String(input[_IC])).n(_IC));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_AILN, input[_N]).n(_N));
  }
  if (input[_T] != null) {
    bn.c(se_Tags(input[_T], context).n(_T));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateCachePolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/cache-policy");
  let body;
  let contents;
  if (input.CachePolicyConfig !== void 0) {
    contents = se_CachePolicyConfig(input.CachePolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateCloudFrontOriginAccessIdentityCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/origin-access-identity/cloudfront");
  let body;
  let contents;
  if (input.CloudFrontOriginAccessIdentityConfig !== void 0) {
    contents = se_CloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateContinuousDeploymentPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/continuous-deployment-policy");
  let body;
  let contents;
  if (input.ContinuousDeploymentPolicyConfig !== void 0) {
    contents = se_ContinuousDeploymentPolicyConfig(input.ContinuousDeploymentPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/distribution");
  let body;
  let contents;
  if (input.DistributionConfig !== void 0) {
    contents = se_DistributionConfig(input.DistributionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateDistributionWithTagsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/distribution");
  const query = map({
    [_WT]: [, ""]
  });
  let body;
  let contents;
  if (input.DistributionConfigWithTags !== void 0) {
    contents = se_DistributionConfigWithTags(input.DistributionConfigWithTags, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).q(query).b(body);
  return b2.build();
};
var se_CreateFieldLevelEncryptionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/field-level-encryption");
  let body;
  let contents;
  if (input.FieldLevelEncryptionConfig !== void 0) {
    contents = se_FieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateFieldLevelEncryptionProfileCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/field-level-encryption-profile");
  let body;
  let contents;
  if (input.FieldLevelEncryptionProfileConfig !== void 0) {
    contents = se_FieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/function");
  let body;
  body = _ve;
  const bn = new XmlNode(_CFR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_FC] != null) {
    bn.c(XmlNode.of(_FB, context.base64Encoder(input[_FC])).n(_FC));
  }
  if (input[_FCu] != null) {
    bn.c(se_FunctionConfig(input[_FCu], context).n(_FCu));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_FN, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateInvalidationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/distribution/{DistributionId}/invalidation");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  let body;
  let contents;
  if (input.InvalidationBatch !== void 0) {
    contents = se_InvalidationBatch(input.InvalidationBatch, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateKeyGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/key-group");
  let body;
  let contents;
  if (input.KeyGroupConfig !== void 0) {
    contents = se_KeyGroupConfig(input.KeyGroupConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateKeyValueStoreCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/key-value-store");
  let body;
  body = _ve;
  const bn = new XmlNode(_CKVSR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_KVSC, input[_C]).n(_C));
  }
  if (input[_IS] != null) {
    bn.c(se_ImportSource(input[_IS], context).n(_IS));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_KVSN, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateMonitoringSubscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/distributions/{DistributionId}/monitoring-subscription");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  let body;
  let contents;
  if (input.MonitoringSubscription !== void 0) {
    contents = se_MonitoringSubscription(input.MonitoringSubscription, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateOriginAccessControlCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/origin-access-control");
  let body;
  let contents;
  if (input.OriginAccessControlConfig !== void 0) {
    contents = se_OriginAccessControlConfig(input.OriginAccessControlConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateOriginRequestPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/origin-request-policy");
  let body;
  let contents;
  if (input.OriginRequestPolicyConfig !== void 0) {
    contents = se_OriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreatePublicKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/public-key");
  let body;
  let contents;
  if (input.PublicKeyConfig !== void 0) {
    contents = se_PublicKeyConfig(input.PublicKeyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateRealtimeLogConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/realtime-log-config");
  let body;
  body = _ve;
  const bn = new XmlNode(_CRLCR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  bn.lc(input, "EndPoints", "EndPoints", () => se_EndPointList(input[_EP], context));
  bn.lc(input, "Fields", "Fields", () => se_FieldList(input[_F], context));
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_SR] != null) {
    bn.c(XmlNode.of(_l, String(input[_SR])).n(_SR));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateResponseHeadersPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/response-headers-policy");
  let body;
  let contents;
  if (input.ResponseHeadersPolicyConfig !== void 0) {
    contents = se_ResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateStreamingDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/streaming-distribution");
  let body;
  let contents;
  if (input.StreamingDistributionConfig !== void 0) {
    contents = se_StreamingDistributionConfig(input.StreamingDistributionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateStreamingDistributionWithTagsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/streaming-distribution");
  const query = map({
    [_WT]: [, ""]
  });
  let body;
  let contents;
  if (input.StreamingDistributionConfigWithTags !== void 0) {
    contents = se_StreamingDistributionConfigWithTags(input.StreamingDistributionConfigWithTags, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).q(query).b(body);
  return b2.build();
};
var se_CreateVpcOriginCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/vpc-origin");
  let body;
  body = _ve;
  const bn = new XmlNode(_CVOR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_T] != null) {
    bn.c(se_Tags(input[_T], context).n(_T));
  }
  if (input[_VOEC] != null) {
    bn.c(se_VpcOriginEndpointConfig(input[_VOEC], context).n(_VOEC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeleteAnycastIpListCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/anycast-ip-list/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteCachePolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/cache-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteCloudFrontOriginAccessIdentityCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-access-identity/cloudfront/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteContinuousDeploymentPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/continuous-deployment-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/distribution/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteFieldLevelEncryptionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/field-level-encryption/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteFieldLevelEncryptionProfileCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/field-level-encryption-profile/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/function/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteKeyGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/key-group/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteKeyValueStoreCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/key-value-store/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteMonitoringSubscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributions/{DistributionId}/monitoring-subscription");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteOriginAccessControlCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-access-control/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteOriginRequestPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-request-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeletePublicKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/public-key/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteRealtimeLogConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/delete-realtime-log-config");
  let body;
  body = _ve;
  const bn = new XmlNode(_DRLCR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_ARN] != null) {
    bn.c(XmlNode.of(_st, input[_ARN]).n(_ARN));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeleteResponseHeadersPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/response-headers-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteStreamingDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/streaming-distribution/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteVpcOriginCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/vpc-origin/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DescribeFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/function/{Name}/describe");
  b2.p("Name", () => input.Name, "{Name}", false);
  const query = map({
    [_St]: [, input[_St]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_DescribeKeyValueStoreCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/key-value-store/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetAnycastIpListCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/anycast-ip-list/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCachePolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/cache-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCachePolicyConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/cache-policy/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCloudFrontOriginAccessIdentityCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-identity/cloudfront/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCloudFrontOriginAccessIdentityConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-identity/cloudfront/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetContinuousDeploymentPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/continuous-deployment-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetContinuousDeploymentPolicyConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/continuous-deployment-policy/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetDistributionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFieldLevelEncryptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFieldLevelEncryptionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFieldLevelEncryptionProfileCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption-profile/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFieldLevelEncryptionProfileConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption-profile/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/function/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  const query = map({
    [_St]: [, input[_St]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_GetInvalidationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution/{DistributionId}/invalidation/{Id}");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetKeyGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/key-group/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetKeyGroupConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/key-group/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetMonitoringSubscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributions/{DistributionId}/monitoring-subscription");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetOriginAccessControlCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-control/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetOriginAccessControlConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-control/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetOriginRequestPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-request-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetOriginRequestPolicyConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-request-policy/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetPublicKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/public-key/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetPublicKeyConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/public-key/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetRealtimeLogConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/get-realtime-log-config");
  let body;
  body = _ve;
  const bn = new XmlNode(_GRLCR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_ARN] != null) {
    bn.c(XmlNode.of(_st, input[_ARN]).n(_ARN));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetResponseHeadersPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/response-headers-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetResponseHeadersPolicyConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/response-headers-policy/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetStreamingDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/streaming-distribution/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetStreamingDistributionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/streaming-distribution/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetVpcOriginCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/vpc-origin/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_ListAnycastIpListsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/anycast-ip-list");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListCachePoliciesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/cache-policy");
  const query = map({
    [_Ty]: [, input[_Ty]],
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListCloudFrontOriginAccessIdentitiesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-identity/cloudfront");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListConflictingAliasesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/conflicting-alias");
  const query = map({
    [_DI]: [, expectNonNull(input[_DI], `DistributionId`)],
    [_A]: [, expectNonNull(input[_A], `Alias`)],
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListContinuousDeploymentPoliciesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/continuous-deployment-policy");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByAnycastIpListIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByAnycastIpListId/{AnycastIpListId}");
  b2.p("AnycastIpListId", () => input.AnycastIpListId, "{AnycastIpListId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByCachePolicyIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}");
  b2.p("CachePolicyId", () => input.CachePolicyId, "{CachePolicyId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByKeyGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}");
  b2.p("KeyGroupId", () => input.KeyGroupId, "{KeyGroupId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByOriginRequestPolicyIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}");
  b2.p("OriginRequestPolicyId", () => input.OriginRequestPolicyId, "{OriginRequestPolicyId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByRealtimeLogConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/distributionsByRealtimeLogConfig");
  let body;
  body = _ve;
  const bn = new XmlNode(_LDBRLCR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_M] != null) {
    bn.c(XmlNode.of(_st, input[_M]).n(_M));
  }
  if (input[_MI] != null) {
    bn.c(XmlNode.of(_i, String(input[_MI])).n(_MI));
  }
  if (input[_RLCA] != null) {
    bn.c(XmlNode.of(_st, input[_RLCA]).n(_RLCA));
  }
  if (input[_RLCN] != null) {
    bn.c(XmlNode.of(_st, input[_RLCN]).n(_RLCN));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListDistributionsByResponseHeadersPolicyIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}");
  b2.p("ResponseHeadersPolicyId", () => input.ResponseHeadersPolicyId, "{ResponseHeadersPolicyId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByVpcOriginIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByVpcOriginId/{VpcOriginId}");
  b2.p("VpcOriginId", () => input.VpcOriginId, "{VpcOriginId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListDistributionsByWebACLIdCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distributionsByWebACLId/{WebACLId}");
  b2.p("WebACLId", () => input.WebACLId, "{WebACLId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListFieldLevelEncryptionConfigsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListFieldLevelEncryptionProfilesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/field-level-encryption-profile");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListFunctionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/function");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    [_St]: [, input[_St]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListInvalidationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/distribution/{DistributionId}/invalidation");
  b2.p("DistributionId", () => input.DistributionId, "{DistributionId}", false);
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListKeyGroupsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/key-group");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListKeyValueStoresCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/key-value-store");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    [_Sta]: [, input[_Sta]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListOriginAccessControlsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-access-control");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListOriginRequestPoliciesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/origin-request-policy");
  const query = map({
    [_Ty]: [, input[_Ty]],
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListPublicKeysCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/public-key");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListRealtimeLogConfigsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/realtime-log-config");
  const query = map({
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    [_M]: [, input[_M]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListResponseHeadersPoliciesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/response-headers-policy");
  const query = map({
    [_Ty]: [, input[_Ty]],
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListStreamingDistributionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/streaming-distribution");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/tagging");
  const query = map({
    [_R]: [, expectNonNull(input[_R], `Resource`)]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListVpcOriginsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2020-05-31/vpc-origin");
  const query = map({
    [_M]: [, input[_M]],
    [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_PublishFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/function/{Name}/publish");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_TagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/tagging");
  const query = map({
    [_O]: [, "Tag"],
    [_R]: [, expectNonNull(input[_R], `Resource`)]
  });
  let body;
  let contents;
  if (input.Tags !== void 0) {
    contents = se_Tags(input.Tags, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).q(query).b(body);
  return b2.build();
};
var se_TestFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/function/{Name}/test");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_TFR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_EO] != null) {
    bn.c(XmlNode.of(_FEO, context.base64Encoder(input[_EO])).n(_EO));
  }
  if (input[_St] != null) {
    bn.c(XmlNode.of(_FS, input[_St]).n(_St));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UntagResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/tagging");
  const query = map({
    [_O]: [, "Untag"],
    [_R]: [, expectNonNull(input[_R], `Resource`)]
  });
  let body;
  let contents;
  if (input.TagKeys !== void 0) {
    contents = se_TagKeys(input.TagKeys, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("POST").h(headers).q(query).b(body);
  return b2.build();
};
var se_UpdateCachePolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/cache-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.CachePolicyConfig !== void 0) {
    contents = se_CachePolicyConfig(input.CachePolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateCloudFrontOriginAccessIdentityCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-access-identity/cloudfront/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.CloudFrontOriginAccessIdentityConfig !== void 0) {
    contents = se_CloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateContinuousDeploymentPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/continuous-deployment-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.ContinuousDeploymentPolicyConfig !== void 0) {
    contents = se_ContinuousDeploymentPolicyConfig(input.ContinuousDeploymentPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/distribution/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.DistributionConfig !== void 0) {
    contents = se_DistributionConfig(input.DistributionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateDistributionWithStagingConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/distribution/{Id}/promote-staging-config");
  b2.p("Id", () => input.Id, "{Id}", false);
  const query = map({
    [_SDI]: [, input[_SDI]]
  });
  let body;
  b2.m("PUT").h(headers).q(query).b(body);
  return b2.build();
};
var se_UpdateFieldLevelEncryptionConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/field-level-encryption/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.FieldLevelEncryptionConfig !== void 0) {
    contents = se_FieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateFieldLevelEncryptionProfileCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/field-level-encryption-profile/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.FieldLevelEncryptionProfileConfig !== void 0) {
    contents = se_FieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateFunctionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/function/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UFR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_FC] != null) {
    bn.c(XmlNode.of(_FB, context.base64Encoder(input[_FC])).n(_FC));
  }
  if (input[_FCu] != null) {
    bn.c(se_FunctionConfig(input[_FCu], context).n(_FCu));
  }
  body += bn.toString();
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateKeyGroupCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/key-group/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.KeyGroupConfig !== void 0) {
    contents = se_KeyGroupConfig(input.KeyGroupConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateKeyValueStoreCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/key-value-store/{Name}");
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UKVSR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_KVSC, input[_C]).n(_C));
  }
  body += bn.toString();
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateOriginAccessControlCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-access-control/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.OriginAccessControlConfig !== void 0) {
    contents = se_OriginAccessControlConfig(input.OriginAccessControlConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateOriginRequestPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/origin-request-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.OriginRequestPolicyConfig !== void 0) {
    contents = se_OriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdatePublicKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/public-key/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.PublicKeyConfig !== void 0) {
    contents = se_PublicKeyConfig(input.PublicKeyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateRealtimeLogConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2020-05-31/realtime-log-config");
  let body;
  body = _ve;
  const bn = new XmlNode(_URLCR);
  bn.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
  if (input[_ARN] != null) {
    bn.c(XmlNode.of(_st, input[_ARN]).n(_ARN));
  }
  bn.lc(input, "EndPoints", "EndPoints", () => se_EndPointList(input[_EP], context));
  bn.lc(input, "Fields", "Fields", () => se_FieldList(input[_F], context));
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_SR] != null) {
    bn.c(XmlNode.of(_l, String(input[_SR])).n(_SR));
  }
  body += bn.toString();
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateResponseHeadersPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/response-headers-policy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.ResponseHeadersPolicyConfig !== void 0) {
    contents = se_ResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateStreamingDistributionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/streaming-distribution/{Id}/config");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.StreamingDistributionConfig !== void 0) {
    contents = se_StreamingDistributionConfig(input.StreamingDistributionConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var se_UpdateVpcOriginCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_im]: input[_IM]
  });
  b2.bp("/2020-05-31/vpc-origin/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  let contents;
  if (input.VpcOriginEndpointConfig !== void 0) {
    contents = se_VpcOriginEndpointConfig(input.VpcOriginEndpointConfig, context);
    body = _ve;
    contents.a("xmlns", "http://cloudfront.amazonaws.com/doc/2020-05-31/");
    body += contents.toString();
  }
  b2.m("PUT").h(headers).b(body);
  return b2.build();
};
var de_AssociateAliasCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_CopyDistributionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_CreateAnycastIpListCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.AnycastIpList = de_AnycastIpList(data, context);
  return contents;
};
var de_CreateCachePolicyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CachePolicy = de_CachePolicy(data, context);
  return contents;
};
var de_CreateCloudFrontOriginAccessIdentityCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CloudFrontOriginAccessIdentity = de_CloudFrontOriginAccessIdentity(data, context);
  return contents;
};
var de_CreateContinuousDeploymentPolicyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ContinuousDeploymentPolicy = de_ContinuousDeploymentPolicy(data, context);
  return contents;
};
var de_CreateDistributionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_CreateDistributionWithTagsCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_CreateFieldLevelEncryptionConfigCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryption = de_FieldLevelEncryption(data, context);
  return contents;
};
var de_CreateFieldLevelEncryptionProfileCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionProfile = de_FieldLevelEncryptionProfile(data, context);
  return contents;
};
var de_CreateFunctionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FunctionSummary = de_FunctionSummary(data, context);
  return contents;
};
var de_CreateInvalidationCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Invalidation = de_Invalidation(data, context);
  return contents;
};
var de_CreateKeyGroupCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyGroup = de_KeyGroup(data, context);
  return contents;
};
var de_CreateKeyValueStoreCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]],
    [_L]: [, output.headers[_lo]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyValueStore = de_KeyValueStore(data, context);
  return contents;
};
var de_CreateMonitoringSubscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.MonitoringSubscription = de_MonitoringSubscription(data, context);
  return contents;
};
var de_CreateOriginAccessControlCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginAccessControl = de_OriginAccessControl(data, context);
  return contents;
};
var de_CreateOriginRequestPolicyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginRequestPolicy = de_OriginRequestPolicy(data, context);
  return contents;
};
var de_CreatePublicKeyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.PublicKey = de_PublicKey(data, context);
  return contents;
};
var de_CreateRealtimeLogConfigCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_RLC] != null) {
    contents[_RLC] = de_RealtimeLogConfig(data[_RLC], context);
  }
  return contents;
};
var de_CreateResponseHeadersPolicyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ResponseHeadersPolicy = de_ResponseHeadersPolicy(data, context);
  return contents;
};
var de_CreateStreamingDistributionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistribution = de_StreamingDistribution(data, context);
  return contents;
};
var de_CreateStreamingDistributionWithTagsCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistribution = de_StreamingDistribution(data, context);
  return contents;
};
var de_CreateVpcOriginCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]],
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.VpcOrigin = de_VpcOrigin(data, context);
  return contents;
};
var de_DeleteAnycastIpListCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteCachePolicyCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteCloudFrontOriginAccessIdentityCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteContinuousDeploymentPolicyCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteDistributionCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteFieldLevelEncryptionConfigCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteFieldLevelEncryptionProfileCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteFunctionCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteKeyGroupCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteKeyValueStoreCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteMonitoringSubscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteOriginAccessControlCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteOriginRequestPolicyCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeletePublicKeyCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteRealtimeLogConfigCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteResponseHeadersPolicyCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteStreamingDistributionCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteVpcOriginCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.VpcOrigin = de_VpcOrigin(data, context);
  return contents;
};
var de_DescribeFunctionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FunctionSummary = de_FunctionSummary(data, context);
  return contents;
};
var de_DescribeKeyValueStoreCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyValueStore = de_KeyValueStore(data, context);
  return contents;
};
var de_GetAnycastIpListCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.AnycastIpList = de_AnycastIpList(data, context);
  return contents;
};
var de_GetCachePolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CachePolicy = de_CachePolicy(data, context);
  return contents;
};
var de_GetCachePolicyConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CachePolicyConfig = de_CachePolicyConfig(data, context);
  return contents;
};
var de_GetCloudFrontOriginAccessIdentityCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CloudFrontOriginAccessIdentity = de_CloudFrontOriginAccessIdentity(data, context);
  return contents;
};
var de_GetCloudFrontOriginAccessIdentityConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CloudFrontOriginAccessIdentityConfig = de_CloudFrontOriginAccessIdentityConfig(data, context);
  return contents;
};
var de_GetContinuousDeploymentPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ContinuousDeploymentPolicy = de_ContinuousDeploymentPolicy(data, context);
  return contents;
};
var de_GetContinuousDeploymentPolicyConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ContinuousDeploymentPolicyConfig = de_ContinuousDeploymentPolicyConfig(data, context);
  return contents;
};
var de_GetDistributionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_GetDistributionConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionConfig = de_DistributionConfig(data, context);
  return contents;
};
var de_GetFieldLevelEncryptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryption = de_FieldLevelEncryption(data, context);
  return contents;
};
var de_GetFieldLevelEncryptionConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionConfig = de_FieldLevelEncryptionConfig(data, context);
  return contents;
};
var de_GetFieldLevelEncryptionProfileCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionProfile = de_FieldLevelEncryptionProfile(data, context);
  return contents;
};
var de_GetFieldLevelEncryptionProfileConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionProfileConfig = de_FieldLevelEncryptionProfileConfig(data, context);
  return contents;
};
var de_GetFunctionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]],
    [_CT]: [, output.headers[_ct]]
  });
  const data = await collectBody(output.body, context);
  contents.FunctionCode = data;
  return contents;
};
var de_GetInvalidationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Invalidation = de_Invalidation(data, context);
  return contents;
};
var de_GetKeyGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyGroup = de_KeyGroup(data, context);
  return contents;
};
var de_GetKeyGroupConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyGroupConfig = de_KeyGroupConfig(data, context);
  return contents;
};
var de_GetMonitoringSubscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.MonitoringSubscription = de_MonitoringSubscription(data, context);
  return contents;
};
var de_GetOriginAccessControlCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginAccessControl = de_OriginAccessControl(data, context);
  return contents;
};
var de_GetOriginAccessControlConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginAccessControlConfig = de_OriginAccessControlConfig(data, context);
  return contents;
};
var de_GetOriginRequestPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginRequestPolicy = de_OriginRequestPolicy(data, context);
  return contents;
};
var de_GetOriginRequestPolicyConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginRequestPolicyConfig = de_OriginRequestPolicyConfig(data, context);
  return contents;
};
var de_GetPublicKeyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.PublicKey = de_PublicKey(data, context);
  return contents;
};
var de_GetPublicKeyConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.PublicKeyConfig = de_PublicKeyConfig(data, context);
  return contents;
};
var de_GetRealtimeLogConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_RLC] != null) {
    contents[_RLC] = de_RealtimeLogConfig(data[_RLC], context);
  }
  return contents;
};
var de_GetResponseHeadersPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ResponseHeadersPolicy = de_ResponseHeadersPolicy(data, context);
  return contents;
};
var de_GetResponseHeadersPolicyConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ResponseHeadersPolicyConfig = de_ResponseHeadersPolicyConfig(data, context);
  return contents;
};
var de_GetStreamingDistributionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistribution = de_StreamingDistribution(data, context);
  return contents;
};
var de_GetStreamingDistributionConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistributionConfig = de_StreamingDistributionConfig(data, context);
  return contents;
};
var de_GetVpcOriginCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.VpcOrigin = de_VpcOrigin(data, context);
  return contents;
};
var de_ListAnycastIpListsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.AnycastIpLists = de_AnycastIpListCollection(data, context);
  return contents;
};
var de_ListCachePoliciesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CachePolicyList = de_CachePolicyList(data, context);
  return contents;
};
var de_ListCloudFrontOriginAccessIdentitiesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CloudFrontOriginAccessIdentityList = de_CloudFrontOriginAccessIdentityList(data, context);
  return contents;
};
var de_ListConflictingAliasesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ConflictingAliasesList = de_ConflictingAliasesList(data, context);
  return contents;
};
var de_ListContinuousDeploymentPoliciesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ContinuousDeploymentPolicyList = de_ContinuousDeploymentPolicyList(data, context);
  return contents;
};
var de_ListDistributionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionList = de_DistributionList(data, context);
  return contents;
};
var de_ListDistributionsByAnycastIpListIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionList = de_DistributionList(data, context);
  return contents;
};
var de_ListDistributionsByCachePolicyIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionIdList = de_DistributionIdList(data, context);
  return contents;
};
var de_ListDistributionsByKeyGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionIdList = de_DistributionIdList(data, context);
  return contents;
};
var de_ListDistributionsByOriginRequestPolicyIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionIdList = de_DistributionIdList(data, context);
  return contents;
};
var de_ListDistributionsByRealtimeLogConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionList = de_DistributionList(data, context);
  return contents;
};
var de_ListDistributionsByResponseHeadersPolicyIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionIdList = de_DistributionIdList(data, context);
  return contents;
};
var de_ListDistributionsByVpcOriginIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionIdList = de_DistributionIdList(data, context);
  return contents;
};
var de_ListDistributionsByWebACLIdCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.DistributionList = de_DistributionList(data, context);
  return contents;
};
var de_ListFieldLevelEncryptionConfigsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionList = de_FieldLevelEncryptionList(data, context);
  return contents;
};
var de_ListFieldLevelEncryptionProfilesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionProfileList = de_FieldLevelEncryptionProfileList(data, context);
  return contents;
};
var de_ListFunctionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FunctionList = de_FunctionList(data, context);
  return contents;
};
var de_ListInvalidationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.InvalidationList = de_InvalidationList(data, context);
  return contents;
};
var de_ListKeyGroupsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyGroupList = de_KeyGroupList(data, context);
  return contents;
};
var de_ListKeyValueStoresCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyValueStoreList = de_KeyValueStoreList(data, context);
  return contents;
};
var de_ListOriginAccessControlsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginAccessControlList = de_OriginAccessControlList(data, context);
  return contents;
};
var de_ListOriginRequestPoliciesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginRequestPolicyList = de_OriginRequestPolicyList(data, context);
  return contents;
};
var de_ListPublicKeysCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.PublicKeyList = de_PublicKeyList(data, context);
  return contents;
};
var de_ListRealtimeLogConfigsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.RealtimeLogConfigs = de_RealtimeLogConfigs(data, context);
  return contents;
};
var de_ListResponseHeadersPoliciesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ResponseHeadersPolicyList = de_ResponseHeadersPolicyList(data, context);
  return contents;
};
var de_ListStreamingDistributionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistributionList = de_StreamingDistributionList(data, context);
  return contents;
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Tags = de_Tags(data, context);
  return contents;
};
var de_ListVpcOriginsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.VpcOriginList = de_VpcOriginList(data, context);
  return contents;
};
var de_PublishFunctionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FunctionSummary = de_FunctionSummary(data, context);
  return contents;
};
var de_TagResourceCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_TestFunctionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.TestResult = de_TestResult(data, context);
  return contents;
};
var de_UntagResourceCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_UpdateCachePolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CachePolicy = de_CachePolicy(data, context);
  return contents;
};
var de_UpdateCloudFrontOriginAccessIdentityCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.CloudFrontOriginAccessIdentity = de_CloudFrontOriginAccessIdentity(data, context);
  return contents;
};
var de_UpdateContinuousDeploymentPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ContinuousDeploymentPolicy = de_ContinuousDeploymentPolicy(data, context);
  return contents;
};
var de_UpdateDistributionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_UpdateDistributionWithStagingConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.Distribution = de_Distribution(data, context);
  return contents;
};
var de_UpdateFieldLevelEncryptionConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryption = de_FieldLevelEncryption(data, context);
  return contents;
};
var de_UpdateFieldLevelEncryptionProfileCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FieldLevelEncryptionProfile = de_FieldLevelEncryptionProfile(data, context);
  return contents;
};
var de_UpdateFunctionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_et]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.FunctionSummary = de_FunctionSummary(data, context);
  return contents;
};
var de_UpdateKeyGroupCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyGroup = de_KeyGroup(data, context);
  return contents;
};
var de_UpdateKeyValueStoreCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.KeyValueStore = de_KeyValueStore(data, context);
  return contents;
};
var de_UpdateOriginAccessControlCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginAccessControl = de_OriginAccessControl(data, context);
  return contents;
};
var de_UpdateOriginRequestPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.OriginRequestPolicy = de_OriginRequestPolicy(data, context);
  return contents;
};
var de_UpdatePublicKeyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.PublicKey = de_PublicKey(data, context);
  return contents;
};
var de_UpdateRealtimeLogConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_RLC] != null) {
    contents[_RLC] = de_RealtimeLogConfig(data[_RLC], context);
  }
  return contents;
};
var de_UpdateResponseHeadersPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.ResponseHeadersPolicy = de_ResponseHeadersPolicy(data, context);
  return contents;
};
var de_UpdateStreamingDistributionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.StreamingDistribution = de_StreamingDistribution(data, context);
  return contents;
};
var de_UpdateVpcOriginCommand = async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_ET]: [, output.headers[_e]]
  });
  const data = expectObject(await parseXmlBody(output.body, context));
  contents.VpcOrigin = de_VpcOrigin(data, context);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseXmlErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDenied":
    case "com.amazonaws.cloudfront#AccessDenied":
      throw await de_AccessDeniedRes(parsedOutput, context);
    case "IllegalUpdate":
    case "com.amazonaws.cloudfront#IllegalUpdate":
      throw await de_IllegalUpdateRes(parsedOutput, context);
    case "InvalidArgument":
    case "com.amazonaws.cloudfront#InvalidArgument":
      throw await de_InvalidArgumentRes(parsedOutput, context);
    case "NoSuchDistribution":
    case "com.amazonaws.cloudfront#NoSuchDistribution":
      throw await de_NoSuchDistributionRes(parsedOutput, context);
    case "TooManyDistributionCNAMEs":
    case "com.amazonaws.cloudfront#TooManyDistributionCNAMEs":
      throw await de_TooManyDistributionCNAMEsRes(parsedOutput, context);
    case "CNAMEAlreadyExists":
    case "com.amazonaws.cloudfront#CNAMEAlreadyExists":
      throw await de_CNAMEAlreadyExistsRes(parsedOutput, context);
    case "DistributionAlreadyExists":
    case "com.amazonaws.cloudfront#DistributionAlreadyExists":
      throw await de_DistributionAlreadyExistsRes(parsedOutput, context);
    case "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior":
    case "com.amazonaws.cloudfront#IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior":
      throw await de_IllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorRes(parsedOutput, context);
    case "InconsistentQuantities":
    case "com.amazonaws.cloudfront#InconsistentQuantities":
      throw await de_InconsistentQuantitiesRes(parsedOutput, context);
    case "InvalidDefaultRootObject":
    case "com.amazonaws.cloudfront#InvalidDefaultRootObject":
      throw await de_InvalidDefaultRootObjectRes(parsedOutput, context);
    case "InvalidErrorCode":
    case "com.amazonaws.cloudfront#InvalidErrorCode":
      throw await de_InvalidErrorCodeRes(parsedOutput, context);
    case "InvalidForwardCookies":
    case "com.amazonaws.cloudfront#InvalidForwardCookies":
      throw await de_InvalidForwardCookiesRes(parsedOutput, context);
    case "InvalidFunctionAssociation":
    case "com.amazonaws.cloudfront#InvalidFunctionAssociation":
      throw await de_InvalidFunctionAssociationRes(parsedOutput, context);
    case "InvalidGeoRestrictionParameter":
    case "com.amazonaws.cloudfront#InvalidGeoRestrictionParameter":
      throw await de_InvalidGeoRestrictionParameterRes(parsedOutput, context);
    case "InvalidHeadersForS3Origin":
    case "com.amazonaws.cloudfront#InvalidHeadersForS3Origin":
      throw await de_InvalidHeadersForS3OriginRes(parsedOutput, context);
    case "InvalidIfMatchVersion":
    case "com.amazonaws.cloudfront#InvalidIfMatchVersion":
      throw await de_InvalidIfMatchVersionRes(parsedOutput, context);
    case "InvalidLambdaFunctionAssociation":
    case "com.amazonaws.cloudfront#InvalidLambdaFunctionAssociation":
      throw await de_InvalidLambdaFunctionAssociationRes(parsedOutput, context);
    case "InvalidLocationCode":
    case "com.amazonaws.cloudfront#InvalidLocationCode":
      throw await de_InvalidLocationCodeRes(parsedOutput, context);
    case "InvalidMinimumProtocolVersion":
    case "com.amazonaws.cloudfront#InvalidMinimumProtocolVersion":
      throw await de_InvalidMinimumProtocolVersionRes(parsedOutput, context);
    case "InvalidOrigin":
    case "com.amazonaws.cloudfront#InvalidOrigin":
      throw await de_InvalidOriginRes(parsedOutput, context);
    case "InvalidOriginAccessControl":
    case "com.amazonaws.cloudfront#InvalidOriginAccessControl":
      throw await de_InvalidOriginAccessControlRes(parsedOutput, context);
    case "InvalidOriginAccessIdentity":
    case "com.amazonaws.cloudfront#InvalidOriginAccessIdentity":
      throw await de_InvalidOriginAccessIdentityRes(parsedOutput, context);
    case "InvalidOriginKeepaliveTimeout":
    case "com.amazonaws.cloudfront#InvalidOriginKeepaliveTimeout":
      throw await de_InvalidOriginKeepaliveTimeoutRes(parsedOutput, context);
    case "InvalidOriginReadTimeout":
    case "com.amazonaws.cloudfront#InvalidOriginReadTimeout":
      throw await de_InvalidOriginReadTimeoutRes(parsedOutput, context);
    case "InvalidProtocolSettings":
    case "com.amazonaws.cloudfront#InvalidProtocolSettings":
      throw await de_InvalidProtocolSettingsRes(parsedOutput, context);
    case "InvalidQueryStringParameters":
    case "com.amazonaws.cloudfront#InvalidQueryStringParameters":
      throw await de_InvalidQueryStringParametersRes(parsedOutput, context);
    case "InvalidRelativePath":
    case "com.amazonaws.cloudfront#InvalidRelativePath":
      throw await de_InvalidRelativePathRes(parsedOutput, context);
    case "InvalidRequiredProtocol":
    case "com.amazonaws.cloudfront#InvalidRequiredProtocol":
      throw await de_InvalidRequiredProtocolRes(parsedOutput, context);
    case "InvalidResponseCode":
    case "com.amazonaws.cloudfront#InvalidResponseCode":
      throw await de_InvalidResponseCodeRes(parsedOutput, context);
    case "InvalidTTLOrder":
    case "com.amazonaws.cloudfront#InvalidTTLOrder":
      throw await de_InvalidTTLOrderRes(parsedOutput, context);
    case "InvalidViewerCertificate":
    case "com.amazonaws.cloudfront#InvalidViewerCertificate":
      throw await de_InvalidViewerCertificateRes(parsedOutput, context);
    case "InvalidWebACLId":
    case "com.amazonaws.cloudfront#InvalidWebACLId":
      throw await de_InvalidWebACLIdRes(parsedOutput, context);
    case "MissingBody":
    case "com.amazonaws.cloudfront#MissingBody":
      throw await de_MissingBodyRes(parsedOutput, context);
    case "NoSuchCachePolicy":
    case "com.amazonaws.cloudfront#NoSuchCachePolicy":
      throw await de_NoSuchCachePolicyRes(parsedOutput, context);
    case "NoSuchFieldLevelEncryptionConfig":
    case "com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig":
      throw await de_NoSuchFieldLevelEncryptionConfigRes(parsedOutput, context);
    case "NoSuchOrigin":
    case "com.amazonaws.cloudfront#NoSuchOrigin":
      throw await de_NoSuchOriginRes(parsedOutput, context);
    case "NoSuchOriginRequestPolicy":
    case "com.amazonaws.cloudfront#NoSuchOriginRequestPolicy":
      throw await de_NoSuchOriginRequestPolicyRes(parsedOutput, context);
    case "NoSuchRealtimeLogConfig":
    case "com.amazonaws.cloudfront#NoSuchRealtimeLogConfig":
      throw await de_NoSuchRealtimeLogConfigRes(parsedOutput, context);
    case "NoSuchResponseHeadersPolicy":
    case "com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy":
      throw await de_NoSuchResponseHeadersPolicyRes(parsedOutput, context);
    case "PreconditionFailed":
    case "com.amazonaws.cloudfront#PreconditionFailed":
      throw await de_PreconditionFailedRes(parsedOutput, context);
    case "RealtimeLogConfigOwnerMismatch":
    case "com.amazonaws.cloudfront#RealtimeLogConfigOwnerMismatch":
      throw await de_RealtimeLogConfigOwnerMismatchRes(parsedOutput, context);
    case "TooManyCacheBehaviors":
    case "com.amazonaws.cloudfront#TooManyCacheBehaviors":
      throw await de_TooManyCacheBehaviorsRes(parsedOutput, context);
    case "TooManyCertificates":
    case "com.amazonaws.cloudfront#TooManyCertificates":
      throw await de_TooManyCertificatesRes(parsedOutput, context);
    case "TooManyCookieNamesInWhiteList":
    case "com.amazonaws.cloudfront#TooManyCookieNamesInWhiteList":
      throw await de_TooManyCookieNamesInWhiteListRes(parsedOutput, context);
    case "TooManyDistributions":
    case "com.amazonaws.cloudfront#TooManyDistributions":
      throw await de_TooManyDistributionsRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToCachePolicy":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToCachePolicy":
      throw await de_TooManyDistributionsAssociatedToCachePolicyRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToFieldLevelEncryptionConfig":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToFieldLevelEncryptionConfig":
      throw await de_TooManyDistributionsAssociatedToFieldLevelEncryptionConfigRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToKeyGroup":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToKeyGroup":
      throw await de_TooManyDistributionsAssociatedToKeyGroupRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToOriginAccessControl":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToOriginAccessControl":
      throw await de_TooManyDistributionsAssociatedToOriginAccessControlRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToOriginRequestPolicy":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToOriginRequestPolicy":
      throw await de_TooManyDistributionsAssociatedToOriginRequestPolicyRes(parsedOutput, context);
    case "TooManyDistributionsAssociatedToResponseHeadersPolicy":
    case "com.amazonaws.cloudfront#TooManyDistributionsAssociatedToResponseHeadersPolicy":
      throw await de_TooManyDistributionsAssociatedToResponseHeadersPolicyRes(parsedOutput, context);
    case "TooManyDistributionsWithFunctionAssociations":
    case "com.amazonaws.cloudfront#TooManyDistributionsWithFunctionAssociations":
      throw await de_TooManyDistributionsWithFunctionAssociationsRes(parsedOutput, context);
    case "TooManyDistributionsWithLambdaAssociations":
    case "com.amazonaws.cloudfront#TooManyDistributionsWithLambdaAssociations":
      throw await de_TooManyDistributionsWithLambdaAssociationsRes(parsedOutput, context);
    case "TooManyDistributionsWithSingleFunctionARN":
    case "com.amazonaws.cloudfront#TooManyDistributionsWithSingleFunctionARN":
      throw await de_TooManyDistributionsWithSingleFunctionARNRes(parsedOutput, context);
    case "TooManyFunctionAssociations":
    case "com.amazonaws.cloudfront#TooManyFunctionAssociations":
      throw await de_TooManyFunctionAssociationsRes(parsedOutput, context);
    case "TooManyHeadersInForwardedValues":
    case "com.amazonaws.cloudfront#TooManyHeadersInForwardedValues":
      throw await de_TooManyHeadersInForwardedValuesRes(parsedOutput, context);
    case "TooManyKeyGroupsAssociatedToDistribution":
    case "com.amazonaws.cloudfront#TooManyKeyGroupsAssociatedToDistribution":
      throw await de_TooManyKeyGroupsAssociatedToDistributionRes(parsedOutput, context);
    case "TooManyLambdaFunctionAssociations":
    case "com.amazonaws.cloudfront#TooManyLambdaFunctionAssociations":
      throw await de_TooManyLambdaFunctionAssociationsRes(parsedOutput, context);
    case "TooManyOriginCustomHeaders":
    case "com.amazonaws.cloudfront#TooManyOriginCustomHeaders":
      throw await de_TooManyOriginCustomHeadersRes(parsedOutput, context);
    case "TooManyOriginGroupsPerDistribution":
    case "com.amazonaws.cloudfront#TooManyOriginGroupsPerDistribution":
      throw await de_TooManyOriginGroupsPerDistributionRes(parsedOutput, context);
    case "TooManyOrigins":
    case "com.amazonaws.cloudfront#TooManyOrigins":
      throw await de_TooManyOriginsRes(parsedOutput, context);
    case "TooManyQueryStringParameters":
    case "com.amazonaws.cloudfront#TooManyQueryStringParameters":
      throw await de_TooManyQueryStringParametersRes(parsedOutput, context);
    case "TooManyTrustedSigners":
    case "com.amazonaws.cloudfront#TooManyTrustedSigners":
      throw await de_TooManyTrustedSignersRes(parsedOutput, context);
    case "TrustedKeyGroupDoesNotExist":
    case "com.amazonaws.cloudfront#TrustedKeyGroupDoesNotExist":
      throw await de_TrustedKeyGroupDoesNotExistRes(parsedOutput, context);
    case "TrustedSignerDoesNotExist":
    case "com.amazonaws.cloudfront#TrustedSignerDoesNotExist":
      throw await de_TrustedSignerDoesNotExistRes(parsedOutput, context);
    case "EntityAlreadyExists":
    case "com.amazonaws.cloudfront#EntityAlreadyExists":
      throw await de_EntityAlreadyExistsRes(parsedOutput, context);
    case "EntityLimitExceeded":
    case "com.amazonaws.cloudfront#EntityLimitExceeded":
      throw await de_EntityLimitExceededRes(parsedOutput, context);
    case "InvalidTagging":
    case "com.amazonaws.cloudfront#InvalidTagging":
      throw await de_InvalidTaggingRes(parsedOutput, context);
    case "UnsupportedOperation":
    case "com.amazonaws.cloudfront#UnsupportedOperation":
      throw await de_UnsupportedOperationRes(parsedOutput, context);
    case "CachePolicyAlreadyExists":
    case "com.amazonaws.cloudfront#CachePolicyAlreadyExists":
      throw await de_CachePolicyAlreadyExistsRes(parsedOutput, context);
    case "TooManyCachePolicies":
    case "com.amazonaws.cloudfront#TooManyCachePolicies":
      throw await de_TooManyCachePoliciesRes(parsedOutput, context);
    case "TooManyCookiesInCachePolicy":
    case "com.amazonaws.cloudfront#TooManyCookiesInCachePolicy":
      throw await de_TooManyCookiesInCachePolicyRes(parsedOutput, context);
    case "TooManyHeadersInCachePolicy":
    case "com.amazonaws.cloudfront#TooManyHeadersInCachePolicy":
      throw await de_TooManyHeadersInCachePolicyRes(parsedOutput, context);
    case "TooManyQueryStringsInCachePolicy":
    case "com.amazonaws.cloudfront#TooManyQueryStringsInCachePolicy":
      throw await de_TooManyQueryStringsInCachePolicyRes(parsedOutput, context);
    case "CloudFrontOriginAccessIdentityAlreadyExists":
    case "com.amazonaws.cloudfront#CloudFrontOriginAccessIdentityAlreadyExists":
      throw await de_CloudFrontOriginAccessIdentityAlreadyExistsRes(parsedOutput, context);
    case "TooManyCloudFrontOriginAccessIdentities":
    case "com.amazonaws.cloudfront#TooManyCloudFrontOriginAccessIdentities":
      throw await de_TooManyCloudFrontOriginAccessIdentitiesRes(parsedOutput, context);
    case "ContinuousDeploymentPolicyAlreadyExists":
    case "com.amazonaws.cloudfront#ContinuousDeploymentPolicyAlreadyExists":
      throw await de_ContinuousDeploymentPolicyAlreadyExistsRes(parsedOutput, context);
    case "StagingDistributionInUse":
    case "com.amazonaws.cloudfront#StagingDistributionInUse":
      throw await de_StagingDistributionInUseRes(parsedOutput, context);
    case "TooManyContinuousDeploymentPolicies":
    case "com.amazonaws.cloudfront#TooManyContinuousDeploymentPolicies":
      throw await de_TooManyContinuousDeploymentPoliciesRes(parsedOutput, context);
    case "ContinuousDeploymentPolicyInUse":
    case "com.amazonaws.cloudfront#ContinuousDeploymentPolicyInUse":
      throw await de_ContinuousDeploymentPolicyInUseRes(parsedOutput, context);
    case "EntityNotFound":
    case "com.amazonaws.cloudfront#EntityNotFound":
      throw await de_EntityNotFoundRes(parsedOutput, context);
    case "IllegalOriginAccessConfiguration":
    case "com.amazonaws.cloudfront#IllegalOriginAccessConfiguration":
      throw await de_IllegalOriginAccessConfigurationRes(parsedOutput, context);
    case "InvalidDomainNameForOriginAccessControl":
    case "com.amazonaws.cloudfront#InvalidDomainNameForOriginAccessControl":
      throw await de_InvalidDomainNameForOriginAccessControlRes(parsedOutput, context);
    case "NoSuchContinuousDeploymentPolicy":
    case "com.amazonaws.cloudfront#NoSuchContinuousDeploymentPolicy":
      throw await de_NoSuchContinuousDeploymentPolicyRes(parsedOutput, context);
    case "FieldLevelEncryptionConfigAlreadyExists":
    case "com.amazonaws.cloudfront#FieldLevelEncryptionConfigAlreadyExists":
      throw await de_FieldLevelEncryptionConfigAlreadyExistsRes(parsedOutput, context);
    case "NoSuchFieldLevelEncryptionProfile":
    case "com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile":
      throw await de_NoSuchFieldLevelEncryptionProfileRes(parsedOutput, context);
    case "QueryArgProfileEmpty":
    case "com.amazonaws.cloudfront#QueryArgProfileEmpty":
      throw await de_QueryArgProfileEmptyRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionConfigs":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionConfigs":
      throw await de_TooManyFieldLevelEncryptionConfigsRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionContentTypeProfiles":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionContentTypeProfiles":
      throw await de_TooManyFieldLevelEncryptionContentTypeProfilesRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionQueryArgProfiles":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionQueryArgProfiles":
      throw await de_TooManyFieldLevelEncryptionQueryArgProfilesRes(parsedOutput, context);
    case "FieldLevelEncryptionProfileAlreadyExists":
    case "com.amazonaws.cloudfront#FieldLevelEncryptionProfileAlreadyExists":
      throw await de_FieldLevelEncryptionProfileAlreadyExistsRes(parsedOutput, context);
    case "FieldLevelEncryptionProfileSizeExceeded":
    case "com.amazonaws.cloudfront#FieldLevelEncryptionProfileSizeExceeded":
      throw await de_FieldLevelEncryptionProfileSizeExceededRes(parsedOutput, context);
    case "NoSuchPublicKey":
    case "com.amazonaws.cloudfront#NoSuchPublicKey":
      throw await de_NoSuchPublicKeyRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionEncryptionEntities":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionEncryptionEntities":
      throw await de_TooManyFieldLevelEncryptionEncryptionEntitiesRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionFieldPatterns":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionFieldPatterns":
      throw await de_TooManyFieldLevelEncryptionFieldPatternsRes(parsedOutput, context);
    case "TooManyFieldLevelEncryptionProfiles":
    case "com.amazonaws.cloudfront#TooManyFieldLevelEncryptionProfiles":
      throw await de_TooManyFieldLevelEncryptionProfilesRes(parsedOutput, context);
    case "FunctionAlreadyExists":
    case "com.amazonaws.cloudfront#FunctionAlreadyExists":
      throw await de_FunctionAlreadyExistsRes(parsedOutput, context);
    case "FunctionSizeLimitExceeded":
    case "com.amazonaws.cloudfront#FunctionSizeLimitExceeded":
      throw await de_FunctionSizeLimitExceededRes(parsedOutput, context);
    case "TooManyFunctions":
    case "com.amazonaws.cloudfront#TooManyFunctions":
      throw await de_TooManyFunctionsRes(parsedOutput, context);
    case "BatchTooLarge":
    case "com.amazonaws.cloudfront#BatchTooLarge":
      throw await de_BatchTooLargeRes(parsedOutput, context);
    case "TooManyInvalidationsInProgress":
    case "com.amazonaws.cloudfront#TooManyInvalidationsInProgress":
      throw await de_TooManyInvalidationsInProgressRes(parsedOutput, context);
    case "KeyGroupAlreadyExists":
    case "com.amazonaws.cloudfront#KeyGroupAlreadyExists":
      throw await de_KeyGroupAlreadyExistsRes(parsedOutput, context);
    case "TooManyKeyGroups":
    case "com.amazonaws.cloudfront#TooManyKeyGroups":
      throw await de_TooManyKeyGroupsRes(parsedOutput, context);
    case "TooManyPublicKeysInKeyGroup":
    case "com.amazonaws.cloudfront#TooManyPublicKeysInKeyGroup":
      throw await de_TooManyPublicKeysInKeyGroupRes(parsedOutput, context);
    case "EntitySizeLimitExceeded":
    case "com.amazonaws.cloudfront#EntitySizeLimitExceeded":
      throw await de_EntitySizeLimitExceededRes(parsedOutput, context);
    case "MonitoringSubscriptionAlreadyExists":
    case "com.amazonaws.cloudfront#MonitoringSubscriptionAlreadyExists":
      throw await de_MonitoringSubscriptionAlreadyExistsRes(parsedOutput, context);
    case "OriginAccessControlAlreadyExists":
    case "com.amazonaws.cloudfront#OriginAccessControlAlreadyExists":
      throw await de_OriginAccessControlAlreadyExistsRes(parsedOutput, context);
    case "TooManyOriginAccessControls":
    case "com.amazonaws.cloudfront#TooManyOriginAccessControls":
      throw await de_TooManyOriginAccessControlsRes(parsedOutput, context);
    case "OriginRequestPolicyAlreadyExists":
    case "com.amazonaws.cloudfront#OriginRequestPolicyAlreadyExists":
      throw await de_OriginRequestPolicyAlreadyExistsRes(parsedOutput, context);
    case "TooManyCookiesInOriginRequestPolicy":
    case "com.amazonaws.cloudfront#TooManyCookiesInOriginRequestPolicy":
      throw await de_TooManyCookiesInOriginRequestPolicyRes(parsedOutput, context);
    case "TooManyHeadersInOriginRequestPolicy":
    case "com.amazonaws.cloudfront#TooManyHeadersInOriginRequestPolicy":
      throw await de_TooManyHeadersInOriginRequestPolicyRes(parsedOutput, context);
    case "TooManyOriginRequestPolicies":
    case "com.amazonaws.cloudfront#TooManyOriginRequestPolicies":
      throw await de_TooManyOriginRequestPoliciesRes(parsedOutput, context);
    case "TooManyQueryStringsInOriginRequestPolicy":
    case "com.amazonaws.cloudfront#TooManyQueryStringsInOriginRequestPolicy":
      throw await de_TooManyQueryStringsInOriginRequestPolicyRes(parsedOutput, context);
    case "PublicKeyAlreadyExists":
    case "com.amazonaws.cloudfront#PublicKeyAlreadyExists":
      throw await de_PublicKeyAlreadyExistsRes(parsedOutput, context);
    case "TooManyPublicKeys":
    case "com.amazonaws.cloudfront#TooManyPublicKeys":
      throw await de_TooManyPublicKeysRes(parsedOutput, context);
    case "RealtimeLogConfigAlreadyExists":
    case "com.amazonaws.cloudfront#RealtimeLogConfigAlreadyExists":
      throw await de_RealtimeLogConfigAlreadyExistsRes(parsedOutput, context);
    case "TooManyRealtimeLogConfigs":
    case "com.amazonaws.cloudfront#TooManyRealtimeLogConfigs":
      throw await de_TooManyRealtimeLogConfigsRes(parsedOutput, context);
    case "ResponseHeadersPolicyAlreadyExists":
    case "com.amazonaws.cloudfront#ResponseHeadersPolicyAlreadyExists":
      throw await de_ResponseHeadersPolicyAlreadyExistsRes(parsedOutput, context);
    case "TooLongCSPInResponseHeadersPolicy":
    case "com.amazonaws.cloudfront#TooLongCSPInResponseHeadersPolicy":
      throw await de_TooLongCSPInResponseHeadersPolicyRes(parsedOutput, context);
    case "TooManyCustomHeadersInResponseHeadersPolicy":
    case "com.amazonaws.cloudfront#TooManyCustomHeadersInResponseHeadersPolicy":
      throw await de_TooManyCustomHeadersInResponseHeadersPolicyRes(parsedOutput, context);
    case "TooManyRemoveHeadersInResponseHeadersPolicy":
    case "com.amazonaws.cloudfront#TooManyRemoveHeadersInResponseHeadersPolicy":
      throw await de_TooManyRemoveHeadersInResponseHeadersPolicyRes(parsedOutput, context);
    case "TooManyResponseHeadersPolicies":
    case "com.amazonaws.cloudfront#TooManyResponseHeadersPolicies":
      throw await de_TooManyResponseHeadersPoliciesRes(parsedOutput, context);
    case "StreamingDistributionAlreadyExists":
    case "com.amazonaws.cloudfront#StreamingDistributionAlreadyExists":
      throw await de_StreamingDistributionAlreadyExistsRes(parsedOutput, context);
    case "TooManyStreamingDistributionCNAMEs":
    case "com.amazonaws.cloudfront#TooManyStreamingDistributionCNAMEs":
      throw await de_TooManyStreamingDistributionCNAMEsRes(parsedOutput, context);
    case "TooManyStreamingDistributions":
    case "com.amazonaws.cloudfront#TooManyStreamingDistributions":
      throw await de_TooManyStreamingDistributionsRes(parsedOutput, context);
    case "CannotDeleteEntityWhileInUse":
    case "com.amazonaws.cloudfront#CannotDeleteEntityWhileInUse":
      throw await de_CannotDeleteEntityWhileInUseRes(parsedOutput, context);
    case "IllegalDelete":
    case "com.amazonaws.cloudfront#IllegalDelete":
      throw await de_IllegalDeleteRes(parsedOutput, context);
    case "CachePolicyInUse":
    case "com.amazonaws.cloudfront#CachePolicyInUse":
      throw await de_CachePolicyInUseRes(parsedOutput, context);
    case "CloudFrontOriginAccessIdentityInUse":
    case "com.amazonaws.cloudfront#CloudFrontOriginAccessIdentityInUse":
      throw await de_CloudFrontOriginAccessIdentityInUseRes(parsedOutput, context);
    case "NoSuchCloudFrontOriginAccessIdentity":
    case "com.amazonaws.cloudfront#NoSuchCloudFrontOriginAccessIdentity":
      throw await de_NoSuchCloudFrontOriginAccessIdentityRes(parsedOutput, context);
    case "DistributionNotDisabled":
    case "com.amazonaws.cloudfront#DistributionNotDisabled":
      throw await de_DistributionNotDisabledRes(parsedOutput, context);
    case "FieldLevelEncryptionConfigInUse":
    case "com.amazonaws.cloudfront#FieldLevelEncryptionConfigInUse":
      throw await de_FieldLevelEncryptionConfigInUseRes(parsedOutput, context);
    case "FieldLevelEncryptionProfileInUse":
    case "com.amazonaws.cloudfront#FieldLevelEncryptionProfileInUse":
      throw await de_FieldLevelEncryptionProfileInUseRes(parsedOutput, context);
    case "FunctionInUse":
    case "com.amazonaws.cloudfront#FunctionInUse":
      throw await de_FunctionInUseRes(parsedOutput, context);
    case "NoSuchFunctionExists":
    case "com.amazonaws.cloudfront#NoSuchFunctionExists":
      throw await de_NoSuchFunctionExistsRes(parsedOutput, context);
    case "NoSuchResource":
    case "com.amazonaws.cloudfront#NoSuchResource":
      throw await de_NoSuchResourceRes(parsedOutput, context);
    case "ResourceInUse":
    case "com.amazonaws.cloudfront#ResourceInUse":
      throw await de_ResourceInUseRes(parsedOutput, context);
    case "NoSuchMonitoringSubscription":
    case "com.amazonaws.cloudfront#NoSuchMonitoringSubscription":
      throw await de_NoSuchMonitoringSubscriptionRes(parsedOutput, context);
    case "NoSuchOriginAccessControl":
    case "com.amazonaws.cloudfront#NoSuchOriginAccessControl":
      throw await de_NoSuchOriginAccessControlRes(parsedOutput, context);
    case "OriginAccessControlInUse":
    case "com.amazonaws.cloudfront#OriginAccessControlInUse":
      throw await de_OriginAccessControlInUseRes(parsedOutput, context);
    case "OriginRequestPolicyInUse":
    case "com.amazonaws.cloudfront#OriginRequestPolicyInUse":
      throw await de_OriginRequestPolicyInUseRes(parsedOutput, context);
    case "PublicKeyInUse":
    case "com.amazonaws.cloudfront#PublicKeyInUse":
      throw await de_PublicKeyInUseRes(parsedOutput, context);
    case "RealtimeLogConfigInUse":
    case "com.amazonaws.cloudfront#RealtimeLogConfigInUse":
      throw await de_RealtimeLogConfigInUseRes(parsedOutput, context);
    case "ResponseHeadersPolicyInUse":
    case "com.amazonaws.cloudfront#ResponseHeadersPolicyInUse":
      throw await de_ResponseHeadersPolicyInUseRes(parsedOutput, context);
    case "NoSuchStreamingDistribution":
    case "com.amazonaws.cloudfront#NoSuchStreamingDistribution":
      throw await de_NoSuchStreamingDistributionRes(parsedOutput, context);
    case "StreamingDistributionNotDisabled":
    case "com.amazonaws.cloudfront#StreamingDistributionNotDisabled":
      throw await de_StreamingDistributionNotDisabledRes(parsedOutput, context);
    case "NoSuchInvalidation":
    case "com.amazonaws.cloudfront#NoSuchInvalidation":
      throw await de_NoSuchInvalidationRes(parsedOutput, context);
    case "TestFunctionFailed":
    case "com.amazonaws.cloudfront#TestFunctionFailed":
      throw await de_TestFunctionFailedRes(parsedOutput, context);
    case "CannotChangeImmutablePublicKeyFields":
    case "com.amazonaws.cloudfront#CannotChangeImmutablePublicKeyFields":
      throw await de_CannotChangeImmutablePublicKeyFieldsRes(parsedOutput, context);
    case "CannotUpdateEntityWhileInUse":
    case "com.amazonaws.cloudfront#CannotUpdateEntityWhileInUse":
      throw await de_CannotUpdateEntityWhileInUseRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(CloudFrontServiceException);
var de_AccessDeniedRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new AccessDenied({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_BatchTooLargeRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new BatchTooLarge({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CachePolicyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CachePolicyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CachePolicyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CachePolicyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CannotChangeImmutablePublicKeyFieldsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CannotChangeImmutablePublicKeyFields({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CannotDeleteEntityWhileInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CannotDeleteEntityWhileInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CannotUpdateEntityWhileInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CannotUpdateEntityWhileInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CloudFrontOriginAccessIdentityAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CloudFrontOriginAccessIdentityAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CloudFrontOriginAccessIdentityInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CloudFrontOriginAccessIdentityInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CNAMEAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CNAMEAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ContinuousDeploymentPolicyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new ContinuousDeploymentPolicyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ContinuousDeploymentPolicyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new ContinuousDeploymentPolicyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DistributionAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new DistributionAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DistributionNotDisabledRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new DistributionNotDisabled({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_EntityAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new EntityAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_EntityLimitExceededRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new EntityLimitExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_EntityNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new EntityNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_EntitySizeLimitExceededRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new EntitySizeLimitExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FieldLevelEncryptionConfigAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FieldLevelEncryptionConfigAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FieldLevelEncryptionConfigInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FieldLevelEncryptionConfigInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FieldLevelEncryptionProfileAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FieldLevelEncryptionProfileAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FieldLevelEncryptionProfileInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FieldLevelEncryptionProfileInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FieldLevelEncryptionProfileSizeExceededRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FieldLevelEncryptionProfileSizeExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FunctionAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FunctionAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FunctionInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FunctionInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_FunctionSizeLimitExceededRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new FunctionSizeLimitExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_IllegalDeleteRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new IllegalDelete({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_IllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_IllegalOriginAccessConfigurationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new IllegalOriginAccessConfiguration({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_IllegalUpdateRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new IllegalUpdate({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InconsistentQuantitiesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InconsistentQuantities({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidArgumentRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidArgument({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidDefaultRootObjectRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidDefaultRootObject({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidDomainNameForOriginAccessControlRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidDomainNameForOriginAccessControl({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidErrorCodeRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidErrorCode({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidForwardCookiesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidForwardCookies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidFunctionAssociationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidFunctionAssociation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidGeoRestrictionParameterRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidGeoRestrictionParameter({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidHeadersForS3OriginRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidHeadersForS3Origin({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidIfMatchVersionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidIfMatchVersion({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidLambdaFunctionAssociationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidLambdaFunctionAssociation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidLocationCodeRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidLocationCode({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidMinimumProtocolVersionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidMinimumProtocolVersion({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidOriginRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidOrigin({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidOriginAccessControlRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidOriginAccessControl({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidOriginAccessIdentityRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidOriginAccessIdentity({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidOriginKeepaliveTimeoutRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidOriginKeepaliveTimeout({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidOriginReadTimeoutRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidOriginReadTimeout({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidProtocolSettingsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidProtocolSettings({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidQueryStringParametersRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidQueryStringParameters({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidRelativePathRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidRelativePath({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidRequiredProtocolRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidRequiredProtocol({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidResponseCodeRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidResponseCode({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidTaggingRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidTagging({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidTTLOrderRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidTTLOrder({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidViewerCertificateRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidViewerCertificate({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidWebACLIdRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new InvalidWebACLId({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_KeyGroupAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new KeyGroupAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_MissingBodyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new MissingBody({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_MonitoringSubscriptionAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new MonitoringSubscriptionAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchCachePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchCachePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchCloudFrontOriginAccessIdentityRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchCloudFrontOriginAccessIdentity({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchContinuousDeploymentPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchContinuousDeploymentPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchDistributionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchDistribution({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchFieldLevelEncryptionConfigRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchFieldLevelEncryptionConfig({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchFieldLevelEncryptionProfileRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchFieldLevelEncryptionProfile({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchFunctionExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchFunctionExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchInvalidationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchInvalidation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchMonitoringSubscriptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchMonitoringSubscription({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchOriginRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchOrigin({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchOriginAccessControlRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchOriginAccessControl({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchOriginRequestPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchOriginRequestPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchPublicKeyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchPublicKey({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchRealtimeLogConfigRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchRealtimeLogConfig({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchResourceRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchResource({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchResponseHeadersPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchResponseHeadersPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchStreamingDistributionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchStreamingDistribution({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_OriginAccessControlAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new OriginAccessControlAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_OriginAccessControlInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new OriginAccessControlInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_OriginRequestPolicyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new OriginRequestPolicyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_OriginRequestPolicyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new OriginRequestPolicyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_PreconditionFailedRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new PreconditionFailed({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_PublicKeyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new PublicKeyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_PublicKeyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new PublicKeyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_QueryArgProfileEmptyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new QueryArgProfileEmpty({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_RealtimeLogConfigAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new RealtimeLogConfigAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_RealtimeLogConfigInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new RealtimeLogConfigInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_RealtimeLogConfigOwnerMismatchRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new RealtimeLogConfigOwnerMismatch({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ResourceInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new ResourceInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ResponseHeadersPolicyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new ResponseHeadersPolicyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ResponseHeadersPolicyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new ResponseHeadersPolicyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_StagingDistributionInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new StagingDistributionInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_StreamingDistributionAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new StreamingDistributionAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_StreamingDistributionNotDisabledRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new StreamingDistributionNotDisabled({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TestFunctionFailedRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TestFunctionFailed({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooLongCSPInResponseHeadersPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooLongCSPInResponseHeadersPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCacheBehaviorsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCacheBehaviors({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCachePoliciesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCachePolicies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCertificatesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCertificates({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCloudFrontOriginAccessIdentitiesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCloudFrontOriginAccessIdentities({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyContinuousDeploymentPoliciesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyContinuousDeploymentPolicies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCookieNamesInWhiteListRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCookieNamesInWhiteList({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCookiesInCachePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCookiesInCachePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCookiesInOriginRequestPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCookiesInOriginRequestPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyCustomHeadersInResponseHeadersPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyCustomHeadersInResponseHeadersPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionCNAMEsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionCNAMEs({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributions({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToCachePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToCachePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToFieldLevelEncryptionConfigRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToFieldLevelEncryptionConfig({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToKeyGroupRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToKeyGroup({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToOriginAccessControlRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToOriginAccessControl({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToOriginRequestPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToOriginRequestPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsAssociatedToResponseHeadersPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsAssociatedToResponseHeadersPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsWithFunctionAssociationsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsWithFunctionAssociations({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsWithLambdaAssociationsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsWithLambdaAssociations({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyDistributionsWithSingleFunctionARNRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyDistributionsWithSingleFunctionARN({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionConfigsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionConfigs({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionContentTypeProfilesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionContentTypeProfiles({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionEncryptionEntitiesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionEncryptionEntities({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionFieldPatternsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionFieldPatterns({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionProfilesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionProfiles({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFieldLevelEncryptionQueryArgProfilesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFieldLevelEncryptionQueryArgProfiles({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFunctionAssociationsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFunctionAssociations({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyFunctionsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyFunctions({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyHeadersInCachePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyHeadersInCachePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyHeadersInForwardedValuesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyHeadersInForwardedValues({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyHeadersInOriginRequestPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyHeadersInOriginRequestPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyInvalidationsInProgressRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyInvalidationsInProgress({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyKeyGroupsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyKeyGroups({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyKeyGroupsAssociatedToDistributionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyKeyGroupsAssociatedToDistribution({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyLambdaFunctionAssociationsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyLambdaFunctionAssociations({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyOriginAccessControlsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyOriginAccessControls({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyOriginCustomHeadersRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyOriginCustomHeaders({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyOriginGroupsPerDistributionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyOriginGroupsPerDistribution({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyOriginRequestPoliciesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyOriginRequestPolicies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyOriginsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyOrigins({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyPublicKeysRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyPublicKeys({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyPublicKeysInKeyGroupRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyPublicKeysInKeyGroup({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyQueryStringParametersRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyQueryStringParameters({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyQueryStringsInCachePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyQueryStringsInCachePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyQueryStringsInOriginRequestPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyQueryStringsInOriginRequestPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyRealtimeLogConfigsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyRealtimeLogConfigs({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyRemoveHeadersInResponseHeadersPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyRemoveHeadersInResponseHeadersPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyResponseHeadersPoliciesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyResponseHeadersPolicies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyStreamingDistributionCNAMEsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyStreamingDistributionCNAMEs({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyStreamingDistributionsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyStreamingDistributions({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyTrustedSignersRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TooManyTrustedSigners({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TrustedKeyGroupDoesNotExistRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TrustedKeyGroupDoesNotExist({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TrustedSignerDoesNotExistRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new TrustedSignerDoesNotExist({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_UnsupportedOperationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new UnsupportedOperation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var se_AccessControlAllowHeadersList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_H);
  });
};
var se_AccessControlAllowMethodsList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_RHPACAMV, entry);
    return n2.n(_Met);
  });
};
var se_AccessControlAllowOriginsList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_Or);
  });
};
var se_AccessControlExposeHeadersList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_H);
  });
};
var se_Aliases = (input, context) => {
  const bn = new XmlNode(_Al);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AliasList(input[_I], context));
  return bn;
};
var se_AliasList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_CNAME);
  });
};
var se_AllowedMethods = (input, context) => {
  const bn = new XmlNode(_AM);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_MethodsList(input[_I], context));
  if (input[_CM] != null) {
    bn.c(se_CachedMethods(input[_CM], context).n(_CM));
  }
  return bn;
};
var se_AwsAccountNumberList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_AAN);
  });
};
var se_CacheBehavior = (input, context) => {
  const bn = new XmlNode(_CB);
  if (input[_PP] != null) {
    bn.c(XmlNode.of(_st, input[_PP]).n(_PP));
  }
  if (input[_TOI] != null) {
    bn.c(XmlNode.of(_st, input[_TOI]).n(_TOI));
  }
  if (input[_TS] != null) {
    bn.c(se_TrustedSigners(input[_TS], context).n(_TS));
  }
  if (input[_TKG] != null) {
    bn.c(se_TrustedKeyGroups(input[_TKG], context).n(_TKG));
  }
  bn.cc(input, _VPP);
  if (input[_AM] != null) {
    bn.c(se_AllowedMethods(input[_AM], context).n(_AM));
  }
  if (input[_SS] != null) {
    bn.c(XmlNode.of(_b, String(input[_SS])).n(_SS));
  }
  if (input[_Co] != null) {
    bn.c(XmlNode.of(_b, String(input[_Co])).n(_Co));
  }
  if (input[_LFA] != null) {
    bn.c(se_LambdaFunctionAssociations(input[_LFA], context).n(_LFA));
  }
  if (input[_FA] != null) {
    bn.c(se_FunctionAssociations(input[_FA], context).n(_FA));
  }
  if (input[_FLEI] != null) {
    bn.c(XmlNode.of(_st, input[_FLEI]).n(_FLEI));
  }
  if (input[_RLCA] != null) {
    bn.c(XmlNode.of(_st, input[_RLCA]).n(_RLCA));
  }
  if (input[_CPI] != null) {
    bn.c(XmlNode.of(_st, input[_CPI]).n(_CPI));
  }
  if (input[_ORPI] != null) {
    bn.c(XmlNode.of(_st, input[_ORPI]).n(_ORPI));
  }
  if (input[_RHPI] != null) {
    bn.c(XmlNode.of(_st, input[_RHPI]).n(_RHPI));
  }
  if (input[_GC] != null) {
    bn.c(se_GrpcConfig(input[_GC], context).n(_GC));
  }
  if (input[_FV] != null) {
    bn.c(se_ForwardedValues(input[_FV], context).n(_FV));
  }
  if (input[_MTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTL])).n(_MTTL));
  }
  if (input[_DTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_DTTL])).n(_DTTL));
  }
  if (input[_MTTLa] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTLa])).n(_MTTLa));
  }
  return bn;
};
var se_CacheBehaviorList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_CacheBehavior(entry, context);
    return n2.n(_CB);
  });
};
var se_CacheBehaviors = (input, context) => {
  const bn = new XmlNode(_CBa);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_CacheBehaviorList(input[_I], context));
  return bn;
};
var se_CachedMethods = (input, context) => {
  const bn = new XmlNode(_CM);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_MethodsList(input[_I], context));
  return bn;
};
var se_CachePolicyConfig = (input, context) => {
  const bn = new XmlNode(_CPC);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_DTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_DTTL])).n(_DTTL));
  }
  if (input[_MTTLa] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTLa])).n(_MTTLa));
  }
  if (input[_MTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTL])).n(_MTTL));
  }
  if (input[_PICKAFTO] != null) {
    bn.c(se_ParametersInCacheKeyAndForwardedToOrigin(input[_PICKAFTO], context).n(_PICKAFTO));
  }
  return bn;
};
var se_CachePolicyCookiesConfig = (input, context) => {
  const bn = new XmlNode(_CPCC);
  if (input[_CBo] != null) {
    bn.c(XmlNode.of(_CPCB, input[_CBo]).n(_CBo));
  }
  if (input[_Coo] != null) {
    bn.c(se_CookieNames(input[_Coo], context).n(_Coo));
  }
  return bn;
};
var se_CachePolicyHeadersConfig = (input, context) => {
  const bn = new XmlNode(_CPHC);
  if (input[_HB] != null) {
    bn.c(XmlNode.of(_CPHB, input[_HB]).n(_HB));
  }
  if (input[_He] != null) {
    bn.c(se_Headers(input[_He], context).n(_He));
  }
  return bn;
};
var se_CachePolicyQueryStringsConfig = (input, context) => {
  const bn = new XmlNode(_CPQSC);
  if (input[_QSB] != null) {
    bn.c(XmlNode.of(_CPQSB, input[_QSB]).n(_QSB));
  }
  if (input[_QS] != null) {
    bn.c(se_QueryStringNames(input[_QS], context).n(_QS));
  }
  return bn;
};
var se_CloudFrontOriginAccessIdentityConfig = (input, context) => {
  const bn = new XmlNode(_CFOAIC);
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  return bn;
};
var se_ContentTypeProfile = (input, context) => {
  const bn = new XmlNode(_CTP);
  bn.cc(input, _Fo);
  if (input[_PI] != null) {
    bn.c(XmlNode.of(_st, input[_PI]).n(_PI));
  }
  if (input[_CT] != null) {
    bn.c(XmlNode.of(_st, input[_CT]).n(_CT));
  }
  return bn;
};
var se_ContentTypeProfileConfig = (input, context) => {
  const bn = new XmlNode(_CTPC);
  if (input[_FWCTIU] != null) {
    bn.c(XmlNode.of(_b, String(input[_FWCTIU])).n(_FWCTIU));
  }
  if (input[_CTPo] != null) {
    bn.c(se_ContentTypeProfiles(input[_CTPo], context).n(_CTPo));
  }
  return bn;
};
var se_ContentTypeProfileList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_ContentTypeProfile(entry, context);
    return n2.n(_CTP);
  });
};
var se_ContentTypeProfiles = (input, context) => {
  const bn = new XmlNode(_CTPo);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_ContentTypeProfileList(input[_I], context));
  return bn;
};
var se_ContinuousDeploymentPolicyConfig = (input, context) => {
  const bn = new XmlNode(_CDPC);
  if (input[_SDDN] != null) {
    bn.c(se_StagingDistributionDnsNames(input[_SDDN], context).n(_SDDN));
  }
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_TC] != null) {
    bn.c(se_TrafficConfig(input[_TC], context).n(_TC));
  }
  return bn;
};
var se_ContinuousDeploymentSingleHeaderConfig = (input, context) => {
  const bn = new XmlNode(_CDSHC);
  if (input[_H] != null) {
    bn.c(XmlNode.of(_st, input[_H]).n(_H));
  }
  if (input[_V] != null) {
    bn.c(XmlNode.of(_st, input[_V]).n(_V));
  }
  return bn;
};
var se_ContinuousDeploymentSingleWeightConfig = (input, context) => {
  const bn = new XmlNode(_CDSWC);
  if (input[_W] != null) {
    bn.c(XmlNode.of(_f, String(input[_W])).n(_W));
  }
  if (input[_SSC] != null) {
    bn.c(se_SessionStickinessConfig(input[_SSC], context).n(_SSC));
  }
  return bn;
};
var se_CookieNameList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_N);
  });
};
var se_CookieNames = (input, context) => {
  const bn = new XmlNode(_CN);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_CookieNameList(input[_I], context));
  return bn;
};
var se_CookiePreference = (input, context) => {
  const bn = new XmlNode(_CP);
  if (input[_For] != null) {
    bn.c(XmlNode.of(_ISt, input[_For]).n(_For));
  }
  if (input[_WN] != null) {
    bn.c(se_CookieNames(input[_WN], context).n(_WN));
  }
  return bn;
};
var se_CustomErrorResponse = (input, context) => {
  const bn = new XmlNode(_CER);
  if (input[_EC] != null) {
    bn.c(XmlNode.of(_i, String(input[_EC])).n(_EC));
  }
  if (input[_RPP] != null) {
    bn.c(XmlNode.of(_st, input[_RPP]).n(_RPP));
  }
  if (input[_RC] != null) {
    bn.c(XmlNode.of(_st, input[_RC]).n(_RC));
  }
  if (input[_ECMTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_ECMTTL])).n(_ECMTTL));
  }
  return bn;
};
var se_CustomErrorResponseList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_CustomErrorResponse(entry, context);
    return n2.n(_CER);
  });
};
var se_CustomErrorResponses = (input, context) => {
  const bn = new XmlNode(_CERu);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_CustomErrorResponseList(input[_I], context));
  return bn;
};
var se_CustomHeaders = (input, context) => {
  const bn = new XmlNode(_CH);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_OriginCustomHeadersList(input[_I], context));
  return bn;
};
var se_CustomOriginConfig = (input, context) => {
  const bn = new XmlNode(_COC);
  if (input[_HTTPP] != null) {
    bn.c(XmlNode.of(_i, String(input[_HTTPP])).n(_HTTPP));
  }
  if (input[_HTTPSP] != null) {
    bn.c(XmlNode.of(_i, String(input[_HTTPSP])).n(_HTTPSP));
  }
  bn.cc(input, _OPP);
  if (input[_OSP] != null) {
    bn.c(se_OriginSslProtocols(input[_OSP], context).n(_OSP));
  }
  if (input[_ORT] != null) {
    bn.c(XmlNode.of(_i, String(input[_ORT])).n(_ORT));
  }
  if (input[_OKT] != null) {
    bn.c(XmlNode.of(_i, String(input[_OKT])).n(_OKT));
  }
  return bn;
};
var se_DefaultCacheBehavior = (input, context) => {
  const bn = new XmlNode(_DCB);
  if (input[_TOI] != null) {
    bn.c(XmlNode.of(_st, input[_TOI]).n(_TOI));
  }
  if (input[_TS] != null) {
    bn.c(se_TrustedSigners(input[_TS], context).n(_TS));
  }
  if (input[_TKG] != null) {
    bn.c(se_TrustedKeyGroups(input[_TKG], context).n(_TKG));
  }
  bn.cc(input, _VPP);
  if (input[_AM] != null) {
    bn.c(se_AllowedMethods(input[_AM], context).n(_AM));
  }
  if (input[_SS] != null) {
    bn.c(XmlNode.of(_b, String(input[_SS])).n(_SS));
  }
  if (input[_Co] != null) {
    bn.c(XmlNode.of(_b, String(input[_Co])).n(_Co));
  }
  if (input[_LFA] != null) {
    bn.c(se_LambdaFunctionAssociations(input[_LFA], context).n(_LFA));
  }
  if (input[_FA] != null) {
    bn.c(se_FunctionAssociations(input[_FA], context).n(_FA));
  }
  if (input[_FLEI] != null) {
    bn.c(XmlNode.of(_st, input[_FLEI]).n(_FLEI));
  }
  if (input[_RLCA] != null) {
    bn.c(XmlNode.of(_st, input[_RLCA]).n(_RLCA));
  }
  if (input[_CPI] != null) {
    bn.c(XmlNode.of(_st, input[_CPI]).n(_CPI));
  }
  if (input[_ORPI] != null) {
    bn.c(XmlNode.of(_st, input[_ORPI]).n(_ORPI));
  }
  if (input[_RHPI] != null) {
    bn.c(XmlNode.of(_st, input[_RHPI]).n(_RHPI));
  }
  if (input[_GC] != null) {
    bn.c(se_GrpcConfig(input[_GC], context).n(_GC));
  }
  if (input[_FV] != null) {
    bn.c(se_ForwardedValues(input[_FV], context).n(_FV));
  }
  if (input[_MTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTL])).n(_MTTL));
  }
  if (input[_DTTL] != null) {
    bn.c(XmlNode.of(_l, String(input[_DTTL])).n(_DTTL));
  }
  if (input[_MTTLa] != null) {
    bn.c(XmlNode.of(_l, String(input[_MTTLa])).n(_MTTLa));
  }
  return bn;
};
var se_DistributionConfig = (input, context) => {
  const bn = new XmlNode(_DC);
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_Al] != null) {
    bn.c(se_Aliases(input[_Al], context).n(_Al));
  }
  if (input[_DRO] != null) {
    bn.c(XmlNode.of(_st, input[_DRO]).n(_DRO));
  }
  if (input[_Ori] != null) {
    bn.c(se_Origins(input[_Ori], context).n(_Ori));
  }
  if (input[_OG] != null) {
    bn.c(se_OriginGroups(input[_OG], context).n(_OG));
  }
  if (input[_DCB] != null) {
    bn.c(se_DefaultCacheBehavior(input[_DCB], context).n(_DCB));
  }
  if (input[_CBa] != null) {
    bn.c(se_CacheBehaviors(input[_CBa], context).n(_CBa));
  }
  if (input[_CERu] != null) {
    bn.c(se_CustomErrorResponses(input[_CERu], context).n(_CERu));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_CTo, input[_C]).n(_C));
  }
  if (input[_Lo] != null) {
    bn.c(se_LoggingConfig(input[_Lo], context).n(_Lo));
  }
  bn.cc(input, _PC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_VC] != null) {
    bn.c(se_ViewerCertificate(input[_VC], context).n(_VC));
  }
  if (input[_Re] != null) {
    bn.c(se_Restrictions(input[_Re], context).n(_Re));
  }
  if (input[_WACLI] != null) {
    bn.c(XmlNode.of(_st, input[_WACLI]).n(_WACLI));
  }
  bn.cc(input, _HV);
  if (input[_IIPVE] != null) {
    bn.c(XmlNode.of(_b, String(input[_IIPVE])).n(_IIPVE));
  }
  if (input[_CDPI] != null) {
    bn.c(XmlNode.of(_st, input[_CDPI]).n(_CDPI));
  }
  if (input[_S] != null) {
    bn.c(XmlNode.of(_b, String(input[_S])).n(_S));
  }
  if (input[_AILI] != null) {
    bn.c(XmlNode.of(_st, input[_AILI]).n(_AILI));
  }
  return bn;
};
var se_DistributionConfigWithTags = (input, context) => {
  const bn = new XmlNode(_DCWT);
  if (input[_DC] != null) {
    bn.c(se_DistributionConfig(input[_DC], context).n(_DC));
  }
  if (input[_T] != null) {
    bn.c(se_Tags(input[_T], context).n(_T));
  }
  return bn;
};
var se_EncryptionEntities = (input, context) => {
  const bn = new XmlNode(_EE);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_EncryptionEntityList(input[_I], context));
  return bn;
};
var se_EncryptionEntity = (input, context) => {
  const bn = new XmlNode(_EEn);
  if (input[_PKI] != null) {
    bn.c(XmlNode.of(_st, input[_PKI]).n(_PKI));
  }
  if (input[_PIr] != null) {
    bn.c(XmlNode.of(_st, input[_PIr]).n(_PIr));
  }
  if (input[_FP] != null) {
    bn.c(se_FieldPatterns(input[_FP], context).n(_FP));
  }
  return bn;
};
var se_EncryptionEntityList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_EncryptionEntity(entry, context);
    return n2.n(_EEn);
  });
};
var se_EndPoint = (input, context) => {
  const bn = new XmlNode(_EPn);
  if (input[_ST] != null) {
    bn.c(XmlNode.of(_st, input[_ST]).n(_ST));
  }
  if (input[_KSC] != null) {
    bn.c(se_KinesisStreamConfig(input[_KSC], context).n(_KSC));
  }
  return bn;
};
var se_EndPointList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_EndPoint(entry, context);
    return n2.n(_m);
  });
};
var se_FieldLevelEncryptionConfig = (input, context) => {
  const bn = new XmlNode(_FLEC);
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_QAPC] != null) {
    bn.c(se_QueryArgProfileConfig(input[_QAPC], context).n(_QAPC));
  }
  if (input[_CTPC] != null) {
    bn.c(se_ContentTypeProfileConfig(input[_CTPC], context).n(_CTPC));
  }
  return bn;
};
var se_FieldLevelEncryptionProfileConfig = (input, context) => {
  const bn = new XmlNode(_FLEPC);
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_EE] != null) {
    bn.c(se_EncryptionEntities(input[_EE], context).n(_EE));
  }
  return bn;
};
var se_FieldList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_Fi);
  });
};
var se_FieldPatternList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_FPi);
  });
};
var se_FieldPatterns = (input, context) => {
  const bn = new XmlNode(_FP);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_FieldPatternList(input[_I], context));
  return bn;
};
var se_ForwardedValues = (input, context) => {
  const bn = new XmlNode(_FV);
  if (input[_QSu] != null) {
    bn.c(XmlNode.of(_b, String(input[_QSu])).n(_QSu));
  }
  if (input[_Coo] != null) {
    bn.c(se_CookiePreference(input[_Coo], context).n(_Coo));
  }
  if (input[_He] != null) {
    bn.c(se_Headers(input[_He], context).n(_He));
  }
  if (input[_QSCK] != null) {
    bn.c(se_QueryStringCacheKeys(input[_QSCK], context).n(_QSCK));
  }
  return bn;
};
var se_FunctionAssociation = (input, context) => {
  const bn = new XmlNode(_FAu);
  bn.cc(input, _FARN);
  bn.cc(input, _ETv);
  return bn;
};
var se_FunctionAssociationList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_FunctionAssociation(entry, context);
    return n2.n(_FAu);
  });
};
var se_FunctionAssociations = (input, context) => {
  const bn = new XmlNode(_FA);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_FunctionAssociationList(input[_I], context));
  return bn;
};
var se_FunctionConfig = (input, context) => {
  const bn = new XmlNode(_FCu);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_Ru] != null) {
    bn.c(XmlNode.of(_FR, input[_Ru]).n(_Ru));
  }
  if (input[_KVSA] != null) {
    bn.c(se_KeyValueStoreAssociations(input[_KVSA], context).n(_KVSA));
  }
  return bn;
};
var se_GeoRestriction = (input, context) => {
  const bn = new XmlNode(_GR);
  if (input[_RT] != null) {
    bn.c(XmlNode.of(_GRT, input[_RT]).n(_RT));
  }
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_LocationList(input[_I], context));
  return bn;
};
var se_GrpcConfig = (input, context) => {
  const bn = new XmlNode(_GC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  return bn;
};
var se_HeaderList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_N);
  });
};
var se_Headers = (input, context) => {
  const bn = new XmlNode(_He);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_HeaderList(input[_I], context));
  return bn;
};
var se_ImportSource = (input, context) => {
  const bn = new XmlNode(_IS);
  if (input[_STo] != null) {
    bn.c(XmlNode.of(_IST, input[_STo]).n(_STo));
  }
  if (input[_SARN] != null) {
    bn.c(XmlNode.of(_st, input[_SARN]).n(_SARN));
  }
  return bn;
};
var se_InvalidationBatch = (input, context) => {
  const bn = new XmlNode(_IB);
  if (input[_P] != null) {
    bn.c(se_Paths(input[_P], context).n(_P));
  }
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  return bn;
};
var se_KeyGroupConfig = (input, context) => {
  const bn = new XmlNode(_KGC);
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  bn.lc(input, "Items", "Items", () => se_PublicKeyIdList(input[_I], context));
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  return bn;
};
var se_KeyValueStoreAssociation = (input, context) => {
  const bn = new XmlNode(_KVSAe);
  bn.cc(input, _KVSARN);
  return bn;
};
var se_KeyValueStoreAssociationList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_KeyValueStoreAssociation(entry, context);
    return n2.n(_KVSAe);
  });
};
var se_KeyValueStoreAssociations = (input, context) => {
  const bn = new XmlNode(_KVSA);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_KeyValueStoreAssociationList(input[_I], context));
  return bn;
};
var se_KinesisStreamConfig = (input, context) => {
  const bn = new XmlNode(_KSC);
  if (input[_RARN] != null) {
    bn.c(XmlNode.of(_st, input[_RARN]).n(_RARN));
  }
  if (input[_SARNt] != null) {
    bn.c(XmlNode.of(_st, input[_SARNt]).n(_SARNt));
  }
  return bn;
};
var se_LambdaFunctionAssociation = (input, context) => {
  const bn = new XmlNode(_LFAa);
  bn.cc(input, _LFARN);
  bn.cc(input, _ETv);
  if (input[_IBn] != null) {
    bn.c(XmlNode.of(_b, String(input[_IBn])).n(_IBn));
  }
  return bn;
};
var se_LambdaFunctionAssociationList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_LambdaFunctionAssociation(entry, context);
    return n2.n(_LFAa);
  });
};
var se_LambdaFunctionAssociations = (input, context) => {
  const bn = new XmlNode(_LFA);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_LambdaFunctionAssociationList(input[_I], context));
  return bn;
};
var se_LocationList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_L);
  });
};
var se_LoggingConfig = (input, context) => {
  const bn = new XmlNode(_LC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_ICn] != null) {
    bn.c(XmlNode.of(_b, String(input[_ICn])).n(_ICn));
  }
  if (input[_B] != null) {
    bn.c(XmlNode.of(_st, input[_B]).n(_B));
  }
  if (input[_Pr] != null) {
    bn.c(XmlNode.of(_st, input[_Pr]).n(_Pr));
  }
  return bn;
};
var se_MethodsList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_Met, entry);
    return n2.n(_Met);
  });
};
var se_MonitoringSubscription = (input, context) => {
  const bn = new XmlNode(_MS);
  if (input[_RMSC] != null) {
    bn.c(se_RealtimeMetricsSubscriptionConfig(input[_RMSC], context).n(_RMSC));
  }
  return bn;
};
var se_Origin = (input, context) => {
  const bn = new XmlNode(_Or);
  if (input[_Id] != null) {
    bn.c(XmlNode.of(_st, input[_Id]).n(_Id));
  }
  if (input[_DN] != null) {
    bn.c(XmlNode.of(_st, input[_DN]).n(_DN));
  }
  if (input[_OP] != null) {
    bn.c(XmlNode.of(_st, input[_OP]).n(_OP));
  }
  if (input[_CH] != null) {
    bn.c(se_CustomHeaders(input[_CH], context).n(_CH));
  }
  if (input[_SOC] != null) {
    bn.c(se_S3OriginConfig(input[_SOC], context).n(_SOC));
  }
  if (input[_COC] != null) {
    bn.c(se_CustomOriginConfig(input[_COC], context).n(_COC));
  }
  if (input[_VOC] != null) {
    bn.c(se_VpcOriginConfig(input[_VOC], context).n(_VOC));
  }
  if (input[_CA] != null) {
    bn.c(XmlNode.of(_i, String(input[_CA])).n(_CA));
  }
  if (input[_CTon] != null) {
    bn.c(XmlNode.of(_i, String(input[_CTon])).n(_CTon));
  }
  if (input[_OS] != null) {
    bn.c(se_OriginShield(input[_OS], context).n(_OS));
  }
  if (input[_OACI] != null) {
    bn.c(XmlNode.of(_st, input[_OACI]).n(_OACI));
  }
  return bn;
};
var se_OriginAccessControlConfig = (input, context) => {
  const bn = new XmlNode(_OACC);
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_D] != null) {
    bn.c(XmlNode.of(_st, input[_D]).n(_D));
  }
  if (input[_SP] != null) {
    bn.c(XmlNode.of(_OACSP, input[_SP]).n(_SP));
  }
  if (input[_SB] != null) {
    bn.c(XmlNode.of(_OACSB, input[_SB]).n(_SB));
  }
  if (input[_OACOT] != null) {
    bn.c(XmlNode.of(_OACOTr, input[_OACOT]).n(_OACOT));
  }
  return bn;
};
var se_OriginCustomHeader = (input, context) => {
  const bn = new XmlNode(_OCH);
  if (input[_HN] != null) {
    bn.c(XmlNode.of(_st, input[_HN]).n(_HN));
  }
  if (input[_HVe] != null) {
    bn.c(XmlNode.of(_sST, input[_HVe]).n(_HVe));
  }
  return bn;
};
var se_OriginCustomHeadersList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_OriginCustomHeader(entry, context);
    return n2.n(_OCH);
  });
};
var se_OriginGroup = (input, context) => {
  const bn = new XmlNode(_OGr);
  if (input[_Id] != null) {
    bn.c(XmlNode.of(_st, input[_Id]).n(_Id));
  }
  if (input[_FCa] != null) {
    bn.c(se_OriginGroupFailoverCriteria(input[_FCa], context).n(_FCa));
  }
  if (input[_Mem] != null) {
    bn.c(se_OriginGroupMembers(input[_Mem], context).n(_Mem));
  }
  if (input[_SC] != null) {
    bn.c(XmlNode.of(_OGSC, input[_SC]).n(_SC));
  }
  return bn;
};
var se_OriginGroupFailoverCriteria = (input, context) => {
  const bn = new XmlNode(_OGFC);
  if (input[_SCt] != null) {
    bn.c(se_StatusCodes(input[_SCt], context).n(_SCt));
  }
  return bn;
};
var se_OriginGroupList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_OriginGroup(entry, context);
    return n2.n(_OGr);
  });
};
var se_OriginGroupMember = (input, context) => {
  const bn = new XmlNode(_OGM);
  if (input[_OI] != null) {
    bn.c(XmlNode.of(_st, input[_OI]).n(_OI));
  }
  return bn;
};
var se_OriginGroupMemberList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_OriginGroupMember(entry, context);
    return n2.n(_OGM);
  });
};
var se_OriginGroupMembers = (input, context) => {
  const bn = new XmlNode(_OGMr);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_OriginGroupMemberList(input[_I], context));
  return bn;
};
var se_OriginGroups = (input, context) => {
  const bn = new XmlNode(_OG);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_OriginGroupList(input[_I], context));
  return bn;
};
var se_OriginList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_Origin(entry, context);
    return n2.n(_Or);
  });
};
var se_OriginRequestPolicyConfig = (input, context) => {
  const bn = new XmlNode(_ORPC);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_HC] != null) {
    bn.c(se_OriginRequestPolicyHeadersConfig(input[_HC], context).n(_HC));
  }
  if (input[_CC] != null) {
    bn.c(se_OriginRequestPolicyCookiesConfig(input[_CC], context).n(_CC));
  }
  if (input[_QSC] != null) {
    bn.c(se_OriginRequestPolicyQueryStringsConfig(input[_QSC], context).n(_QSC));
  }
  return bn;
};
var se_OriginRequestPolicyCookiesConfig = (input, context) => {
  const bn = new XmlNode(_ORPCC);
  if (input[_CBo] != null) {
    bn.c(XmlNode.of(_ORPCB, input[_CBo]).n(_CBo));
  }
  if (input[_Coo] != null) {
    bn.c(se_CookieNames(input[_Coo], context).n(_Coo));
  }
  return bn;
};
var se_OriginRequestPolicyHeadersConfig = (input, context) => {
  const bn = new XmlNode(_ORPHC);
  if (input[_HB] != null) {
    bn.c(XmlNode.of(_ORPHB, input[_HB]).n(_HB));
  }
  if (input[_He] != null) {
    bn.c(se_Headers(input[_He], context).n(_He));
  }
  return bn;
};
var se_OriginRequestPolicyQueryStringsConfig = (input, context) => {
  const bn = new XmlNode(_ORPQSC);
  if (input[_QSB] != null) {
    bn.c(XmlNode.of(_ORPQSB, input[_QSB]).n(_QSB));
  }
  if (input[_QS] != null) {
    bn.c(se_QueryStringNames(input[_QS], context).n(_QS));
  }
  return bn;
};
var se_Origins = (input, context) => {
  const bn = new XmlNode(_Ori);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_OriginList(input[_I], context));
  return bn;
};
var se_OriginShield = (input, context) => {
  const bn = new XmlNode(_OS);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  bn.cc(input, _OSR);
  return bn;
};
var se_OriginSslProtocols = (input, context) => {
  const bn = new XmlNode(_OSP);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_SslProtocolsList(input[_I], context));
  return bn;
};
var se_ParametersInCacheKeyAndForwardedToOrigin = (input, context) => {
  const bn = new XmlNode(_PICKAFTO);
  if (input[_EAEG] != null) {
    bn.c(XmlNode.of(_b, String(input[_EAEG])).n(_EAEG));
  }
  if (input[_EAEB] != null) {
    bn.c(XmlNode.of(_b, String(input[_EAEB])).n(_EAEB));
  }
  if (input[_HC] != null) {
    bn.c(se_CachePolicyHeadersConfig(input[_HC], context).n(_HC));
  }
  if (input[_CC] != null) {
    bn.c(se_CachePolicyCookiesConfig(input[_CC], context).n(_CC));
  }
  if (input[_QSC] != null) {
    bn.c(se_CachePolicyQueryStringsConfig(input[_QSC], context).n(_QSC));
  }
  return bn;
};
var se_PathList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_Pa);
  });
};
var se_Paths = (input, context) => {
  const bn = new XmlNode(_P);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_PathList(input[_I], context));
  return bn;
};
var se_PublicKeyConfig = (input, context) => {
  const bn = new XmlNode(_PKC);
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_EK] != null) {
    bn.c(XmlNode.of(_st, input[_EK]).n(_EK));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  return bn;
};
var se_PublicKeyIdList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_PK);
  });
};
var se_QueryArgProfile = (input, context) => {
  const bn = new XmlNode(_QAP);
  if (input[_QA] != null) {
    bn.c(XmlNode.of(_st, input[_QA]).n(_QA));
  }
  if (input[_PI] != null) {
    bn.c(XmlNode.of(_st, input[_PI]).n(_PI));
  }
  return bn;
};
var se_QueryArgProfileConfig = (input, context) => {
  const bn = new XmlNode(_QAPC);
  if (input[_FWQAPIU] != null) {
    bn.c(XmlNode.of(_b, String(input[_FWQAPIU])).n(_FWQAPIU));
  }
  if (input[_QAPu] != null) {
    bn.c(se_QueryArgProfiles(input[_QAPu], context).n(_QAPu));
  }
  return bn;
};
var se_QueryArgProfileList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_QueryArgProfile(entry, context);
    return n2.n(_QAP);
  });
};
var se_QueryArgProfiles = (input, context) => {
  const bn = new XmlNode(_QAPu);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_QueryArgProfileList(input[_I], context));
  return bn;
};
var se_QueryStringCacheKeys = (input, context) => {
  const bn = new XmlNode(_QSCK);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_QueryStringCacheKeysList(input[_I], context));
  return bn;
};
var se_QueryStringCacheKeysList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_N);
  });
};
var se_QueryStringNames = (input, context) => {
  const bn = new XmlNode(_QSN);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_QueryStringNamesList(input[_I], context));
  return bn;
};
var se_QueryStringNamesList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_N);
  });
};
var se_RealtimeMetricsSubscriptionConfig = (input, context) => {
  const bn = new XmlNode(_RMSC);
  bn.cc(input, _RMSS);
  return bn;
};
var se_ResponseHeadersPolicyAccessControlAllowHeaders = (input, context) => {
  const bn = new XmlNode(_RHPACAH);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AccessControlAllowHeadersList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicyAccessControlAllowMethods = (input, context) => {
  const bn = new XmlNode(_RHPACAM);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AccessControlAllowMethodsList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicyAccessControlAllowOrigins = (input, context) => {
  const bn = new XmlNode(_RHPACAO);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AccessControlAllowOriginsList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicyAccessControlExposeHeaders = (input, context) => {
  const bn = new XmlNode(_RHPACEH);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AccessControlExposeHeadersList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicyConfig = (input, context) => {
  const bn = new XmlNode(_RHPC);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_CCo] != null) {
    bn.c(se_ResponseHeadersPolicyCorsConfig(input[_CCo], context).n(_CCo));
  }
  if (input[_SHC] != null) {
    bn.c(se_ResponseHeadersPolicySecurityHeadersConfig(input[_SHC], context).n(_SHC));
  }
  if (input[_STHC] != null) {
    bn.c(se_ResponseHeadersPolicyServerTimingHeadersConfig(input[_STHC], context).n(_STHC));
  }
  if (input[_CHC] != null) {
    bn.c(se_ResponseHeadersPolicyCustomHeadersConfig(input[_CHC], context).n(_CHC));
  }
  if (input[_RHC] != null) {
    bn.c(se_ResponseHeadersPolicyRemoveHeadersConfig(input[_RHC], context).n(_RHC));
  }
  return bn;
};
var se_ResponseHeadersPolicyContentSecurityPolicy = (input, context) => {
  const bn = new XmlNode(_RHPCSP);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  if (input[_CSP] != null) {
    bn.c(XmlNode.of(_st, input[_CSP]).n(_CSP));
  }
  return bn;
};
var se_ResponseHeadersPolicyContentTypeOptions = (input, context) => {
  const bn = new XmlNode(_RHPCTO);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  return bn;
};
var se_ResponseHeadersPolicyCorsConfig = (input, context) => {
  const bn = new XmlNode(_RHPCC);
  if (input[_ACAO] != null) {
    bn.c(se_ResponseHeadersPolicyAccessControlAllowOrigins(input[_ACAO], context).n(_ACAO));
  }
  if (input[_ACAH] != null) {
    bn.c(se_ResponseHeadersPolicyAccessControlAllowHeaders(input[_ACAH], context).n(_ACAH));
  }
  if (input[_ACAM] != null) {
    bn.c(se_ResponseHeadersPolicyAccessControlAllowMethods(input[_ACAM], context).n(_ACAM));
  }
  if (input[_ACAC] != null) {
    bn.c(XmlNode.of(_b, String(input[_ACAC])).n(_ACAC));
  }
  if (input[_ACEH] != null) {
    bn.c(se_ResponseHeadersPolicyAccessControlExposeHeaders(input[_ACEH], context).n(_ACEH));
  }
  if (input[_ACMAS] != null) {
    bn.c(XmlNode.of(_i, String(input[_ACMAS])).n(_ACMAS));
  }
  if (input[_OO] != null) {
    bn.c(XmlNode.of(_b, String(input[_OO])).n(_OO));
  }
  return bn;
};
var se_ResponseHeadersPolicyCustomHeader = (input, context) => {
  const bn = new XmlNode(_RHPCH);
  if (input[_H] != null) {
    bn.c(XmlNode.of(_st, input[_H]).n(_H));
  }
  if (input[_V] != null) {
    bn.c(XmlNode.of(_st, input[_V]).n(_V));
  }
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  return bn;
};
var se_ResponseHeadersPolicyCustomHeaderList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_ResponseHeadersPolicyCustomHeader(entry, context);
    return n2.n(_RHPCH);
  });
};
var se_ResponseHeadersPolicyCustomHeadersConfig = (input, context) => {
  const bn = new XmlNode(_RHPCHC);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_ResponseHeadersPolicyCustomHeaderList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicyFrameOptions = (input, context) => {
  const bn = new XmlNode(_RHPFO);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  if (input[_FO] != null) {
    bn.c(XmlNode.of(_FOL, input[_FO]).n(_FO));
  }
  return bn;
};
var se_ResponseHeadersPolicyReferrerPolicy = (input, context) => {
  const bn = new XmlNode(_RHPRP);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  if (input[_RP] != null) {
    bn.c(XmlNode.of(_RPL, input[_RP]).n(_RP));
  }
  return bn;
};
var se_ResponseHeadersPolicyRemoveHeader = (input, context) => {
  const bn = new XmlNode(_RHPRH);
  if (input[_H] != null) {
    bn.c(XmlNode.of(_st, input[_H]).n(_H));
  }
  return bn;
};
var se_ResponseHeadersPolicyRemoveHeaderList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_ResponseHeadersPolicyRemoveHeader(entry, context);
    return n2.n(_RHPRH);
  });
};
var se_ResponseHeadersPolicyRemoveHeadersConfig = (input, context) => {
  const bn = new XmlNode(_RHPRHC);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_ResponseHeadersPolicyRemoveHeaderList(input[_I], context));
  return bn;
};
var se_ResponseHeadersPolicySecurityHeadersConfig = (input, context) => {
  const bn = new XmlNode(_RHPSHC);
  if (input[_XSSP] != null) {
    bn.c(se_ResponseHeadersPolicyXSSProtection(input[_XSSP], context).n(_XSSP));
  }
  if (input[_FOr] != null) {
    bn.c(se_ResponseHeadersPolicyFrameOptions(input[_FOr], context).n(_FOr));
  }
  if (input[_RP] != null) {
    bn.c(se_ResponseHeadersPolicyReferrerPolicy(input[_RP], context).n(_RP));
  }
  if (input[_CSP] != null) {
    bn.c(se_ResponseHeadersPolicyContentSecurityPolicy(input[_CSP], context).n(_CSP));
  }
  if (input[_CTO] != null) {
    bn.c(se_ResponseHeadersPolicyContentTypeOptions(input[_CTO], context).n(_CTO));
  }
  if (input[_STS] != null) {
    bn.c(se_ResponseHeadersPolicyStrictTransportSecurity(input[_STS], context).n(_STS));
  }
  return bn;
};
var se_ResponseHeadersPolicyServerTimingHeadersConfig = (input, context) => {
  const bn = new XmlNode(_RHPSTHC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_SR] != null) {
    bn.c(XmlNode.of(_SR, String(input[_SR])).n(_SR));
  }
  return bn;
};
var se_ResponseHeadersPolicyStrictTransportSecurity = (input, context) => {
  const bn = new XmlNode(_RHPSTS);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  if (input[_ISn] != null) {
    bn.c(XmlNode.of(_b, String(input[_ISn])).n(_ISn));
  }
  if (input[_Pre] != null) {
    bn.c(XmlNode.of(_b, String(input[_Pre])).n(_Pre));
  }
  if (input[_ACMAS] != null) {
    bn.c(XmlNode.of(_i, String(input[_ACMAS])).n(_ACMAS));
  }
  return bn;
};
var se_ResponseHeadersPolicyXSSProtection = (input, context) => {
  const bn = new XmlNode(_RHPXSSP);
  if (input[_Ov] != null) {
    bn.c(XmlNode.of(_b, String(input[_Ov])).n(_Ov));
  }
  if (input[_Pro] != null) {
    bn.c(XmlNode.of(_b, String(input[_Pro])).n(_Pro));
  }
  if (input[_MB] != null) {
    bn.c(XmlNode.of(_b, String(input[_MB])).n(_MB));
  }
  if (input[_RU] != null) {
    bn.c(XmlNode.of(_st, input[_RU]).n(_RU));
  }
  return bn;
};
var se_Restrictions = (input, context) => {
  const bn = new XmlNode(_Re);
  if (input[_GR] != null) {
    bn.c(se_GeoRestriction(input[_GR], context).n(_GR));
  }
  return bn;
};
var se_S3Origin = (input, context) => {
  const bn = new XmlNode(_SO);
  if (input[_DN] != null) {
    bn.c(XmlNode.of(_st, input[_DN]).n(_DN));
  }
  if (input[_OAI] != null) {
    bn.c(XmlNode.of(_st, input[_OAI]).n(_OAI));
  }
  return bn;
};
var se_S3OriginConfig = (input, context) => {
  const bn = new XmlNode(_SOC);
  if (input[_OAI] != null) {
    bn.c(XmlNode.of(_st, input[_OAI]).n(_OAI));
  }
  return bn;
};
var se_SessionStickinessConfig = (input, context) => {
  const bn = new XmlNode(_SSC);
  if (input[_ITTL] != null) {
    bn.c(XmlNode.of(_i, String(input[_ITTL])).n(_ITTL));
  }
  if (input[_MTTLax] != null) {
    bn.c(XmlNode.of(_i, String(input[_MTTLax])).n(_MTTLax));
  }
  return bn;
};
var se_SslProtocolsList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_SPs, entry);
    return n2.n(_SPs);
  });
};
var se_StagingDistributionDnsNameList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_DNn);
  });
};
var se_StagingDistributionDnsNames = (input, context) => {
  const bn = new XmlNode(_SDDN);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_StagingDistributionDnsNameList(input[_I], context));
  return bn;
};
var se_StatusCodeList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_i, String(entry));
    return n2.n(_SCta);
  });
};
var se_StatusCodes = (input, context) => {
  const bn = new XmlNode(_SCt);
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_StatusCodeList(input[_I], context));
  return bn;
};
var se_StreamingDistributionConfig = (input, context) => {
  const bn = new XmlNode(_SDC);
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_st, input[_CR]).n(_CR));
  }
  if (input[_SO] != null) {
    bn.c(se_S3Origin(input[_SO], context).n(_SO));
  }
  if (input[_Al] != null) {
    bn.c(se_Aliases(input[_Al], context).n(_Al));
  }
  if (input[_C] != null) {
    bn.c(XmlNode.of(_st, input[_C]).n(_C));
  }
  if (input[_Lo] != null) {
    bn.c(se_StreamingLoggingConfig(input[_Lo], context).n(_Lo));
  }
  if (input[_TS] != null) {
    bn.c(se_TrustedSigners(input[_TS], context).n(_TS));
  }
  bn.cc(input, _PC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  return bn;
};
var se_StreamingDistributionConfigWithTags = (input, context) => {
  const bn = new XmlNode(_SDCWT);
  if (input[_SDC] != null) {
    bn.c(se_StreamingDistributionConfig(input[_SDC], context).n(_SDC));
  }
  if (input[_T] != null) {
    bn.c(se_Tags(input[_T], context).n(_T));
  }
  return bn;
};
var se_StreamingLoggingConfig = (input, context) => {
  const bn = new XmlNode(_SLC);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_B] != null) {
    bn.c(XmlNode.of(_st, input[_B]).n(_B));
  }
  if (input[_Pr] != null) {
    bn.c(XmlNode.of(_st, input[_Pr]).n(_Pr));
  }
  return bn;
};
var se_Tag = (input, context) => {
  const bn = new XmlNode(_Ta);
  if (input[_K] != null) {
    bn.c(XmlNode.of(_TK, input[_K]).n(_K));
  }
  if (input[_V] != null) {
    bn.c(XmlNode.of(_TV, input[_V]).n(_V));
  }
  return bn;
};
var se_TagKeyList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_TK, entry);
    return n2.n(_K);
  });
};
var se_TagKeys = (input, context) => {
  const bn = new XmlNode(_TKa);
  bn.lc(input, "Items", "Items", () => se_TagKeyList(input[_I], context));
  return bn;
};
var se_TagList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_Tag(entry, context);
    return n2.n(_Ta);
  });
};
var se_Tags = (input, context) => {
  const bn = new XmlNode(_T);
  bn.lc(input, "Items", "Items", () => se_TagList(input[_I], context));
  return bn;
};
var se_TrafficConfig = (input, context) => {
  const bn = new XmlNode(_TC);
  if (input[_SWC] != null) {
    bn.c(se_ContinuousDeploymentSingleWeightConfig(input[_SWC], context).n(_SWC));
  }
  if (input[_SHCi] != null) {
    bn.c(se_ContinuousDeploymentSingleHeaderConfig(input[_SHCi], context).n(_SHCi));
  }
  if (input[_Ty] != null) {
    bn.c(XmlNode.of(_CDPT, input[_Ty]).n(_Ty));
  }
  return bn;
};
var se_TrustedKeyGroupIdList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_st, entry);
    return n2.n(_KG);
  });
};
var se_TrustedKeyGroups = (input, context) => {
  const bn = new XmlNode(_TKG);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_TrustedKeyGroupIdList(input[_I], context));
  return bn;
};
var se_TrustedSigners = (input, context) => {
  const bn = new XmlNode(_TS);
  if (input[_E] != null) {
    bn.c(XmlNode.of(_b, String(input[_E])).n(_E));
  }
  if (input[_Q] != null) {
    bn.c(XmlNode.of(_i, String(input[_Q])).n(_Q));
  }
  bn.lc(input, "Items", "Items", () => se_AwsAccountNumberList(input[_I], context));
  return bn;
};
var se_ViewerCertificate = (input, context) => {
  const bn = new XmlNode(_VC);
  if (input[_CFDC] != null) {
    bn.c(XmlNode.of(_b, String(input[_CFDC])).n(_CFDC));
  }
  if (input[_IAMCI] != null) {
    bn.c(XmlNode.of(_st, input[_IAMCI]).n(_IAMCI));
  }
  if (input[_ACMCA] != null) {
    bn.c(XmlNode.of(_st, input[_ACMCA]).n(_ACMCA));
  }
  bn.cc(input, _SSLSM);
  bn.cc(input, _MPV);
  if (input[_Ce] != null) {
    bn.c(XmlNode.of(_st, input[_Ce]).n(_Ce));
  }
  bn.cc(input, _CS);
  return bn;
};
var se_VpcOriginConfig = (input, context) => {
  const bn = new XmlNode(_VOC);
  if (input[_VOI] != null) {
    bn.c(XmlNode.of(_st, input[_VOI]).n(_VOI));
  }
  if (input[_ORT] != null) {
    bn.c(XmlNode.of(_i, String(input[_ORT])).n(_ORT));
  }
  if (input[_OKT] != null) {
    bn.c(XmlNode.of(_i, String(input[_OKT])).n(_OKT));
  }
  return bn;
};
var se_VpcOriginEndpointConfig = (input, context) => {
  const bn = new XmlNode(_VOEC);
  if (input[_N] != null) {
    bn.c(XmlNode.of(_st, input[_N]).n(_N));
  }
  if (input[_Ar] != null) {
    bn.c(XmlNode.of(_st, input[_Ar]).n(_Ar));
  }
  if (input[_HTTPP] != null) {
    bn.c(XmlNode.of(_i, String(input[_HTTPP])).n(_HTTPP));
  }
  if (input[_HTTPSP] != null) {
    bn.c(XmlNode.of(_i, String(input[_HTTPSP])).n(_HTTPSP));
  }
  bn.cc(input, _OPP);
  if (input[_OSP] != null) {
    bn.c(se_OriginSslProtocols(input[_OSP], context).n(_OSP));
  }
  return bn;
};
var de_AccessControlAllowHeadersList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AccessControlAllowMethodsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AccessControlAllowOriginsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AccessControlExposeHeadersList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ActiveTrustedKeyGroups = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KG] != null) {
    contents[_I] = de_KGKeyPairIdsList(getArrayIfSingleItem(output[_I][_KG]), context);
  }
  return contents;
};
var de_ActiveTrustedSigners = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Si] != null) {
    contents[_I] = de_SignerList(getArrayIfSingleItem(output[_I][_Si]), context);
  }
  return contents;
};
var de_Aliases = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CNAME] != null) {
    contents[_I] = de_AliasList(getArrayIfSingleItem(output[_I][_CNAME]), context);
  }
  return contents;
};
var de_AliasICPRecordal = (output, context) => {
  const contents = {};
  if (output[_CNAME] != null) {
    contents[_CNAME] = expectString(output[_CNAME]);
  }
  if (output[_ICPRS] != null) {
    contents[_ICPRS] = expectString(output[_ICPRS]);
  }
  return contents;
};
var de_AliasICPRecordals = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AliasICPRecordal(entry, context);
  });
};
var de_AliasList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AllowedMethods = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Met] != null) {
    contents[_I] = de_MethodsList(getArrayIfSingleItem(output[_I][_Met]), context);
  }
  if (output[_CM] != null) {
    contents[_CM] = de_CachedMethods(output[_CM], context);
  }
  return contents;
};
var de_AnycastIpList = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output.AnycastIps === "") {
    contents[_AI] = [];
  } else if (output[_AI] != null && output[_AI][_AIn] != null) {
    contents[_AI] = de_AnycastIps(getArrayIfSingleItem(output[_AI][_AIn]), context);
  }
  if (output[_IC] != null) {
    contents[_IC] = strictParseInt32(output[_IC]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  return contents;
};
var de_AnycastIpListCollection = (output, context) => {
  const contents = {};
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_AILS] != null) {
    contents[_I] = de_AnycastIpListSummaries(getArrayIfSingleItem(output[_I][_AILS]), context);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  return contents;
};
var de_AnycastIpListSummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AnycastIpListSummary(entry, context);
  });
};
var de_AnycastIpListSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_IC] != null) {
    contents[_IC] = strictParseInt32(output[_IC]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  return contents;
};
var de_AnycastIps = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AwsAccountNumberList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CacheBehavior = (output, context) => {
  const contents = {};
  if (output[_PP] != null) {
    contents[_PP] = expectString(output[_PP]);
  }
  if (output[_TOI] != null) {
    contents[_TOI] = expectString(output[_TOI]);
  }
  if (output[_TS] != null) {
    contents[_TS] = de_TrustedSigners(output[_TS], context);
  }
  if (output[_TKG] != null) {
    contents[_TKG] = de_TrustedKeyGroups(output[_TKG], context);
  }
  if (output[_VPP] != null) {
    contents[_VPP] = expectString(output[_VPP]);
  }
  if (output[_AM] != null) {
    contents[_AM] = de_AllowedMethods(output[_AM], context);
  }
  if (output[_SS] != null) {
    contents[_SS] = parseBoolean(output[_SS]);
  }
  if (output[_Co] != null) {
    contents[_Co] = parseBoolean(output[_Co]);
  }
  if (output[_LFA] != null) {
    contents[_LFA] = de_LambdaFunctionAssociations(output[_LFA], context);
  }
  if (output[_FA] != null) {
    contents[_FA] = de_FunctionAssociations(output[_FA], context);
  }
  if (output[_FLEI] != null) {
    contents[_FLEI] = expectString(output[_FLEI]);
  }
  if (output[_RLCA] != null) {
    contents[_RLCA] = expectString(output[_RLCA]);
  }
  if (output[_CPI] != null) {
    contents[_CPI] = expectString(output[_CPI]);
  }
  if (output[_ORPI] != null) {
    contents[_ORPI] = expectString(output[_ORPI]);
  }
  if (output[_RHPI] != null) {
    contents[_RHPI] = expectString(output[_RHPI]);
  }
  if (output[_GC] != null) {
    contents[_GC] = de_GrpcConfig(output[_GC], context);
  }
  if (output[_FV] != null) {
    contents[_FV] = de_ForwardedValues(output[_FV], context);
  }
  if (output[_MTTL] != null) {
    contents[_MTTL] = strictParseLong(output[_MTTL]);
  }
  if (output[_DTTL] != null) {
    contents[_DTTL] = strictParseLong(output[_DTTL]);
  }
  if (output[_MTTLa] != null) {
    contents[_MTTLa] = strictParseLong(output[_MTTLa]);
  }
  return contents;
};
var de_CacheBehaviorList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CacheBehavior(entry, context);
  });
};
var de_CacheBehaviors = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CB] != null) {
    contents[_I] = de_CacheBehaviorList(getArrayIfSingleItem(output[_I][_CB]), context);
  }
  return contents;
};
var de_CachedMethods = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Met] != null) {
    contents[_I] = de_MethodsList(getArrayIfSingleItem(output[_I][_Met]), context);
  }
  return contents;
};
var de_CachePolicy = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_CPC] != null) {
    contents[_CPC] = de_CachePolicyConfig(output[_CPC], context);
  }
  return contents;
};
var de_CachePolicyConfig = (output, context) => {
  const contents = {};
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_DTTL] != null) {
    contents[_DTTL] = strictParseLong(output[_DTTL]);
  }
  if (output[_MTTLa] != null) {
    contents[_MTTLa] = strictParseLong(output[_MTTLa]);
  }
  if (output[_MTTL] != null) {
    contents[_MTTL] = strictParseLong(output[_MTTL]);
  }
  if (output[_PICKAFTO] != null) {
    contents[_PICKAFTO] = de_ParametersInCacheKeyAndForwardedToOrigin(output[_PICKAFTO], context);
  }
  return contents;
};
var de_CachePolicyCookiesConfig = (output, context) => {
  const contents = {};
  if (output[_CBo] != null) {
    contents[_CBo] = expectString(output[_CBo]);
  }
  if (output[_Coo] != null) {
    contents[_Coo] = de_CookieNames(output[_Coo], context);
  }
  return contents;
};
var de_CachePolicyHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_HB] != null) {
    contents[_HB] = expectString(output[_HB]);
  }
  if (output[_He] != null) {
    contents[_He] = de_Headers(output[_He], context);
  }
  return contents;
};
var de_CachePolicyList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CPS] != null) {
    contents[_I] = de_CachePolicySummaryList(getArrayIfSingleItem(output[_I][_CPS]), context);
  }
  return contents;
};
var de_CachePolicyQueryStringsConfig = (output, context) => {
  const contents = {};
  if (output[_QSB] != null) {
    contents[_QSB] = expectString(output[_QSB]);
  }
  if (output[_QS] != null) {
    contents[_QS] = de_QueryStringNames(output[_QS], context);
  }
  return contents;
};
var de_CachePolicySummary = (output, context) => {
  const contents = {};
  if (output[_Ty] != null) {
    contents[_Ty] = expectString(output[_Ty]);
  }
  if (output[_CPa] != null) {
    contents[_CPa] = de_CachePolicy(output[_CPa], context);
  }
  return contents;
};
var de_CachePolicySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CachePolicySummary(entry, context);
  });
};
var de_CloudFrontOriginAccessIdentity = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_SCUI] != null) {
    contents[_SCUI] = expectString(output[_SCUI]);
  }
  if (output[_CFOAIC] != null) {
    contents[_CFOAIC] = de_CloudFrontOriginAccessIdentityConfig(output[_CFOAIC], context);
  }
  return contents;
};
var de_CloudFrontOriginAccessIdentityConfig = (output, context) => {
  const contents = {};
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_CloudFrontOriginAccessIdentityList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CFOAIS] != null) {
    contents[_I] = de_CloudFrontOriginAccessIdentitySummaryList(getArrayIfSingleItem(output[_I][_CFOAIS]), context);
  }
  return contents;
};
var de_CloudFrontOriginAccessIdentitySummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_SCUI] != null) {
    contents[_SCUI] = expectString(output[_SCUI]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_CloudFrontOriginAccessIdentitySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CloudFrontOriginAccessIdentitySummary(entry, context);
  });
};
var de_ConflictingAlias = (output, context) => {
  const contents = {};
  if (output[_A] != null) {
    contents[_A] = expectString(output[_A]);
  }
  if (output[_DI] != null) {
    contents[_DI] = expectString(output[_DI]);
  }
  if (output[_AIc] != null) {
    contents[_AIc] = expectString(output[_AIc]);
  }
  return contents;
};
var de_ConflictingAliases = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ConflictingAlias(entry, context);
  });
};
var de_ConflictingAliasesList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CAo] != null) {
    contents[_I] = de_ConflictingAliases(getArrayIfSingleItem(output[_I][_CAo]), context);
  }
  return contents;
};
var de_ContentTypeProfile = (output, context) => {
  const contents = {};
  if (output[_Fo] != null) {
    contents[_Fo] = expectString(output[_Fo]);
  }
  if (output[_PI] != null) {
    contents[_PI] = expectString(output[_PI]);
  }
  if (output[_CT] != null) {
    contents[_CT] = expectString(output[_CT]);
  }
  return contents;
};
var de_ContentTypeProfileConfig = (output, context) => {
  const contents = {};
  if (output[_FWCTIU] != null) {
    contents[_FWCTIU] = parseBoolean(output[_FWCTIU]);
  }
  if (output[_CTPo] != null) {
    contents[_CTPo] = de_ContentTypeProfiles(output[_CTPo], context);
  }
  return contents;
};
var de_ContentTypeProfileList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ContentTypeProfile(entry, context);
  });
};
var de_ContentTypeProfiles = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CTP] != null) {
    contents[_I] = de_ContentTypeProfileList(getArrayIfSingleItem(output[_I][_CTP]), context);
  }
  return contents;
};
var de_ContinuousDeploymentPolicy = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_CDPC] != null) {
    contents[_CDPC] = de_ContinuousDeploymentPolicyConfig(output[_CDPC], context);
  }
  return contents;
};
var de_ContinuousDeploymentPolicyConfig = (output, context) => {
  const contents = {};
  if (output[_SDDN] != null) {
    contents[_SDDN] = de_StagingDistributionDnsNames(output[_SDDN], context);
  }
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_TC] != null) {
    contents[_TC] = de_TrafficConfig(output[_TC], context);
  }
  return contents;
};
var de_ContinuousDeploymentPolicyList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CDPS] != null) {
    contents[_I] = de_ContinuousDeploymentPolicySummaryList(getArrayIfSingleItem(output[_I][_CDPS]), context);
  }
  return contents;
};
var de_ContinuousDeploymentPolicySummary = (output, context) => {
  const contents = {};
  if (output[_CDP] != null) {
    contents[_CDP] = de_ContinuousDeploymentPolicy(output[_CDP], context);
  }
  return contents;
};
var de_ContinuousDeploymentPolicySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ContinuousDeploymentPolicySummary(entry, context);
  });
};
var de_ContinuousDeploymentSingleHeaderConfig = (output, context) => {
  const contents = {};
  if (output[_H] != null) {
    contents[_H] = expectString(output[_H]);
  }
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  return contents;
};
var de_ContinuousDeploymentSingleWeightConfig = (output, context) => {
  const contents = {};
  if (output[_W] != null) {
    contents[_W] = strictParseFloat(output[_W]);
  }
  if (output[_SSC] != null) {
    contents[_SSC] = de_SessionStickinessConfig(output[_SSC], context);
  }
  return contents;
};
var de_CookieNameList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CookieNames = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_N] != null) {
    contents[_I] = de_CookieNameList(getArrayIfSingleItem(output[_I][_N]), context);
  }
  return contents;
};
var de_CookiePreference = (output, context) => {
  const contents = {};
  if (output[_For] != null) {
    contents[_For] = expectString(output[_For]);
  }
  if (output[_WN] != null) {
    contents[_WN] = de_CookieNames(output[_WN], context);
  }
  return contents;
};
var de_CustomErrorResponse = (output, context) => {
  const contents = {};
  if (output[_EC] != null) {
    contents[_EC] = strictParseInt32(output[_EC]);
  }
  if (output[_RPP] != null) {
    contents[_RPP] = expectString(output[_RPP]);
  }
  if (output[_RC] != null) {
    contents[_RC] = expectString(output[_RC]);
  }
  if (output[_ECMTTL] != null) {
    contents[_ECMTTL] = strictParseLong(output[_ECMTTL]);
  }
  return contents;
};
var de_CustomErrorResponseList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CustomErrorResponse(entry, context);
  });
};
var de_CustomErrorResponses = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_CER] != null) {
    contents[_I] = de_CustomErrorResponseList(getArrayIfSingleItem(output[_I][_CER]), context);
  }
  return contents;
};
var de_CustomHeaders = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_OCH] != null) {
    contents[_I] = de_OriginCustomHeadersList(getArrayIfSingleItem(output[_I][_OCH]), context);
  }
  return contents;
};
var de_CustomOriginConfig = (output, context) => {
  const contents = {};
  if (output[_HTTPP] != null) {
    contents[_HTTPP] = strictParseInt32(output[_HTTPP]);
  }
  if (output[_HTTPSP] != null) {
    contents[_HTTPSP] = strictParseInt32(output[_HTTPSP]);
  }
  if (output[_OPP] != null) {
    contents[_OPP] = expectString(output[_OPP]);
  }
  if (output[_OSP] != null) {
    contents[_OSP] = de_OriginSslProtocols(output[_OSP], context);
  }
  if (output[_ORT] != null) {
    contents[_ORT] = strictParseInt32(output[_ORT]);
  }
  if (output[_OKT] != null) {
    contents[_OKT] = strictParseInt32(output[_OKT]);
  }
  return contents;
};
var de_DefaultCacheBehavior = (output, context) => {
  const contents = {};
  if (output[_TOI] != null) {
    contents[_TOI] = expectString(output[_TOI]);
  }
  if (output[_TS] != null) {
    contents[_TS] = de_TrustedSigners(output[_TS], context);
  }
  if (output[_TKG] != null) {
    contents[_TKG] = de_TrustedKeyGroups(output[_TKG], context);
  }
  if (output[_VPP] != null) {
    contents[_VPP] = expectString(output[_VPP]);
  }
  if (output[_AM] != null) {
    contents[_AM] = de_AllowedMethods(output[_AM], context);
  }
  if (output[_SS] != null) {
    contents[_SS] = parseBoolean(output[_SS]);
  }
  if (output[_Co] != null) {
    contents[_Co] = parseBoolean(output[_Co]);
  }
  if (output[_LFA] != null) {
    contents[_LFA] = de_LambdaFunctionAssociations(output[_LFA], context);
  }
  if (output[_FA] != null) {
    contents[_FA] = de_FunctionAssociations(output[_FA], context);
  }
  if (output[_FLEI] != null) {
    contents[_FLEI] = expectString(output[_FLEI]);
  }
  if (output[_RLCA] != null) {
    contents[_RLCA] = expectString(output[_RLCA]);
  }
  if (output[_CPI] != null) {
    contents[_CPI] = expectString(output[_CPI]);
  }
  if (output[_ORPI] != null) {
    contents[_ORPI] = expectString(output[_ORPI]);
  }
  if (output[_RHPI] != null) {
    contents[_RHPI] = expectString(output[_RHPI]);
  }
  if (output[_GC] != null) {
    contents[_GC] = de_GrpcConfig(output[_GC], context);
  }
  if (output[_FV] != null) {
    contents[_FV] = de_ForwardedValues(output[_FV], context);
  }
  if (output[_MTTL] != null) {
    contents[_MTTL] = strictParseLong(output[_MTTL]);
  }
  if (output[_DTTL] != null) {
    contents[_DTTL] = strictParseLong(output[_DTTL]);
  }
  if (output[_MTTLa] != null) {
    contents[_MTTLa] = strictParseLong(output[_MTTLa]);
  }
  return contents;
};
var de_Distribution = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_IPIB] != null) {
    contents[_IPIB] = strictParseInt32(output[_IPIB]);
  }
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_ATS] != null) {
    contents[_ATS] = de_ActiveTrustedSigners(output[_ATS], context);
  }
  if (output[_ATKG] != null) {
    contents[_ATKG] = de_ActiveTrustedKeyGroups(output[_ATKG], context);
  }
  if (output[_DC] != null) {
    contents[_DC] = de_DistributionConfig(output[_DC], context);
  }
  if (output.AliasICPRecordals === "") {
    contents[_AICPR] = [];
  } else if (output[_AICPR] != null && output[_AICPR][_AICPRl] != null) {
    contents[_AICPR] = de_AliasICPRecordals(getArrayIfSingleItem(output[_AICPR][_AICPRl]), context);
  }
  return contents;
};
var de_DistributionConfig = (output, context) => {
  const contents = {};
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_Al] != null) {
    contents[_Al] = de_Aliases(output[_Al], context);
  }
  if (output[_DRO] != null) {
    contents[_DRO] = expectString(output[_DRO]);
  }
  if (output[_Ori] != null) {
    contents[_Ori] = de_Origins(output[_Ori], context);
  }
  if (output[_OG] != null) {
    contents[_OG] = de_OriginGroups(output[_OG], context);
  }
  if (output[_DCB] != null) {
    contents[_DCB] = de_DefaultCacheBehavior(output[_DCB], context);
  }
  if (output[_CBa] != null) {
    contents[_CBa] = de_CacheBehaviors(output[_CBa], context);
  }
  if (output[_CERu] != null) {
    contents[_CERu] = de_CustomErrorResponses(output[_CERu], context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_Lo] != null) {
    contents[_Lo] = de_LoggingConfig(output[_Lo], context);
  }
  if (output[_PC] != null) {
    contents[_PC] = expectString(output[_PC]);
  }
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_VC] != null) {
    contents[_VC] = de_ViewerCertificate(output[_VC], context);
  }
  if (output[_Re] != null) {
    contents[_Re] = de_Restrictions(output[_Re], context);
  }
  if (output[_WACLI] != null) {
    contents[_WACLI] = expectString(output[_WACLI]);
  }
  if (output[_HV] != null) {
    contents[_HV] = expectString(output[_HV]);
  }
  if (output[_IIPVE] != null) {
    contents[_IIPVE] = parseBoolean(output[_IIPVE]);
  }
  if (output[_CDPI] != null) {
    contents[_CDPI] = expectString(output[_CDPI]);
  }
  if (output[_S] != null) {
    contents[_S] = parseBoolean(output[_S]);
  }
  if (output[_AILI] != null) {
    contents[_AILI] = expectString(output[_AILI]);
  }
  return contents;
};
var de_DistributionIdList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_DI] != null) {
    contents[_I] = de_DistributionIdListSummary(getArrayIfSingleItem(output[_I][_DI]), context);
  }
  return contents;
};
var de_DistributionIdListSummary = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_DistributionList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_DS] != null) {
    contents[_I] = de_DistributionSummaryList(getArrayIfSingleItem(output[_I][_DS]), context);
  }
  return contents;
};
var de_DistributionSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_Al] != null) {
    contents[_Al] = de_Aliases(output[_Al], context);
  }
  if (output[_Ori] != null) {
    contents[_Ori] = de_Origins(output[_Ori], context);
  }
  if (output[_OG] != null) {
    contents[_OG] = de_OriginGroups(output[_OG], context);
  }
  if (output[_DCB] != null) {
    contents[_DCB] = de_DefaultCacheBehavior(output[_DCB], context);
  }
  if (output[_CBa] != null) {
    contents[_CBa] = de_CacheBehaviors(output[_CBa], context);
  }
  if (output[_CERu] != null) {
    contents[_CERu] = de_CustomErrorResponses(output[_CERu], context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_PC] != null) {
    contents[_PC] = expectString(output[_PC]);
  }
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_VC] != null) {
    contents[_VC] = de_ViewerCertificate(output[_VC], context);
  }
  if (output[_Re] != null) {
    contents[_Re] = de_Restrictions(output[_Re], context);
  }
  if (output[_WACLI] != null) {
    contents[_WACLI] = expectString(output[_WACLI]);
  }
  if (output[_HV] != null) {
    contents[_HV] = expectString(output[_HV]);
  }
  if (output[_IIPVE] != null) {
    contents[_IIPVE] = parseBoolean(output[_IIPVE]);
  }
  if (output.AliasICPRecordals === "") {
    contents[_AICPR] = [];
  } else if (output[_AICPR] != null && output[_AICPR][_AICPRl] != null) {
    contents[_AICPR] = de_AliasICPRecordals(getArrayIfSingleItem(output[_AICPR][_AICPRl]), context);
  }
  if (output[_S] != null) {
    contents[_S] = parseBoolean(output[_S]);
  }
  if (output[_AILI] != null) {
    contents[_AILI] = expectString(output[_AILI]);
  }
  return contents;
};
var de_DistributionSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DistributionSummary(entry, context);
  });
};
var de_EncryptionEntities = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_EEn] != null) {
    contents[_I] = de_EncryptionEntityList(getArrayIfSingleItem(output[_I][_EEn]), context);
  }
  return contents;
};
var de_EncryptionEntity = (output, context) => {
  const contents = {};
  if (output[_PKI] != null) {
    contents[_PKI] = expectString(output[_PKI]);
  }
  if (output[_PIr] != null) {
    contents[_PIr] = expectString(output[_PIr]);
  }
  if (output[_FP] != null) {
    contents[_FP] = de_FieldPatterns(output[_FP], context);
  }
  return contents;
};
var de_EncryptionEntityList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EncryptionEntity(entry, context);
  });
};
var de_EndPoint = (output, context) => {
  const contents = {};
  if (output[_ST] != null) {
    contents[_ST] = expectString(output[_ST]);
  }
  if (output[_KSC] != null) {
    contents[_KSC] = de_KinesisStreamConfig(output[_KSC], context);
  }
  return contents;
};
var de_EndPointList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EndPoint(entry, context);
  });
};
var de_FieldLevelEncryption = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_FLEC] != null) {
    contents[_FLEC] = de_FieldLevelEncryptionConfig(output[_FLEC], context);
  }
  return contents;
};
var de_FieldLevelEncryptionConfig = (output, context) => {
  const contents = {};
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_QAPC] != null) {
    contents[_QAPC] = de_QueryArgProfileConfig(output[_QAPC], context);
  }
  if (output[_CTPC] != null) {
    contents[_CTPC] = de_ContentTypeProfileConfig(output[_CTPC], context);
  }
  return contents;
};
var de_FieldLevelEncryptionList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_FLES] != null) {
    contents[_I] = de_FieldLevelEncryptionSummaryList(getArrayIfSingleItem(output[_I][_FLES]), context);
  }
  return contents;
};
var de_FieldLevelEncryptionProfile = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_FLEPC] != null) {
    contents[_FLEPC] = de_FieldLevelEncryptionProfileConfig(output[_FLEPC], context);
  }
  return contents;
};
var de_FieldLevelEncryptionProfileConfig = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_EE] != null) {
    contents[_EE] = de_EncryptionEntities(output[_EE], context);
  }
  return contents;
};
var de_FieldLevelEncryptionProfileList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_FLEPS] != null) {
    contents[_I] = de_FieldLevelEncryptionProfileSummaryList(getArrayIfSingleItem(output[_I][_FLEPS]), context);
  }
  return contents;
};
var de_FieldLevelEncryptionProfileSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_EE] != null) {
    contents[_EE] = de_EncryptionEntities(output[_EE], context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_FieldLevelEncryptionProfileSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FieldLevelEncryptionProfileSummary(entry, context);
  });
};
var de_FieldLevelEncryptionSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_QAPC] != null) {
    contents[_QAPC] = de_QueryArgProfileConfig(output[_QAPC], context);
  }
  if (output[_CTPC] != null) {
    contents[_CTPC] = de_ContentTypeProfileConfig(output[_CTPC], context);
  }
  return contents;
};
var de_FieldLevelEncryptionSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FieldLevelEncryptionSummary(entry, context);
  });
};
var de_FieldList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_FieldPatternList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_FieldPatterns = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_FPi] != null) {
    contents[_I] = de_FieldPatternList(getArrayIfSingleItem(output[_I][_FPi]), context);
  }
  return contents;
};
var de_ForwardedValues = (output, context) => {
  const contents = {};
  if (output[_QSu] != null) {
    contents[_QSu] = parseBoolean(output[_QSu]);
  }
  if (output[_Coo] != null) {
    contents[_Coo] = de_CookiePreference(output[_Coo], context);
  }
  if (output[_He] != null) {
    contents[_He] = de_Headers(output[_He], context);
  }
  if (output[_QSCK] != null) {
    contents[_QSCK] = de_QueryStringCacheKeys(output[_QSCK], context);
  }
  return contents;
};
var de_FunctionAssociation = (output, context) => {
  const contents = {};
  if (output[_FARN] != null) {
    contents[_FARN] = expectString(output[_FARN]);
  }
  if (output[_ETv] != null) {
    contents[_ETv] = expectString(output[_ETv]);
  }
  return contents;
};
var de_FunctionAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FunctionAssociation(entry, context);
  });
};
var de_FunctionAssociations = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_FAu] != null) {
    contents[_I] = de_FunctionAssociationList(getArrayIfSingleItem(output[_I][_FAu]), context);
  }
  return contents;
};
var de_FunctionConfig = (output, context) => {
  const contents = {};
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_Ru] != null) {
    contents[_Ru] = expectString(output[_Ru]);
  }
  if (output[_KVSA] != null) {
    contents[_KVSA] = de_KeyValueStoreAssociations(output[_KVSA], context);
  }
  return contents;
};
var de_FunctionExecutionLogList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_FunctionList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_FSu] != null) {
    contents[_I] = de_FunctionSummaryList(getArrayIfSingleItem(output[_I][_FSu]), context);
  }
  return contents;
};
var de_FunctionMetadata = (output, context) => {
  const contents = {};
  if (output[_FARN] != null) {
    contents[_FARN] = expectString(output[_FARN]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTr]));
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  return contents;
};
var de_FunctionSummary = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_FCu] != null) {
    contents[_FCu] = de_FunctionConfig(output[_FCu], context);
  }
  if (output[_FM] != null) {
    contents[_FM] = de_FunctionMetadata(output[_FM], context);
  }
  return contents;
};
var de_FunctionSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FunctionSummary(entry, context);
  });
};
var de_GeoRestriction = (output, context) => {
  const contents = {};
  if (output[_RT] != null) {
    contents[_RT] = expectString(output[_RT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_L] != null) {
    contents[_I] = de_LocationList(getArrayIfSingleItem(output[_I][_L]), context);
  }
  return contents;
};
var de_GrpcConfig = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  return contents;
};
var de_HeaderList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Headers = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_N] != null) {
    contents[_I] = de_HeaderList(getArrayIfSingleItem(output[_I][_N]), context);
  }
  return contents;
};
var de_Invalidation = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_CTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTre]));
  }
  if (output[_IB] != null) {
    contents[_IB] = de_InvalidationBatch(output[_IB], context);
  }
  return contents;
};
var de_InvalidationBatch = (output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = de_Paths(output[_P], context);
  }
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  return contents;
};
var de_InvalidationList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_ISnv] != null) {
    contents[_I] = de_InvalidationSummaryList(getArrayIfSingleItem(output[_I][_ISnv]), context);
  }
  return contents;
};
var de_InvalidationSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_CTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTre]));
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  return contents;
};
var de_InvalidationSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InvalidationSummary(entry, context);
  });
};
var de_KeyGroup = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_KGC] != null) {
    contents[_KGC] = de_KeyGroupConfig(output[_KGC], context);
  }
  return contents;
};
var de_KeyGroupConfig = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_PK] != null) {
    contents[_I] = de_PublicKeyIdList(getArrayIfSingleItem(output[_I][_PK]), context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_KeyGroupList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KGS] != null) {
    contents[_I] = de_KeyGroupSummaryList(getArrayIfSingleItem(output[_I][_KGS]), context);
  }
  return contents;
};
var de_KeyGroupSummary = (output, context) => {
  const contents = {};
  if (output[_KG] != null) {
    contents[_KG] = de_KeyGroup(output[_KG], context);
  }
  return contents;
};
var de_KeyGroupSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KeyGroupSummary(entry, context);
  });
};
var de_KeyPairIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_KeyPairIds = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KPI] != null) {
    contents[_I] = de_KeyPairIdList(getArrayIfSingleItem(output[_I][_KPI]), context);
  }
  return contents;
};
var de_KeyValueStore = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  return contents;
};
var de_KeyValueStoreAssociation = (output, context) => {
  const contents = {};
  if (output[_KVSARN] != null) {
    contents[_KVSARN] = expectString(output[_KVSARN]);
  }
  return contents;
};
var de_KeyValueStoreAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KeyValueStoreAssociation(entry, context);
  });
};
var de_KeyValueStoreAssociations = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KVSAe] != null) {
    contents[_I] = de_KeyValueStoreAssociationList(getArrayIfSingleItem(output[_I][_KVSAe]), context);
  }
  return contents;
};
var de_KeyValueStoreList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KVS] != null) {
    contents[_I] = de_KeyValueStoreSummaryList(getArrayIfSingleItem(output[_I][_KVS]), context);
  }
  return contents;
};
var de_KeyValueStoreSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KeyValueStore(entry, context);
  });
};
var de_KGKeyPairIds = (output, context) => {
  const contents = {};
  if (output[_KGI] != null) {
    contents[_KGI] = expectString(output[_KGI]);
  }
  if (output[_KPIe] != null) {
    contents[_KPIe] = de_KeyPairIds(output[_KPIe], context);
  }
  return contents;
};
var de_KGKeyPairIdsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KGKeyPairIds(entry, context);
  });
};
var de_KinesisStreamConfig = (output, context) => {
  const contents = {};
  if (output[_RARN] != null) {
    contents[_RARN] = expectString(output[_RARN]);
  }
  if (output[_SARNt] != null) {
    contents[_SARNt] = expectString(output[_SARNt]);
  }
  return contents;
};
var de_LambdaFunctionAssociation = (output, context) => {
  const contents = {};
  if (output[_LFARN] != null) {
    contents[_LFARN] = expectString(output[_LFARN]);
  }
  if (output[_ETv] != null) {
    contents[_ETv] = expectString(output[_ETv]);
  }
  if (output[_IBn] != null) {
    contents[_IBn] = parseBoolean(output[_IBn]);
  }
  return contents;
};
var de_LambdaFunctionAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LambdaFunctionAssociation(entry, context);
  });
};
var de_LambdaFunctionAssociations = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_LFAa] != null) {
    contents[_I] = de_LambdaFunctionAssociationList(getArrayIfSingleItem(output[_I][_LFAa]), context);
  }
  return contents;
};
var de_LocationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_LoggingConfig = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_ICn] != null) {
    contents[_ICn] = parseBoolean(output[_ICn]);
  }
  if (output[_B] != null) {
    contents[_B] = expectString(output[_B]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = expectString(output[_Pr]);
  }
  return contents;
};
var de_MethodsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_MonitoringSubscription = (output, context) => {
  const contents = {};
  if (output[_RMSC] != null) {
    contents[_RMSC] = de_RealtimeMetricsSubscriptionConfig(output[_RMSC], context);
  }
  return contents;
};
var de_Origin = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_OP] != null) {
    contents[_OP] = expectString(output[_OP]);
  }
  if (output[_CH] != null) {
    contents[_CH] = de_CustomHeaders(output[_CH], context);
  }
  if (output[_SOC] != null) {
    contents[_SOC] = de_S3OriginConfig(output[_SOC], context);
  }
  if (output[_COC] != null) {
    contents[_COC] = de_CustomOriginConfig(output[_COC], context);
  }
  if (output[_VOC] != null) {
    contents[_VOC] = de_VpcOriginConfig(output[_VOC], context);
  }
  if (output[_CA] != null) {
    contents[_CA] = strictParseInt32(output[_CA]);
  }
  if (output[_CTon] != null) {
    contents[_CTon] = strictParseInt32(output[_CTon]);
  }
  if (output[_OS] != null) {
    contents[_OS] = de_OriginShield(output[_OS], context);
  }
  if (output[_OACI] != null) {
    contents[_OACI] = expectString(output[_OACI]);
  }
  return contents;
};
var de_OriginAccessControl = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_OACC] != null) {
    contents[_OACC] = de_OriginAccessControlConfig(output[_OACC], context);
  }
  return contents;
};
var de_OriginAccessControlConfig = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_SP] != null) {
    contents[_SP] = expectString(output[_SP]);
  }
  if (output[_SB] != null) {
    contents[_SB] = expectString(output[_SB]);
  }
  if (output[_OACOT] != null) {
    contents[_OACOT] = expectString(output[_OACOT]);
  }
  return contents;
};
var de_OriginAccessControlList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_OACS] != null) {
    contents[_I] = de_OriginAccessControlSummaryList(getArrayIfSingleItem(output[_I][_OACS]), context);
  }
  return contents;
};
var de_OriginAccessControlSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_SP] != null) {
    contents[_SP] = expectString(output[_SP]);
  }
  if (output[_SB] != null) {
    contents[_SB] = expectString(output[_SB]);
  }
  if (output[_OACOT] != null) {
    contents[_OACOT] = expectString(output[_OACOT]);
  }
  return contents;
};
var de_OriginAccessControlSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OriginAccessControlSummary(entry, context);
  });
};
var de_OriginCustomHeader = (output, context) => {
  const contents = {};
  if (output[_HN] != null) {
    contents[_HN] = expectString(output[_HN]);
  }
  if (output[_HVe] != null) {
    contents[_HVe] = expectString(output[_HVe]);
  }
  return contents;
};
var de_OriginCustomHeadersList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OriginCustomHeader(entry, context);
  });
};
var de_OriginGroup = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_FCa] != null) {
    contents[_FCa] = de_OriginGroupFailoverCriteria(output[_FCa], context);
  }
  if (output[_Mem] != null) {
    contents[_Mem] = de_OriginGroupMembers(output[_Mem], context);
  }
  if (output[_SC] != null) {
    contents[_SC] = expectString(output[_SC]);
  }
  return contents;
};
var de_OriginGroupFailoverCriteria = (output, context) => {
  const contents = {};
  if (output[_SCt] != null) {
    contents[_SCt] = de_StatusCodes(output[_SCt], context);
  }
  return contents;
};
var de_OriginGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OriginGroup(entry, context);
  });
};
var de_OriginGroupMember = (output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = expectString(output[_OI]);
  }
  return contents;
};
var de_OriginGroupMemberList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OriginGroupMember(entry, context);
  });
};
var de_OriginGroupMembers = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_OGM] != null) {
    contents[_I] = de_OriginGroupMemberList(getArrayIfSingleItem(output[_I][_OGM]), context);
  }
  return contents;
};
var de_OriginGroups = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_OGr] != null) {
    contents[_I] = de_OriginGroupList(getArrayIfSingleItem(output[_I][_OGr]), context);
  }
  return contents;
};
var de_OriginList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Origin(entry, context);
  });
};
var de_OriginRequestPolicy = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_ORPC] != null) {
    contents[_ORPC] = de_OriginRequestPolicyConfig(output[_ORPC], context);
  }
  return contents;
};
var de_OriginRequestPolicyConfig = (output, context) => {
  const contents = {};
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_HC] != null) {
    contents[_HC] = de_OriginRequestPolicyHeadersConfig(output[_HC], context);
  }
  if (output[_CC] != null) {
    contents[_CC] = de_OriginRequestPolicyCookiesConfig(output[_CC], context);
  }
  if (output[_QSC] != null) {
    contents[_QSC] = de_OriginRequestPolicyQueryStringsConfig(output[_QSC], context);
  }
  return contents;
};
var de_OriginRequestPolicyCookiesConfig = (output, context) => {
  const contents = {};
  if (output[_CBo] != null) {
    contents[_CBo] = expectString(output[_CBo]);
  }
  if (output[_Coo] != null) {
    contents[_Coo] = de_CookieNames(output[_Coo], context);
  }
  return contents;
};
var de_OriginRequestPolicyHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_HB] != null) {
    contents[_HB] = expectString(output[_HB]);
  }
  if (output[_He] != null) {
    contents[_He] = de_Headers(output[_He], context);
  }
  return contents;
};
var de_OriginRequestPolicyList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_ORPS] != null) {
    contents[_I] = de_OriginRequestPolicySummaryList(getArrayIfSingleItem(output[_I][_ORPS]), context);
  }
  return contents;
};
var de_OriginRequestPolicyQueryStringsConfig = (output, context) => {
  const contents = {};
  if (output[_QSB] != null) {
    contents[_QSB] = expectString(output[_QSB]);
  }
  if (output[_QS] != null) {
    contents[_QS] = de_QueryStringNames(output[_QS], context);
  }
  return contents;
};
var de_OriginRequestPolicySummary = (output, context) => {
  const contents = {};
  if (output[_Ty] != null) {
    contents[_Ty] = expectString(output[_Ty]);
  }
  if (output[_ORP] != null) {
    contents[_ORP] = de_OriginRequestPolicy(output[_ORP], context);
  }
  return contents;
};
var de_OriginRequestPolicySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OriginRequestPolicySummary(entry, context);
  });
};
var de_Origins = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Or] != null) {
    contents[_I] = de_OriginList(getArrayIfSingleItem(output[_I][_Or]), context);
  }
  return contents;
};
var de_OriginShield = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_OSR] != null) {
    contents[_OSR] = expectString(output[_OSR]);
  }
  return contents;
};
var de_OriginSslProtocols = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_SPs] != null) {
    contents[_I] = de_SslProtocolsList(getArrayIfSingleItem(output[_I][_SPs]), context);
  }
  return contents;
};
var de_ParametersInCacheKeyAndForwardedToOrigin = (output, context) => {
  const contents = {};
  if (output[_EAEG] != null) {
    contents[_EAEG] = parseBoolean(output[_EAEG]);
  }
  if (output[_EAEB] != null) {
    contents[_EAEB] = parseBoolean(output[_EAEB]);
  }
  if (output[_HC] != null) {
    contents[_HC] = de_CachePolicyHeadersConfig(output[_HC], context);
  }
  if (output[_CC] != null) {
    contents[_CC] = de_CachePolicyCookiesConfig(output[_CC], context);
  }
  if (output[_QSC] != null) {
    contents[_QSC] = de_CachePolicyQueryStringsConfig(output[_QSC], context);
  }
  return contents;
};
var de_PathList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Paths = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Pa] != null) {
    contents[_I] = de_PathList(getArrayIfSingleItem(output[_I][_Pa]), context);
  }
  return contents;
};
var de_PublicKey = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTr]));
  }
  if (output[_PKC] != null) {
    contents[_PKC] = de_PublicKeyConfig(output[_PKC], context);
  }
  return contents;
};
var de_PublicKeyConfig = (output, context) => {
  const contents = {};
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_EK] != null) {
    contents[_EK] = expectString(output[_EK]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_PublicKeyIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_PublicKeyList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_PKS] != null) {
    contents[_I] = de_PublicKeySummaryList(getArrayIfSingleItem(output[_I][_PKS]), context);
  }
  return contents;
};
var de_PublicKeySummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTr]));
  }
  if (output[_EK] != null) {
    contents[_EK] = expectString(output[_EK]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_PublicKeySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PublicKeySummary(entry, context);
  });
};
var de_QueryArgProfile = (output, context) => {
  const contents = {};
  if (output[_QA] != null) {
    contents[_QA] = expectString(output[_QA]);
  }
  if (output[_PI] != null) {
    contents[_PI] = expectString(output[_PI]);
  }
  return contents;
};
var de_QueryArgProfileConfig = (output, context) => {
  const contents = {};
  if (output[_FWQAPIU] != null) {
    contents[_FWQAPIU] = parseBoolean(output[_FWQAPIU]);
  }
  if (output[_QAPu] != null) {
    contents[_QAPu] = de_QueryArgProfiles(output[_QAPu], context);
  }
  return contents;
};
var de_QueryArgProfileList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_QueryArgProfile(entry, context);
  });
};
var de_QueryArgProfiles = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_QAP] != null) {
    contents[_I] = de_QueryArgProfileList(getArrayIfSingleItem(output[_I][_QAP]), context);
  }
  return contents;
};
var de_QueryStringCacheKeys = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_N] != null) {
    contents[_I] = de_QueryStringCacheKeysList(getArrayIfSingleItem(output[_I][_N]), context);
  }
  return contents;
};
var de_QueryStringCacheKeysList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_QueryStringNames = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_N] != null) {
    contents[_I] = de_QueryStringNamesList(getArrayIfSingleItem(output[_I][_N]), context);
  }
  return contents;
};
var de_QueryStringNamesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_RealtimeLogConfig = (output, context) => {
  const contents = {};
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_SR] != null) {
    contents[_SR] = strictParseLong(output[_SR]);
  }
  if (output.EndPoints === "") {
    contents[_EP] = [];
  } else if (output[_EP] != null && output[_EP][_m] != null) {
    contents[_EP] = de_EndPointList(getArrayIfSingleItem(output[_EP][_m]), context);
  }
  if (output.Fields === "") {
    contents[_F] = [];
  } else if (output[_F] != null && output[_F][_Fi] != null) {
    contents[_F] = de_FieldList(getArrayIfSingleItem(output[_F][_Fi]), context);
  }
  return contents;
};
var de_RealtimeLogConfigList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RealtimeLogConfig(entry, context);
  });
};
var de_RealtimeLogConfigs = (output, context) => {
  const contents = {};
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_m] != null) {
    contents[_I] = de_RealtimeLogConfigList(getArrayIfSingleItem(output[_I][_m]), context);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  return contents;
};
var de_RealtimeMetricsSubscriptionConfig = (output, context) => {
  const contents = {};
  if (output[_RMSS] != null) {
    contents[_RMSS] = expectString(output[_RMSS]);
  }
  return contents;
};
var de_ResponseHeadersPolicy = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_RHPC] != null) {
    contents[_RHPC] = de_ResponseHeadersPolicyConfig(output[_RHPC], context);
  }
  return contents;
};
var de_ResponseHeadersPolicyAccessControlAllowHeaders = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_H] != null) {
    contents[_I] = de_AccessControlAllowHeadersList(getArrayIfSingleItem(output[_I][_H]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyAccessControlAllowMethods = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Met] != null) {
    contents[_I] = de_AccessControlAllowMethodsList(getArrayIfSingleItem(output[_I][_Met]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyAccessControlAllowOrigins = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Or] != null) {
    contents[_I] = de_AccessControlAllowOriginsList(getArrayIfSingleItem(output[_I][_Or]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyAccessControlExposeHeaders = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_H] != null) {
    contents[_I] = de_AccessControlExposeHeadersList(getArrayIfSingleItem(output[_I][_H]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyConfig = (output, context) => {
  const contents = {};
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_CCo] != null) {
    contents[_CCo] = de_ResponseHeadersPolicyCorsConfig(output[_CCo], context);
  }
  if (output[_SHC] != null) {
    contents[_SHC] = de_ResponseHeadersPolicySecurityHeadersConfig(output[_SHC], context);
  }
  if (output[_STHC] != null) {
    contents[_STHC] = de_ResponseHeadersPolicyServerTimingHeadersConfig(output[_STHC], context);
  }
  if (output[_CHC] != null) {
    contents[_CHC] = de_ResponseHeadersPolicyCustomHeadersConfig(output[_CHC], context);
  }
  if (output[_RHC] != null) {
    contents[_RHC] = de_ResponseHeadersPolicyRemoveHeadersConfig(output[_RHC], context);
  }
  return contents;
};
var de_ResponseHeadersPolicyContentSecurityPolicy = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  if (output[_CSP] != null) {
    contents[_CSP] = expectString(output[_CSP]);
  }
  return contents;
};
var de_ResponseHeadersPolicyContentTypeOptions = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  return contents;
};
var de_ResponseHeadersPolicyCorsConfig = (output, context) => {
  const contents = {};
  if (output[_ACAO] != null) {
    contents[_ACAO] = de_ResponseHeadersPolicyAccessControlAllowOrigins(output[_ACAO], context);
  }
  if (output[_ACAH] != null) {
    contents[_ACAH] = de_ResponseHeadersPolicyAccessControlAllowHeaders(output[_ACAH], context);
  }
  if (output[_ACAM] != null) {
    contents[_ACAM] = de_ResponseHeadersPolicyAccessControlAllowMethods(output[_ACAM], context);
  }
  if (output[_ACAC] != null) {
    contents[_ACAC] = parseBoolean(output[_ACAC]);
  }
  if (output[_ACEH] != null) {
    contents[_ACEH] = de_ResponseHeadersPolicyAccessControlExposeHeaders(output[_ACEH], context);
  }
  if (output[_ACMAS] != null) {
    contents[_ACMAS] = strictParseInt32(output[_ACMAS]);
  }
  if (output[_OO] != null) {
    contents[_OO] = parseBoolean(output[_OO]);
  }
  return contents;
};
var de_ResponseHeadersPolicyCustomHeader = (output, context) => {
  const contents = {};
  if (output[_H] != null) {
    contents[_H] = expectString(output[_H]);
  }
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  return contents;
};
var de_ResponseHeadersPolicyCustomHeaderList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResponseHeadersPolicyCustomHeader(entry, context);
  });
};
var de_ResponseHeadersPolicyCustomHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_RHPCH] != null) {
    contents[_I] = de_ResponseHeadersPolicyCustomHeaderList(getArrayIfSingleItem(output[_I][_RHPCH]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyFrameOptions = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  if (output[_FO] != null) {
    contents[_FO] = expectString(output[_FO]);
  }
  return contents;
};
var de_ResponseHeadersPolicyList = (output, context) => {
  const contents = {};
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_RHPS] != null) {
    contents[_I] = de_ResponseHeadersPolicySummaryList(getArrayIfSingleItem(output[_I][_RHPS]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicyReferrerPolicy = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  if (output[_RP] != null) {
    contents[_RP] = expectString(output[_RP]);
  }
  return contents;
};
var de_ResponseHeadersPolicyRemoveHeader = (output, context) => {
  const contents = {};
  if (output[_H] != null) {
    contents[_H] = expectString(output[_H]);
  }
  return contents;
};
var de_ResponseHeadersPolicyRemoveHeaderList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResponseHeadersPolicyRemoveHeader(entry, context);
  });
};
var de_ResponseHeadersPolicyRemoveHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_RHPRH] != null) {
    contents[_I] = de_ResponseHeadersPolicyRemoveHeaderList(getArrayIfSingleItem(output[_I][_RHPRH]), context);
  }
  return contents;
};
var de_ResponseHeadersPolicySecurityHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_XSSP] != null) {
    contents[_XSSP] = de_ResponseHeadersPolicyXSSProtection(output[_XSSP], context);
  }
  if (output[_FOr] != null) {
    contents[_FOr] = de_ResponseHeadersPolicyFrameOptions(output[_FOr], context);
  }
  if (output[_RP] != null) {
    contents[_RP] = de_ResponseHeadersPolicyReferrerPolicy(output[_RP], context);
  }
  if (output[_CSP] != null) {
    contents[_CSP] = de_ResponseHeadersPolicyContentSecurityPolicy(output[_CSP], context);
  }
  if (output[_CTO] != null) {
    contents[_CTO] = de_ResponseHeadersPolicyContentTypeOptions(output[_CTO], context);
  }
  if (output[_STS] != null) {
    contents[_STS] = de_ResponseHeadersPolicyStrictTransportSecurity(output[_STS], context);
  }
  return contents;
};
var de_ResponseHeadersPolicyServerTimingHeadersConfig = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_SR] != null) {
    contents[_SR] = strictParseFloat(output[_SR]);
  }
  return contents;
};
var de_ResponseHeadersPolicyStrictTransportSecurity = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  if (output[_ISn] != null) {
    contents[_ISn] = parseBoolean(output[_ISn]);
  }
  if (output[_Pre] != null) {
    contents[_Pre] = parseBoolean(output[_Pre]);
  }
  if (output[_ACMAS] != null) {
    contents[_ACMAS] = strictParseInt32(output[_ACMAS]);
  }
  return contents;
};
var de_ResponseHeadersPolicySummary = (output, context) => {
  const contents = {};
  if (output[_Ty] != null) {
    contents[_Ty] = expectString(output[_Ty]);
  }
  if (output[_RHP] != null) {
    contents[_RHP] = de_ResponseHeadersPolicy(output[_RHP], context);
  }
  return contents;
};
var de_ResponseHeadersPolicySummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResponseHeadersPolicySummary(entry, context);
  });
};
var de_ResponseHeadersPolicyXSSProtection = (output, context) => {
  const contents = {};
  if (output[_Ov] != null) {
    contents[_Ov] = parseBoolean(output[_Ov]);
  }
  if (output[_Pro] != null) {
    contents[_Pro] = parseBoolean(output[_Pro]);
  }
  if (output[_MB] != null) {
    contents[_MB] = parseBoolean(output[_MB]);
  }
  if (output[_RU] != null) {
    contents[_RU] = expectString(output[_RU]);
  }
  return contents;
};
var de_Restrictions = (output, context) => {
  const contents = {};
  if (output[_GR] != null) {
    contents[_GR] = de_GeoRestriction(output[_GR], context);
  }
  return contents;
};
var de_S3Origin = (output, context) => {
  const contents = {};
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_OAI] != null) {
    contents[_OAI] = expectString(output[_OAI]);
  }
  return contents;
};
var de_S3OriginConfig = (output, context) => {
  const contents = {};
  if (output[_OAI] != null) {
    contents[_OAI] = expectString(output[_OAI]);
  }
  return contents;
};
var de_SessionStickinessConfig = (output, context) => {
  const contents = {};
  if (output[_ITTL] != null) {
    contents[_ITTL] = strictParseInt32(output[_ITTL]);
  }
  if (output[_MTTLax] != null) {
    contents[_MTTLax] = strictParseInt32(output[_MTTLax]);
  }
  return contents;
};
var de_Signer = (output, context) => {
  const contents = {};
  if (output[_AAN] != null) {
    contents[_AAN] = expectString(output[_AAN]);
  }
  if (output[_KPIe] != null) {
    contents[_KPIe] = de_KeyPairIds(output[_KPIe], context);
  }
  return contents;
};
var de_SignerList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Signer(entry, context);
  });
};
var de_SslProtocolsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_StagingDistributionDnsNameList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_StagingDistributionDnsNames = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_DNn] != null) {
    contents[_I] = de_StagingDistributionDnsNameList(getArrayIfSingleItem(output[_I][_DNn]), context);
  }
  return contents;
};
var de_StatusCodeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return strictParseInt32(entry);
  });
};
var de_StatusCodes = (output, context) => {
  const contents = {};
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_SCta] != null) {
    contents[_I] = de_StatusCodeList(getArrayIfSingleItem(output[_I][_SCta]), context);
  }
  return contents;
};
var de_StreamingDistribution = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_ATS] != null) {
    contents[_ATS] = de_ActiveTrustedSigners(output[_ATS], context);
  }
  if (output[_SDC] != null) {
    contents[_SDC] = de_StreamingDistributionConfig(output[_SDC], context);
  }
  return contents;
};
var de_StreamingDistributionConfig = (output, context) => {
  const contents = {};
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_SO] != null) {
    contents[_SO] = de_S3Origin(output[_SO], context);
  }
  if (output[_Al] != null) {
    contents[_Al] = de_Aliases(output[_Al], context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_Lo] != null) {
    contents[_Lo] = de_StreamingLoggingConfig(output[_Lo], context);
  }
  if (output[_TS] != null) {
    contents[_TS] = de_TrustedSigners(output[_TS], context);
  }
  if (output[_PC] != null) {
    contents[_PC] = expectString(output[_PC]);
  }
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  return contents;
};
var de_StreamingDistributionList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_SDS] != null) {
    contents[_I] = de_StreamingDistributionSummaryList(getArrayIfSingleItem(output[_I][_SDS]), context);
  }
  return contents;
};
var de_StreamingDistributionSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = expectString(output[_ARN]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_DN] != null) {
    contents[_DN] = expectString(output[_DN]);
  }
  if (output[_SO] != null) {
    contents[_SO] = de_S3Origin(output[_SO], context);
  }
  if (output[_Al] != null) {
    contents[_Al] = de_Aliases(output[_Al], context);
  }
  if (output[_TS] != null) {
    contents[_TS] = de_TrustedSigners(output[_TS], context);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_PC] != null) {
    contents[_PC] = expectString(output[_PC]);
  }
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  return contents;
};
var de_StreamingDistributionSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_StreamingDistributionSummary(entry, context);
  });
};
var de_StreamingLoggingConfig = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_B] != null) {
    contents[_B] = expectString(output[_B]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = expectString(output[_Pr]);
  }
  return contents;
};
var de_Tag = (output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = expectString(output[_K]);
  }
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  return contents;
};
var de_TagList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Tag(entry, context);
  });
};
var de_Tags = (output, context) => {
  const contents = {};
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Ta] != null) {
    contents[_I] = de_TagList(getArrayIfSingleItem(output[_I][_Ta]), context);
  }
  return contents;
};
var de_TestResult = (output, context) => {
  const contents = {};
  if (output[_FSu] != null) {
    contents[_FSu] = de_FunctionSummary(output[_FSu], context);
  }
  if (output[_CU] != null) {
    contents[_CU] = expectString(output[_CU]);
  }
  if (output.FunctionExecutionLogs === "") {
    contents[_FEL] = [];
  } else if (output[_FEL] != null && output[_FEL][_m] != null) {
    contents[_FEL] = de_FunctionExecutionLogList(getArrayIfSingleItem(output[_FEL][_m]), context);
  }
  if (output[_FEM] != null) {
    contents[_FEM] = expectString(output[_FEM]);
  }
  if (output[_FOu] != null) {
    contents[_FOu] = expectString(output[_FOu]);
  }
  return contents;
};
var de_TrafficConfig = (output, context) => {
  const contents = {};
  if (output[_SWC] != null) {
    contents[_SWC] = de_ContinuousDeploymentSingleWeightConfig(output[_SWC], context);
  }
  if (output[_SHCi] != null) {
    contents[_SHCi] = de_ContinuousDeploymentSingleHeaderConfig(output[_SHCi], context);
  }
  if (output[_Ty] != null) {
    contents[_Ty] = expectString(output[_Ty]);
  }
  return contents;
};
var de_TrustedKeyGroupIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_TrustedKeyGroups = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_KG] != null) {
    contents[_I] = de_TrustedKeyGroupIdList(getArrayIfSingleItem(output[_I][_KG]), context);
  }
  return contents;
};
var de_TrustedSigners = (output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = parseBoolean(output[_E]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_AAN] != null) {
    contents[_I] = de_AwsAccountNumberList(getArrayIfSingleItem(output[_I][_AAN]), context);
  }
  return contents;
};
var de_ViewerCertificate = (output, context) => {
  const contents = {};
  if (output[_CFDC] != null) {
    contents[_CFDC] = parseBoolean(output[_CFDC]);
  }
  if (output[_IAMCI] != null) {
    contents[_IAMCI] = expectString(output[_IAMCI]);
  }
  if (output[_ACMCA] != null) {
    contents[_ACMCA] = expectString(output[_ACMCA]);
  }
  if (output[_SSLSM] != null) {
    contents[_SSLSM] = expectString(output[_SSLSM]);
  }
  if (output[_MPV] != null) {
    contents[_MPV] = expectString(output[_MPV]);
  }
  if (output[_Ce] != null) {
    contents[_Ce] = expectString(output[_Ce]);
  }
  if (output[_CS] != null) {
    contents[_CS] = expectString(output[_CS]);
  }
  return contents;
};
var de_VpcOrigin = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTr]));
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_VOEC] != null) {
    contents[_VOEC] = de_VpcOriginEndpointConfig(output[_VOEC], context);
  }
  return contents;
};
var de_VpcOriginConfig = (output, context) => {
  const contents = {};
  if (output[_VOI] != null) {
    contents[_VOI] = expectString(output[_VOI]);
  }
  if (output[_ORT] != null) {
    contents[_ORT] = strictParseInt32(output[_ORT]);
  }
  if (output[_OKT] != null) {
    contents[_OKT] = strictParseInt32(output[_OKT]);
  }
  return contents;
};
var de_VpcOriginEndpointConfig = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_HTTPP] != null) {
    contents[_HTTPP] = strictParseInt32(output[_HTTPP]);
  }
  if (output[_HTTPSP] != null) {
    contents[_HTTPSP] = strictParseInt32(output[_HTTPSP]);
  }
  if (output[_OPP] != null) {
    contents[_OPP] = expectString(output[_OPP]);
  }
  if (output[_OSP] != null) {
    contents[_OSP] = de_OriginSslProtocols(output[_OSP], context);
  }
  return contents;
};
var de_VpcOriginList = (output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = expectString(output[_M]);
  }
  if (output[_NM] != null) {
    contents[_NM] = expectString(output[_NM]);
  }
  if (output[_MI] != null) {
    contents[_MI] = strictParseInt32(output[_MI]);
  }
  if (output[_IT] != null) {
    contents[_IT] = parseBoolean(output[_IT]);
  }
  if (output[_Q] != null) {
    contents[_Q] = strictParseInt32(output[_Q]);
  }
  if (output.Items === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_VOS] != null) {
    contents[_I] = de_VpcOriginSummaryList(getArrayIfSingleItem(output[_I][_VOS]), context);
  }
  return contents;
};
var de_VpcOriginSummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CTr]));
  }
  if (output[_LMT] != null) {
    contents[_LMT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMT]));
  }
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_OEA] != null) {
    contents[_OEA] = expectString(output[_OEA]);
  }
  return contents;
};
var de_VpcOriginSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcOriginSummary(entry, context);
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _A = "Alias";
var _AAN = "AwsAccountNumber";
var _ACAC = "AccessControlAllowCredentials";
var _ACAH = "AccessControlAllowHeaders";
var _ACAM = "AccessControlAllowMethods";
var _ACAO = "AccessControlAllowOrigins";
var _ACEH = "AccessControlExposeHeaders";
var _ACMAS = "AccessControlMaxAgeSec";
var _ACMCA = "ACMCertificateArn";
var _AI = "AnycastIps";
var _AICPR = "AliasICPRecordals";
var _AICPRl = "AliasICPRecordal";
var _AILI = "AnycastIpListId";
var _AILN = "AnycastIpListName";
var _AILS = "AnycastIpListSummary";
var _AIc = "AccountId";
var _AIn = "AnycastIp";
var _AM = "AllowedMethods";
var _ARN = "ARN";
var _ATKG = "ActiveTrustedKeyGroups";
var _ATS = "ActiveTrustedSigners";
var _Al = "Aliases";
var _Ar = "Arn";
var _B = "Bucket";
var _C = "Comment";
var _CA = "ConnectionAttempts";
var _CAILR = "CreateAnycastIpListRequest";
var _CAo = "ConflictingAlias";
var _CB = "CacheBehavior";
var _CBa = "CacheBehaviors";
var _CBo = "CookieBehavior";
var _CC = "CookiesConfig";
var _CCo = "CorsConfig";
var _CDP = "ContinuousDeploymentPolicy";
var _CDPC = "ContinuousDeploymentPolicyConfig";
var _CDPI = "ContinuousDeploymentPolicyId";
var _CDPS = "ContinuousDeploymentPolicySummary";
var _CDPT = "ContinuousDeploymentPolicyType";
var _CDR = "CopyDistributionRequest";
var _CDSHC = "ContinuousDeploymentSingleHeaderConfig";
var _CDSWC = "ContinuousDeploymentSingleWeightConfig";
var _CER = "CustomErrorResponse";
var _CERu = "CustomErrorResponses";
var _CFDC = "CloudFrontDefaultCertificate";
var _CFOAIC = "CloudFrontOriginAccessIdentityConfig";
var _CFOAIS = "CloudFrontOriginAccessIdentitySummary";
var _CFR = "CreateFunctionRequest";
var _CH = "CustomHeaders";
var _CHC = "CustomHeadersConfig";
var _CKVSR = "CreateKeyValueStoreRequest";
var _CM = "CachedMethods";
var _CN = "CookieNames";
var _CNAME = "CNAME";
var _COC = "CustomOriginConfig";
var _CP = "CookiePreference";
var _CPC = "CachePolicyConfig";
var _CPCB = "CachePolicyCookieBehavior";
var _CPCC = "CachePolicyCookiesConfig";
var _CPHB = "CachePolicyHeaderBehavior";
var _CPHC = "CachePolicyHeadersConfig";
var _CPI = "CachePolicyId";
var _CPQSB = "CachePolicyQueryStringBehavior";
var _CPQSC = "CachePolicyQueryStringsConfig";
var _CPS = "CachePolicySummary";
var _CPa = "CachePolicy";
var _CR = "CallerReference";
var _CRLCR = "CreateRealtimeLogConfigRequest";
var _CS = "CertificateSource";
var _CSP = "ContentSecurityPolicy";
var _CT = "ContentType";
var _CTO = "ContentTypeOptions";
var _CTP = "ContentTypeProfile";
var _CTPC = "ContentTypeProfileConfig";
var _CTPo = "ContentTypeProfiles";
var _CTo = "CommentType";
var _CTon = "ConnectionTimeout";
var _CTr = "CreatedTime";
var _CTre = "CreateTime";
var _CU = "ComputeUtilization";
var _CVOR = "CreateVpcOriginRequest";
var _Ce = "Certificate";
var _Co = "Compress";
var _Coo = "Cookies";
var _D = "Description";
var _DC = "DistributionConfig";
var _DCB = "DefaultCacheBehavior";
var _DCWT = "DistributionConfigWithTags";
var _DI = "DistributionId";
var _DN = "DomainName";
var _DNn = "DnsName";
var _DRLCR = "DeleteRealtimeLogConfigRequest";
var _DRO = "DefaultRootObject";
var _DS = "DistributionSummary";
var _DTTL = "DefaultTTL";
var _E = "Enabled";
var _EAEB = "EnableAcceptEncodingBrotli";
var _EAEG = "EnableAcceptEncodingGzip";
var _EC = "ErrorCode";
var _ECMTTL = "ErrorCachingMinTTL";
var _EE = "EncryptionEntities";
var _EEn = "EncryptionEntity";
var _EK = "EncodedKey";
var _EO = "EventObject";
var _EP = "EndPoints";
var _EPn = "EndPoint";
var _ET = "ETag";
var _ETv = "EventType";
var _F = "Fields";
var _FA = "FunctionAssociations";
var _FARN = "FunctionARN";
var _FAu = "FunctionAssociation";
var _FB = "FunctionBlob";
var _FC = "FunctionCode";
var _FCa = "FailoverCriteria";
var _FCu = "FunctionConfig";
var _FEL = "FunctionExecutionLogs";
var _FEM = "FunctionErrorMessage";
var _FEO = "FunctionEventObject";
var _FLEC = "FieldLevelEncryptionConfig";
var _FLEI = "FieldLevelEncryptionId";
var _FLEPC = "FieldLevelEncryptionProfileConfig";
var _FLEPS = "FieldLevelEncryptionProfileSummary";
var _FLES = "FieldLevelEncryptionSummary";
var _FM = "FunctionMetadata";
var _FN = "FunctionName";
var _FO = "FrameOption";
var _FOL = "FrameOptionsList";
var _FOr = "FrameOptions";
var _FOu = "FunctionOutput";
var _FP = "FieldPatterns";
var _FPi = "FieldPattern";
var _FR = "FunctionRuntime";
var _FS = "FunctionStage";
var _FSu = "FunctionSummary";
var _FV = "ForwardedValues";
var _FWCTIU = "ForwardWhenContentTypeIsUnknown";
var _FWQAPIU = "ForwardWhenQueryArgProfileIsUnknown";
var _Fi = "Field";
var _Fo = "Format";
var _For = "Forward";
var _GC = "GrpcConfig";
var _GR = "GeoRestriction";
var _GRLCR = "GetRealtimeLogConfigRequest";
var _GRT = "GeoRestrictionType";
var _H = "Header";
var _HB = "HeaderBehavior";
var _HC = "HeadersConfig";
var _HN = "HeaderName";
var _HTTPP = "HTTPPort";
var _HTTPSP = "HTTPSPort";
var _HV = "HttpVersion";
var _HVe = "HeaderValue";
var _He = "Headers";
var _I = "Items";
var _IAMCI = "IAMCertificateId";
var _IB = "InvalidationBatch";
var _IBn = "IncludeBody";
var _IC = "IpCount";
var _ICPRS = "ICPRecordalStatus";
var _ICn = "IncludeCookies";
var _IIPVE = "IsIPV6Enabled";
var _IM = "IfMatch";
var _IPIB = "InProgressInvalidationBatches";
var _IS = "ImportSource";
var _IST = "ImportSourceType";
var _ISn = "IncludeSubdomains";
var _ISnv = "InvalidationSummary";
var _ISt = "ItemSelection";
var _IT = "IsTruncated";
var _ITTL = "IdleTTL";
var _Id = "Id";
var _K = "Key";
var _KG = "KeyGroup";
var _KGC = "KeyGroupConfig";
var _KGI = "KeyGroupId";
var _KGS = "KeyGroupSummary";
var _KPI = "KeyPairId";
var _KPIe = "KeyPairIds";
var _KSC = "KinesisStreamConfig";
var _KVS = "KeyValueStore";
var _KVSA = "KeyValueStoreAssociations";
var _KVSARN = "KeyValueStoreARN";
var _KVSAe = "KeyValueStoreAssociation";
var _KVSC = "KeyValueStoreComment";
var _KVSN = "KeyValueStoreName";
var _L = "Location";
var _LC = "LoggingConfig";
var _LDBRLCR = "ListDistributionsByRealtimeLogConfigRequest";
var _LFA = "LambdaFunctionAssociations";
var _LFARN = "LambdaFunctionARN";
var _LFAa = "LambdaFunctionAssociation";
var _LMT = "LastModifiedTime";
var _Lo = "Logging";
var _M = "Marker";
var _MB = "ModeBlock";
var _MI = "MaxItems";
var _MPV = "MinimumProtocolVersion";
var _MS = "MonitoringSubscription";
var _MTTL = "MinTTL";
var _MTTLa = "MaxTTL";
var _MTTLax = "MaximumTTL";
var _Me = "Message";
var _Mem = "Members";
var _Met = "Method";
var _N = "Name";
var _NM = "NextMarker";
var _O = "Operation";
var _OACC = "OriginAccessControlConfig";
var _OACI = "OriginAccessControlId";
var _OACOT = "OriginAccessControlOriginType";
var _OACOTr = "OriginAccessControlOriginTypes";
var _OACS = "OriginAccessControlSummary";
var _OACSB = "OriginAccessControlSigningBehaviors";
var _OACSP = "OriginAccessControlSigningProtocols";
var _OAI = "OriginAccessIdentity";
var _OCH = "OriginCustomHeader";
var _OEA = "OriginEndpointArn";
var _OG = "OriginGroups";
var _OGFC = "OriginGroupFailoverCriteria";
var _OGM = "OriginGroupMember";
var _OGMr = "OriginGroupMembers";
var _OGSC = "OriginGroupSelectionCriteria";
var _OGr = "OriginGroup";
var _OI = "OriginId";
var _OKT = "OriginKeepaliveTimeout";
var _OO = "OriginOverride";
var _OP = "OriginPath";
var _OPP = "OriginProtocolPolicy";
var _ORP = "OriginRequestPolicy";
var _ORPC = "OriginRequestPolicyConfig";
var _ORPCB = "OriginRequestPolicyCookieBehavior";
var _ORPCC = "OriginRequestPolicyCookiesConfig";
var _ORPHB = "OriginRequestPolicyHeaderBehavior";
var _ORPHC = "OriginRequestPolicyHeadersConfig";
var _ORPI = "OriginRequestPolicyId";
var _ORPQSB = "OriginRequestPolicyQueryStringBehavior";
var _ORPQSC = "OriginRequestPolicyQueryStringsConfig";
var _ORPS = "OriginRequestPolicySummary";
var _ORT = "OriginReadTimeout";
var _OS = "OriginShield";
var _OSP = "OriginSslProtocols";
var _OSR = "OriginShieldRegion";
var _Or = "Origin";
var _Ori = "Origins";
var _Ov = "Override";
var _P = "Paths";
var _PC = "PriceClass";
var _PI = "ProfileId";
var _PICKAFTO = "ParametersInCacheKeyAndForwardedToOrigin";
var _PIr = "ProviderId";
var _PK = "PublicKey";
var _PKC = "PublicKeyConfig";
var _PKI = "PublicKeyId";
var _PKS = "PublicKeySummary";
var _PP = "PathPattern";
var _Pa = "Path";
var _Pr = "Prefix";
var _Pre = "Preload";
var _Pro = "Protection";
var _Q = "Quantity";
var _QA = "QueryArg";
var _QAP = "QueryArgProfile";
var _QAPC = "QueryArgProfileConfig";
var _QAPu = "QueryArgProfiles";
var _QS = "QueryStrings";
var _QSB = "QueryStringBehavior";
var _QSC = "QueryStringsConfig";
var _QSCK = "QueryStringCacheKeys";
var _QSN = "QueryStringNames";
var _QSu = "QueryString";
var _R = "Resource";
var _RARN = "RoleARN";
var _RC = "ResponseCode";
var _RHC = "RemoveHeadersConfig";
var _RHP = "ResponseHeadersPolicy";
var _RHPACAH = "ResponseHeadersPolicyAccessControlAllowHeaders";
var _RHPACAM = "ResponseHeadersPolicyAccessControlAllowMethods";
var _RHPACAMV = "ResponseHeadersPolicyAccessControlAllowMethodsValues";
var _RHPACAO = "ResponseHeadersPolicyAccessControlAllowOrigins";
var _RHPACEH = "ResponseHeadersPolicyAccessControlExposeHeaders";
var _RHPC = "ResponseHeadersPolicyConfig";
var _RHPCC = "ResponseHeadersPolicyCorsConfig";
var _RHPCH = "ResponseHeadersPolicyCustomHeader";
var _RHPCHC = "ResponseHeadersPolicyCustomHeadersConfig";
var _RHPCSP = "ResponseHeadersPolicyContentSecurityPolicy";
var _RHPCTO = "ResponseHeadersPolicyContentTypeOptions";
var _RHPFO = "ResponseHeadersPolicyFrameOptions";
var _RHPI = "ResponseHeadersPolicyId";
var _RHPRH = "ResponseHeadersPolicyRemoveHeader";
var _RHPRHC = "ResponseHeadersPolicyRemoveHeadersConfig";
var _RHPRP = "ResponseHeadersPolicyReferrerPolicy";
var _RHPS = "ResponseHeadersPolicySummary";
var _RHPSHC = "ResponseHeadersPolicySecurityHeadersConfig";
var _RHPSTHC = "ResponseHeadersPolicyServerTimingHeadersConfig";
var _RHPSTS = "ResponseHeadersPolicyStrictTransportSecurity";
var _RHPXSSP = "ResponseHeadersPolicyXSSProtection";
var _RLC = "RealtimeLogConfig";
var _RLCA = "RealtimeLogConfigArn";
var _RLCN = "RealtimeLogConfigName";
var _RMSC = "RealtimeMetricsSubscriptionConfig";
var _RMSS = "RealtimeMetricsSubscriptionStatus";
var _RP = "ReferrerPolicy";
var _RPL = "ReferrerPolicyList";
var _RPP = "ResponsePagePath";
var _RT = "RestrictionType";
var _RU = "ReportUri";
var _Re = "Restrictions";
var _Ru = "Runtime";
var _S = "Staging";
var _SARN = "SourceARN";
var _SARNt = "StreamARN";
var _SB = "SigningBehavior";
var _SC = "SelectionCriteria";
var _SCUI = "S3CanonicalUserId";
var _SCt = "StatusCodes";
var _SCta = "StatusCode";
var _SDC = "StreamingDistributionConfig";
var _SDCWT = "StreamingDistributionConfigWithTags";
var _SDDN = "StagingDistributionDnsNames";
var _SDI = "StagingDistributionId";
var _SDS = "StreamingDistributionSummary";
var _SHC = "SecurityHeadersConfig";
var _SHCi = "SingleHeaderConfig";
var _SLC = "StreamingLoggingConfig";
var _SO = "S3Origin";
var _SOC = "S3OriginConfig";
var _SP = "SigningProtocol";
var _SPs = "SslProtocol";
var _SR = "SamplingRate";
var _SS = "SmoothStreaming";
var _SSC = "SessionStickinessConfig";
var _SSLSM = "SSLSupportMethod";
var _ST = "StreamType";
var _STHC = "ServerTimingHeadersConfig";
var _STS = "StrictTransportSecurity";
var _STo = "SourceType";
var _SWC = "SingleWeightConfig";
var _Si = "Signer";
var _St = "Stage";
var _Sta = "Status";
var _T = "Tags";
var _TC = "TrafficConfig";
var _TFR = "TestFunctionRequest";
var _TK = "TagKey";
var _TKG = "TrustedKeyGroups";
var _TKa = "TagKeys";
var _TOI = "TargetOriginId";
var _TS = "TrustedSigners";
var _TV = "TagValue";
var _Ta = "Tag";
var _Ty = "Type";
var _UFR = "UpdateFunctionRequest";
var _UKVSR = "UpdateKeyValueStoreRequest";
var _URLCR = "UpdateRealtimeLogConfigRequest";
var _V = "Value";
var _VC = "ViewerCertificate";
var _VOC = "VpcOriginConfig";
var _VOEC = "VpcOriginEndpointConfig";
var _VOI = "VpcOriginId";
var _VOS = "VpcOriginSummary";
var _VPP = "ViewerProtocolPolicy";
var _W = "Weight";
var _WACLI = "WebACLId";
var _WN = "WhitelistedNames";
var _WT = "WithTags";
var _XSSP = "XSSProtection";
var _b = "boolean";
var _ct = "content-type";
var _e = "etag";
var _et = "ettag";
var _f = "float";
var _i = "integer";
var _im = "if-match";
var _l = "long";
var _lo = "location";
var _m = "member";
var _s = "staging";
var _sST = "sensitiveStringType";
var _st = "string";
var _ve = '<?xml version="1.0" encoding="UTF-8"?>';

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/AssociateAliasCommand.js
var AssociateAliasCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "AssociateAlias", {}).n("CloudFrontClient", "AssociateAliasCommand").f(void 0, void 0).ser(se_AssociateAliasCommand).de(de_AssociateAliasCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CopyDistributionCommand.js
var CopyDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CopyDistribution", {}).n("CloudFrontClient", "CopyDistributionCommand").f(void 0, CopyDistributionResultFilterSensitiveLog).ser(se_CopyDistributionCommand).de(de_CopyDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateAnycastIpListCommand.js
var CreateAnycastIpListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateAnycastIpList", {}).n("CloudFrontClient", "CreateAnycastIpListCommand").f(void 0, void 0).ser(se_CreateAnycastIpListCommand).de(de_CreateAnycastIpListCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateCachePolicyCommand.js
var CreateCachePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateCachePolicy", {}).n("CloudFrontClient", "CreateCachePolicyCommand").f(void 0, void 0).ser(se_CreateCachePolicyCommand).de(de_CreateCachePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateCloudFrontOriginAccessIdentityCommand.js
var CreateCloudFrontOriginAccessIdentityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateCloudFrontOriginAccessIdentity", {}).n("CloudFrontClient", "CreateCloudFrontOriginAccessIdentityCommand").f(void 0, void 0).ser(se_CreateCloudFrontOriginAccessIdentityCommand).de(de_CreateCloudFrontOriginAccessIdentityCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateContinuousDeploymentPolicyCommand.js
var CreateContinuousDeploymentPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateContinuousDeploymentPolicy", {}).n("CloudFrontClient", "CreateContinuousDeploymentPolicyCommand").f(void 0, void 0).ser(se_CreateContinuousDeploymentPolicyCommand).de(de_CreateContinuousDeploymentPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateDistributionCommand.js
var CreateDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateDistribution", {}).n("CloudFrontClient", "CreateDistributionCommand").f(CreateDistributionRequestFilterSensitiveLog, CreateDistributionResultFilterSensitiveLog).ser(se_CreateDistributionCommand).de(de_CreateDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateDistributionWithTagsCommand.js
var CreateDistributionWithTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateDistributionWithTags", {}).n("CloudFrontClient", "CreateDistributionWithTagsCommand").f(CreateDistributionWithTagsRequestFilterSensitiveLog, CreateDistributionWithTagsResultFilterSensitiveLog).ser(se_CreateDistributionWithTagsCommand).de(de_CreateDistributionWithTagsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateFieldLevelEncryptionConfigCommand.js
var CreateFieldLevelEncryptionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateFieldLevelEncryptionConfig", {}).n("CloudFrontClient", "CreateFieldLevelEncryptionConfigCommand").f(void 0, void 0).ser(se_CreateFieldLevelEncryptionConfigCommand).de(de_CreateFieldLevelEncryptionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateFieldLevelEncryptionProfileCommand.js
var CreateFieldLevelEncryptionProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateFieldLevelEncryptionProfile", {}).n("CloudFrontClient", "CreateFieldLevelEncryptionProfileCommand").f(void 0, void 0).ser(se_CreateFieldLevelEncryptionProfileCommand).de(de_CreateFieldLevelEncryptionProfileCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateFunctionCommand.js
var CreateFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateFunction", {}).n("CloudFrontClient", "CreateFunctionCommand").f(CreateFunctionRequestFilterSensitiveLog, void 0).ser(se_CreateFunctionCommand).de(de_CreateFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateInvalidationCommand.js
var CreateInvalidationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateInvalidation", {}).n("CloudFrontClient", "CreateInvalidationCommand").f(void 0, void 0).ser(se_CreateInvalidationCommand).de(de_CreateInvalidationCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateKeyGroupCommand.js
var CreateKeyGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateKeyGroup", {}).n("CloudFrontClient", "CreateKeyGroupCommand").f(void 0, void 0).ser(se_CreateKeyGroupCommand).de(de_CreateKeyGroupCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateKeyValueStoreCommand.js
var CreateKeyValueStoreCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateKeyValueStore", {}).n("CloudFrontClient", "CreateKeyValueStoreCommand").f(void 0, void 0).ser(se_CreateKeyValueStoreCommand).de(de_CreateKeyValueStoreCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateMonitoringSubscriptionCommand.js
var CreateMonitoringSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateMonitoringSubscription", {}).n("CloudFrontClient", "CreateMonitoringSubscriptionCommand").f(void 0, void 0).ser(se_CreateMonitoringSubscriptionCommand).de(de_CreateMonitoringSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateOriginAccessControlCommand.js
var CreateOriginAccessControlCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateOriginAccessControl", {}).n("CloudFrontClient", "CreateOriginAccessControlCommand").f(void 0, void 0).ser(se_CreateOriginAccessControlCommand).de(de_CreateOriginAccessControlCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateOriginRequestPolicyCommand.js
var CreateOriginRequestPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateOriginRequestPolicy", {}).n("CloudFrontClient", "CreateOriginRequestPolicyCommand").f(void 0, void 0).ser(se_CreateOriginRequestPolicyCommand).de(de_CreateOriginRequestPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreatePublicKeyCommand.js
var CreatePublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreatePublicKey", {}).n("CloudFrontClient", "CreatePublicKeyCommand").f(void 0, void 0).ser(se_CreatePublicKeyCommand).de(de_CreatePublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateRealtimeLogConfigCommand.js
var CreateRealtimeLogConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateRealtimeLogConfig", {}).n("CloudFrontClient", "CreateRealtimeLogConfigCommand").f(void 0, void 0).ser(se_CreateRealtimeLogConfigCommand).de(de_CreateRealtimeLogConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateResponseHeadersPolicyCommand.js
var CreateResponseHeadersPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateResponseHeadersPolicy", {}).n("CloudFrontClient", "CreateResponseHeadersPolicyCommand").f(void 0, void 0).ser(se_CreateResponseHeadersPolicyCommand).de(de_CreateResponseHeadersPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateStreamingDistributionCommand.js
var CreateStreamingDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateStreamingDistribution", {}).n("CloudFrontClient", "CreateStreamingDistributionCommand").f(void 0, void 0).ser(se_CreateStreamingDistributionCommand).de(de_CreateStreamingDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateStreamingDistributionWithTagsCommand.js
var CreateStreamingDistributionWithTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateStreamingDistributionWithTags", {}).n("CloudFrontClient", "CreateStreamingDistributionWithTagsCommand").f(void 0, void 0).ser(se_CreateStreamingDistributionWithTagsCommand).de(de_CreateStreamingDistributionWithTagsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/CreateVpcOriginCommand.js
var CreateVpcOriginCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "CreateVpcOrigin", {}).n("CloudFrontClient", "CreateVpcOriginCommand").f(void 0, void 0).ser(se_CreateVpcOriginCommand).de(de_CreateVpcOriginCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteAnycastIpListCommand.js
var DeleteAnycastIpListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteAnycastIpList", {}).n("CloudFrontClient", "DeleteAnycastIpListCommand").f(void 0, void 0).ser(se_DeleteAnycastIpListCommand).de(de_DeleteAnycastIpListCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteCachePolicyCommand.js
var DeleteCachePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteCachePolicy", {}).n("CloudFrontClient", "DeleteCachePolicyCommand").f(void 0, void 0).ser(se_DeleteCachePolicyCommand).de(de_DeleteCachePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteCloudFrontOriginAccessIdentityCommand.js
var DeleteCloudFrontOriginAccessIdentityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteCloudFrontOriginAccessIdentity", {}).n("CloudFrontClient", "DeleteCloudFrontOriginAccessIdentityCommand").f(void 0, void 0).ser(se_DeleteCloudFrontOriginAccessIdentityCommand).de(de_DeleteCloudFrontOriginAccessIdentityCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteContinuousDeploymentPolicyCommand.js
var DeleteContinuousDeploymentPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteContinuousDeploymentPolicy", {}).n("CloudFrontClient", "DeleteContinuousDeploymentPolicyCommand").f(void 0, void 0).ser(se_DeleteContinuousDeploymentPolicyCommand).de(de_DeleteContinuousDeploymentPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteDistributionCommand.js
var DeleteDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteDistribution", {}).n("CloudFrontClient", "DeleteDistributionCommand").f(void 0, void 0).ser(se_DeleteDistributionCommand).de(de_DeleteDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteFieldLevelEncryptionConfigCommand.js
var DeleteFieldLevelEncryptionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteFieldLevelEncryptionConfig", {}).n("CloudFrontClient", "DeleteFieldLevelEncryptionConfigCommand").f(void 0, void 0).ser(se_DeleteFieldLevelEncryptionConfigCommand).de(de_DeleteFieldLevelEncryptionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteFieldLevelEncryptionProfileCommand.js
var DeleteFieldLevelEncryptionProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteFieldLevelEncryptionProfile", {}).n("CloudFrontClient", "DeleteFieldLevelEncryptionProfileCommand").f(void 0, void 0).ser(se_DeleteFieldLevelEncryptionProfileCommand).de(de_DeleteFieldLevelEncryptionProfileCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteFunctionCommand.js
var DeleteFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteFunction", {}).n("CloudFrontClient", "DeleteFunctionCommand").f(void 0, void 0).ser(se_DeleteFunctionCommand).de(de_DeleteFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteKeyGroupCommand.js
var DeleteKeyGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteKeyGroup", {}).n("CloudFrontClient", "DeleteKeyGroupCommand").f(void 0, void 0).ser(se_DeleteKeyGroupCommand).de(de_DeleteKeyGroupCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteKeyValueStoreCommand.js
var DeleteKeyValueStoreCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteKeyValueStore", {}).n("CloudFrontClient", "DeleteKeyValueStoreCommand").f(void 0, void 0).ser(se_DeleteKeyValueStoreCommand).de(de_DeleteKeyValueStoreCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteMonitoringSubscriptionCommand.js
var DeleteMonitoringSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteMonitoringSubscription", {}).n("CloudFrontClient", "DeleteMonitoringSubscriptionCommand").f(void 0, void 0).ser(se_DeleteMonitoringSubscriptionCommand).de(de_DeleteMonitoringSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteOriginAccessControlCommand.js
var DeleteOriginAccessControlCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteOriginAccessControl", {}).n("CloudFrontClient", "DeleteOriginAccessControlCommand").f(void 0, void 0).ser(se_DeleteOriginAccessControlCommand).de(de_DeleteOriginAccessControlCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteOriginRequestPolicyCommand.js
var DeleteOriginRequestPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteOriginRequestPolicy", {}).n("CloudFrontClient", "DeleteOriginRequestPolicyCommand").f(void 0, void 0).ser(se_DeleteOriginRequestPolicyCommand).de(de_DeleteOriginRequestPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeletePublicKeyCommand.js
var DeletePublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeletePublicKey", {}).n("CloudFrontClient", "DeletePublicKeyCommand").f(void 0, void 0).ser(se_DeletePublicKeyCommand).de(de_DeletePublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteRealtimeLogConfigCommand.js
var DeleteRealtimeLogConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteRealtimeLogConfig", {}).n("CloudFrontClient", "DeleteRealtimeLogConfigCommand").f(void 0, void 0).ser(se_DeleteRealtimeLogConfigCommand).de(de_DeleteRealtimeLogConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteResponseHeadersPolicyCommand.js
var DeleteResponseHeadersPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteResponseHeadersPolicy", {}).n("CloudFrontClient", "DeleteResponseHeadersPolicyCommand").f(void 0, void 0).ser(se_DeleteResponseHeadersPolicyCommand).de(de_DeleteResponseHeadersPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteStreamingDistributionCommand.js
var DeleteStreamingDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteStreamingDistribution", {}).n("CloudFrontClient", "DeleteStreamingDistributionCommand").f(void 0, void 0).ser(se_DeleteStreamingDistributionCommand).de(de_DeleteStreamingDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DeleteVpcOriginCommand.js
var DeleteVpcOriginCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DeleteVpcOrigin", {}).n("CloudFrontClient", "DeleteVpcOriginCommand").f(void 0, void 0).ser(se_DeleteVpcOriginCommand).de(de_DeleteVpcOriginCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DescribeFunctionCommand.js
var DescribeFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DescribeFunction", {}).n("CloudFrontClient", "DescribeFunctionCommand").f(void 0, void 0).ser(se_DescribeFunctionCommand).de(de_DescribeFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/DescribeKeyValueStoreCommand.js
var DescribeKeyValueStoreCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "DescribeKeyValueStore", {}).n("CloudFrontClient", "DescribeKeyValueStoreCommand").f(void 0, void 0).ser(se_DescribeKeyValueStoreCommand).de(de_DescribeKeyValueStoreCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetAnycastIpListCommand.js
var GetAnycastIpListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetAnycastIpList", {}).n("CloudFrontClient", "GetAnycastIpListCommand").f(void 0, void 0).ser(se_GetAnycastIpListCommand).de(de_GetAnycastIpListCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetCachePolicyCommand.js
var GetCachePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetCachePolicy", {}).n("CloudFrontClient", "GetCachePolicyCommand").f(void 0, void 0).ser(se_GetCachePolicyCommand).de(de_GetCachePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetCachePolicyConfigCommand.js
var GetCachePolicyConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetCachePolicyConfig", {}).n("CloudFrontClient", "GetCachePolicyConfigCommand").f(void 0, void 0).ser(se_GetCachePolicyConfigCommand).de(de_GetCachePolicyConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetCloudFrontOriginAccessIdentityCommand.js
var GetCloudFrontOriginAccessIdentityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetCloudFrontOriginAccessIdentity", {}).n("CloudFrontClient", "GetCloudFrontOriginAccessIdentityCommand").f(void 0, void 0).ser(se_GetCloudFrontOriginAccessIdentityCommand).de(de_GetCloudFrontOriginAccessIdentityCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetCloudFrontOriginAccessIdentityConfigCommand.js
var GetCloudFrontOriginAccessIdentityConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetCloudFrontOriginAccessIdentityConfig", {}).n("CloudFrontClient", "GetCloudFrontOriginAccessIdentityConfigCommand").f(void 0, void 0).ser(se_GetCloudFrontOriginAccessIdentityConfigCommand).de(de_GetCloudFrontOriginAccessIdentityConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetContinuousDeploymentPolicyCommand.js
var GetContinuousDeploymentPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetContinuousDeploymentPolicy", {}).n("CloudFrontClient", "GetContinuousDeploymentPolicyCommand").f(void 0, void 0).ser(se_GetContinuousDeploymentPolicyCommand).de(de_GetContinuousDeploymentPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetContinuousDeploymentPolicyConfigCommand.js
var GetContinuousDeploymentPolicyConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetContinuousDeploymentPolicyConfig", {}).n("CloudFrontClient", "GetContinuousDeploymentPolicyConfigCommand").f(void 0, void 0).ser(se_GetContinuousDeploymentPolicyConfigCommand).de(de_GetContinuousDeploymentPolicyConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetDistributionCommand.js
var GetDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetDistribution", {}).n("CloudFrontClient", "GetDistributionCommand").f(void 0, GetDistributionResultFilterSensitiveLog).ser(se_GetDistributionCommand).de(de_GetDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetDistributionConfigCommand.js
var GetDistributionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetDistributionConfig", {}).n("CloudFrontClient", "GetDistributionConfigCommand").f(void 0, GetDistributionConfigResultFilterSensitiveLog).ser(se_GetDistributionConfigCommand).de(de_GetDistributionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetFieldLevelEncryptionCommand.js
var GetFieldLevelEncryptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetFieldLevelEncryption", {}).n("CloudFrontClient", "GetFieldLevelEncryptionCommand").f(void 0, void 0).ser(se_GetFieldLevelEncryptionCommand).de(de_GetFieldLevelEncryptionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetFieldLevelEncryptionConfigCommand.js
var GetFieldLevelEncryptionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetFieldLevelEncryptionConfig", {}).n("CloudFrontClient", "GetFieldLevelEncryptionConfigCommand").f(void 0, void 0).ser(se_GetFieldLevelEncryptionConfigCommand).de(de_GetFieldLevelEncryptionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetFieldLevelEncryptionProfileCommand.js
var GetFieldLevelEncryptionProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetFieldLevelEncryptionProfile", {}).n("CloudFrontClient", "GetFieldLevelEncryptionProfileCommand").f(void 0, void 0).ser(se_GetFieldLevelEncryptionProfileCommand).de(de_GetFieldLevelEncryptionProfileCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetFieldLevelEncryptionProfileConfigCommand.js
var GetFieldLevelEncryptionProfileConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetFieldLevelEncryptionProfileConfig", {}).n("CloudFrontClient", "GetFieldLevelEncryptionProfileConfigCommand").f(void 0, void 0).ser(se_GetFieldLevelEncryptionProfileConfigCommand).de(de_GetFieldLevelEncryptionProfileConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetFunctionCommand.js
var GetFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetFunction", {}).n("CloudFrontClient", "GetFunctionCommand").f(void 0, GetFunctionResultFilterSensitiveLog).ser(se_GetFunctionCommand).de(de_GetFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetInvalidationCommand.js
var GetInvalidationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetInvalidation", {}).n("CloudFrontClient", "GetInvalidationCommand").f(void 0, void 0).ser(se_GetInvalidationCommand).de(de_GetInvalidationCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetKeyGroupCommand.js
var GetKeyGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetKeyGroup", {}).n("CloudFrontClient", "GetKeyGroupCommand").f(void 0, void 0).ser(se_GetKeyGroupCommand).de(de_GetKeyGroupCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetKeyGroupConfigCommand.js
var GetKeyGroupConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetKeyGroupConfig", {}).n("CloudFrontClient", "GetKeyGroupConfigCommand").f(void 0, void 0).ser(se_GetKeyGroupConfigCommand).de(de_GetKeyGroupConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetMonitoringSubscriptionCommand.js
var GetMonitoringSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetMonitoringSubscription", {}).n("CloudFrontClient", "GetMonitoringSubscriptionCommand").f(void 0, void 0).ser(se_GetMonitoringSubscriptionCommand).de(de_GetMonitoringSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetOriginAccessControlCommand.js
var GetOriginAccessControlCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetOriginAccessControl", {}).n("CloudFrontClient", "GetOriginAccessControlCommand").f(void 0, void 0).ser(se_GetOriginAccessControlCommand).de(de_GetOriginAccessControlCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetOriginAccessControlConfigCommand.js
var GetOriginAccessControlConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetOriginAccessControlConfig", {}).n("CloudFrontClient", "GetOriginAccessControlConfigCommand").f(void 0, void 0).ser(se_GetOriginAccessControlConfigCommand).de(de_GetOriginAccessControlConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetOriginRequestPolicyCommand.js
var GetOriginRequestPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetOriginRequestPolicy", {}).n("CloudFrontClient", "GetOriginRequestPolicyCommand").f(void 0, void 0).ser(se_GetOriginRequestPolicyCommand).de(de_GetOriginRequestPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetOriginRequestPolicyConfigCommand.js
var GetOriginRequestPolicyConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetOriginRequestPolicyConfig", {}).n("CloudFrontClient", "GetOriginRequestPolicyConfigCommand").f(void 0, void 0).ser(se_GetOriginRequestPolicyConfigCommand).de(de_GetOriginRequestPolicyConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetPublicKeyCommand.js
var GetPublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetPublicKey", {}).n("CloudFrontClient", "GetPublicKeyCommand").f(void 0, void 0).ser(se_GetPublicKeyCommand).de(de_GetPublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetPublicKeyConfigCommand.js
var GetPublicKeyConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetPublicKeyConfig", {}).n("CloudFrontClient", "GetPublicKeyConfigCommand").f(void 0, void 0).ser(se_GetPublicKeyConfigCommand).de(de_GetPublicKeyConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetRealtimeLogConfigCommand.js
var GetRealtimeLogConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetRealtimeLogConfig", {}).n("CloudFrontClient", "GetRealtimeLogConfigCommand").f(void 0, void 0).ser(se_GetRealtimeLogConfigCommand).de(de_GetRealtimeLogConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetResponseHeadersPolicyCommand.js
var GetResponseHeadersPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetResponseHeadersPolicy", {}).n("CloudFrontClient", "GetResponseHeadersPolicyCommand").f(void 0, void 0).ser(se_GetResponseHeadersPolicyCommand).de(de_GetResponseHeadersPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetResponseHeadersPolicyConfigCommand.js
var GetResponseHeadersPolicyConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetResponseHeadersPolicyConfig", {}).n("CloudFrontClient", "GetResponseHeadersPolicyConfigCommand").f(void 0, void 0).ser(se_GetResponseHeadersPolicyConfigCommand).de(de_GetResponseHeadersPolicyConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetStreamingDistributionCommand.js
var GetStreamingDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetStreamingDistribution", {}).n("CloudFrontClient", "GetStreamingDistributionCommand").f(void 0, void 0).ser(se_GetStreamingDistributionCommand).de(de_GetStreamingDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetStreamingDistributionConfigCommand.js
var GetStreamingDistributionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetStreamingDistributionConfig", {}).n("CloudFrontClient", "GetStreamingDistributionConfigCommand").f(void 0, void 0).ser(se_GetStreamingDistributionConfigCommand).de(de_GetStreamingDistributionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/GetVpcOriginCommand.js
var GetVpcOriginCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "GetVpcOrigin", {}).n("CloudFrontClient", "GetVpcOriginCommand").f(void 0, void 0).ser(se_GetVpcOriginCommand).de(de_GetVpcOriginCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListAnycastIpListsCommand.js
var ListAnycastIpListsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListAnycastIpLists", {}).n("CloudFrontClient", "ListAnycastIpListsCommand").f(void 0, void 0).ser(se_ListAnycastIpListsCommand).de(de_ListAnycastIpListsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListCachePoliciesCommand.js
var ListCachePoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListCachePolicies", {}).n("CloudFrontClient", "ListCachePoliciesCommand").f(void 0, void 0).ser(se_ListCachePoliciesCommand).de(de_ListCachePoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListCloudFrontOriginAccessIdentitiesCommand.js
var ListCloudFrontOriginAccessIdentitiesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListCloudFrontOriginAccessIdentities", {}).n("CloudFrontClient", "ListCloudFrontOriginAccessIdentitiesCommand").f(void 0, void 0).ser(se_ListCloudFrontOriginAccessIdentitiesCommand).de(de_ListCloudFrontOriginAccessIdentitiesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListConflictingAliasesCommand.js
var ListConflictingAliasesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListConflictingAliases", {}).n("CloudFrontClient", "ListConflictingAliasesCommand").f(void 0, void 0).ser(se_ListConflictingAliasesCommand).de(de_ListConflictingAliasesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListContinuousDeploymentPoliciesCommand.js
var ListContinuousDeploymentPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListContinuousDeploymentPolicies", {}).n("CloudFrontClient", "ListContinuousDeploymentPoliciesCommand").f(void 0, void 0).ser(se_ListContinuousDeploymentPoliciesCommand).de(de_ListContinuousDeploymentPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByAnycastIpListIdCommand.js
var ListDistributionsByAnycastIpListIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByAnycastIpListId", {}).n("CloudFrontClient", "ListDistributionsByAnycastIpListIdCommand").f(void 0, ListDistributionsByAnycastIpListIdResultFilterSensitiveLog).ser(se_ListDistributionsByAnycastIpListIdCommand).de(de_ListDistributionsByAnycastIpListIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByCachePolicyIdCommand.js
var ListDistributionsByCachePolicyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByCachePolicyId", {}).n("CloudFrontClient", "ListDistributionsByCachePolicyIdCommand").f(void 0, void 0).ser(se_ListDistributionsByCachePolicyIdCommand).de(de_ListDistributionsByCachePolicyIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByKeyGroupCommand.js
var ListDistributionsByKeyGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByKeyGroup", {}).n("CloudFrontClient", "ListDistributionsByKeyGroupCommand").f(void 0, void 0).ser(se_ListDistributionsByKeyGroupCommand).de(de_ListDistributionsByKeyGroupCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByOriginRequestPolicyIdCommand.js
var ListDistributionsByOriginRequestPolicyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByOriginRequestPolicyId", {}).n("CloudFrontClient", "ListDistributionsByOriginRequestPolicyIdCommand").f(void 0, void 0).ser(se_ListDistributionsByOriginRequestPolicyIdCommand).de(de_ListDistributionsByOriginRequestPolicyIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByRealtimeLogConfigCommand.js
var ListDistributionsByRealtimeLogConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByRealtimeLogConfig", {}).n("CloudFrontClient", "ListDistributionsByRealtimeLogConfigCommand").f(void 0, ListDistributionsByRealtimeLogConfigResultFilterSensitiveLog).ser(se_ListDistributionsByRealtimeLogConfigCommand).de(de_ListDistributionsByRealtimeLogConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByResponseHeadersPolicyIdCommand.js
var ListDistributionsByResponseHeadersPolicyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByResponseHeadersPolicyId", {}).n("CloudFrontClient", "ListDistributionsByResponseHeadersPolicyIdCommand").f(void 0, void 0).ser(se_ListDistributionsByResponseHeadersPolicyIdCommand).de(de_ListDistributionsByResponseHeadersPolicyIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByVpcOriginIdCommand.js
var ListDistributionsByVpcOriginIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByVpcOriginId", {}).n("CloudFrontClient", "ListDistributionsByVpcOriginIdCommand").f(void 0, void 0).ser(se_ListDistributionsByVpcOriginIdCommand).de(de_ListDistributionsByVpcOriginIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsByWebACLIdCommand.js
var ListDistributionsByWebACLIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributionsByWebACLId", {}).n("CloudFrontClient", "ListDistributionsByWebACLIdCommand").f(void 0, ListDistributionsByWebACLIdResultFilterSensitiveLog).ser(se_ListDistributionsByWebACLIdCommand).de(de_ListDistributionsByWebACLIdCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListDistributionsCommand.js
var ListDistributionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListDistributions", {}).n("CloudFrontClient", "ListDistributionsCommand").f(void 0, ListDistributionsResultFilterSensitiveLog).ser(se_ListDistributionsCommand).de(de_ListDistributionsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListFieldLevelEncryptionConfigsCommand.js
var ListFieldLevelEncryptionConfigsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListFieldLevelEncryptionConfigs", {}).n("CloudFrontClient", "ListFieldLevelEncryptionConfigsCommand").f(void 0, void 0).ser(se_ListFieldLevelEncryptionConfigsCommand).de(de_ListFieldLevelEncryptionConfigsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListFieldLevelEncryptionProfilesCommand.js
var ListFieldLevelEncryptionProfilesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListFieldLevelEncryptionProfiles", {}).n("CloudFrontClient", "ListFieldLevelEncryptionProfilesCommand").f(void 0, void 0).ser(se_ListFieldLevelEncryptionProfilesCommand).de(de_ListFieldLevelEncryptionProfilesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListFunctionsCommand.js
var ListFunctionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListFunctions", {}).n("CloudFrontClient", "ListFunctionsCommand").f(void 0, void 0).ser(se_ListFunctionsCommand).de(de_ListFunctionsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListInvalidationsCommand.js
var ListInvalidationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListInvalidations", {}).n("CloudFrontClient", "ListInvalidationsCommand").f(void 0, void 0).ser(se_ListInvalidationsCommand).de(de_ListInvalidationsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListKeyGroupsCommand.js
var ListKeyGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListKeyGroups", {}).n("CloudFrontClient", "ListKeyGroupsCommand").f(void 0, void 0).ser(se_ListKeyGroupsCommand).de(de_ListKeyGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListKeyValueStoresCommand.js
var ListKeyValueStoresCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListKeyValueStores", {}).n("CloudFrontClient", "ListKeyValueStoresCommand").f(void 0, void 0).ser(se_ListKeyValueStoresCommand).de(de_ListKeyValueStoresCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListOriginAccessControlsCommand.js
var ListOriginAccessControlsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListOriginAccessControls", {}).n("CloudFrontClient", "ListOriginAccessControlsCommand").f(void 0, void 0).ser(se_ListOriginAccessControlsCommand).de(de_ListOriginAccessControlsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListOriginRequestPoliciesCommand.js
var ListOriginRequestPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListOriginRequestPolicies", {}).n("CloudFrontClient", "ListOriginRequestPoliciesCommand").f(void 0, void 0).ser(se_ListOriginRequestPoliciesCommand).de(de_ListOriginRequestPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListPublicKeysCommand.js
var ListPublicKeysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListPublicKeys", {}).n("CloudFrontClient", "ListPublicKeysCommand").f(void 0, void 0).ser(se_ListPublicKeysCommand).de(de_ListPublicKeysCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListRealtimeLogConfigsCommand.js
var ListRealtimeLogConfigsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListRealtimeLogConfigs", {}).n("CloudFrontClient", "ListRealtimeLogConfigsCommand").f(void 0, void 0).ser(se_ListRealtimeLogConfigsCommand).de(de_ListRealtimeLogConfigsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListResponseHeadersPoliciesCommand.js
var ListResponseHeadersPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListResponseHeadersPolicies", {}).n("CloudFrontClient", "ListResponseHeadersPoliciesCommand").f(void 0, void 0).ser(se_ListResponseHeadersPoliciesCommand).de(de_ListResponseHeadersPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListStreamingDistributionsCommand.js
var ListStreamingDistributionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListStreamingDistributions", {}).n("CloudFrontClient", "ListStreamingDistributionsCommand").f(void 0, void 0).ser(se_ListStreamingDistributionsCommand).de(de_ListStreamingDistributionsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListTagsForResource", {}).n("CloudFrontClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/ListVpcOriginsCommand.js
var ListVpcOriginsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "ListVpcOrigins", {}).n("CloudFrontClient", "ListVpcOriginsCommand").f(void 0, void 0).ser(se_ListVpcOriginsCommand).de(de_ListVpcOriginsCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/PublishFunctionCommand.js
var PublishFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "PublishFunction", {}).n("CloudFrontClient", "PublishFunctionCommand").f(void 0, void 0).ser(se_PublishFunctionCommand).de(de_PublishFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/TagResourceCommand.js
var TagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "TagResource", {}).n("CloudFrontClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/TestFunctionCommand.js
var TestFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "TestFunction", {}).n("CloudFrontClient", "TestFunctionCommand").f(TestFunctionRequestFilterSensitiveLog, TestFunctionResultFilterSensitiveLog).ser(se_TestFunctionCommand).de(de_TestFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UntagResource", {}).n("CloudFrontClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateCachePolicyCommand.js
var UpdateCachePolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateCachePolicy", {}).n("CloudFrontClient", "UpdateCachePolicyCommand").f(void 0, void 0).ser(se_UpdateCachePolicyCommand).de(de_UpdateCachePolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateCloudFrontOriginAccessIdentityCommand.js
var UpdateCloudFrontOriginAccessIdentityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateCloudFrontOriginAccessIdentity", {}).n("CloudFrontClient", "UpdateCloudFrontOriginAccessIdentityCommand").f(void 0, void 0).ser(se_UpdateCloudFrontOriginAccessIdentityCommand).de(de_UpdateCloudFrontOriginAccessIdentityCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateContinuousDeploymentPolicyCommand.js
var UpdateContinuousDeploymentPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateContinuousDeploymentPolicy", {}).n("CloudFrontClient", "UpdateContinuousDeploymentPolicyCommand").f(void 0, void 0).ser(se_UpdateContinuousDeploymentPolicyCommand).de(de_UpdateContinuousDeploymentPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateDistributionCommand.js
var UpdateDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateDistribution", {}).n("CloudFrontClient", "UpdateDistributionCommand").f(UpdateDistributionRequestFilterSensitiveLog, UpdateDistributionResultFilterSensitiveLog).ser(se_UpdateDistributionCommand).de(de_UpdateDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateDistributionWithStagingConfigCommand.js
var UpdateDistributionWithStagingConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateDistributionWithStagingConfig", {}).n("CloudFrontClient", "UpdateDistributionWithStagingConfigCommand").f(void 0, UpdateDistributionWithStagingConfigResultFilterSensitiveLog).ser(se_UpdateDistributionWithStagingConfigCommand).de(de_UpdateDistributionWithStagingConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateFieldLevelEncryptionConfigCommand.js
var UpdateFieldLevelEncryptionConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateFieldLevelEncryptionConfig", {}).n("CloudFrontClient", "UpdateFieldLevelEncryptionConfigCommand").f(void 0, void 0).ser(se_UpdateFieldLevelEncryptionConfigCommand).de(de_UpdateFieldLevelEncryptionConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateFieldLevelEncryptionProfileCommand.js
var UpdateFieldLevelEncryptionProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateFieldLevelEncryptionProfile", {}).n("CloudFrontClient", "UpdateFieldLevelEncryptionProfileCommand").f(void 0, void 0).ser(se_UpdateFieldLevelEncryptionProfileCommand).de(de_UpdateFieldLevelEncryptionProfileCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateFunctionCommand.js
var UpdateFunctionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateFunction", {}).n("CloudFrontClient", "UpdateFunctionCommand").f(UpdateFunctionRequestFilterSensitiveLog, void 0).ser(se_UpdateFunctionCommand).de(de_UpdateFunctionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateKeyGroupCommand.js
var UpdateKeyGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateKeyGroup", {}).n("CloudFrontClient", "UpdateKeyGroupCommand").f(void 0, void 0).ser(se_UpdateKeyGroupCommand).de(de_UpdateKeyGroupCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateKeyValueStoreCommand.js
var UpdateKeyValueStoreCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateKeyValueStore", {}).n("CloudFrontClient", "UpdateKeyValueStoreCommand").f(void 0, void 0).ser(se_UpdateKeyValueStoreCommand).de(de_UpdateKeyValueStoreCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateOriginAccessControlCommand.js
var UpdateOriginAccessControlCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateOriginAccessControl", {}).n("CloudFrontClient", "UpdateOriginAccessControlCommand").f(void 0, void 0).ser(se_UpdateOriginAccessControlCommand).de(de_UpdateOriginAccessControlCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateOriginRequestPolicyCommand.js
var UpdateOriginRequestPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateOriginRequestPolicy", {}).n("CloudFrontClient", "UpdateOriginRequestPolicyCommand").f(void 0, void 0).ser(se_UpdateOriginRequestPolicyCommand).de(de_UpdateOriginRequestPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdatePublicKeyCommand.js
var UpdatePublicKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdatePublicKey", {}).n("CloudFrontClient", "UpdatePublicKeyCommand").f(void 0, void 0).ser(se_UpdatePublicKeyCommand).de(de_UpdatePublicKeyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateRealtimeLogConfigCommand.js
var UpdateRealtimeLogConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateRealtimeLogConfig", {}).n("CloudFrontClient", "UpdateRealtimeLogConfigCommand").f(void 0, void 0).ser(se_UpdateRealtimeLogConfigCommand).de(de_UpdateRealtimeLogConfigCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateResponseHeadersPolicyCommand.js
var UpdateResponseHeadersPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateResponseHeadersPolicy", {}).n("CloudFrontClient", "UpdateResponseHeadersPolicyCommand").f(void 0, void 0).ser(se_UpdateResponseHeadersPolicyCommand).de(de_UpdateResponseHeadersPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateStreamingDistributionCommand.js
var UpdateStreamingDistributionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateStreamingDistribution", {}).n("CloudFrontClient", "UpdateStreamingDistributionCommand").f(void 0, void 0).ser(se_UpdateStreamingDistributionCommand).de(de_UpdateStreamingDistributionCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/commands/UpdateVpcOriginCommand.js
var UpdateVpcOriginCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Cloudfront2020_05_31", "UpdateVpcOrigin", {}).n("CloudFrontClient", "UpdateVpcOriginCommand").f(void 0, void 0).ser(se_UpdateVpcOriginCommand).de(de_UpdateVpcOriginCommand).build() {
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/CloudFront.js
var commands = {
  AssociateAliasCommand,
  CopyDistributionCommand,
  CreateAnycastIpListCommand,
  CreateCachePolicyCommand,
  CreateCloudFrontOriginAccessIdentityCommand,
  CreateContinuousDeploymentPolicyCommand,
  CreateDistributionCommand,
  CreateDistributionWithTagsCommand,
  CreateFieldLevelEncryptionConfigCommand,
  CreateFieldLevelEncryptionProfileCommand,
  CreateFunctionCommand,
  CreateInvalidationCommand,
  CreateKeyGroupCommand,
  CreateKeyValueStoreCommand,
  CreateMonitoringSubscriptionCommand,
  CreateOriginAccessControlCommand,
  CreateOriginRequestPolicyCommand,
  CreatePublicKeyCommand,
  CreateRealtimeLogConfigCommand,
  CreateResponseHeadersPolicyCommand,
  CreateStreamingDistributionCommand,
  CreateStreamingDistributionWithTagsCommand,
  CreateVpcOriginCommand,
  DeleteAnycastIpListCommand,
  DeleteCachePolicyCommand,
  DeleteCloudFrontOriginAccessIdentityCommand,
  DeleteContinuousDeploymentPolicyCommand,
  DeleteDistributionCommand,
  DeleteFieldLevelEncryptionConfigCommand,
  DeleteFieldLevelEncryptionProfileCommand,
  DeleteFunctionCommand,
  DeleteKeyGroupCommand,
  DeleteKeyValueStoreCommand,
  DeleteMonitoringSubscriptionCommand,
  DeleteOriginAccessControlCommand,
  DeleteOriginRequestPolicyCommand,
  DeletePublicKeyCommand,
  DeleteRealtimeLogConfigCommand,
  DeleteResponseHeadersPolicyCommand,
  DeleteStreamingDistributionCommand,
  DeleteVpcOriginCommand,
  DescribeFunctionCommand,
  DescribeKeyValueStoreCommand,
  GetAnycastIpListCommand,
  GetCachePolicyCommand,
  GetCachePolicyConfigCommand,
  GetCloudFrontOriginAccessIdentityCommand,
  GetCloudFrontOriginAccessIdentityConfigCommand,
  GetContinuousDeploymentPolicyCommand,
  GetContinuousDeploymentPolicyConfigCommand,
  GetDistributionCommand,
  GetDistributionConfigCommand,
  GetFieldLevelEncryptionCommand,
  GetFieldLevelEncryptionConfigCommand,
  GetFieldLevelEncryptionProfileCommand,
  GetFieldLevelEncryptionProfileConfigCommand,
  GetFunctionCommand,
  GetInvalidationCommand,
  GetKeyGroupCommand,
  GetKeyGroupConfigCommand,
  GetMonitoringSubscriptionCommand,
  GetOriginAccessControlCommand,
  GetOriginAccessControlConfigCommand,
  GetOriginRequestPolicyCommand,
  GetOriginRequestPolicyConfigCommand,
  GetPublicKeyCommand,
  GetPublicKeyConfigCommand,
  GetRealtimeLogConfigCommand,
  GetResponseHeadersPolicyCommand,
  GetResponseHeadersPolicyConfigCommand,
  GetStreamingDistributionCommand,
  GetStreamingDistributionConfigCommand,
  GetVpcOriginCommand,
  ListAnycastIpListsCommand,
  ListCachePoliciesCommand,
  ListCloudFrontOriginAccessIdentitiesCommand,
  ListConflictingAliasesCommand,
  ListContinuousDeploymentPoliciesCommand,
  ListDistributionsCommand,
  ListDistributionsByAnycastIpListIdCommand,
  ListDistributionsByCachePolicyIdCommand,
  ListDistributionsByKeyGroupCommand,
  ListDistributionsByOriginRequestPolicyIdCommand,
  ListDistributionsByRealtimeLogConfigCommand,
  ListDistributionsByResponseHeadersPolicyIdCommand,
  ListDistributionsByVpcOriginIdCommand,
  ListDistributionsByWebACLIdCommand,
  ListFieldLevelEncryptionConfigsCommand,
  ListFieldLevelEncryptionProfilesCommand,
  ListFunctionsCommand,
  ListInvalidationsCommand,
  ListKeyGroupsCommand,
  ListKeyValueStoresCommand,
  ListOriginAccessControlsCommand,
  ListOriginRequestPoliciesCommand,
  ListPublicKeysCommand,
  ListRealtimeLogConfigsCommand,
  ListResponseHeadersPoliciesCommand,
  ListStreamingDistributionsCommand,
  ListTagsForResourceCommand,
  ListVpcOriginsCommand,
  PublishFunctionCommand,
  TagResourceCommand,
  TestFunctionCommand,
  UntagResourceCommand,
  UpdateCachePolicyCommand,
  UpdateCloudFrontOriginAccessIdentityCommand,
  UpdateContinuousDeploymentPolicyCommand,
  UpdateDistributionCommand,
  UpdateDistributionWithStagingConfigCommand,
  UpdateFieldLevelEncryptionConfigCommand,
  UpdateFieldLevelEncryptionProfileCommand,
  UpdateFunctionCommand,
  UpdateKeyGroupCommand,
  UpdateKeyValueStoreCommand,
  UpdateOriginAccessControlCommand,
  UpdateOriginRequestPolicyCommand,
  UpdatePublicKeyCommand,
  UpdateRealtimeLogConfigCommand,
  UpdateResponseHeadersPolicyCommand,
  UpdateStreamingDistributionCommand,
  UpdateVpcOriginCommand
};
var CloudFront = class extends CloudFrontClient {
};
createAggregatedClient(commands, CloudFront);

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListCloudFrontOriginAccessIdentitiesPaginator.js
var paginateListCloudFrontOriginAccessIdentities = createPaginator(CloudFrontClient, ListCloudFrontOriginAccessIdentitiesCommand, "Marker", "CloudFrontOriginAccessIdentityList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListDistributionsPaginator.js
var paginateListDistributions = createPaginator(CloudFrontClient, ListDistributionsCommand, "Marker", "DistributionList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListInvalidationsPaginator.js
var paginateListInvalidations = createPaginator(CloudFrontClient, ListInvalidationsCommand, "Marker", "InvalidationList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListKeyValueStoresPaginator.js
var paginateListKeyValueStores = createPaginator(CloudFrontClient, ListKeyValueStoresCommand, "Marker", "KeyValueStoreList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListPublicKeysPaginator.js
var paginateListPublicKeys = createPaginator(CloudFrontClient, ListPublicKeysCommand, "Marker", "PublicKeyList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/pagination/ListStreamingDistributionsPaginator.js
var paginateListStreamingDistributions = createPaginator(CloudFrontClient, ListStreamingDistributionsCommand, "Marker", "StreamingDistributionList.NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-cloudfront/dist-es/waiters/waitForDistributionDeployed.js
var checkState = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetDistributionCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        return result.Distribution.Status;
      };
      if (returnComparator() === "Deployed") {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForDistributionDeployed = async (params, input) => {
  const serviceDefaults = { minDelay: 60, maxDelay: 2100 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
var waitUntilDistributionDeployed = async (params, input) => {
  const serviceDefaults = { minDelay: 60, maxDelay: 2100 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/waiters/waitForInvalidationCompleted.js
var checkState2 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetInvalidationCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        return result.Invalidation.Status;
      };
      if (returnComparator() === "Completed") {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInvalidationCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 20, maxDelay: 600 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
};
var waitUntilInvalidationCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 20, maxDelay: 600 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-cloudfront/dist-es/waiters/waitForStreamingDistributionDeployed.js
var checkState3 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetStreamingDistributionCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        return result.StreamingDistribution.Status;
      };
      if (returnComparator() === "Deployed") {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForStreamingDistributionDeployed = async (params, input) => {
  const serviceDefaults = { minDelay: 60, maxDelay: 1500 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
};
var waitUntilStreamingDistributionDeployed = async (params, input) => {
  const serviceDefaults = { minDelay: 60, maxDelay: 1500 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
  return checkExceptions(result);
};
export {
  Command as $Command,
  AccessDenied,
  AssociateAliasCommand,
  BatchTooLarge,
  CNAMEAlreadyExists,
  CachePolicyAlreadyExists,
  CachePolicyCookieBehavior,
  CachePolicyHeaderBehavior,
  CachePolicyInUse,
  CachePolicyQueryStringBehavior,
  CachePolicyType,
  CannotChangeImmutablePublicKeyFields,
  CannotDeleteEntityWhileInUse,
  CannotUpdateEntityWhileInUse,
  CertificateSource,
  CloudFront,
  CloudFrontClient,
  CloudFrontOriginAccessIdentityAlreadyExists,
  CloudFrontOriginAccessIdentityInUse,
  CloudFrontServiceException,
  ContinuousDeploymentPolicyAlreadyExists,
  ContinuousDeploymentPolicyInUse,
  ContinuousDeploymentPolicyType,
  CopyDistributionCommand,
  CopyDistributionResultFilterSensitiveLog,
  CreateAnycastIpListCommand,
  CreateCachePolicyCommand,
  CreateCloudFrontOriginAccessIdentityCommand,
  CreateContinuousDeploymentPolicyCommand,
  CreateDistributionCommand,
  CreateDistributionRequestFilterSensitiveLog,
  CreateDistributionResultFilterSensitiveLog,
  CreateDistributionWithTagsCommand,
  CreateDistributionWithTagsRequestFilterSensitiveLog,
  CreateDistributionWithTagsResultFilterSensitiveLog,
  CreateFieldLevelEncryptionConfigCommand,
  CreateFieldLevelEncryptionProfileCommand,
  CreateFunctionCommand,
  CreateFunctionRequestFilterSensitiveLog,
  CreateInvalidationCommand,
  CreateKeyGroupCommand,
  CreateKeyValueStoreCommand,
  CreateMonitoringSubscriptionCommand,
  CreateOriginAccessControlCommand,
  CreateOriginRequestPolicyCommand,
  CreatePublicKeyCommand,
  CreateRealtimeLogConfigCommand,
  CreateResponseHeadersPolicyCommand,
  CreateStreamingDistributionCommand,
  CreateStreamingDistributionWithTagsCommand,
  CreateVpcOriginCommand,
  CustomHeadersFilterSensitiveLog,
  DeleteAnycastIpListCommand,
  DeleteCachePolicyCommand,
  DeleteCloudFrontOriginAccessIdentityCommand,
  DeleteContinuousDeploymentPolicyCommand,
  DeleteDistributionCommand,
  DeleteFieldLevelEncryptionConfigCommand,
  DeleteFieldLevelEncryptionProfileCommand,
  DeleteFunctionCommand,
  DeleteKeyGroupCommand,
  DeleteKeyValueStoreCommand,
  DeleteMonitoringSubscriptionCommand,
  DeleteOriginAccessControlCommand,
  DeleteOriginRequestPolicyCommand,
  DeletePublicKeyCommand,
  DeleteRealtimeLogConfigCommand,
  DeleteResponseHeadersPolicyCommand,
  DeleteStreamingDistributionCommand,
  DeleteVpcOriginCommand,
  DescribeFunctionCommand,
  DescribeKeyValueStoreCommand,
  DistributionAlreadyExists,
  DistributionConfigFilterSensitiveLog,
  DistributionConfigWithTagsFilterSensitiveLog,
  DistributionFilterSensitiveLog,
  DistributionListFilterSensitiveLog,
  DistributionNotDisabled,
  DistributionSummaryFilterSensitiveLog,
  EntityAlreadyExists,
  EntityLimitExceeded,
  EntityNotFound,
  EntitySizeLimitExceeded,
  EventType,
  FieldLevelEncryptionConfigAlreadyExists,
  FieldLevelEncryptionConfigInUse,
  FieldLevelEncryptionProfileAlreadyExists,
  FieldLevelEncryptionProfileInUse,
  FieldLevelEncryptionProfileSizeExceeded,
  Format,
  FrameOptionsList,
  FunctionAlreadyExists,
  FunctionInUse,
  FunctionRuntime,
  FunctionSizeLimitExceeded,
  FunctionStage,
  GeoRestrictionType,
  GetAnycastIpListCommand,
  GetCachePolicyCommand,
  GetCachePolicyConfigCommand,
  GetCloudFrontOriginAccessIdentityCommand,
  GetCloudFrontOriginAccessIdentityConfigCommand,
  GetContinuousDeploymentPolicyCommand,
  GetContinuousDeploymentPolicyConfigCommand,
  GetDistributionCommand,
  GetDistributionConfigCommand,
  GetDistributionConfigResultFilterSensitiveLog,
  GetDistributionResultFilterSensitiveLog,
  GetFieldLevelEncryptionCommand,
  GetFieldLevelEncryptionConfigCommand,
  GetFieldLevelEncryptionProfileCommand,
  GetFieldLevelEncryptionProfileConfigCommand,
  GetFunctionCommand,
  GetFunctionResultFilterSensitiveLog,
  GetInvalidationCommand,
  GetKeyGroupCommand,
  GetKeyGroupConfigCommand,
  GetMonitoringSubscriptionCommand,
  GetOriginAccessControlCommand,
  GetOriginAccessControlConfigCommand,
  GetOriginRequestPolicyCommand,
  GetOriginRequestPolicyConfigCommand,
  GetPublicKeyCommand,
  GetPublicKeyConfigCommand,
  GetRealtimeLogConfigCommand,
  GetResponseHeadersPolicyCommand,
  GetResponseHeadersPolicyConfigCommand,
  GetStreamingDistributionCommand,
  GetStreamingDistributionConfigCommand,
  GetVpcOriginCommand,
  HttpVersion,
  ICPRecordalStatus,
  IllegalDelete,
  IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior,
  IllegalOriginAccessConfiguration,
  IllegalUpdate,
  ImportSourceType,
  InconsistentQuantities,
  InvalidArgument,
  InvalidDefaultRootObject,
  InvalidDomainNameForOriginAccessControl,
  InvalidErrorCode,
  InvalidForwardCookies,
  InvalidFunctionAssociation,
  InvalidGeoRestrictionParameter,
  InvalidHeadersForS3Origin,
  InvalidIfMatchVersion,
  InvalidLambdaFunctionAssociation,
  InvalidLocationCode,
  InvalidMinimumProtocolVersion,
  InvalidOrigin,
  InvalidOriginAccessControl,
  InvalidOriginAccessIdentity,
  InvalidOriginKeepaliveTimeout,
  InvalidOriginReadTimeout,
  InvalidProtocolSettings,
  InvalidQueryStringParameters,
  InvalidRelativePath,
  InvalidRequiredProtocol,
  InvalidResponseCode,
  InvalidTTLOrder,
  InvalidTagging,
  InvalidViewerCertificate,
  InvalidWebACLId,
  ItemSelection,
  KeyGroupAlreadyExists,
  ListAnycastIpListsCommand,
  ListCachePoliciesCommand,
  ListCloudFrontOriginAccessIdentitiesCommand,
  ListConflictingAliasesCommand,
  ListContinuousDeploymentPoliciesCommand,
  ListDistributionsByAnycastIpListIdCommand,
  ListDistributionsByAnycastIpListIdResultFilterSensitiveLog,
  ListDistributionsByCachePolicyIdCommand,
  ListDistributionsByKeyGroupCommand,
  ListDistributionsByOriginRequestPolicyIdCommand,
  ListDistributionsByRealtimeLogConfigCommand,
  ListDistributionsByRealtimeLogConfigResultFilterSensitiveLog,
  ListDistributionsByResponseHeadersPolicyIdCommand,
  ListDistributionsByVpcOriginIdCommand,
  ListDistributionsByWebACLIdCommand,
  ListDistributionsByWebACLIdResultFilterSensitiveLog,
  ListDistributionsCommand,
  ListDistributionsResultFilterSensitiveLog,
  ListFieldLevelEncryptionConfigsCommand,
  ListFieldLevelEncryptionProfilesCommand,
  ListFunctionsCommand,
  ListInvalidationsCommand,
  ListKeyGroupsCommand,
  ListKeyValueStoresCommand,
  ListOriginAccessControlsCommand,
  ListOriginRequestPoliciesCommand,
  ListPublicKeysCommand,
  ListRealtimeLogConfigsCommand,
  ListResponseHeadersPoliciesCommand,
  ListStreamingDistributionsCommand,
  ListTagsForResourceCommand,
  ListVpcOriginsCommand,
  Method,
  MinimumProtocolVersion,
  MissingBody,
  MonitoringSubscriptionAlreadyExists,
  NoSuchCachePolicy,
  NoSuchCloudFrontOriginAccessIdentity,
  NoSuchContinuousDeploymentPolicy,
  NoSuchDistribution,
  NoSuchFieldLevelEncryptionConfig,
  NoSuchFieldLevelEncryptionProfile,
  NoSuchFunctionExists,
  NoSuchInvalidation,
  NoSuchMonitoringSubscription,
  NoSuchOrigin,
  NoSuchOriginAccessControl,
  NoSuchOriginRequestPolicy,
  NoSuchPublicKey,
  NoSuchRealtimeLogConfig,
  NoSuchResource,
  NoSuchResponseHeadersPolicy,
  NoSuchStreamingDistribution,
  OriginAccessControlAlreadyExists,
  OriginAccessControlInUse,
  OriginAccessControlOriginTypes,
  OriginAccessControlSigningBehaviors,
  OriginAccessControlSigningProtocols,
  OriginCustomHeaderFilterSensitiveLog,
  OriginFilterSensitiveLog,
  OriginGroupSelectionCriteria,
  OriginProtocolPolicy,
  OriginRequestPolicyAlreadyExists,
  OriginRequestPolicyCookieBehavior,
  OriginRequestPolicyHeaderBehavior,
  OriginRequestPolicyInUse,
  OriginRequestPolicyQueryStringBehavior,
  OriginRequestPolicyType,
  OriginsFilterSensitiveLog,
  PreconditionFailed,
  PriceClass,
  PublicKeyAlreadyExists,
  PublicKeyInUse,
  PublishFunctionCommand,
  QueryArgProfileEmpty,
  RealtimeLogConfigAlreadyExists,
  RealtimeLogConfigInUse,
  RealtimeLogConfigOwnerMismatch,
  RealtimeMetricsSubscriptionStatus,
  ReferrerPolicyList,
  ResourceInUse,
  ResponseHeadersPolicyAccessControlAllowMethodsValues,
  ResponseHeadersPolicyAlreadyExists,
  ResponseHeadersPolicyInUse,
  ResponseHeadersPolicyType,
  SSLSupportMethod,
  SslProtocol,
  StagingDistributionInUse,
  StreamingDistributionAlreadyExists,
  StreamingDistributionNotDisabled,
  TagResourceCommand,
  TestFunctionCommand,
  TestFunctionFailed,
  TestFunctionRequestFilterSensitiveLog,
  TestFunctionResultFilterSensitiveLog,
  TestResultFilterSensitiveLog,
  TooLongCSPInResponseHeadersPolicy,
  TooManyCacheBehaviors,
  TooManyCachePolicies,
  TooManyCertificates,
  TooManyCloudFrontOriginAccessIdentities,
  TooManyContinuousDeploymentPolicies,
  TooManyCookieNamesInWhiteList,
  TooManyCookiesInCachePolicy,
  TooManyCookiesInOriginRequestPolicy,
  TooManyCustomHeadersInResponseHeadersPolicy,
  TooManyDistributionCNAMEs,
  TooManyDistributions,
  TooManyDistributionsAssociatedToCachePolicy,
  TooManyDistributionsAssociatedToFieldLevelEncryptionConfig,
  TooManyDistributionsAssociatedToKeyGroup,
  TooManyDistributionsAssociatedToOriginAccessControl,
  TooManyDistributionsAssociatedToOriginRequestPolicy,
  TooManyDistributionsAssociatedToResponseHeadersPolicy,
  TooManyDistributionsWithFunctionAssociations,
  TooManyDistributionsWithLambdaAssociations,
  TooManyDistributionsWithSingleFunctionARN,
  TooManyFieldLevelEncryptionConfigs,
  TooManyFieldLevelEncryptionContentTypeProfiles,
  TooManyFieldLevelEncryptionEncryptionEntities,
  TooManyFieldLevelEncryptionFieldPatterns,
  TooManyFieldLevelEncryptionProfiles,
  TooManyFieldLevelEncryptionQueryArgProfiles,
  TooManyFunctionAssociations,
  TooManyFunctions,
  TooManyHeadersInCachePolicy,
  TooManyHeadersInForwardedValues,
  TooManyHeadersInOriginRequestPolicy,
  TooManyInvalidationsInProgress,
  TooManyKeyGroups,
  TooManyKeyGroupsAssociatedToDistribution,
  TooManyLambdaFunctionAssociations,
  TooManyOriginAccessControls,
  TooManyOriginCustomHeaders,
  TooManyOriginGroupsPerDistribution,
  TooManyOriginRequestPolicies,
  TooManyOrigins,
  TooManyPublicKeys,
  TooManyPublicKeysInKeyGroup,
  TooManyQueryStringParameters,
  TooManyQueryStringsInCachePolicy,
  TooManyQueryStringsInOriginRequestPolicy,
  TooManyRealtimeLogConfigs,
  TooManyRemoveHeadersInResponseHeadersPolicy,
  TooManyResponseHeadersPolicies,
  TooManyStreamingDistributionCNAMEs,
  TooManyStreamingDistributions,
  TooManyTrustedSigners,
  TrustedKeyGroupDoesNotExist,
  TrustedSignerDoesNotExist,
  UnsupportedOperation,
  UntagResourceCommand,
  UpdateCachePolicyCommand,
  UpdateCloudFrontOriginAccessIdentityCommand,
  UpdateContinuousDeploymentPolicyCommand,
  UpdateDistributionCommand,
  UpdateDistributionRequestFilterSensitiveLog,
  UpdateDistributionResultFilterSensitiveLog,
  UpdateDistributionWithStagingConfigCommand,
  UpdateDistributionWithStagingConfigResultFilterSensitiveLog,
  UpdateFieldLevelEncryptionConfigCommand,
  UpdateFieldLevelEncryptionProfileCommand,
  UpdateFunctionCommand,
  UpdateFunctionRequestFilterSensitiveLog,
  UpdateKeyGroupCommand,
  UpdateKeyValueStoreCommand,
  UpdateOriginAccessControlCommand,
  UpdateOriginRequestPolicyCommand,
  UpdatePublicKeyCommand,
  UpdateRealtimeLogConfigCommand,
  UpdateResponseHeadersPolicyCommand,
  UpdateStreamingDistributionCommand,
  UpdateVpcOriginCommand,
  ViewerProtocolPolicy,
  Client as __Client,
  paginateListCloudFrontOriginAccessIdentities,
  paginateListDistributions,
  paginateListInvalidations,
  paginateListKeyValueStores,
  paginateListPublicKeys,
  paginateListStreamingDistributions,
  waitForDistributionDeployed,
  waitForInvalidationCompleted,
  waitForStreamingDistributionDeployed,
  waitUntilDistributionDeployed,
  waitUntilInvalidationCompleted,
  waitUntilStreamingDistributionDeployed
};
//# sourceMappingURL=@aws-sdk_client-cloudfront.js.map
