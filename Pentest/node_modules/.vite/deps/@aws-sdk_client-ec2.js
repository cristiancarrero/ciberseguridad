import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  HttpRequest,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  SignatureV4,
  WaiterState,
  awsEndpointFunctions,
  buildQueryString,
  calculateBodyLength,
  checkExceptions,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  createWaiter,
  customEndpointFunctions,
  expectNonNull,
  expectString,
  extendedEncodeURIComponent,
  fromBase64,
  fromUtf8,
  getArrayIfSingleItem,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointFromInstructions,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  loadConfigsForDefaultMode,
  normalizeProvider,
  parseBoolean,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  parseXmlBody,
  parseXmlErrorBody,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  serializeDateTime,
  serializeFloat,
  streamCollector,
  strictParseFloat,
  strictParseInt32,
  strictParseLong,
  toBase64,
  toEndpointV1,
  toUtf8,
  v4_default,
  withBaseException
} from "./chunk-76OIWYIL.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@aws-sdk/client-ec2/dist-es/auth/httpAuthSchemeProvider.js
var defaultEC2HttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "ec2",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultEC2HttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-ec2/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "ec2"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-ec2/package.json
var package_default = {
  name: "@aws-sdk/client-ec2",
  description: "AWS SDK for JavaScript Ec2 Client for Node.js, Browser and React Native",
  version: "3.731.1",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-ec2",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo ec2"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.731.0",
    "@aws-sdk/credential-provider-node": "3.731.1",
    "@aws-sdk/middleware-host-header": "3.731.0",
    "@aws-sdk/middleware-logger": "3.731.0",
    "@aws-sdk/middleware-recursion-detection": "3.731.0",
    "@aws-sdk/middleware-sdk-ec2": "3.731.0",
    "@aws-sdk/middleware-user-agent": "3.731.0",
    "@aws-sdk/region-config-resolver": "3.731.0",
    "@aws-sdk/types": "3.731.0",
    "@aws-sdk/util-endpoints": "3.731.0",
    "@aws-sdk/util-user-agent-browser": "3.731.0",
    "@aws-sdk/util-user-agent-node": "3.731.0",
    "@smithy/config-resolver": "^4.0.0",
    "@smithy/core": "^3.0.0",
    "@smithy/fetch-http-handler": "^5.0.0",
    "@smithy/hash-node": "^4.0.0",
    "@smithy/invalid-dependency": "^4.0.0",
    "@smithy/middleware-content-length": "^4.0.0",
    "@smithy/middleware-endpoint": "^4.0.0",
    "@smithy/middleware-retry": "^4.0.0",
    "@smithy/middleware-serde": "^4.0.0",
    "@smithy/middleware-stack": "^4.0.0",
    "@smithy/node-config-provider": "^4.0.0",
    "@smithy/node-http-handler": "^4.0.0",
    "@smithy/protocol-http": "^5.0.0",
    "@smithy/smithy-client": "^4.0.0",
    "@smithy/types": "^4.0.0",
    "@smithy/url-parser": "^4.0.0",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.0",
    "@smithy/util-defaults-mode-node": "^4.0.0",
    "@smithy/util-endpoints": "^3.0.0",
    "@smithy/util-middleware": "^4.0.0",
    "@smithy/util-retry": "^4.0.0",
    "@smithy/util-utf8": "^4.0.0",
    "@smithy/util-waiter": "^4.0.0",
    "@types/uuid": "^9.0.1",
    tslib: "^2.6.2",
    uuid: "^9.0.1"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.2.2"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ec2",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-ec2"
  }
};

// node_modules/@aws-sdk/client-ec2/dist-es/endpoint/ruleset.js
var u = "required";
var v = "fn";
var w = "argv";
var x = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "getAttr";
var i = { [u]: false, "type": "String" };
var j = { [u]: true, "default": false, "type": "Boolean" };
var k = { [x]: "Endpoint" };
var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
var n = {};
var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
var p = { [x]: g };
var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
var r = [l];
var s = [m];
var t = [{ [x]: "Region" }];
var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://ec2-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://ec2.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://ec2-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://ec2.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://ec2.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-ec2/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-ec2/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2016-11-15",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultEC2HttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "EC2",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-ec2/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_2) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-ec2/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-ec2/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-ec2/dist-es/EC2Client.js
var EC2Client = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    __publicField(this, "config");
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultEC2HttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/EC2ServiceException.js
var EC2ServiceException = class _EC2ServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _EC2ServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-ec2/dist-es/protocols/Aws_ec2.js
var se_AcceptAddressTransferCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptAddressTransferRequest(input, context),
    [_A]: _AAT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptCapacityReservationBillingOwnershipCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptCapacityReservationBillingOwnershipRequest(input, context),
    [_A]: _ACRBO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptReservedInstancesExchangeQuoteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptReservedInstancesExchangeQuoteRequest(input, context),
    [_A]: _ARIEQ,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _ATGMDA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptTransitGatewayPeeringAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _ATGPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptTransitGatewayVpcAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _ATGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptVpcEndpointConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcEndpointConnectionsRequest(input, context),
    [_A]: _AVEC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AcceptVpcPeeringConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcPeeringConnectionRequest(input, context),
    [_A]: _AVPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AdvertiseByoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AdvertiseByoipCidrRequest(input, context),
    [_A]: _ABC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AllocateAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AllocateAddressRequest(input, context),
    [_A]: _AA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AllocateHostsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AllocateHostsRequest(input, context),
    [_A]: _AH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AllocateIpamPoolCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AllocateIpamPoolCidrRequest(input, context),
    [_A]: _AIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
    [_A]: _ASGTCVTN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssignIpv6AddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssignIpv6AddressesRequest(input, context),
    [_A]: _AIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssignPrivateIpAddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateIpAddressesRequest(input, context),
    [_A]: _APIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssignPrivateNatGatewayAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateNatGatewayAddressRequest(input, context),
    [_A]: _APNGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateAddressRequest(input, context),
    [_A]: _AAs,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateCapacityReservationBillingOwnerCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateCapacityReservationBillingOwnerRequest(input, context),
    [_A]: _ACRBOs,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateClientVpnTargetNetworkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateClientVpnTargetNetworkRequest(input, context),
    [_A]: _ACVTN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateDhcpOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateDhcpOptionsRequest(input, context),
    [_A]: _ADO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateEnclaveCertificateIamRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateEnclaveCertificateIamRoleRequest(input, context),
    [_A]: _AECIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateIamInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateIamInstanceProfileRequest(input, context),
    [_A]: _AIIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateInstanceEventWindowCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateInstanceEventWindowRequest(input, context),
    [_A]: _AIEW,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateIpamByoasnCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateIpamByoasnRequest(input, context),
    [_A]: _AIB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateIpamResourceDiscoveryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateIpamResourceDiscoveryRequest(input, context),
    [_A]: _AIRD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateNatGatewayAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateNatGatewayAddressRequest(input, context),
    [_A]: _ANGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateRouteTableRequest(input, context),
    [_A]: _ART,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateSecurityGroupVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateSecurityGroupVpcRequest(input, context),
    [_A]: _ASGV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateSubnetCidrBlockCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateSubnetCidrBlockRequest(input, context),
    [_A]: _ASCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateTransitGatewayMulticastDomainCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _ATGMD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateTransitGatewayPolicyTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _ATGPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateTransitGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayRouteTableRequest(input, context),
    [_A]: _ATGRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateTrunkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateTrunkInterfaceRequest(input, context),
    [_A]: _ATI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AssociateVpcCidrBlockCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AssociateVpcCidrBlockRequest(input, context),
    [_A]: _AVCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachClassicLinkVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachClassicLinkVpcRequest(input, context),
    [_A]: _ACLV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachInternetGatewayRequest(input, context),
    [_A]: _AIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachNetworkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachNetworkInterfaceRequest(input, context),
    [_A]: _ANI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachVerifiedAccessTrustProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _AVATP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachVolumeRequest(input, context),
    [_A]: _AV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AttachVpnGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AttachVpnGatewayRequest(input, context),
    [_A]: _AVG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AuthorizeClientVpnIngressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AuthorizeClientVpnIngressRequest(input, context),
    [_A]: _ACVI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AuthorizeSecurityGroupEgressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupEgressRequest(input, context),
    [_A]: _ASGE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_AuthorizeSecurityGroupIngressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupIngressRequest(input, context),
    [_A]: _ASGI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_BundleInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_BundleInstanceRequest(input, context),
    [_A]: _BI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelBundleTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelBundleTaskRequest(input, context),
    [_A]: _CBT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelCapacityReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationRequest(input, context),
    [_A]: _CCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelCapacityReservationFleetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationFleetsRequest(input, context),
    [_A]: _CCRF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelConversionTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelConversionRequest(input, context),
    [_A]: _CCT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelDeclarativePoliciesReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelDeclarativePoliciesReportRequest(input, context),
    [_A]: _CDPR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelExportTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelExportTaskRequest(input, context),
    [_A]: _CET,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelImageLaunchPermissionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelImageLaunchPermissionRequest(input, context),
    [_A]: _CILP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelImportTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelImportTaskRequest(input, context),
    [_A]: _CIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelReservedInstancesListingCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelReservedInstancesListingRequest(input, context),
    [_A]: _CRIL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelSpotFleetRequestsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelSpotFleetRequestsRequest(input, context),
    [_A]: _CSFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CancelSpotInstanceRequestsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CancelSpotInstanceRequestsRequest(input, context),
    [_A]: _CSIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ConfirmProductInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ConfirmProductInstanceRequest(input, context),
    [_A]: _CPI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CopyFpgaImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyFpgaImageRequest(input, context),
    [_A]: _CFI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CopyImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyImageRequest(input, context),
    [_A]: _CI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CopySnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopySnapshotRequest(input, context),
    [_A]: _CS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCapacityReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationRequest(input, context),
    [_A]: _CCRr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCapacityReservationBySplittingCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationBySplittingRequest(input, context),
    [_A]: _CCRBS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCapacityReservationFleetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationFleetRequest(input, context),
    [_A]: _CCRFr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCarrierGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCarrierGatewayRequest(input, context),
    [_A]: _CCG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateClientVpnEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnEndpointRequest(input, context),
    [_A]: _CCVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateClientVpnRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnRouteRequest(input, context),
    [_A]: _CCVR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCoipCidrRequest(input, context),
    [_A]: _CCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCoipPoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCoipPoolRequest(input, context),
    [_A]: _CCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateCustomerGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCustomerGatewayRequest(input, context),
    [_A]: _CCGr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateDefaultSubnetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultSubnetRequest(input, context),
    [_A]: _CDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateDefaultVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultVpcRequest(input, context),
    [_A]: _CDV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateDhcpOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateDhcpOptionsRequest(input, context),
    [_A]: _CDO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateEgressOnlyInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateEgressOnlyInternetGatewayRequest(input, context),
    [_A]: _CEOIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateFleetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateFleetRequest(input, context),
    [_A]: _CF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateFlowLogsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateFlowLogsRequest(input, context),
    [_A]: _CFL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateFpgaImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateFpgaImageRequest(input, context),
    [_A]: _CFIr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateImageRequest(input, context),
    [_A]: _CIr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateInstanceConnectEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceConnectEndpointRequest(input, context),
    [_A]: _CICE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateInstanceEventWindowCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceEventWindowRequest(input, context),
    [_A]: _CIEW,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateInstanceExportTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceExportTaskRequest(input, context),
    [_A]: _CIET,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateInternetGatewayRequest(input, context),
    [_A]: _CIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateIpamCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateIpamRequest(input, context),
    [_A]: _CIre,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateIpamExternalResourceVerificationTokenCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateIpamExternalResourceVerificationTokenRequest(input, context),
    [_A]: _CIERVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateIpamPoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateIpamPoolRequest(input, context),
    [_A]: _CIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateIpamResourceDiscoveryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateIpamResourceDiscoveryRequest(input, context),
    [_A]: _CIRD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateIpamScopeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateIpamScopeRequest(input, context),
    [_A]: _CIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateKeyPairCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateKeyPairRequest(input, context),
    [_A]: _CKP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLaunchTemplateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateRequest(input, context),
    [_A]: _CLT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLaunchTemplateVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateVersionRequest(input, context),
    [_A]: _CLTV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLocalGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteRequest(input, context),
    [_A]: _CLGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLocalGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableRequest(input, context),
    [_A]: _CLGRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    [_A]: _CLGRTVIGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
    [_A]: _CLGRTVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateManagedPrefixListCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateManagedPrefixListRequest(input, context),
    [_A]: _CMPL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNatGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNatGatewayRequest(input, context),
    [_A]: _CNG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkAclCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclRequest(input, context),
    [_A]: _CNA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkAclEntryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclEntryRequest(input, context),
    [_A]: _CNAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkInsightsAccessScopeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsAccessScopeRequest(input, context),
    [_A]: _CNIAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkInsightsPathCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsPathRequest(input, context),
    [_A]: _CNIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfaceRequest(input, context),
    [_A]: _CNI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateNetworkInterfacePermissionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfacePermissionRequest(input, context),
    [_A]: _CNIPr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreatePlacementGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreatePlacementGroupRequest(input, context),
    [_A]: _CPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreatePublicIpv4PoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreatePublicIpv4PoolRequest(input, context),
    [_A]: _CPIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateReplaceRootVolumeTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateReplaceRootVolumeTaskRequest(input, context),
    [_A]: _CRRVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateReservedInstancesListingCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateReservedInstancesListingRequest(input, context),
    [_A]: _CRILr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateRestoreImageTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateRestoreImageTaskRequest(input, context),
    [_A]: _CRIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateRouteRequest(input, context),
    [_A]: _CR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateRouteTableRequest(input, context),
    [_A]: _CRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSecurityGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSecurityGroupRequest(input, context),
    [_A]: _CSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotRequest(input, context),
    [_A]: _CSr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSnapshotsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotsRequest(input, context),
    [_A]: _CSre,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSpotDatafeedSubscriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _CSDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateStoreImageTaskCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateStoreImageTaskRequest(input, context),
    [_A]: _CSIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSubnetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetRequest(input, context),
    [_A]: _CSrea,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateSubnetCidrReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetCidrReservationRequest(input, context),
    [_A]: _CSCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTagsRequest(input, context),
    [_A]: _CT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTrafficMirrorFilterCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRequest(input, context),
    [_A]: _CTMF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTrafficMirrorFilterRuleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _CTMFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTrafficMirrorSessionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorSessionRequest(input, context),
    [_A]: _CTMS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTrafficMirrorTargetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorTargetRequest(input, context),
    [_A]: _CTMT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRequest(input, context),
    [_A]: _CTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayConnectCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectRequest(input, context),
    [_A]: _CTGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayConnectPeerCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectPeerRequest(input, context),
    [_A]: _CTGCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayMulticastDomainCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _CTGMD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayPeeringAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _CTGPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayPolicyTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _CTGPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayPrefixListReferenceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _CTGPLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteRequest(input, context),
    [_A]: _CTGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableRequest(input, context),
    [_A]: _CTGRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableAnnouncementRequest(input, context),
    [_A]: _CTGRTA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateTransitGatewayVpcAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _CTGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVerifiedAccessEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessEndpointRequest(input, context),
    [_A]: _CVAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVerifiedAccessGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessGroupRequest(input, context),
    [_A]: _CVAG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVerifiedAccessInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessInstanceRequest(input, context),
    [_A]: _CVAI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVerifiedAccessTrustProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _CVATP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVolumeRequest(input, context),
    [_A]: _CV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcRequest(input, context),
    [_A]: _CVr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcBlockPublicAccessExclusionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcBlockPublicAccessExclusionRequest(input, context),
    [_A]: _CVBPAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointRequest(input, context),
    [_A]: _CVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcEndpointConnectionNotificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointConnectionNotificationRequest(input, context),
    [_A]: _CVECN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcEndpointServiceConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointServiceConfigurationRequest(input, context),
    [_A]: _CVESC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpcPeeringConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpcPeeringConnectionRequest(input, context),
    [_A]: _CVPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpnConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRequest(input, context),
    [_A]: _CVC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpnConnectionRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRouteRequest(input, context),
    [_A]: _CVCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_CreateVpnGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateVpnGatewayRequest(input, context),
    [_A]: _CVG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCarrierGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCarrierGatewayRequest(input, context),
    [_A]: _DCG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteClientVpnEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnEndpointRequest(input, context),
    [_A]: _DCVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteClientVpnRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnRouteRequest(input, context),
    [_A]: _DCVR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipCidrRequest(input, context),
    [_A]: _DCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCoipPoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipPoolRequest(input, context),
    [_A]: _DCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteCustomerGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCustomerGatewayRequest(input, context),
    [_A]: _DCGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteDhcpOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteDhcpOptionsRequest(input, context),
    [_A]: _DDO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteEgressOnlyInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteEgressOnlyInternetGatewayRequest(input, context),
    [_A]: _DEOIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteFleetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteFleetsRequest(input, context),
    [_A]: _DF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteFlowLogsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteFlowLogsRequest(input, context),
    [_A]: _DFL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteFpgaImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteFpgaImageRequest(input, context),
    [_A]: _DFI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteInstanceConnectEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceConnectEndpointRequest(input, context),
    [_A]: _DICE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteInstanceEventWindowCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceEventWindowRequest(input, context),
    [_A]: _DIEW,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteInternetGatewayRequest(input, context),
    [_A]: _DIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIpamCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamRequest(input, context),
    [_A]: _DI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIpamExternalResourceVerificationTokenCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamExternalResourceVerificationTokenRequest(input, context),
    [_A]: _DIERVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIpamPoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamPoolRequest(input, context),
    [_A]: _DIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIpamResourceDiscoveryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamResourceDiscoveryRequest(input, context),
    [_A]: _DIRD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteIpamScopeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamScopeRequest(input, context),
    [_A]: _DIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteKeyPairCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteKeyPairRequest(input, context),
    [_A]: _DKP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLaunchTemplateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateRequest(input, context),
    [_A]: _DLT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLaunchTemplateVersionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateVersionsRequest(input, context),
    [_A]: _DLTV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLocalGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteRequest(input, context),
    [_A]: _DLGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLocalGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableRequest(input, context),
    [_A]: _DLGRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    [_A]: _DLGRTVIGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
    [_A]: _DLGRTVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteManagedPrefixListCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteManagedPrefixListRequest(input, context),
    [_A]: _DMPL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNatGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNatGatewayRequest(input, context),
    [_A]: _DNG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkAclCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclRequest(input, context),
    [_A]: _DNA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkAclEntryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclEntryRequest(input, context),
    [_A]: _DNAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInsightsAccessScopeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeRequest(input, context),
    [_A]: _DNIAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context),
    [_A]: _DNIASA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInsightsAnalysisCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAnalysisRequest(input, context),
    [_A]: _DNIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInsightsPathCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsPathRequest(input, context),
    [_A]: _DNIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfaceRequest(input, context),
    [_A]: _DNI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteNetworkInterfacePermissionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfacePermissionRequest(input, context),
    [_A]: _DNIPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeletePlacementGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeletePlacementGroupRequest(input, context),
    [_A]: _DPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeletePublicIpv4PoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeletePublicIpv4PoolRequest(input, context),
    [_A]: _DPIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteQueuedReservedInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteQueuedReservedInstancesRequest(input, context),
    [_A]: _DQRI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteRequest(input, context),
    [_A]: _DR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteTableRequest(input, context),
    [_A]: _DRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSecurityGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSecurityGroupRequest(input, context),
    [_A]: _DSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSnapshotRequest(input, context),
    [_A]: _DS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSpotDatafeedSubscriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _DSDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSubnetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetRequest(input, context),
    [_A]: _DSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteSubnetCidrReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetCidrReservationRequest(input, context),
    [_A]: _DSCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTagsRequest(input, context),
    [_A]: _DT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTrafficMirrorFilterCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRequest(input, context),
    [_A]: _DTMF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTrafficMirrorFilterRuleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _DTMFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTrafficMirrorSessionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorSessionRequest(input, context),
    [_A]: _DTMS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTrafficMirrorTargetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorTargetRequest(input, context),
    [_A]: _DTMT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRequest(input, context),
    [_A]: _DTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayConnectCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectRequest(input, context),
    [_A]: _DTGC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayConnectPeerCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectPeerRequest(input, context),
    [_A]: _DTGCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayMulticastDomainCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _DTGMD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayPeeringAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _DTGPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayPolicyTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPolicyTableRequest(input, context),
    [_A]: _DTGPT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayPrefixListReferenceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _DTGPLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteRequest(input, context),
    [_A]: _DTGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableRequest(input, context),
    [_A]: _DTGRT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableAnnouncementRequest(input, context),
    [_A]: _DTGRTA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteTransitGatewayVpcAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _DTGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVerifiedAccessEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessEndpointRequest(input, context),
    [_A]: _DVAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVerifiedAccessGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessGroupRequest(input, context),
    [_A]: _DVAG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVerifiedAccessInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessInstanceRequest(input, context),
    [_A]: _DVAI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVerifiedAccessTrustProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _DVATP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVolumeRequest(input, context),
    [_A]: _DV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcRequest(input, context),
    [_A]: _DVe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcBlockPublicAccessExclusionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcBlockPublicAccessExclusionRequest(input, context),
    [_A]: _DVBPAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcEndpointConnectionNotificationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointConnectionNotificationsRequest(input, context),
    [_A]: _DVECN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcEndpointsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointsRequest(input, context),
    [_A]: _DVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcEndpointServiceConfigurationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointServiceConfigurationsRequest(input, context),
    [_A]: _DVESC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpcPeeringConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcPeeringConnectionRequest(input, context),
    [_A]: _DVPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpnConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRequest(input, context),
    [_A]: _DVC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpnConnectionRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRouteRequest(input, context),
    [_A]: _DVCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeleteVpnGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnGatewayRequest(input, context),
    [_A]: _DVG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeprovisionByoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeprovisionByoipCidrRequest(input, context),
    [_A]: _DBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeprovisionIpamByoasnCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeprovisionIpamByoasnRequest(input, context),
    [_A]: _DIB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeprovisionIpamPoolCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeprovisionIpamPoolCidrRequest(input, context),
    [_A]: _DIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeprovisionPublicIpv4PoolCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeprovisionPublicIpv4PoolCidrRequest(input, context),
    [_A]: _DPIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeregisterImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeregisterImageRequest(input, context),
    [_A]: _DIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeregisterInstanceEventNotificationAttributesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeregisterInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _DIENA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeregisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
    [_A]: _DTGMGM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    [_A]: _DTGMGS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAccountAttributesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAccountAttributesRequest(input, context),
    [_A]: _DAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesRequest(input, context),
    [_A]: _DA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAddressesAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesAttributeRequest(input, context),
    [_A]: _DAAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAddressTransfersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressTransfersRequest(input, context),
    [_A]: _DAT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAggregateIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAggregateIdFormatRequest(input, context),
    [_A]: _DAIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAvailabilityZonesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAvailabilityZonesRequest(input, context),
    [_A]: _DAZ,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(input, context),
    [_A]: _DANPMS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeBundleTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeBundleTasksRequest(input, context),
    [_A]: _DBT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeByoipCidrsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeByoipCidrsRequest(input, context),
    [_A]: _DBCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityBlockExtensionHistoryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityBlockExtensionHistoryRequest(input, context),
    [_A]: _DCBEH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityBlockExtensionOfferingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityBlockExtensionOfferingsRequest(input, context),
    [_A]: _DCBEO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityBlockOfferingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityBlockOfferingsRequest(input, context),
    [_A]: _DCBO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityReservationBillingRequestsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationBillingRequestsRequest(input, context),
    [_A]: _DCRBR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityReservationFleetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationFleetsRequest(input, context),
    [_A]: _DCRF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCapacityReservationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationsRequest(input, context),
    [_A]: _DCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCarrierGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCarrierGatewaysRequest(input, context),
    [_A]: _DCGes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClassicLinkInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClassicLinkInstancesRequest(input, context),
    [_A]: _DCLI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClientVpnAuthorizationRulesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnAuthorizationRulesRequest(input, context),
    [_A]: _DCVAR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClientVpnConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnConnectionsRequest(input, context),
    [_A]: _DCVC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClientVpnEndpointsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnEndpointsRequest(input, context),
    [_A]: _DCVEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClientVpnRoutesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnRoutesRequest(input, context),
    [_A]: _DCVRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeClientVpnTargetNetworksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnTargetNetworksRequest(input, context),
    [_A]: _DCVTN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCoipPoolsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCoipPoolsRequest(input, context),
    [_A]: _DCPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeConversionTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeConversionTasksRequest(input, context),
    [_A]: _DCT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeCustomerGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCustomerGatewaysRequest(input, context),
    [_A]: _DCGesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeDeclarativePoliciesReportsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDeclarativePoliciesReportsRequest(input, context),
    [_A]: _DDPR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeDhcpOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeDhcpOptionsRequest(input, context),
    [_A]: _DDOe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEgressOnlyInternetGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEgressOnlyInternetGatewaysRequest(input, context),
    [_A]: _DEOIGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeElasticGpusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeElasticGpusRequest(input, context),
    [_A]: _DEG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeExportImageTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeExportImageTasksRequest(input, context),
    [_A]: _DEIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeExportTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeExportTasksRequest(input, context),
    [_A]: _DET,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFastLaunchImagesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFastLaunchImagesRequest(input, context),
    [_A]: _DFLI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFastSnapshotRestoresCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFastSnapshotRestoresRequest(input, context),
    [_A]: _DFSR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFleetHistoryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetHistoryRequest(input, context),
    [_A]: _DFH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFleetInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetInstancesRequest(input, context),
    [_A]: _DFIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFleetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetsRequest(input, context),
    [_A]: _DFe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFlowLogsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFlowLogsRequest(input, context),
    [_A]: _DFLe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFpgaImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImageAttributeRequest(input, context),
    [_A]: _DFIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeFpgaImagesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImagesRequest(input, context),
    [_A]: _DFIes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeHostReservationOfferingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationOfferingsRequest(input, context),
    [_A]: _DHRO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeHostReservationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationsRequest(input, context),
    [_A]: _DHR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeHostsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeHostsRequest(input, context),
    [_A]: _DH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIamInstanceProfileAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIamInstanceProfileAssociationsRequest(input, context),
    [_A]: _DIIPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIdentityIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIdentityIdFormatRequest(input, context),
    [_A]: _DIIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIdFormatRequest(input, context),
    [_A]: _DIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeImageAttributeRequest(input, context),
    [_A]: _DIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeImagesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeImagesRequest(input, context),
    [_A]: _DIes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeImportImageTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeImportImageTasksRequest(input, context),
    [_A]: _DIIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeImportSnapshotTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeImportSnapshotTasksRequest(input, context),
    [_A]: _DIST,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceAttributeRequest(input, context),
    [_A]: _DIAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceConnectEndpointsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceConnectEndpointsRequest(input, context),
    [_A]: _DICEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceCreditSpecificationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceCreditSpecificationsRequest(input, context),
    [_A]: _DICS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceEventNotificationAttributesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _DIENAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceEventWindowsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventWindowsRequest(input, context),
    [_A]: _DIEWe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceImageMetadataCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceImageMetadataRequest(input, context),
    [_A]: _DIIM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstancesRequest(input, context),
    [_A]: _DIesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceStatusRequest(input, context),
    [_A]: _DISe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceTopologyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTopologyRequest(input, context),
    [_A]: _DIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceTypeOfferingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypeOfferingsRequest(input, context),
    [_A]: _DITO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInstanceTypesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypesRequest(input, context),
    [_A]: _DITe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeInternetGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeInternetGatewaysRequest(input, context),
    [_A]: _DIGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamByoasnCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamByoasnRequest(input, context),
    [_A]: _DIBe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamExternalResourceVerificationTokensCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamExternalResourceVerificationTokensRequest(input, context),
    [_A]: _DIERVTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamPoolsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamPoolsRequest(input, context),
    [_A]: _DIPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamResourceDiscoveriesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveriesRequest(input, context),
    [_A]: _DIRDe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamResourceDiscoveryAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveryAssociationsRequest(input, context),
    [_A]: _DIRDA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamsRequest(input, context),
    [_A]: _DIescr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpamScopesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamScopesRequest(input, context),
    [_A]: _DISes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeIpv6PoolsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeIpv6PoolsRequest(input, context),
    [_A]: _DIPes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeKeyPairsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeKeyPairsRequest(input, context),
    [_A]: _DKPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLaunchTemplatesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplatesRequest(input, context),
    [_A]: _DLTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLaunchTemplateVersionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplateVersionsRequest(input, context),
    [_A]: _DLTVe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewayRouteTablesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTablesRequest(input, context),
    [_A]: _DLGRTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
    [_A]: _DLGRTVIGAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
    [_A]: _DLGRTVAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewaysRequest(input, context),
    [_A]: _DLG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
    [_A]: _DLGVIG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLocalGatewayVirtualInterfacesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfacesRequest(input, context),
    [_A]: _DLGVI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeLockedSnapshotsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLockedSnapshotsRequest(input, context),
    [_A]: _DLS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeMacHostsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeMacHostsRequest(input, context),
    [_A]: _DMH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeManagedPrefixListsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeManagedPrefixListsRequest(input, context),
    [_A]: _DMPLe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeMovingAddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeMovingAddressesRequest(input, context),
    [_A]: _DMA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNatGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNatGatewaysRequest(input, context),
    [_A]: _DNGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkAclsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkAclsRequest(input, context),
    [_A]: _DNAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context),
    [_A]: _DNIASAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInsightsAccessScopesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopesRequest(input, context),
    [_A]: _DNIASe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInsightsAnalysesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAnalysesRequest(input, context),
    [_A]: _DNIAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInsightsPathsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsPathsRequest(input, context),
    [_A]: _DNIPes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInterfaceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfaceAttributeRequest(input, context),
    [_A]: _DNIAes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInterfacePermissionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacePermissionsRequest(input, context),
    [_A]: _DNIPesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeNetworkInterfacesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacesRequest(input, context),
    [_A]: _DNIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribePlacementGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePlacementGroupsRequest(input, context),
    [_A]: _DPGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribePrefixListsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePrefixListsRequest(input, context),
    [_A]: _DPL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribePrincipalIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePrincipalIdFormatRequest(input, context),
    [_A]: _DPIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribePublicIpv4PoolsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribePublicIpv4PoolsRequest(input, context),
    [_A]: _DPIPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeRegionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeRegionsRequest(input, context),
    [_A]: _DRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeReplaceRootVolumeTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReplaceRootVolumeTasksRequest(input, context),
    [_A]: _DRRVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeReservedInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesRequest(input, context),
    [_A]: _DRI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeReservedInstancesListingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesListingsRequest(input, context),
    [_A]: _DRIL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeReservedInstancesModificationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesModificationsRequest(input, context),
    [_A]: _DRIM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeReservedInstancesOfferingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesOfferingsRequest(input, context),
    [_A]: _DRIO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeRouteTablesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeRouteTablesRequest(input, context),
    [_A]: _DRTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeScheduledInstanceAvailabilityCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstanceAvailabilityRequest(input, context),
    [_A]: _DSIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeScheduledInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstancesRequest(input, context),
    [_A]: _DSI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSecurityGroupReferencesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupReferencesRequest(input, context),
    [_A]: _DSGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSecurityGroupRulesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupRulesRequest(input, context),
    [_A]: _DSGRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSecurityGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupsRequest(input, context),
    [_A]: _DSGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSecurityGroupVpcAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupVpcAssociationsRequest(input, context),
    [_A]: _DSGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSnapshotAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotAttributeRequest(input, context),
    [_A]: _DSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSnapshotsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotsRequest(input, context),
    [_A]: _DSes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSnapshotTierStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotTierStatusRequest(input, context),
    [_A]: _DSTS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotDatafeedSubscriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _DSDSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotFleetInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetInstancesRequest(input, context),
    [_A]: _DSFI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotFleetRequestHistoryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestHistoryRequest(input, context),
    [_A]: _DSFRH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotFleetRequestsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestsRequest(input, context),
    [_A]: _DSFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotInstanceRequestsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotInstanceRequestsRequest(input, context),
    [_A]: _DSIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSpotPriceHistoryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotPriceHistoryRequest(input, context),
    [_A]: _DSPH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeStaleSecurityGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeStaleSecurityGroupsRequest(input, context),
    [_A]: _DSSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeStoreImageTasksCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeStoreImageTasksRequest(input, context),
    [_A]: _DSIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeSubnetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSubnetsRequest(input, context),
    [_A]: _DSesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTagsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTagsRequest(input, context),
    [_A]: _DTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTrafficMirrorFilterRulesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorFilterRulesRequest(input, context),
    [_A]: _DTMFRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTrafficMirrorFiltersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorFiltersRequest(input, context),
    [_A]: _DTMFe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTrafficMirrorSessionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorSessionsRequest(input, context),
    [_A]: _DTMSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTrafficMirrorTargetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorTargetsRequest(input, context),
    [_A]: _DTMTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayAttachmentsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayAttachmentsRequest(input, context),
    [_A]: _DTGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayConnectPeersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectPeersRequest(input, context),
    [_A]: _DTGCPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayConnectsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectsRequest(input, context),
    [_A]: _DTGCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayMulticastDomainsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayMulticastDomainsRequest(input, context),
    [_A]: _DTGMDe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayPeeringAttachmentsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
    [_A]: _DTGPAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayPolicyTablesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPolicyTablesRequest(input, context),
    [_A]: _DTGPTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTableAnnouncementsRequest(input, context),
    [_A]: _DTGRTAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayRouteTablesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTablesRequest(input, context),
    [_A]: _DTGRTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewaysRequest(input, context),
    [_A]: _DTGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTransitGatewayVpcAttachmentsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayVpcAttachmentsRequest(input, context),
    [_A]: _DTGVAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeTrunkInterfaceAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrunkInterfaceAssociationsRequest(input, context),
    [_A]: _DTIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVerifiedAccessEndpointsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessEndpointsRequest(input, context),
    [_A]: _DVAEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVerifiedAccessGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessGroupsRequest(input, context),
    [_A]: _DVAGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(input, context),
    [_A]: _DVAILC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVerifiedAccessInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstancesRequest(input, context),
    [_A]: _DVAIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVerifiedAccessTrustProvidersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessTrustProvidersRequest(input, context),
    [_A]: _DVATPe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVolumeAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeAttributeRequest(input, context),
    [_A]: _DVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVolumesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesRequest(input, context),
    [_A]: _DVes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVolumesModificationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesModificationsRequest(input, context),
    [_A]: _DVM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVolumeStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeStatusRequest(input, context),
    [_A]: _DVS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcAttributeRequest(input, context),
    [_A]: _DVAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcBlockPublicAccessExclusionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcBlockPublicAccessExclusionsRequest(input, context),
    [_A]: _DVBPAEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcBlockPublicAccessOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcBlockPublicAccessOptionsRequest(input, context),
    [_A]: _DVBPAO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcClassicLinkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkRequest(input, context),
    [_A]: _DVCL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcClassicLinkDnsSupportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _DVCLDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointAssociationsRequest(input, context),
    [_A]: _DVEA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointConnectionNotificationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionNotificationsRequest(input, context),
    [_A]: _DVECNe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionsRequest(input, context),
    [_A]: _DVEC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointsRequest(input, context),
    [_A]: _DVEe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointServiceConfigurationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServiceConfigurationsRequest(input, context),
    [_A]: _DVESCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointServicePermissionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicePermissionsRequest(input, context),
    [_A]: _DVESP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcEndpointServicesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicesRequest(input, context),
    [_A]: _DVES,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcPeeringConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcPeeringConnectionsRequest(input, context),
    [_A]: _DVPCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpcsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcsRequest(input, context),
    [_A]: _DVesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpnConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnConnectionsRequest(input, context),
    [_A]: _DVCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeVpnGatewaysCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnGatewaysRequest(input, context),
    [_A]: _DVGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachClassicLinkVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachClassicLinkVpcRequest(input, context),
    [_A]: _DCLV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachInternetGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachInternetGatewayRequest(input, context),
    [_A]: _DIGet,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachNetworkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachNetworkInterfaceRequest(input, context),
    [_A]: _DNIet,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachVerifiedAccessTrustProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _DVATPet,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachVolumeRequest(input, context),
    [_A]: _DVet,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DetachVpnGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DetachVpnGatewayRequest(input, context),
    [_A]: _DVGet,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableAddressTransferCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableAddressTransferRequest(input, context),
    [_A]: _DATi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableAllowedImagesSettingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableAllowedImagesSettingsRequest(input, context),
    [_A]: _DAIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    [_A]: _DANPMSi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableEbsEncryptionByDefaultCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableEbsEncryptionByDefaultRequest(input, context),
    [_A]: _DEEBD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableFastLaunchCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableFastLaunchRequest(input, context),
    [_A]: _DFLi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableFastSnapshotRestoresCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableFastSnapshotRestoresRequest(input, context),
    [_A]: _DFSRi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableImageRequest(input, context),
    [_A]: _DIi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableImageBlockPublicAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableImageBlockPublicAccessRequest(input, context),
    [_A]: _DIBPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableImageDeprecationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableImageDeprecationRequest(input, context),
    [_A]: _DID,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableImageDeregistrationProtectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableImageDeregistrationProtectionRequest(input, context),
    [_A]: _DIDP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableIpamOrganizationAdminAccountCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableIpamOrganizationAdminAccountRequest(input, context),
    [_A]: _DIOAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableSerialConsoleAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableSerialConsoleAccessRequest(input, context),
    [_A]: _DSCA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableSnapshotBlockPublicAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableSnapshotBlockPublicAccessRequest(input, context),
    [_A]: _DSBPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableTransitGatewayRouteTablePropagationRequest(input, context),
    [_A]: _DTGRTP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableVgwRoutePropagationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableVgwRoutePropagationRequest(input, context),
    [_A]: _DVRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableVpcClassicLinkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkRequest(input, context),
    [_A]: _DVCLi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableVpcClassicLinkDnsSupportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _DVCLDSi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateAddressRequest(input, context),
    [_A]: _DAi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateCapacityReservationBillingOwnerCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateCapacityReservationBillingOwnerRequest(input, context),
    [_A]: _DCRBO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateClientVpnTargetNetworkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateClientVpnTargetNetworkRequest(input, context),
    [_A]: _DCVTNi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateEnclaveCertificateIamRoleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateEnclaveCertificateIamRoleRequest(input, context),
    [_A]: _DECIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateIamInstanceProfileCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateIamInstanceProfileRequest(input, context),
    [_A]: _DIIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateInstanceEventWindowCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateInstanceEventWindowRequest(input, context),
    [_A]: _DIEWi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateIpamByoasnCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateIpamByoasnRequest(input, context),
    [_A]: _DIBi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateIpamResourceDiscoveryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateIpamResourceDiscoveryRequest(input, context),
    [_A]: _DIRDi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateNatGatewayAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateNatGatewayAddressRequest(input, context),
    [_A]: _DNGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateRouteTableRequest(input, context),
    [_A]: _DRTi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateSecurityGroupVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateSecurityGroupVpcRequest(input, context),
    [_A]: _DSGV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateSubnetCidrBlockCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateSubnetCidrBlockRequest(input, context),
    [_A]: _DSCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateTransitGatewayMulticastDomainCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _DTGMDi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateTransitGatewayPolicyTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _DTGPTi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateTransitGatewayRouteTableCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayRouteTableRequest(input, context),
    [_A]: _DTGRTi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateTrunkInterfaceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateTrunkInterfaceRequest(input, context),
    [_A]: _DTI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisassociateVpcCidrBlockCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateVpcCidrBlockRequest(input, context),
    [_A]: _DVCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableAddressTransferCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableAddressTransferRequest(input, context),
    [_A]: _EAT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableAllowedImagesSettingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableAllowedImagesSettingsRequest(input, context),
    [_A]: _EAIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    [_A]: _EANPMS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableEbsEncryptionByDefaultCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableEbsEncryptionByDefaultRequest(input, context),
    [_A]: _EEEBD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableFastLaunchCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableFastLaunchRequest(input, context),
    [_A]: _EFL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableFastSnapshotRestoresCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableFastSnapshotRestoresRequest(input, context),
    [_A]: _EFSR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableImageRequest(input, context),
    [_A]: _EI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableImageBlockPublicAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableImageBlockPublicAccessRequest(input, context),
    [_A]: _EIBPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableImageDeprecationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableImageDeprecationRequest(input, context),
    [_A]: _EID,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableImageDeregistrationProtectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableImageDeregistrationProtectionRequest(input, context),
    [_A]: _EIDP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableIpamOrganizationAdminAccountCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableIpamOrganizationAdminAccountRequest(input, context),
    [_A]: _EIOAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableReachabilityAnalyzerOrganizationSharingCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableReachabilityAnalyzerOrganizationSharingRequest(input, context),
    [_A]: _ERAOS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableSerialConsoleAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableSerialConsoleAccessRequest(input, context),
    [_A]: _ESCA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableSnapshotBlockPublicAccessCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableSnapshotBlockPublicAccessRequest(input, context),
    [_A]: _ESBPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableTransitGatewayRouteTablePropagationRequest(input, context),
    [_A]: _ETGRTP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableVgwRoutePropagationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableVgwRoutePropagationRequest(input, context),
    [_A]: _EVRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableVolumeIOCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableVolumeIORequest(input, context),
    [_A]: _EVIO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableVpcClassicLinkCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkRequest(input, context),
    [_A]: _EVCL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableVpcClassicLinkDnsSupportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _EVCLDS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ExportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientCertificateRevocationListRequest(input, context),
    [_A]: _ECVCCRL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ExportClientVpnClientConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientConfigurationRequest(input, context),
    [_A]: _ECVCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ExportImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportImageRequest(input, context),
    [_A]: _EIx,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ExportTransitGatewayRoutesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportTransitGatewayRoutesRequest(input, context),
    [_A]: _ETGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ExportVerifiedAccessInstanceClientConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportVerifiedAccessInstanceClientConfigurationRequest(input, context),
    [_A]: _EVAICC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAllowedImagesSettingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAllowedImagesSettingsRequest(input, context),
    [_A]: _GAIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAssociatedEnclaveCertificateIamRolesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
    [_A]: _GAECIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAssociatedIpv6PoolCidrsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedIpv6PoolCidrsRequest(input, context),
    [_A]: _GAIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetAwsNetworkPerformanceDataCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetAwsNetworkPerformanceDataRequest(input, context),
    [_A]: _GANPD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCapacityReservationUsageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetCapacityReservationUsageRequest(input, context),
    [_A]: _GCRU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetCoipPoolUsageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetCoipPoolUsageRequest(input, context),
    [_A]: _GCPU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetConsoleOutputCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetConsoleOutputRequest(input, context),
    [_A]: _GCO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetConsoleScreenshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetConsoleScreenshotRequest(input, context),
    [_A]: _GCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetDeclarativePoliciesReportSummaryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetDeclarativePoliciesReportSummaryRequest(input, context),
    [_A]: _GDPRS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetDefaultCreditSpecificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetDefaultCreditSpecificationRequest(input, context),
    [_A]: _GDCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetEbsDefaultKmsKeyIdCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _GEDKKI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetEbsEncryptionByDefaultCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetEbsEncryptionByDefaultRequest(input, context),
    [_A]: _GEEBD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetFlowLogsIntegrationTemplateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetFlowLogsIntegrationTemplateRequest(input, context),
    [_A]: _GFLIT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetGroupsForCapacityReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetGroupsForCapacityReservationRequest(input, context),
    [_A]: _GGFCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetHostReservationPurchasePreviewCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetHostReservationPurchasePreviewRequest(input, context),
    [_A]: _GHRPP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetImageBlockPublicAccessStateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetImageBlockPublicAccessStateRequest(input, context),
    [_A]: _GIBPAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetInstanceMetadataDefaultsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetInstanceMetadataDefaultsRequest(input, context),
    [_A]: _GIMD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetInstanceTpmEkPubCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetInstanceTpmEkPubRequest(input, context),
    [_A]: _GITEP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetInstanceTypesFromInstanceRequirementsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetInstanceTypesFromInstanceRequirementsRequest(input, context),
    [_A]: _GITFIR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetInstanceUefiDataCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetInstanceUefiDataRequest(input, context),
    [_A]: _GIUD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamAddressHistoryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamAddressHistoryRequest(input, context),
    [_A]: _GIAH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamDiscoveredAccountsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredAccountsRequest(input, context),
    [_A]: _GIDA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamDiscoveredPublicAddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredPublicAddressesRequest(input, context),
    [_A]: _GIDPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamDiscoveredResourceCidrsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredResourceCidrsRequest(input, context),
    [_A]: _GIDRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamPoolAllocationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolAllocationsRequest(input, context),
    [_A]: _GIPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamPoolCidrsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolCidrsRequest(input, context),
    [_A]: _GIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetIpamResourceCidrsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetIpamResourceCidrsRequest(input, context),
    [_A]: _GIRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetLaunchTemplateDataCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetLaunchTemplateDataRequest(input, context),
    [_A]: _GLTD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetManagedPrefixListAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListAssociationsRequest(input, context),
    [_A]: _GMPLA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetManagedPrefixListEntriesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListEntriesRequest(input, context),
    [_A]: _GMPLE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context),
    [_A]: _GNIASAF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetNetworkInsightsAccessScopeContentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeContentRequest(input, context),
    [_A]: _GNIASC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetPasswordDataCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetPasswordDataRequest(input, context),
    [_A]: _GPD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetReservedInstancesExchangeQuoteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetReservedInstancesExchangeQuoteRequest(input, context),
    [_A]: _GRIEQ,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSecurityGroupsForVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSecurityGroupsForVpcRequest(input, context),
    [_A]: _GSGFV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSerialConsoleAccessStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSerialConsoleAccessStatusRequest(input, context),
    [_A]: _GSCAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSnapshotBlockPublicAccessStateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSnapshotBlockPublicAccessStateRequest(input, context),
    [_A]: _GSBPAS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSpotPlacementScoresCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSpotPlacementScoresRequest(input, context),
    [_A]: _GSPS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetSubnetCidrReservationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetSubnetCidrReservationsRequest(input, context),
    [_A]: _GSCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayAttachmentPropagationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayAttachmentPropagationsRequest(input, context),
    [_A]: _GTGAP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _GTGMDA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayPolicyTableAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableAssociationsRequest(input, context),
    [_A]: _GTGPTA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayPolicyTableEntriesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableEntriesRequest(input, context),
    [_A]: _GTGPTE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayPrefixListReferencesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPrefixListReferencesRequest(input, context),
    [_A]: _GTGPLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayRouteTableAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTableAssociationsRequest(input, context),
    [_A]: _GTGRTA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetTransitGatewayRouteTablePropagationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTablePropagationsRequest(input, context),
    [_A]: _GTGRTP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVerifiedAccessEndpointPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessEndpointPolicyRequest(input, context),
    [_A]: _GVAEP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVerifiedAccessEndpointTargetsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessEndpointTargetsRequest(input, context),
    [_A]: _GVAET,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVerifiedAccessGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessGroupPolicyRequest(input, context),
    [_A]: _GVAGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVpnConnectionDeviceSampleConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceSampleConfigurationRequest(input, context),
    [_A]: _GVCDSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVpnConnectionDeviceTypesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceTypesRequest(input, context),
    [_A]: _GVCDT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_GetVpnTunnelReplacementStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetVpnTunnelReplacementStatusRequest(input, context),
    [_A]: _GVTRS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportClientVpnClientCertificateRevocationListRequest(input, context),
    [_A]: _ICVCCRL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportImageRequest(input, context),
    [_A]: _II,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportInstanceRequest(input, context),
    [_A]: _IIm,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportKeyPairCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportKeyPairRequest(input, context),
    [_A]: _IKP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportSnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportSnapshotRequest(input, context),
    [_A]: _IS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ImportVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ImportVolumeRequest(input, context),
    [_A]: _IV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListImagesInRecycleBinCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListImagesInRecycleBinRequest(input, context),
    [_A]: _LIIRB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ListSnapshotsInRecycleBinCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListSnapshotsInRecycleBinRequest(input, context),
    [_A]: _LSIRB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_LockSnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_LockSnapshotRequest(input, context),
    [_A]: _LS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyAddressAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyAddressAttributeRequest(input, context),
    [_A]: _MAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyAvailabilityZoneGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyAvailabilityZoneGroupRequest(input, context),
    [_A]: _MAZG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyCapacityReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationRequest(input, context),
    [_A]: _MCR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyCapacityReservationFleetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationFleetRequest(input, context),
    [_A]: _MCRF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyClientVpnEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyClientVpnEndpointRequest(input, context),
    [_A]: _MCVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyDefaultCreditSpecificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyDefaultCreditSpecificationRequest(input, context),
    [_A]: _MDCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyEbsDefaultKmsKeyIdCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _MEDKKI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyFleetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyFleetRequest(input, context),
    [_A]: _MF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyFpgaImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyFpgaImageAttributeRequest(input, context),
    [_A]: _MFIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyHostsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyHostsRequest(input, context),
    [_A]: _MH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIdentityIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIdentityIdFormatRequest(input, context),
    [_A]: _MIIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIdFormatCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIdFormatRequest(input, context),
    [_A]: _MIF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyImageAttributeRequest(input, context),
    [_A]: _MIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceAttributeRequest(input, context),
    [_A]: _MIAo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceCapacityReservationAttributesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCapacityReservationAttributesRequest(input, context),
    [_A]: _MICRA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceCpuOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCpuOptionsRequest(input, context),
    [_A]: _MICO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceCreditSpecificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCreditSpecificationRequest(input, context),
    [_A]: _MICS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceEventStartTimeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventStartTimeRequest(input, context),
    [_A]: _MIEST,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceEventWindowCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventWindowRequest(input, context),
    [_A]: _MIEW,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceMaintenanceOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMaintenanceOptionsRequest(input, context),
    [_A]: _MIMO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceMetadataDefaultsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMetadataDefaultsRequest(input, context),
    [_A]: _MIMD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceMetadataOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMetadataOptionsRequest(input, context),
    [_A]: _MIMOo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstanceNetworkPerformanceOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceNetworkPerformanceRequest(input, context),
    [_A]: _MINPO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyInstancePlacementCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyInstancePlacementRequest(input, context),
    [_A]: _MIP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIpamCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamRequest(input, context),
    [_A]: _MI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIpamPoolCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamPoolRequest(input, context),
    [_A]: _MIPo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIpamResourceCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceCidrRequest(input, context),
    [_A]: _MIRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIpamResourceDiscoveryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceDiscoveryRequest(input, context),
    [_A]: _MIRD,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyIpamScopeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamScopeRequest(input, context),
    [_A]: _MIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyLaunchTemplateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyLaunchTemplateRequest(input, context),
    [_A]: _MLT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyLocalGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyLocalGatewayRouteRequest(input, context),
    [_A]: _MLGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyManagedPrefixListCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyManagedPrefixListRequest(input, context),
    [_A]: _MMPL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyNetworkInterfaceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyNetworkInterfaceAttributeRequest(input, context),
    [_A]: _MNIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyPrivateDnsNameOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyPrivateDnsNameOptionsRequest(input, context),
    [_A]: _MPDNO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyReservedInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyReservedInstancesRequest(input, context),
    [_A]: _MRI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifySecurityGroupRulesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifySecurityGroupRulesRequest(input, context),
    [_A]: _MSGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifySnapshotAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotAttributeRequest(input, context),
    [_A]: _MSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifySnapshotTierCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotTierRequest(input, context),
    [_A]: _MST,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifySpotFleetRequestCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifySpotFleetRequestRequest(input, context),
    [_A]: _MSFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifySubnetAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifySubnetAttributeRequest(input, context),
    [_A]: _MSAo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTrafficMirrorFilterNetworkServicesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
    [_A]: _MTMFNS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTrafficMirrorFilterRuleCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _MTMFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTrafficMirrorSessionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorSessionRequest(input, context),
    [_A]: _MTMS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTransitGatewayCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayRequest(input, context),
    [_A]: _MTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTransitGatewayPrefixListReferenceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _MTGPLR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyTransitGatewayVpcAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _MTGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointRequest(input, context),
    [_A]: _MVAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessEndpointPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointPolicyRequest(input, context),
    [_A]: _MVAEP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessGroupCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupRequest(input, context),
    [_A]: _MVAG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessGroupPolicyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupPolicyRequest(input, context),
    [_A]: _MVAGP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessInstanceCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceRequest(input, context),
    [_A]: _MVAI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest(input, context),
    [_A]: _MVAILC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVerifiedAccessTrustProviderCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _MVATP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVolumeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeRequest(input, context),
    [_A]: _MV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVolumeAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeAttributeRequest(input, context),
    [_A]: _MVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcAttributeRequest(input, context),
    [_A]: _MVAo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcBlockPublicAccessExclusionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcBlockPublicAccessExclusionRequest(input, context),
    [_A]: _MVBPAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcBlockPublicAccessOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcBlockPublicAccessOptionsRequest(input, context),
    [_A]: _MVBPAO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcEndpointCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointRequest(input, context),
    [_A]: _MVE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcEndpointConnectionNotificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointConnectionNotificationRequest(input, context),
    [_A]: _MVECN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcEndpointServiceConfigurationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServiceConfigurationRequest(input, context),
    [_A]: _MVESC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcEndpointServicePayerResponsibilityCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePayerResponsibilityRequest(input, context),
    [_A]: _MVESPR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcEndpointServicePermissionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePermissionsRequest(input, context),
    [_A]: _MVESP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcPeeringConnectionOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcPeeringConnectionOptionsRequest(input, context),
    [_A]: _MVPCO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpcTenancyCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcTenancyRequest(input, context),
    [_A]: _MVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpnConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionRequest(input, context),
    [_A]: _MVC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpnConnectionOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionOptionsRequest(input, context),
    [_A]: _MVCO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpnTunnelCertificateCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelCertificateRequest(input, context),
    [_A]: _MVTC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ModifyVpnTunnelOptionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelOptionsRequest(input, context),
    [_A]: _MVTO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_MonitorInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_MonitorInstancesRequest(input, context),
    [_A]: _MIo,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_MoveAddressToVpcCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_MoveAddressToVpcRequest(input, context),
    [_A]: _MATV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_MoveByoipCidrToIpamCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_MoveByoipCidrToIpamRequest(input, context),
    [_A]: _MBCTI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_MoveCapacityReservationInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_MoveCapacityReservationInstancesRequest(input, context),
    [_A]: _MCRI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ProvisionByoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ProvisionByoipCidrRequest(input, context),
    [_A]: _PBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ProvisionIpamByoasnCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ProvisionIpamByoasnRequest(input, context),
    [_A]: _PIB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ProvisionIpamPoolCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ProvisionIpamPoolCidrRequest(input, context),
    [_A]: _PIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ProvisionPublicIpv4PoolCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ProvisionPublicIpv4PoolCidrRequest(input, context),
    [_A]: _PPIPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PurchaseCapacityBlockCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseCapacityBlockRequest(input, context),
    [_A]: _PCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PurchaseCapacityBlockExtensionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseCapacityBlockExtensionRequest(input, context),
    [_A]: _PCBE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PurchaseHostReservationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseHostReservationRequest(input, context),
    [_A]: _PHR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PurchaseReservedInstancesOfferingCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseReservedInstancesOfferingRequest(input, context),
    [_A]: _PRIO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_PurchaseScheduledInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseScheduledInstancesRequest(input, context),
    [_A]: _PSI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RebootInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RebootInstancesRequest(input, context),
    [_A]: _RI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RegisterImageCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RegisterImageRequest(input, context),
    [_A]: _RIe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RegisterInstanceEventNotificationAttributesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RegisterInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _RIENA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RegisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
    [_A]: _RTGMGM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RegisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    [_A]: _RTGMGS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectCapacityReservationBillingOwnershipCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectCapacityReservationBillingOwnershipRequest(input, context),
    [_A]: _RCRBO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _RTGMDA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectTransitGatewayPeeringAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _RTGPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectTransitGatewayVpcAttachmentCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _RTGVA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectVpcEndpointConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectVpcEndpointConnectionsRequest(input, context),
    [_A]: _RVEC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RejectVpcPeeringConnectionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RejectVpcPeeringConnectionRequest(input, context),
    [_A]: _RVPC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReleaseAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReleaseAddressRequest(input, context),
    [_A]: _RA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReleaseHostsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReleaseHostsRequest(input, context),
    [_A]: _RH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReleaseIpamPoolAllocationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReleaseIpamPoolAllocationRequest(input, context),
    [_A]: _RIPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceIamInstanceProfileAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceIamInstanceProfileAssociationRequest(input, context),
    [_A]: _RIIPA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceImageCriteriaInAllowedImagesSettingsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceImageCriteriaInAllowedImagesSettingsRequest(input, context),
    [_A]: _RICIAIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceNetworkAclAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclAssociationRequest(input, context),
    [_A]: _RNAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceNetworkAclEntryCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclEntryRequest(input, context),
    [_A]: _RNAE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteRequest(input, context),
    [_A]: _RR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceRouteTableAssociationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteTableAssociationRequest(input, context),
    [_A]: _RRTA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceTransitGatewayRouteCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceTransitGatewayRouteRequest(input, context),
    [_A]: _RTGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReplaceVpnTunnelCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReplaceVpnTunnelRequest(input, context),
    [_A]: _RVT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ReportInstanceStatusCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ReportInstanceStatusRequest(input, context),
    [_A]: _RIS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RequestSpotFleetCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RequestSpotFleetRequest(input, context),
    [_A]: _RSF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RequestSpotInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RequestSpotInstancesRequest(input, context),
    [_A]: _RSI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetAddressAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetAddressAttributeRequest(input, context),
    [_A]: _RAA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetEbsDefaultKmsKeyIdCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _REDKKI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetFpgaImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetFpgaImageAttributeRequest(input, context),
    [_A]: _RFIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetImageAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetImageAttributeRequest(input, context),
    [_A]: _RIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetInstanceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetInstanceAttributeRequest(input, context),
    [_A]: _RIAe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetNetworkInterfaceAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetNetworkInterfaceAttributeRequest(input, context),
    [_A]: _RNIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_ResetSnapshotAttributeCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetSnapshotAttributeRequest(input, context),
    [_A]: _RSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RestoreAddressToClassicCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreAddressToClassicRequest(input, context),
    [_A]: _RATC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RestoreImageFromRecycleBinCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreImageFromRecycleBinRequest(input, context),
    [_A]: _RIFRB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RestoreManagedPrefixListVersionCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreManagedPrefixListVersionRequest(input, context),
    [_A]: _RMPLV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RestoreSnapshotFromRecycleBinCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotFromRecycleBinRequest(input, context),
    [_A]: _RSFRB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RestoreSnapshotTierCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotTierRequest(input, context),
    [_A]: _RST,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RevokeClientVpnIngressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RevokeClientVpnIngressRequest(input, context),
    [_A]: _RCVI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RevokeSecurityGroupEgressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupEgressRequest(input, context),
    [_A]: _RSGE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RevokeSecurityGroupIngressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupIngressRequest(input, context),
    [_A]: _RSGI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RunInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RunInstancesRequest(input, context),
    [_A]: _RIu,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_RunScheduledInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RunScheduledInstancesRequest(input, context),
    [_A]: _RSIu,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SearchLocalGatewayRoutesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SearchLocalGatewayRoutesRequest(input, context),
    [_A]: _SLGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SearchTransitGatewayMulticastGroupsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayMulticastGroupsRequest(input, context),
    [_A]: _STGMG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SearchTransitGatewayRoutesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayRoutesRequest(input, context),
    [_A]: _STGR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_SendDiagnosticInterruptCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SendDiagnosticInterruptRequest(input, context),
    [_A]: _SDI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartDeclarativePoliciesReportCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartDeclarativePoliciesReportRequest(input, context),
    [_A]: _SDPR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartInstancesRequest(input, context),
    [_A]: _SI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAccessScopeAnalysisRequest(input, context),
    [_A]: _SNIASA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartNetworkInsightsAnalysisCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAnalysisRequest(input, context),
    [_A]: _SNIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StartVpcEndpointServicePrivateDnsVerificationCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
    [_A]: _SVESPDV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_StopInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StopInstancesRequest(input, context),
    [_A]: _SIt,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TerminateClientVpnConnectionsCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TerminateClientVpnConnectionsRequest(input, context),
    [_A]: _TCVC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_TerminateInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TerminateInstancesRequest(input, context),
    [_A]: _TI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnassignIpv6AddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UnassignIpv6AddressesRequest(input, context),
    [_A]: _UIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnassignPrivateIpAddressesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateIpAddressesRequest(input, context),
    [_A]: _UPIA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnassignPrivateNatGatewayAddressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateNatGatewayAddressRequest(input, context),
    [_A]: _UPNGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnlockSnapshotCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UnlockSnapshotRequest(input, context),
    [_A]: _US,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UnmonitorInstancesCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UnmonitorInstancesRequest(input, context),
    [_A]: _UI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
    [_A]: _USGRDE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
    [_A]: _USGRDI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_WithdrawByoipCidrCommand = async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_WithdrawByoipCidrRequest(input, context),
    [_A]: _WBC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_AcceptAddressTransferCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptAddressTransferResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptCapacityReservationBillingOwnershipCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptCapacityReservationBillingOwnershipResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptReservedInstancesExchangeQuoteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptReservedInstancesExchangeQuoteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptTransitGatewayPeeringAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptTransitGatewayPeeringAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptTransitGatewayVpcAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptTransitGatewayVpcAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptVpcEndpointConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptVpcEndpointConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AcceptVpcPeeringConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AcceptVpcPeeringConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AdvertiseByoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AdvertiseByoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AllocateAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AllocateAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AllocateHostsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AllocateHostsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AllocateIpamPoolCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AllocateIpamPoolCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssignIpv6AddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssignIpv6AddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssignPrivateIpAddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssignPrivateIpAddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssignPrivateNatGatewayAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssignPrivateNatGatewayAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateCapacityReservationBillingOwnerCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateCapacityReservationBillingOwnerResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateClientVpnTargetNetworkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateClientVpnTargetNetworkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateDhcpOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AssociateEnclaveCertificateIamRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateEnclaveCertificateIamRoleResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateIamInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateIamInstanceProfileResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateInstanceEventWindowCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateInstanceEventWindowResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateIpamByoasnCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateIpamByoasnResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateIpamResourceDiscoveryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateIpamResourceDiscoveryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateNatGatewayAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateNatGatewayAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateSecurityGroupVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateSecurityGroupVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateSubnetCidrBlockCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateSubnetCidrBlockResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateTransitGatewayMulticastDomainCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateTransitGatewayMulticastDomainResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateTransitGatewayPolicyTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateTransitGatewayPolicyTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateTransitGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateTransitGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateTrunkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateTrunkInterfaceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AssociateVpcCidrBlockCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AssociateVpcCidrBlockResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AttachClassicLinkVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AttachClassicLinkVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AttachInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_AttachNetworkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AttachNetworkInterfaceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AttachVerifiedAccessTrustProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AttachVerifiedAccessTrustProviderResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AttachVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_VolumeAttachment(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AttachVpnGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AttachVpnGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AuthorizeClientVpnIngressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AuthorizeClientVpnIngressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AuthorizeSecurityGroupEgressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AuthorizeSecurityGroupEgressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_AuthorizeSecurityGroupIngressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_AuthorizeSecurityGroupIngressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_BundleInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_BundleInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelBundleTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelBundleTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelCapacityReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelCapacityReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelCapacityReservationFleetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelCapacityReservationFleetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelConversionTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CancelDeclarativePoliciesReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelDeclarativePoliciesReportResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelExportTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CancelImageLaunchPermissionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelImageLaunchPermissionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelImportTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelImportTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelReservedInstancesListingCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelReservedInstancesListingResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelSpotFleetRequestsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelSpotFleetRequestsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CancelSpotInstanceRequestsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CancelSpotInstanceRequestsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ConfirmProductInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ConfirmProductInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CopyFpgaImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CopyFpgaImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CopyImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CopyImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CopySnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CopySnapshotResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCapacityReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCapacityReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCapacityReservationBySplittingCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCapacityReservationBySplittingResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCapacityReservationFleetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCapacityReservationFleetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCarrierGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCarrierGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateClientVpnEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateClientVpnEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateClientVpnRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateClientVpnRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCoipPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCoipPoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateCustomerGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateCustomerGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateDefaultSubnetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateDefaultSubnetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateDefaultVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateDefaultVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateDhcpOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateDhcpOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateEgressOnlyInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateEgressOnlyInternetGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateFleetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateFleetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateFlowLogsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateFlowLogsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateFpgaImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateFpgaImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateInstanceConnectEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateInstanceConnectEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateInstanceEventWindowCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateInstanceEventWindowResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateInstanceExportTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateInstanceExportTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateInternetGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIpamCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateIpamResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIpamExternalResourceVerificationTokenCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateIpamExternalResourceVerificationTokenResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIpamPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateIpamPoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIpamResourceDiscoveryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateIpamResourceDiscoveryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateIpamScopeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateIpamScopeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateKeyPairCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_KeyPair(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLaunchTemplateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLaunchTemplateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLaunchTemplateVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLaunchTemplateVersionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLocalGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLocalGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLocalGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLocalGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateManagedPrefixListCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateManagedPrefixListResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNatGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNatGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNetworkAclCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNetworkAclResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNetworkAclEntryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateNetworkInsightsAccessScopeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNetworkInsightsAccessScopeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNetworkInsightsPathCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNetworkInsightsPathResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNetworkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNetworkInterfaceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateNetworkInterfacePermissionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateNetworkInterfacePermissionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreatePlacementGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreatePlacementGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreatePublicIpv4PoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreatePublicIpv4PoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateReplaceRootVolumeTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateReplaceRootVolumeTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateReservedInstancesListingCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateReservedInstancesListingResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateRestoreImageTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateRestoreImageTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSecurityGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSecurityGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_Snapshot(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSnapshotsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSnapshotsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSpotDatafeedSubscriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSpotDatafeedSubscriptionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateStoreImageTaskCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateStoreImageTaskResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSubnetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSubnetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateSubnetCidrReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateSubnetCidrReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateTrafficMirrorFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTrafficMirrorFilterResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTrafficMirrorFilterRuleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTrafficMirrorFilterRuleResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTrafficMirrorSessionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTrafficMirrorSessionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTrafficMirrorTargetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTrafficMirrorTargetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayConnectCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayConnectResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayConnectPeerCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayConnectPeerResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayMulticastDomainCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayMulticastDomainResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayPeeringAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayPeeringAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayPolicyTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayPolicyTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayPrefixListReferenceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayPrefixListReferenceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayRouteTableAnnouncementResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateTransitGatewayVpcAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateTransitGatewayVpcAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVerifiedAccessEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVerifiedAccessEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVerifiedAccessGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVerifiedAccessGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVerifiedAccessInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVerifiedAccessInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVerifiedAccessTrustProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVerifiedAccessTrustProviderResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_Volume(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcBlockPublicAccessExclusionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcBlockPublicAccessExclusionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcEndpointConnectionNotificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcEndpointConnectionNotificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcEndpointServiceConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcEndpointServiceConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpcPeeringConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpcPeeringConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpnConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpnConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CreateVpnConnectionRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CreateVpnGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_CreateVpnGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCarrierGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteCarrierGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteClientVpnEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteClientVpnEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteClientVpnRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteClientVpnRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteCoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCoipPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteCoipPoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteCustomerGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteDhcpOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteEgressOnlyInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteEgressOnlyInternetGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteFleetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteFleetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteFlowLogsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteFlowLogsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteFpgaImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteFpgaImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteInstanceConnectEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteInstanceConnectEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteInstanceEventWindowCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteInstanceEventWindowResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteIpamCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteIpamResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteIpamExternalResourceVerificationTokenCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteIpamExternalResourceVerificationTokenResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteIpamPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteIpamPoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteIpamResourceDiscoveryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteIpamResourceDiscoveryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteIpamScopeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteIpamScopeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteKeyPairCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteKeyPairResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLaunchTemplateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLaunchTemplateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLaunchTemplateVersionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLaunchTemplateVersionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLocalGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLocalGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLocalGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLocalGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteManagedPrefixListCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteManagedPrefixListResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNatGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNatGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNetworkAclCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteNetworkAclEntryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteNetworkInsightsAccessScopeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNetworkInsightsAccessScopeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNetworkInsightsAnalysisCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNetworkInsightsAnalysisResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNetworkInsightsPathCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNetworkInsightsPathResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteNetworkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteNetworkInterfacePermissionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteNetworkInterfacePermissionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeletePlacementGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeletePublicIpv4PoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeletePublicIpv4PoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteQueuedReservedInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteQueuedReservedInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSecurityGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteSecurityGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteSnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSpotDatafeedSubscriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSubnetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteSubnetCidrReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteSubnetCidrReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteTrafficMirrorFilterCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTrafficMirrorFilterResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTrafficMirrorFilterRuleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTrafficMirrorFilterRuleResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTrafficMirrorSessionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTrafficMirrorSessionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTrafficMirrorTargetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTrafficMirrorTargetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayConnectCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayConnectResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayConnectPeerCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayConnectPeerResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayMulticastDomainCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayMulticastDomainResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayPeeringAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayPeeringAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayPolicyTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayPolicyTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayPrefixListReferenceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayPrefixListReferenceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayRouteTableAnnouncementResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteTransitGatewayVpcAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteTransitGatewayVpcAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVerifiedAccessEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVerifiedAccessEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVerifiedAccessGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVerifiedAccessGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVerifiedAccessInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVerifiedAccessInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVerifiedAccessTrustProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVerifiedAccessTrustProviderResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVpcBlockPublicAccessExclusionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVpcBlockPublicAccessExclusionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVpcEndpointConnectionNotificationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVpcEndpointConnectionNotificationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVpcEndpointsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVpcEndpointsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVpcEndpointServiceConfigurationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVpcEndpointServiceConfigurationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVpcPeeringConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeleteVpcPeeringConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeleteVpnConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVpnConnectionRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeleteVpnGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeprovisionByoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeprovisionByoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeprovisionIpamByoasnCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeprovisionIpamByoasnResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeprovisionIpamPoolCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeprovisionIpamPoolCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeprovisionPublicIpv4PoolCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeprovisionPublicIpv4PoolCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeregisterImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DeregisterInstanceEventNotificationAttributesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeregisterInstanceEventNotificationAttributesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeregisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAccountAttributesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAccountAttributesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAddressesAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAddressesAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAddressTransfersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAddressTransfersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAggregateIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAggregateIdFormatResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAvailabilityZonesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAvailabilityZonesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeBundleTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeBundleTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeByoipCidrsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeByoipCidrsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityBlockExtensionHistoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityBlockExtensionHistoryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityBlockExtensionOfferingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityBlockExtensionOfferingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityBlockOfferingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityBlockOfferingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityReservationBillingRequestsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityReservationBillingRequestsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityReservationFleetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityReservationFleetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCapacityReservationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCapacityReservationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCarrierGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCarrierGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClassicLinkInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClassicLinkInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClientVpnAuthorizationRulesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClientVpnAuthorizationRulesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClientVpnConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClientVpnConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClientVpnEndpointsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClientVpnEndpointsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClientVpnRoutesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClientVpnRoutesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeClientVpnTargetNetworksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeClientVpnTargetNetworksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCoipPoolsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCoipPoolsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeConversionTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeConversionTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeCustomerGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeCustomerGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeDeclarativePoliciesReportsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeDeclarativePoliciesReportsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeDhcpOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeDhcpOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEgressOnlyInternetGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeEgressOnlyInternetGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeElasticGpusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeElasticGpusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeExportImageTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeExportImageTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeExportTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeExportTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFastLaunchImagesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFastLaunchImagesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFastSnapshotRestoresCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFastSnapshotRestoresResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFleetHistoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFleetHistoryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFleetInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFleetInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFleetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFleetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFlowLogsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFlowLogsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFpgaImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFpgaImageAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeFpgaImagesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeFpgaImagesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeHostReservationOfferingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeHostReservationOfferingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeHostReservationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeHostReservationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeHostsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeHostsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIamInstanceProfileAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIamInstanceProfileAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIdentityIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIdentityIdFormatResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIdFormatResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImageAttribute(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeImagesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeImagesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeImportImageTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeImportImageTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeImportSnapshotTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeImportSnapshotTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_InstanceAttribute(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceConnectEndpointsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceConnectEndpointsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceCreditSpecificationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceCreditSpecificationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceEventNotificationAttributesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceEventNotificationAttributesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceEventWindowsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceEventWindowsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceImageMetadataCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceImageMetadataResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceStatusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceTopologyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceTopologyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceTypeOfferingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceTypeOfferingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInstanceTypesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInstanceTypesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeInternetGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeInternetGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamByoasnCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamByoasnResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamExternalResourceVerificationTokensCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamExternalResourceVerificationTokensResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamPoolsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamPoolsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamResourceDiscoveriesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamResourceDiscoveriesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamResourceDiscoveryAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamResourceDiscoveryAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpamScopesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpamScopesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeIpv6PoolsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeIpv6PoolsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeKeyPairsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeKeyPairsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLaunchTemplatesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLaunchTemplatesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLaunchTemplateVersionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLaunchTemplateVersionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewayRouteTablesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewayRouteTablesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLocalGatewayVirtualInterfacesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLocalGatewayVirtualInterfacesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeLockedSnapshotsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeLockedSnapshotsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeMacHostsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeMacHostsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeManagedPrefixListsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeManagedPrefixListsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeMovingAddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeMovingAddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNatGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNatGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkAclsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkAclsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInsightsAccessScopesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInsightsAccessScopesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInsightsAnalysesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInsightsAnalysesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInsightsPathsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInsightsPathsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInterfaceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInterfaceAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInterfacePermissionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInterfacePermissionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeNetworkInterfacesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeNetworkInterfacesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribePlacementGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribePlacementGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribePrefixListsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribePrefixListsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribePrincipalIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribePrincipalIdFormatResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribePublicIpv4PoolsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribePublicIpv4PoolsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeRegionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeRegionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeReplaceRootVolumeTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeReplaceRootVolumeTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeReservedInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeReservedInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeReservedInstancesListingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeReservedInstancesListingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeReservedInstancesModificationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeReservedInstancesModificationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeReservedInstancesOfferingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeReservedInstancesOfferingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeRouteTablesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeRouteTablesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeScheduledInstanceAvailabilityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeScheduledInstanceAvailabilityResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeScheduledInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeScheduledInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSecurityGroupReferencesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSecurityGroupReferencesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSecurityGroupRulesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSecurityGroupRulesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSecurityGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSecurityGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSecurityGroupVpcAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSecurityGroupVpcAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSnapshotAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSnapshotAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSnapshotsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSnapshotsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSnapshotTierStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSnapshotTierStatusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotDatafeedSubscriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotDatafeedSubscriptionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotFleetInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotFleetInstancesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotFleetRequestHistoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotFleetRequestHistoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotFleetRequestsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotFleetRequestsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotInstanceRequestsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotInstanceRequestsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSpotPriceHistoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSpotPriceHistoryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeStaleSecurityGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeStaleSecurityGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeStoreImageTasksCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeStoreImageTasksResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeSubnetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeSubnetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTagsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTagsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTrafficMirrorFilterRulesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTrafficMirrorFilterRulesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTrafficMirrorFiltersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTrafficMirrorFiltersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTrafficMirrorSessionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTrafficMirrorSessionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTrafficMirrorTargetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTrafficMirrorTargetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayAttachmentsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayAttachmentsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayConnectPeersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayConnectPeersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayConnectsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayConnectsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayMulticastDomainsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayMulticastDomainsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayPeeringAttachmentsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayPeeringAttachmentsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayPolicyTablesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayPolicyTablesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayRouteTableAnnouncementsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayRouteTablesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayRouteTablesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTransitGatewayVpcAttachmentsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTransitGatewayVpcAttachmentsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeTrunkInterfaceAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeTrunkInterfaceAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVerifiedAccessEndpointsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVerifiedAccessEndpointsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVerifiedAccessGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVerifiedAccessGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVerifiedAccessInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVerifiedAccessInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVerifiedAccessTrustProvidersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVerifiedAccessTrustProvidersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVolumeAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVolumeAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVolumesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVolumesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVolumesModificationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVolumesModificationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVolumeStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVolumeStatusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcBlockPublicAccessExclusionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcBlockPublicAccessExclusionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcBlockPublicAccessOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcBlockPublicAccessOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcClassicLinkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcClassicLinkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcClassicLinkDnsSupportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcClassicLinkDnsSupportResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointConnectionNotificationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointConnectionNotificationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointServiceConfigurationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointServiceConfigurationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointServicePermissionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointServicePermissionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcEndpointServicesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcEndpointServicesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcPeeringConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcPeeringConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpcsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpcsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpnConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpnConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeVpnGatewaysCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DescribeVpnGatewaysResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DetachClassicLinkVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DetachClassicLinkVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DetachInternetGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DetachNetworkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DetachVerifiedAccessTrustProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DetachVerifiedAccessTrustProviderResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DetachVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_VolumeAttachment(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DetachVpnGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisableAddressTransferCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableAddressTransferResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableAllowedImagesSettingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableAllowedImagesSettingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableEbsEncryptionByDefaultCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableEbsEncryptionByDefaultResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableFastLaunchCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableFastLaunchResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableFastSnapshotRestoresCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableFastSnapshotRestoresResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableImageBlockPublicAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableImageBlockPublicAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableImageDeprecationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableImageDeprecationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableImageDeregistrationProtectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableImageDeregistrationProtectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableIpamOrganizationAdminAccountCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableIpamOrganizationAdminAccountResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableSerialConsoleAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableSerialConsoleAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableSnapshotBlockPublicAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableSnapshotBlockPublicAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableTransitGatewayRouteTablePropagationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableVgwRoutePropagationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisableVpcClassicLinkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableVpcClassicLinkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableVpcClassicLinkDnsSupportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisableVpcClassicLinkDnsSupportResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisassociateCapacityReservationBillingOwnerCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateCapacityReservationBillingOwnerResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateClientVpnTargetNetworkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateClientVpnTargetNetworkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateEnclaveCertificateIamRoleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateEnclaveCertificateIamRoleResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateIamInstanceProfileCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateIamInstanceProfileResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateInstanceEventWindowCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateInstanceEventWindowResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateIpamByoasnCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateIpamByoasnResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateIpamResourceDiscoveryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateIpamResourceDiscoveryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateNatGatewayAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateNatGatewayAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_DisassociateSecurityGroupVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateSecurityGroupVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateSubnetCidrBlockCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateSubnetCidrBlockResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateTransitGatewayMulticastDomainCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateTransitGatewayMulticastDomainResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateTransitGatewayPolicyTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateTransitGatewayPolicyTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateTransitGatewayRouteTableCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateTransitGatewayRouteTableResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateTrunkInterfaceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateTrunkInterfaceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisassociateVpcCidrBlockCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_DisassociateVpcCidrBlockResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableAddressTransferCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableAddressTransferResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableAllowedImagesSettingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableAllowedImagesSettingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableEbsEncryptionByDefaultCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableEbsEncryptionByDefaultResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableFastLaunchCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableFastLaunchResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableFastSnapshotRestoresCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableFastSnapshotRestoresResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableImageBlockPublicAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableImageBlockPublicAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableImageDeprecationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableImageDeprecationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableImageDeregistrationProtectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableImageDeregistrationProtectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableIpamOrganizationAdminAccountCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableIpamOrganizationAdminAccountResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableReachabilityAnalyzerOrganizationSharingCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableReachabilityAnalyzerOrganizationSharingResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableSerialConsoleAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableSerialConsoleAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableSnapshotBlockPublicAccessCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableSnapshotBlockPublicAccessResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableTransitGatewayRouteTablePropagationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableVgwRoutePropagationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EnableVolumeIOCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EnableVpcClassicLinkCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableVpcClassicLinkResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_EnableVpcClassicLinkDnsSupportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_EnableVpcClassicLinkDnsSupportResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ExportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ExportClientVpnClientCertificateRevocationListResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ExportClientVpnClientConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ExportClientVpnClientConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ExportImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ExportImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ExportTransitGatewayRoutesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ExportTransitGatewayRoutesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ExportVerifiedAccessInstanceClientConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ExportVerifiedAccessInstanceClientConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAllowedImagesSettingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAllowedImagesSettingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAssociatedEnclaveCertificateIamRolesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAssociatedEnclaveCertificateIamRolesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAssociatedIpv6PoolCidrsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAssociatedIpv6PoolCidrsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetAwsNetworkPerformanceDataCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetAwsNetworkPerformanceDataResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCapacityReservationUsageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetCapacityReservationUsageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetCoipPoolUsageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetCoipPoolUsageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetConsoleOutputCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetConsoleOutputResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetConsoleScreenshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetConsoleScreenshotResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetDeclarativePoliciesReportSummaryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetDeclarativePoliciesReportSummaryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetDefaultCreditSpecificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetDefaultCreditSpecificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetEbsDefaultKmsKeyIdCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetEbsDefaultKmsKeyIdResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetEbsEncryptionByDefaultCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetEbsEncryptionByDefaultResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetFlowLogsIntegrationTemplateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetFlowLogsIntegrationTemplateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetGroupsForCapacityReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetGroupsForCapacityReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetHostReservationPurchasePreviewCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetHostReservationPurchasePreviewResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetImageBlockPublicAccessStateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetImageBlockPublicAccessStateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetInstanceMetadataDefaultsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetInstanceMetadataDefaultsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetInstanceTpmEkPubCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetInstanceTpmEkPubResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetInstanceTypesFromInstanceRequirementsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetInstanceTypesFromInstanceRequirementsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetInstanceUefiDataCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetInstanceUefiDataResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamAddressHistoryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamAddressHistoryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamDiscoveredAccountsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamDiscoveredAccountsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamDiscoveredPublicAddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamDiscoveredPublicAddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamDiscoveredResourceCidrsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamDiscoveredResourceCidrsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamPoolAllocationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamPoolAllocationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamPoolCidrsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamPoolCidrsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetIpamResourceCidrsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetIpamResourceCidrsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetLaunchTemplateDataCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetLaunchTemplateDataResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetManagedPrefixListAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetManagedPrefixListAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetManagedPrefixListEntriesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetManagedPrefixListEntriesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetNetworkInsightsAccessScopeContentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetNetworkInsightsAccessScopeContentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetPasswordDataCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetPasswordDataResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetReservedInstancesExchangeQuoteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetReservedInstancesExchangeQuoteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSecurityGroupsForVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSecurityGroupsForVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSerialConsoleAccessStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSerialConsoleAccessStatusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSnapshotBlockPublicAccessStateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSnapshotBlockPublicAccessStateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSpotPlacementScoresCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSpotPlacementScoresResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetSubnetCidrReservationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetSubnetCidrReservationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayAttachmentPropagationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayAttachmentPropagationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayPolicyTableAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayPolicyTableAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayPolicyTableEntriesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayPolicyTableEntriesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayPrefixListReferencesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayPrefixListReferencesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayRouteTableAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayRouteTableAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetTransitGatewayRouteTablePropagationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetTransitGatewayRouteTablePropagationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVerifiedAccessEndpointPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVerifiedAccessEndpointPolicyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVerifiedAccessEndpointTargetsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVerifiedAccessEndpointTargetsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVerifiedAccessGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVerifiedAccessGroupPolicyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVpnConnectionDeviceSampleConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVpnConnectionDeviceSampleConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVpnConnectionDeviceTypesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVpnConnectionDeviceTypesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_GetVpnTunnelReplacementStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_GetVpnTunnelReplacementStatusResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportClientVpnClientCertificateRevocationListResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportKeyPairCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportKeyPairResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportSnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportSnapshotResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ImportVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ImportVolumeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListImagesInRecycleBinCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListImagesInRecycleBinResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ListSnapshotsInRecycleBinCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ListSnapshotsInRecycleBinResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_LockSnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_LockSnapshotResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyAddressAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyAddressAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyAvailabilityZoneGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyAvailabilityZoneGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyCapacityReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyCapacityReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyCapacityReservationFleetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyCapacityReservationFleetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyClientVpnEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyClientVpnEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyDefaultCreditSpecificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyDefaultCreditSpecificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyEbsDefaultKmsKeyIdCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyEbsDefaultKmsKeyIdResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyFleetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyFleetResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyFpgaImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyFpgaImageAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyHostsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyHostsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIdentityIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyIdFormatCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyInstanceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyInstanceCapacityReservationAttributesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceCapacityReservationAttributesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceCpuOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceCpuOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceCreditSpecificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceCreditSpecificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceEventStartTimeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceEventStartTimeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceEventWindowCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceEventWindowResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceMaintenanceOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceMaintenanceOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceMetadataDefaultsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceMetadataDefaultsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceMetadataOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceMetadataOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstanceNetworkPerformanceOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstanceNetworkPerformanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyInstancePlacementCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyInstancePlacementResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIpamCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyIpamResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIpamPoolCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyIpamPoolResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIpamResourceCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyIpamResourceCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIpamResourceDiscoveryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyIpamResourceDiscoveryResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyIpamScopeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyIpamScopeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyLaunchTemplateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyLaunchTemplateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyLocalGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyLocalGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyManagedPrefixListCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyManagedPrefixListResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyNetworkInterfaceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyPrivateDnsNameOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyPrivateDnsNameOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyReservedInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyReservedInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifySecurityGroupRulesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifySecurityGroupRulesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifySnapshotAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifySnapshotTierCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifySnapshotTierResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifySpotFleetRequestCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifySpotFleetRequestResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifySubnetAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyTrafficMirrorFilterNetworkServicesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyTrafficMirrorFilterRuleCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTrafficMirrorFilterRuleResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyTrafficMirrorSessionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTrafficMirrorSessionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyTransitGatewayCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTransitGatewayResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyTransitGatewayPrefixListReferenceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTransitGatewayPrefixListReferenceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyTransitGatewayVpcAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyTransitGatewayVpcAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessEndpointPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessEndpointPolicyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessGroupCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessGroupResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessGroupPolicyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessGroupPolicyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessInstanceCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessInstanceResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessInstanceLoggingConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVerifiedAccessTrustProviderCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVerifiedAccessTrustProviderResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVolumeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVolumeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVolumeAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyVpcAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ModifyVpcBlockPublicAccessExclusionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcBlockPublicAccessExclusionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcBlockPublicAccessOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcBlockPublicAccessOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcEndpointCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcEndpointResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcEndpointConnectionNotificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcEndpointConnectionNotificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcEndpointServiceConfigurationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcEndpointServiceConfigurationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcEndpointServicePayerResponsibilityCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcEndpointServicePermissionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcEndpointServicePermissionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcPeeringConnectionOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcPeeringConnectionOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpcTenancyCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpcTenancyResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpnConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpnConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpnConnectionOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpnConnectionOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpnTunnelCertificateCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpnTunnelCertificateResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ModifyVpnTunnelOptionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ModifyVpnTunnelOptionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_MonitorInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_MonitorInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_MoveAddressToVpcCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_MoveAddressToVpcResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_MoveByoipCidrToIpamCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_MoveByoipCidrToIpamResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_MoveCapacityReservationInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_MoveCapacityReservationInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ProvisionByoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ProvisionByoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ProvisionIpamByoasnCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ProvisionIpamByoasnResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ProvisionIpamPoolCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ProvisionIpamPoolCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ProvisionPublicIpv4PoolCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ProvisionPublicIpv4PoolCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PurchaseCapacityBlockCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_PurchaseCapacityBlockResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PurchaseCapacityBlockExtensionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_PurchaseCapacityBlockExtensionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PurchaseHostReservationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_PurchaseHostReservationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PurchaseReservedInstancesOfferingCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_PurchaseReservedInstancesOfferingResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_PurchaseScheduledInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_PurchaseScheduledInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RebootInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RegisterImageCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RegisterImageResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RegisterInstanceEventNotificationAttributesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RegisterInstanceEventNotificationAttributesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RegisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RegisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RegisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectCapacityReservationBillingOwnershipCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectCapacityReservationBillingOwnershipResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectTransitGatewayPeeringAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectTransitGatewayPeeringAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectTransitGatewayVpcAttachmentCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectTransitGatewayVpcAttachmentResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectVpcEndpointConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectVpcEndpointConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RejectVpcPeeringConnectionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RejectVpcPeeringConnectionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReleaseAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ReleaseHostsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReleaseHostsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReleaseIpamPoolAllocationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReleaseIpamPoolAllocationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceIamInstanceProfileAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceIamInstanceProfileAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceImageCriteriaInAllowedImagesSettingsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceImageCriteriaInAllowedImagesSettingsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceNetworkAclAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceNetworkAclAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceNetworkAclEntryCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ReplaceRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ReplaceRouteTableAssociationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceRouteTableAssociationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceTransitGatewayRouteCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceTransitGatewayRouteResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReplaceVpnTunnelCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ReplaceVpnTunnelResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ReportInstanceStatusCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RequestSpotFleetCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RequestSpotFleetResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RequestSpotInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RequestSpotInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ResetAddressAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ResetAddressAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ResetEbsDefaultKmsKeyIdCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ResetEbsDefaultKmsKeyIdResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ResetFpgaImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_ResetFpgaImageAttributeResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_ResetImageAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ResetInstanceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ResetNetworkInterfaceAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_ResetSnapshotAttributeCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_RestoreAddressToClassicCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RestoreAddressToClassicResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RestoreImageFromRecycleBinCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RestoreImageFromRecycleBinResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RestoreManagedPrefixListVersionCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RestoreManagedPrefixListVersionResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RestoreSnapshotFromRecycleBinCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RestoreSnapshotFromRecycleBinResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RestoreSnapshotTierCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RestoreSnapshotTierResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RevokeClientVpnIngressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RevokeClientVpnIngressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RevokeSecurityGroupEgressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RevokeSecurityGroupEgressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RevokeSecurityGroupIngressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RevokeSecurityGroupIngressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RunInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_Reservation(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_RunScheduledInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_RunScheduledInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SearchLocalGatewayRoutesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_SearchLocalGatewayRoutesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SearchTransitGatewayMulticastGroupsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_SearchTransitGatewayMulticastGroupsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SearchTransitGatewayRoutesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_SearchTransitGatewayRoutesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_SendDiagnosticInterruptCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_StartDeclarativePoliciesReportCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StartDeclarativePoliciesReportResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StartInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StartNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartNetworkInsightsAnalysisCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StartNetworkInsightsAnalysisResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StartVpcEndpointServicePrivateDnsVerificationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_StopInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_StopInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TerminateClientVpnConnectionsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_TerminateClientVpnConnectionsResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_TerminateInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_TerminateInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UnassignIpv6AddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UnassignIpv6AddressesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UnassignPrivateIpAddressesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_UnassignPrivateNatGatewayAddressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UnassignPrivateNatGatewayAddressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UnlockSnapshotCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UnlockSnapshotResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UnmonitorInstancesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UnmonitorInstancesResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_WithdrawByoipCidrCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseXmlBody(output.body, context);
  let contents = {};
  contents = de_WithdrawByoipCidrResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseXmlErrorBody(output.body, context)
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode
  });
};
var se_AcceleratorCount = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_AcceleratorCountRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_AcceleratorManufacturerSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AcceleratorNameSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AcceleratorTotalMemoryMiB = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_AcceleratorTotalMemoryMiBRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_AcceleratorTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AcceptAddressTransferRequest = (input, context) => {
  const entries = {};
  if (input[_Ad] != null) {
    entries[_Ad] = input[_Ad];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AcceptCapacityReservationBillingOwnershipRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  return entries;
};
var se_AcceptReservedInstancesExchangeQuoteRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RII] != null) {
    const memberEntries = se_ReservedInstanceIdSet(input[_RII], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TC] != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input[_TC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AcceptTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_ValueStringList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AcceptTransitGatewayPeeringAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AcceptTransitGatewayVpcAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AcceptVpcEndpointConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AcceptVpcPeeringConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};
var se_AccessScopePathListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AccessScopePathRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_AccessScopePathRequest = (input, context) => {
  const entries = {};
  if (input[_S] != null) {
    const memberEntries = se_PathStatementRequest(input[_S], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Source.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_D] != null) {
    const memberEntries = se_PathStatementRequest(input[_D], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Destination.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TR] != null) {
    const memberEntries = se_ThroughResourcesStatementRequestList(input[_TR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AccountAttributeNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AttributeName.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AddIpamOperatingRegion = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_AddIpamOperatingRegionSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_AddIpamOrganizationalUnitExclusion = (input, context) => {
  const entries = {};
  if (input[_OEP] != null) {
    entries[_OEP] = input[_OEP];
  }
  return entries;
};
var se_AddIpamOrganizationalUnitExclusionSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddIpamOrganizationalUnitExclusion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_AddPrefixListEntries = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddPrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_AddPrefixListEntry = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};
var se_AdvertiseByoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  return entries;
};
var se_AllocateAddressRequest = (input, context) => {
  const entries = {};
  if (input[_Do] != null) {
    entries[_Do] = input[_Do];
  }
  if (input[_Ad] != null) {
    entries[_Ad] = input[_Ad];
  }
  if (input[_PIP] != null) {
    entries[_PIP] = input[_PIP];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  if (input[_COIP] != null) {
    entries[_COIP] = input[_COIP];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AllocateHostsRequest = (input, context) => {
  const entries = {};
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HR] != null) {
    entries[_HR] = input[_HR];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_HM] != null) {
    entries[_HM] = input[_HM];
  }
  if (input[_AI] != null) {
    const memberEntries = se_AssetIdList(input[_AI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AP] != null) {
    entries[_AP] = input[_AP];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_Q] != null) {
    entries[_Q] = input[_Q];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  return entries;
};
var se_AllocateIpamPoolCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PNC] != null) {
    entries[_PNC] = input[_PNC];
  }
  if (input[_AC] != null) {
    const memberEntries = se_IpamPoolAllocationAllowedCidrs(input[_AC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedCidr.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DC] != null) {
    const memberEntries = se_IpamPoolAllocationDisallowedCidrs(input[_DC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AllocationIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AllocationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AllocationIds = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AllowedInstanceTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ApplySecurityGroupsToClientVpnTargetNetworkRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ArchitectureTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ArnList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AsnAuthorizationContext = (input, context) => {
  const entries = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};
var se_AssetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AssignIpv6AddressesRequest = (input, context) => {
  const entries = {};
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_IP] != null) {
    const memberEntries = se_IpPrefixList(input[_IP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_IA] != null) {
    const memberEntries = se_Ipv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  return entries;
};
var se_AssignPrivateIpAddressesRequest = (input, context) => {
  const entries = {};
  if (input[_IPp] != null) {
    const memberEntries = se_IpPrefixList(input[_IPp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressStringList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_AR] != null) {
    entries[_AR] = input[_AR];
  }
  return entries;
};
var se_AssignPrivateNatGatewayAddressRequest = (input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAC] != null) {
    entries[_PIAC] = input[_PIAC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateAddressRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_ARl] != null) {
    entries[_ARl] = input[_ARl];
  }
  return entries;
};
var se_AssociateCapacityReservationBillingOwnerRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_URBOI] != null) {
    entries[_URBOI] = input[_URBOI];
  }
  return entries;
};
var se_AssociateClientVpnTargetNetworkRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateDhcpOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DOI] != null) {
    entries[_DOI] = input[_DOI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateEnclaveCertificateIamRoleRequest = (input, context) => {
  const entries = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_RAo] != null) {
    entries[_RAo] = input[_RAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateIamInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};
var se_AssociateInstanceEventWindowRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_AT] != null) {
    const memberEntries = se_InstanceEventWindowAssociationRequest(input[_AT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AssociateIpamByoasnRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};
var se_AssociateIpamResourceDiscoveryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_AssociateNatGatewayAddressRequest = (input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};
var se_AssociateSecurityGroupVpcRequest = (input, context) => {
  const entries = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateSubnetCidrBlockRequest = (input, context) => {
  const entries = {};
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  return entries;
};
var se_AssociateTransitGatewayMulticastDomainRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateTransitGatewayPolicyTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateTransitGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateTrunkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_BII] != null) {
    entries[_BII] = input[_BII];
  }
  if (input[_TII] != null) {
    entries[_TII] = input[_TII];
  }
  if (input[_VIl] != null) {
    entries[_VIl] = input[_VIl];
  }
  if (input[_GK] != null) {
    entries[_GK] = input[_GK];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AssociateVpcCidrBlockRequest = (input, context) => {
  const entries = {};
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_ICBNBG] != null) {
    entries[_ICBNBG] = input[_ICBNBG];
  }
  if (input[_IPpv] != null) {
    entries[_IPpv] = input[_IPpv];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_APICB] != null) {
    entries[_APICB] = input[_APICB];
  }
  return entries;
};
var se_AssociationIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AssociationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_AthenaIntegration = (input, context) => {
  const entries = {};
  if (input[_IRSDA] != null) {
    entries[_IRSDA] = input[_IRSDA];
  }
  if (input[_PLF] != null) {
    entries[_PLF] = input[_PLF];
  }
  if (input[_PSD] != null) {
    entries[_PSD] = serializeDateTime(input[_PSD]);
  }
  if (input[_PED] != null) {
    entries[_PED] = serializeDateTime(input[_PED]);
  }
  return entries;
};
var se_AthenaIntegrationsSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AthenaIntegration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_AttachClassicLinkVpcRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_G] != null) {
    const memberEntries = se_GroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AttachInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_AttachNetworkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecification(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  return entries;
};
var se_AttachVerifiedAccessTrustProviderRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AttachVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_Dev] != null) {
    entries[_Dev] = input[_Dev];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AttachVpnGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AttributeBooleanValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_AttributeValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_AuthorizeClientVpnIngressRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TNC] != null) {
    entries[_TNC] = input[_TNC];
  }
  if (input[_AGI] != null) {
    entries[_AGI] = input[_AGI];
  }
  if (input[_AAG] != null) {
    entries[_AAG] = input[_AAG];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AuthorizeSecurityGroupEgressRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_AuthorizeSecurityGroupIngressRequest = (input, context) => {
  const entries = {};
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_AvailabilityZoneStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_BaselineEbsBandwidthMbps = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_BaselineEbsBandwidthMbpsRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_BaselinePerformanceFactors = (input, context) => {
  const entries = {};
  if (input[_Cp] != null) {
    const memberEntries = se_CpuPerformanceFactor(input[_Cp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Cpu.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_BaselinePerformanceFactorsRequest = (input, context) => {
  const entries = {};
  if (input[_Cp] != null) {
    const memberEntries = se_CpuPerformanceFactorRequest(input[_Cp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Cpu.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_BillingProductList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_BlobAttributeValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = context.base64Encoder(input[_Va]);
  }
  return entries;
};
var se_BlockDeviceMapping = (input, context) => {
  const entries = {};
  if (input[_E] != null) {
    const memberEntries = se_EbsBlockDevice(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  return entries;
};
var se_BlockDeviceMappingList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_BlockDeviceMappingRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_BundleIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`BundleId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_BundleInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_St] != null) {
    const memberEntries = se_Storage(input[_St], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Storage.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CancelBundleTaskRequest = (input, context) => {
  const entries = {};
  if (input[_BIu] != null) {
    entries[_BIu] = input[_BIu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CancelCapacityReservationFleetsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRFI] != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CancelCapacityReservationRequest = (input, context) => {
  const entries = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CancelConversionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTI] != null) {
    entries[_CTI] = input[_CTI];
  }
  if (input[_RM] != null) {
    entries[_RM] = input[_RM];
  }
  return entries;
};
var se_CancelDeclarativePoliciesReportRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIep] != null) {
    entries[_RIep] = input[_RIep];
  }
  return entries;
};
var se_CancelExportTaskRequest = (input, context) => {
  const entries = {};
  if (input[_ETI] != null) {
    entries[_ETI] = input[_ETI];
  }
  return entries;
};
var se_CancelImageLaunchPermissionRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CancelImportTaskRequest = (input, context) => {
  const entries = {};
  if (input[_CRa] != null) {
    entries[_CRa] = input[_CRa];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITI] != null) {
    entries[_ITI] = input[_ITI];
  }
  return entries;
};
var se_CancelReservedInstancesListingRequest = (input, context) => {
  const entries = {};
  if (input[_RILI] != null) {
    entries[_RILI] = input[_RILI];
  }
  return entries;
};
var se_CancelSpotFleetRequestsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRI] != null) {
    const memberEntries = se_SpotFleetRequestIdList(input[_SFRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TI] != null) {
    entries[_TI] = input[_TI];
  }
  return entries;
};
var se_CancelSpotInstanceRequestsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIRI] != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CapacityReservationFleetIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CapacityReservationIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CapacityReservationOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_USs] != null) {
    entries[_USs] = input[_USs];
  }
  return entries;
};
var se_CapacityReservationSpecification = (input, context) => {
  const entries = {};
  if (input[_CRP] != null) {
    entries[_CRP] = input[_CRP];
  }
  if (input[_CRTa] != null) {
    const memberEntries = se_CapacityReservationTarget(input[_CRTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CapacityReservationTarget = (input, context) => {
  const entries = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_CRRGA] != null) {
    entries[_CRRGA] = input[_CRRGA];
  }
  return entries;
};
var se_CarrierGatewayIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CertificateAuthenticationRequest = (input, context) => {
  const entries = {};
  if (input[_CRCCA] != null) {
    entries[_CRCCA] = input[_CRCCA];
  }
  return entries;
};
var se_CidrAuthorizationContext = (input, context) => {
  const entries = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};
var se_ClassicLoadBalancer = (input, context) => {
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};
var se_ClassicLoadBalancers = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClassicLoadBalancer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ClassicLoadBalancersConfig = (input, context) => {
  const entries = {};
  if (input[_CLB] != null) {
    const memberEntries = se_ClassicLoadBalancers(input[_CLB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ClientConnectOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_LFA] != null) {
    entries[_LFA] = input[_LFA];
  }
  return entries;
};
var se_ClientData = (input, context) => {
  const entries = {};
  if (input[_Co] != null) {
    entries[_Co] = input[_Co];
  }
  if (input[_UE] != null) {
    entries[_UE] = serializeDateTime(input[_UE]);
  }
  if (input[_USp] != null) {
    entries[_USp] = serializeFloat(input[_USp]);
  }
  if (input[_USpl] != null) {
    entries[_USpl] = serializeDateTime(input[_USpl]);
  }
  return entries;
};
var se_ClientLoginBannerOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_BT] != null) {
    entries[_BT] = input[_BT];
  }
  return entries;
};
var se_ClientVpnAuthenticationRequest = (input, context) => {
  const entries = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_AD] != null) {
    const memberEntries = se_DirectoryServiceAuthenticationRequest(input[_AD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActiveDirectory.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MA] != null) {
    const memberEntries = se_CertificateAuthenticationRequest(input[_MA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FA] != null) {
    const memberEntries = se_FederatedAuthenticationRequest(input[_FA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FederatedAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ClientVpnAuthenticationRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClientVpnAuthenticationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ClientVpnEndpointIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ClientVpnSecurityGroupIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CloudWatchLogOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_LE] != null) {
    entries[_LE] = input[_LE];
  }
  if (input[_LGA] != null) {
    entries[_LGA] = input[_LGA];
  }
  if (input[_LOF] != null) {
    entries[_LOF] = input[_LOF];
  }
  return entries;
};
var se_CoipPoolIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ConfirmProductInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PC] != null) {
    entries[_PC] = input[_PC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ConnectionLogOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_CLG] != null) {
    entries[_CLG] = input[_CLG];
  }
  if (input[_CLS] != null) {
    entries[_CLS] = input[_CLS];
  }
  return entries;
};
var se_ConnectionNotificationIdsList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ConnectionTrackingSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_TET] != null) {
    entries[_TET] = input[_TET];
  }
  if (input[_UST] != null) {
    entries[_UST] = input[_UST];
  }
  if (input[_UT] != null) {
    entries[_UT] = input[_UT];
  }
  return entries;
};
var se_ConversionIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CopyFpgaImageRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFII] != null) {
    entries[_SFII] = input[_SFII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CopyImageRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_SII] != null) {
    entries[_SII] = input[_SII];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_DOA] != null) {
    entries[_DOA] = input[_DOA];
  }
  if (input[_CITo] != null) {
    entries[_CITo] = input[_CITo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CopySnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DOA] != null) {
    entries[_DOA] = input[_DOA];
  }
  if (input[_DRes] != null) {
    entries[_DRes] = input[_DRes];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_PU] != null) {
    entries[_PU] = input[_PU];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_SSI] != null) {
    entries[_SSI] = input[_SSI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CDM] != null) {
    entries[_CDM] = input[_CDM];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CpuManufacturerSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CpuOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_TPC] != null) {
    entries[_TPC] = input[_TPC];
  }
  if (input[_ASS] != null) {
    entries[_ASS] = input[_ASS];
  }
  return entries;
};
var se_CpuPerformanceFactor = (input, context) => {
  const entries = {};
  if (input[_R] != null) {
    const memberEntries = se_PerformanceFactorReferenceSet(input[_R], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReferenceSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CpuPerformanceFactorRequest = (input, context) => {
  const entries = {};
  if (input[_R] != null) {
    const memberEntries = se_PerformanceFactorReferenceSetRequest(input[_R], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Reference.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateCapacityReservationBySplittingRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SCRI] != null) {
    entries[_SCRI] = input[_SCRI];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateCapacityReservationFleetRequest = (input, context) => {
  const entries = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ITS] != null) {
    const memberEntries = se_ReservationFleetInstanceSpecificationList(input[_ITS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ED] != null) {
    entries[_ED] = serializeDateTime(input[_ED]);
  }
  if (input[_IMC] != null) {
    entries[_IMC] = input[_IMC];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateCapacityReservationRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_ES] != null) {
    entries[_ES] = input[_ES];
  }
  if (input[_ED] != null) {
    entries[_ED] = serializeDateTime(input[_ED]);
  }
  if (input[_EDT] != null) {
    entries[_EDT] = input[_EDT];
  }
  if (input[_IMC] != null) {
    entries[_IMC] = input[_IMC];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_PGA] != null) {
    entries[_PGA] = input[_PGA];
  }
  if (input[_SD] != null) {
    entries[_SD] = serializeDateTime(input[_SD]);
  }
  if (input[_CD] != null) {
    entries[_CD] = input[_CD];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  return entries;
};
var se_CreateCarrierGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateClientVpnEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_CCB] != null) {
    entries[_CCB] = input[_CCB];
  }
  if (input[_SCA] != null) {
    entries[_SCA] = input[_SCA];
  }
  if (input[_AO] != null) {
    const memberEntries = se_ClientVpnAuthenticationRequestList(input[_AO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CLO] != null) {
    const memberEntries = se_ConnectionLogOptions(input[_CLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DSn] != null) {
    const memberEntries = se_ValueStringList(input[_DSn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TPr] != null) {
    entries[_TPr] = input[_TPr];
  }
  if (input[_VP] != null) {
    entries[_VP] = input[_VP];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SSP] != null) {
    entries[_SSP] = input[_SSP];
  }
  if (input[_CCO] != null) {
    const memberEntries = se_ClientConnectOptions(input[_CCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_STH] != null) {
    entries[_STH] = input[_STH];
  }
  if (input[_CLBO] != null) {
    const memberEntries = se_ClientLoginBannerOptions(input[_CLBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOST] != null) {
    entries[_DOST] = input[_DOST];
  }
  return entries;
};
var se_CreateClientVpnRouteRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TVSI] != null) {
    entries[_TVSI] = input[_TVSI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateCoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateCoipPoolRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateCustomerGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_BA] != null) {
    entries[_BA] = input[_BA];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_IAp] != null) {
    entries[_IAp] = input[_IAp];
  }
  if (input[_BAE] != null) {
    entries[_BAE] = input[_BAE];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateDefaultSubnetRequest = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IN] != null) {
    entries[_IN] = input[_IN];
  }
  return entries;
};
var se_CreateDefaultVpcRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateDhcpOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DCh] != null) {
    const memberEntries = se_NewDhcpConfigurationList(input[_DCh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateEgressOnlyInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateFleetRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SO] != null) {
    const memberEntries = se_SpotOptionsRequest(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ODO] != null) {
    const memberEntries = se_OnDemandOptionsRequest(input[_ODO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OnDemandOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_LTC] != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TCS] != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TIWE] != null) {
    entries[_TIWE] = input[_TIWE];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = serializeDateTime(input[_VF]);
  }
  if (input[_VU] != null) {
    entries[_VU] = serializeDateTime(input[_VU]);
  }
  if (input[_RUI] != null) {
    entries[_RUI] = input[_RUI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  return entries;
};
var se_CreateFlowLogsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DLPA] != null) {
    entries[_DLPA] = input[_DLPA];
  }
  if (input[_DCAR] != null) {
    entries[_DCAR] = input[_DCAR];
  }
  if (input[_LGN] != null) {
    entries[_LGN] = input[_LGN];
  }
  if (input[_RIes] != null) {
    const memberEntries = se_FlowLogResourceIds(input[_RIes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_TT] != null) {
    entries[_TT] = input[_TT];
  }
  if (input[_LDT] != null) {
    entries[_LDT] = input[_LDT];
  }
  if (input[_LD] != null) {
    entries[_LD] = input[_LD];
  }
  if (input[_LF] != null) {
    entries[_LF] = input[_LF];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MAI] != null) {
    entries[_MAI] = input[_MAI];
  }
  if (input[_DO] != null) {
    const memberEntries = se_DestinationOptionsRequest(input[_DO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateFpgaImageRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISL] != null) {
    const memberEntries = se_StorageLocation(input[_ISL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InputStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSL] != null) {
    const memberEntries = se_StorageLocation(input[_LSL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogsStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateImageRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_NR] != null) {
    entries[_NR] = input[_NR];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateInstanceConnectEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringListRequest(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PCI] != null) {
    entries[_PCI] = input[_PCI];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateInstanceEventWindowRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_TRi] != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CE] != null) {
    entries[_CE] = input[_CE];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateInstanceExportTaskRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_TE] != null) {
    entries[_TE] = input[_TE];
  }
  if (input[_ETST] != null) {
    const memberEntries = se_ExportToS3TaskSpecification(input[_ETST], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportToS3.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateIpamExternalResourceVerificationTokenRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateIpamPoolRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_L] != null) {
    entries[_L] = input[_L];
  }
  if (input[_SIPI] != null) {
    entries[_SIPI] = input[_SIPI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AF] != null) {
    entries[_AF] = input[_AF];
  }
  if (input[_AIu] != null) {
    entries[_AIu] = input[_AIu];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_AMNL] != null) {
    entries[_AMNL] = input[_AMNL];
  }
  if (input[_AMNLl] != null) {
    entries[_AMNLl] = input[_AMNLl];
  }
  if (input[_ADNL] != null) {
    entries[_ADNL] = input[_ADNL];
  }
  if (input[_ARTl] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_ARTl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ASw] != null) {
    entries[_ASw] = input[_ASw];
  }
  if (input[_PIS] != null) {
    entries[_PIS] = input[_PIS];
  }
  if (input[_SRo] != null) {
    const memberEntries = se_IpamPoolSourceResourceRequest(input[_SRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceResource.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateIpamRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_OR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_Ti] != null) {
    entries[_Ti] = input[_Ti];
  }
  if (input[_EPG] != null) {
    entries[_EPG] = input[_EPG];
  }
  return entries;
};
var se_CreateIpamResourceDiscoveryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_OR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateIpamScopeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateKeyPairRequest = (input, context) => {
  const entries = {};
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_KT] != null) {
    entries[_KT] = input[_KT];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KF] != null) {
    entries[_KF] = input[_KF];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateLaunchTemplateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_VD] != null) {
    entries[_VD] = input[_VD];
  }
  if (input[_LTD] != null) {
    const memberEntries = se_RequestLaunchTemplateData(input[_LTD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_OperatorRequest(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Operator.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateLaunchTemplateVersionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_SV] != null) {
    entries[_SV] = input[_SV];
  }
  if (input[_VD] != null) {
    entries[_VD] = input[_VD];
  }
  if (input[_LTD] != null) {
    const memberEntries = se_RequestLaunchTemplateData(input[_LTD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RAe] != null) {
    entries[_RAe] = input[_RAe];
  }
  return entries;
};
var se_CreateLocalGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};
var se_CreateLocalGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_Mo] != null) {
    entries[_Mo] = input[_Mo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateManagedPrefixListRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLN] != null) {
    entries[_PLN] = input[_PLN];
  }
  if (input[_Ent] != null) {
    const memberEntries = se_AddPrefixListEntries(input[_Ent], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ME] != null) {
    entries[_ME] = input[_ME];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AF] != null) {
    entries[_AF] = input[_AF];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateNatGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTo] != null) {
    entries[_CTo] = input[_CTo];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_SAI] != null) {
    const memberEntries = se_AllocationIdList(input[_SAI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryAllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIA] != null) {
    const memberEntries = se_IpList(input[_SPIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryPrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  return entries;
};
var se_CreateNetworkAclEntryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_ITC] != null) {
    const memberEntries = se_IcmpTypeCode(input[_ITC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PR] != null) {
    const memberEntries = se_PortRange(input[_PR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateNetworkAclRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_CreateNetworkInsightsAccessScopeRequest = (input, context) => {
  const entries = {};
  if (input[_MP] != null) {
    const memberEntries = se_AccessScopePathListRequest(input[_MP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EP] != null) {
    const memberEntries = se_AccessScopePathListRequest(input[_EP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateNetworkInsightsPathRequest = (input, context) => {
  const entries = {};
  if (input[_SIo] != null) {
    entries[_SIo] = input[_SIo];
  }
  if (input[_DIest] != null) {
    entries[_DIest] = input[_DIest];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DPe] != null) {
    entries[_DPe] = input[_DPe];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_FAS] != null) {
    const memberEntries = se_PathRequestFilter(input[_FAS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtSource.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FAD] != null) {
    const memberEntries = se_PathRequestFilter(input[_FAD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtDestination.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateNetworkInterfacePermissionRequest = (input, context) => {
  const entries = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_AAI] != null) {
    entries[_AAI] = input[_AAI];
  }
  if (input[_ASw] != null) {
    entries[_ASw] = input[_ASw];
  }
  if (input[_Pe] != null) {
    entries[_Pe] = input[_Pe];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateNetworkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_OperatorRequest(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Operator.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreatePlacementGroupRequest = (input, context) => {
  const entries = {};
  if (input[_PCa] != null) {
    entries[_PCa] = input[_PCa];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SL] != null) {
    entries[_SL] = input[_SL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_Str] != null) {
    entries[_Str] = input[_Str];
  }
  return entries;
};
var se_CreatePublicIpv4PoolRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  return entries;
};
var se_CreateReplaceRootVolumeTaskRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRRV] != null) {
    entries[_DRRV] = input[_DRRV];
  }
  return entries;
};
var se_CreateReservedInstancesListingRequest = (input, context) => {
  const entries = {};
  if (input[_RIIe] != null) {
    entries[_RIIe] = input[_RIIe];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_PS] != null) {
    const memberEntries = se_PriceScheduleSpecificationList(input[_PS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateRestoreImageTaskRequest = (input, context) => {
  const entries = {};
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_OK] != null) {
    entries[_OK] = input[_OK];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_CNAo] != null) {
    entries[_CNAo] = input[_CNAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  return entries;
};
var se_CreateRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_CreateSecurityGroupRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_GD] = input[_De];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateSnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Lo] != null) {
    entries[_Lo] = input[_Lo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateSnapshotsRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ISn] != null) {
    const memberEntries = se_InstanceSpecification(input[_ISn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTFS] != null) {
    entries[_CTFS] = input[_CTFS];
  }
  if (input[_Lo] != null) {
    entries[_Lo] = input[_Lo];
  }
  return entries;
};
var se_CreateSpotDatafeedSubscriptionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  return entries;
};
var se_CreateStoreImageTaskRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_SOT] != null) {
    const memberEntries = se_S3ObjectTagList(input[_SOT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateSubnetCidrReservationRequest = (input, context) => {
  const entries = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_RTe] != null) {
    entries[_RTe] = input[_RTe];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateSubnetRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_IN] != null) {
    entries[_IN] = input[_IN];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTagsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Re] != null) {
    const memberEntries = se_ResourceIdList(input[_Re], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateTrafficMirrorFilterRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateTrafficMirrorFilterRuleRequest = (input, context) => {
  const entries = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_TD] != null) {
    entries[_TD] = input[_TD];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_SCB] != null) {
    entries[_SCB] = input[_SCB];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateTrafficMirrorSessionRequest = (input, context) => {
  const entries = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_PL] != null) {
    entries[_PL] = input[_PL];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_VNI] != null) {
    entries[_VNI] = input[_VNI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateTrafficMirrorTargetRequest = (input, context) => {
  const entries = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_NLBA] != null) {
    entries[_NLBA] = input[_NLBA];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_GLBEI] != null) {
    entries[_GLBEI] = input[_GLBEI];
  }
  return entries;
};
var se_CreateTransitGatewayConnectPeerRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_PAe] != null) {
    entries[_PAe] = input[_PAe];
  }
  if (input[_BO] != null) {
    const memberEntries = se_TransitGatewayConnectRequestBgpOptions(input[_BO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BgpOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ICBn] != null) {
    const memberEntries = se_InsideCidrBlocksStringList(input[_ICBn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayConnectRequest = (input, context) => {
  const entries = {};
  if (input[_TTGAI] != null) {
    entries[_TTGAI] = input[_TTGAI];
  }
  if (input[_Op] != null) {
    const memberEntries = se_CreateTransitGatewayConnectRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayConnectRequestOptions = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  return entries;
};
var se_CreateTransitGatewayMulticastDomainRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_Op] != null) {
    const memberEntries = se_CreateTransitGatewayMulticastDomainRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayMulticastDomainRequestOptions = (input, context) => {
  const entries = {};
  if (input[_ISg] != null) {
    entries[_ISg] = input[_ISg];
  }
  if (input[_SSS] != null) {
    entries[_SSS] = input[_SSS];
  }
  if (input[_AASA] != null) {
    entries[_AASA] = input[_AASA];
  }
  return entries;
};
var se_CreateTransitGatewayPeeringAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_PTGI] != null) {
    entries[_PTGI] = input[_PTGI];
  }
  if (input[_PAI] != null) {
    entries[_PAI] = input[_PAI];
  }
  if (input[_PRe] != null) {
    entries[_PRe] = input[_PRe];
  }
  if (input[_Op] != null) {
    const memberEntries = se_CreateTransitGatewayPeeringAttachmentRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayPeeringAttachmentRequestOptions = (input, context) => {
  const entries = {};
  if (input[_DRy] != null) {
    entries[_DRy] = input[_DRy];
  }
  return entries;
};
var se_CreateTransitGatewayPolicyTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayPrefixListReferenceRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Op] != null) {
    const memberEntries = se_TransitGatewayRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PAIe] != null) {
    entries[_PAIe] = input[_PAIe];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayVpcAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Op] != null) {
    const memberEntries = se_CreateTransitGatewayVpcAttachmentRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
  const entries = {};
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_ISp] != null) {
    entries[_ISp] = input[_ISp];
  }
  if (input[_AMS] != null) {
    entries[_AMS] = input[_AMS];
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointCidrOptions = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_PRo] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointEniOptions = (input, context) => {
  const entries = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_PRo] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PRo] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointPortRange = (input, context) => {
  const entries = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointPortRangeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_CreateVerifiedAccessEndpointPortRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointRdsOptions = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_RDIA] != null) {
    entries[_RDIA] = input[_RDIA];
  }
  if (input[_RDCA] != null) {
    entries[_RDCA] = input[_RDCA];
  }
  if (input[_RDPA] != null) {
    entries[_RDPA] = input[_RDPA];
  }
  if (input[_RE] != null) {
    entries[_RE] = input[_RE];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_ET] != null) {
    entries[_ET] = input[_ET];
  }
  if (input[_ATt] != null) {
    entries[_ATt] = input[_ATt];
  }
  if (input[_DCA] != null) {
    entries[_DCA] = input[_DCA];
  }
  if (input[_ADp] != null) {
    entries[_ADp] = input[_ADp];
  }
  if (input[_EDP] != null) {
    entries[_EDP] = input[_EDP];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdList(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LBO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointLoadBalancerOptions(input[_LBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointEniOptions(input[_NIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointRdsOptions(input[_RO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RdsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointCidrOptions(input[_CO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessEndpointSubnetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_CreateVerifiedAccessGroupRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVerifiedAccessInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FIPSE] != null) {
    entries[_FIPSE] = input[_FIPSE];
  }
  if (input[_CECSD] != null) {
    entries[_CECSD] = input[_CECSD];
  }
  return entries;
};
var se_CreateVerifiedAccessNativeApplicationOidcOptions = (input, context) => {
  const entries = {};
  if (input[_PSKE] != null) {
    entries[_PSKE] = input[_PSKE];
  }
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};
var se_CreateVerifiedAccessTrustProviderDeviceOptions = (input, context) => {
  const entries = {};
  if (input[_TIe] != null) {
    entries[_TIe] = input[_TIe];
  }
  if (input[_PSKU] != null) {
    entries[_PSKU] = input[_PSKU];
  }
  return entries;
};
var se_CreateVerifiedAccessTrustProviderOidcOptions = (input, context) => {
  const entries = {};
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};
var se_CreateVerifiedAccessTrustProviderRequest = (input, context) => {
  const entries = {};
  if (input[_TPT] != null) {
    entries[_TPT] = input[_TPT];
  }
  if (input[_UTPT] != null) {
    entries[_UTPT] = input[_UTPT];
  }
  if (input[_DTPT] != null) {
    entries[_DTPT] = input[_DTPT];
  }
  if (input[_OO] != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderOidcOptions(input[_OO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOe] != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderDeviceOptions(input[_DOe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DeviceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PRN] != null) {
    entries[_PRN] = input[_PRN];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NAOO] != null) {
    const memberEntries = se_CreateVerifiedAccessNativeApplicationOidcOptions(input[_NAOO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NativeApplicationOidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVolumePermission = (input, context) => {
  const entries = {};
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  return entries;
};
var se_CreateVolumePermissionList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_CreateVolumePermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_CreateVolumePermissionModifications = (input, context) => {
  const entries = {};
  if (input[_Add] != null) {
    const memberEntries = se_CreateVolumePermissionList(input[_Add], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Rem] != null) {
    const memberEntries = se_CreateVolumePermissionList(input[_Rem], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MAE] != null) {
    entries[_MAE] = input[_MAE];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_O] != null) {
    const memberEntries = se_OperatorRequest(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Operator.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreateVpcBlockPublicAccessExclusionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_IGEM] != null) {
    entries[_IGEM] = input[_IGEM];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVpcEndpointConnectionNotificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_CNAon] != null) {
    entries[_CNAon] = input[_CNAon];
  }
  if (input[_CEo] != null) {
    const memberEntries = se_ValueStringList(input[_CEo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_CreateVpcEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VET] != null) {
    entries[_VET] = input[_VET];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_RTIo] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_RTIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIu] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  if (input[_DOn] != null) {
    const memberEntries = se_DnsOptionsSpecification(input[_DOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_PDE] != null) {
    entries[_PDE] = input[_PDE];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SC] != null) {
    const memberEntries = se_SubnetConfigurationsList(input[_SC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SNA] != null) {
    entries[_SNA] = input[_SNA];
  }
  if (input[_RCA] != null) {
    entries[_RCA] = input[_RCA];
  }
  if (input[_SRe] != null) {
    entries[_SRe] = input[_SRe];
  }
  return entries;
};
var se_CreateVpcEndpointServiceConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ARc] != null) {
    entries[_ARc] = input[_ARc];
  }
  if (input[_PDN] != null) {
    entries[_PDN] = input[_PDN];
  }
  if (input[_NLBAe] != null) {
    const memberEntries = se_ValueStringList(input[_NLBAe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GLBA] != null) {
    const memberEntries = se_ValueStringList(input[_GLBA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIAT] != null) {
    const memberEntries = se_ValueStringList(input[_SIAT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SRu] != null) {
    const memberEntries = se_ValueStringList(input[_SRu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVpcPeeringConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_PRe] != null) {
    entries[_PRe] = input[_PRe];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_PVI] != null) {
    entries[_PVI] = input[_PVI];
  }
  if (input[_POI] != null) {
    entries[_POI] = input[_POI];
  }
  return entries;
};
var se_CreateVpcRequest = (input, context) => {
  const entries = {};
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_IPpv] != null) {
    entries[_IPpv] = input[_IPpv];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  if (input[_ICBNBG] != null) {
    entries[_ICBNBG] = input[_ICBNBG];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_APICB] != null) {
    entries[_APICB] = input[_APICB];
  }
  return entries;
};
var se_CreateVpnConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Op] != null) {
    const memberEntries = se_VpnConnectionOptionsSpecification(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_CreateVpnConnectionRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  return entries;
};
var se_CreateVpnGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_CreditSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};
var se_CustomerGatewayIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CustomerGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DataQueries = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DataQuery(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_DataQuery = (input, context) => {
  const entries = {};
  if (input[_Id] != null) {
    entries[_Id] = input[_Id];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_Per] != null) {
    entries[_Per] = input[_Per];
  }
  return entries;
};
var se_DedicatedHostIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DeleteCarrierGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteClientVpnEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteClientVpnRouteRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TVSI] != null) {
    entries[_TVSI] = input[_TVSI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteCoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteCoipPoolRequest = (input, context) => {
  const entries = {};
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteCustomerGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteDhcpOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DOI] != null) {
    entries[_DOI] = input[_DOI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteEgressOnlyInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  return entries;
};
var se_DeleteFleetsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FI] != null) {
    const memberEntries = se_FleetIdSet(input[_FI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TI] != null) {
    entries[_TI] = input[_TI];
  }
  return entries;
};
var se_DeleteFlowLogsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FLI] != null) {
    const memberEntries = se_FlowLogIdList(input[_FLI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteFpgaImageRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  return entries;
};
var se_DeleteInstanceConnectEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ICEI] != null) {
    entries[_ICEI] = input[_ICEI];
  }
  return entries;
};
var se_DeleteInstanceEventWindowRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FD] != null) {
    entries[_FD] = input[_FD];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  return entries;
};
var se_DeleteInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  return entries;
};
var se_DeleteIpamExternalResourceVerificationTokenRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IERVTI] != null) {
    entries[_IERVTI] = input[_IERVTI];
  }
  return entries;
};
var se_DeleteIpamPoolRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_Ca] != null) {
    entries[_Ca] = input[_Ca];
  }
  return entries;
};
var se_DeleteIpamRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_Ca] != null) {
    entries[_Ca] = input[_Ca];
  }
  return entries;
};
var se_DeleteIpamResourceDiscoveryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  return entries;
};
var se_DeleteIpamScopeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  return entries;
};
var se_DeleteKeyPairRequest = (input, context) => {
  const entries = {};
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_KPI] != null) {
    entries[_KPI] = input[_KPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteLaunchTemplateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  return entries;
};
var se_DeleteLaunchTemplateVersionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_Ve] != null) {
    const memberEntries = se_VersionStringList(input[_Ve], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteLocalGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};
var se_DeleteLocalGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTVIGAI] != null) {
    entries[_LGRTVIGAI] = input[_LGRTVIGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTVAI] != null) {
    entries[_LGRTVAI] = input[_LGRTVAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteManagedPrefixListRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  return entries;
};
var se_DeleteNatGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  return entries;
};
var se_DeleteNetworkAclEntryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  return entries;
};
var se_DeleteNetworkAclRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  return entries;
};
var se_DeleteNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
  const entries = {};
  if (input[_NIASAI] != null) {
    entries[_NIASAI] = input[_NIASAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteNetworkInsightsAccessScopeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  return entries;
};
var se_DeleteNetworkInsightsAnalysisRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIAI] != null) {
    entries[_NIAI] = input[_NIAI];
  }
  return entries;
};
var se_DeleteNetworkInsightsPathRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  return entries;
};
var se_DeleteNetworkInterfacePermissionRequest = (input, context) => {
  const entries = {};
  if (input[_NIPIe] != null) {
    entries[_NIPIe] = input[_NIPIe];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteNetworkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  return entries;
};
var se_DeletePlacementGroupRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};
var se_DeletePublicIpv4PoolRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  return entries;
};
var se_DeleteQueuedReservedInstancesIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DeleteQueuedReservedInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIIes] != null) {
    const memberEntries = se_DeleteQueuedReservedInstancesIdList(input[_RIIes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  return entries;
};
var se_DeleteRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};
var se_DeleteSecurityGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteSnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteSpotDatafeedSubscriptionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteSubnetCidrReservationRequest = (input, context) => {
  const entries = {};
  if (input[_SCRIu] != null) {
    entries[_SCRIu] = input[_SCRIu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteSubnetRequest = (input, context) => {
  const entries = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTagsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Re] != null) {
    const memberEntries = se_ResourceIdList(input[_Re], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteTrafficMirrorFilterRequest = (input, context) => {
  const entries = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTrafficMirrorFilterRuleRequest = (input, context) => {
  const entries = {};
  if (input[_TMFRI] != null) {
    entries[_TMFRI] = input[_TMFRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTrafficMirrorSessionRequest = (input, context) => {
  const entries = {};
  if (input[_TMSI] != null) {
    entries[_TMSI] = input[_TMSI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTrafficMirrorTargetRequest = (input, context) => {
  const entries = {};
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayConnectPeerRequest = (input, context) => {
  const entries = {};
  if (input[_TGCPI] != null) {
    entries[_TGCPI] = input[_TGCPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayConnectRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayMulticastDomainRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayPeeringAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayPolicyTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayPrefixListReferenceRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteTransitGatewayVpcAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVerifiedAccessEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVerifiedAccessGroupRequest = (input, context) => {
  const entries = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVerifiedAccessInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_DeleteVerifiedAccessTrustProviderRequest = (input, context) => {
  const entries = {};
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_DeleteVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVpcBlockPublicAccessExclusionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EIxc] != null) {
    entries[_EIxc] = input[_EIxc];
  }
  return entries;
};
var se_DeleteVpcEndpointConnectionNotificationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIo] != null) {
    const memberEntries = se_ConnectionNotificationIdsList(input[_CNIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteVpcEndpointServiceConfigurationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIer] != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input[_SIer], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteVpcEndpointsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeleteVpcPeeringConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};
var se_DeleteVpcRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVpnConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeleteVpnConnectionRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  return entries;
};
var se_DeleteVpnGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeprovisionByoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeprovisionIpamByoasnRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  return entries;
};
var se_DeprovisionIpamPoolCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};
var se_DeprovisionPublicIpv4PoolCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};
var se_DeregisterImageRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeregisterInstanceEventNotificationAttributesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITA] != null) {
    const memberEntries = se_DeregisterInstanceTagAttributeRequest(input[_ITA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeregisterInstanceTagAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_IATOI] != null) {
    entries[_IATOI] = input[_IATOI];
  }
  if (input[_ITK] != null) {
    const memberEntries = se_InstanceTagKeySet(input[_ITK], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DeregisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DeregisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeAccountAttributesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AN] != null) {
    const memberEntries = se_AccountAttributeNameStringList(input[_AN], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeAddressesAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIds(input[_AIll], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeAddressesRequest = (input, context) => {
  const entries = {};
  if (input[_PIu] != null) {
    const memberEntries = se_PublicIpStringList(input[_PIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeAddressTransfersRequest = (input, context) => {
  const entries = {};
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeAggregateIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeAvailabilityZonesRequest = (input, context) => {
  const entries = {};
  if (input[_ZN] != null) {
    const memberEntries = se_ZoneNameStringList(input[_ZN], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ZI] != null) {
    const memberEntries = se_ZoneIdStringList(input[_ZI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AAZ] != null) {
    entries[_AAZ] = input[_AAZ];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest = (input, context) => {
  const entries = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeBundleTasksRequest = (input, context) => {
  const entries = {};
  if (input[_BIun] != null) {
    const memberEntries = se_BundleIdStringList(input[_BIun], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeByoipCidrsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeCapacityBlockExtensionHistoryRequest = (input, context) => {
  const entries = {};
  if (input[_CRIa] != null) {
    const memberEntries = se_CapacityReservationIdSet(input[_CRIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeCapacityBlockExtensionOfferingsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CBEDH] != null) {
    entries[_CBEDH] = input[_CBEDH];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeCapacityBlockOfferingsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_SDR] != null) {
    entries[_SDR] = serializeDateTime(input[_SDR]);
  }
  if (input[_EDR] != null) {
    entries[_EDR] = serializeDateTime(input[_EDR]);
  }
  if (input[_CDH] != null) {
    entries[_CDH] = input[_CDH];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeCapacityReservationBillingRequestsRequest = (input, context) => {
  const entries = {};
  if (input[_CRIa] != null) {
    const memberEntries = se_CapacityReservationIdSet(input[_CRIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ro] != null) {
    entries[_Ro] = input[_Ro];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeCapacityReservationFleetsRequest = (input, context) => {
  const entries = {};
  if (input[_CRFI] != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeCapacityReservationsRequest = (input, context) => {
  const entries = {};
  if (input[_CRIa] != null) {
    const memberEntries = se_CapacityReservationIdSet(input[_CRIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeCarrierGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_CGIa] != null) {
    const memberEntries = se_CarrierGatewayIdSet(input[_CGIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeClassicLinkInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeClientVpnAuthorizationRulesRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeClientVpnConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeClientVpnEndpointsRequest = (input, context) => {
  const entries = {};
  if (input[_CVEIl] != null) {
    const memberEntries = se_ClientVpnEndpointIdList(input[_CVEIl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeClientVpnRoutesRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeClientVpnTargetNetworksRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_AIs] != null) {
    const memberEntries = se_ValueStringList(input[_AIs], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeCoipPoolsRequest = (input, context) => {
  const entries = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_CoipPoolIdSet(input[_PIoo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeConversionTasksRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTIo] != null) {
    const memberEntries = se_ConversionIdStringList(input[_CTIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeCustomerGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_CGIus] != null) {
    const memberEntries = se_CustomerGatewayIdStringList(input[_CGIus], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeDeclarativePoliciesReportsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_RIepo] != null) {
    const memberEntries = se_ValueStringList(input[_RIepo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReportId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeDhcpOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DOIh] != null) {
    const memberEntries = se_DhcpOptionsIdStringList(input[_DOIh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeEgressOnlyInternetGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EOIGIg] != null) {
    const memberEntries = se_EgressOnlyInternetGatewayIdList(input[_EOIGIg], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeElasticGpusRequest = (input, context) => {
  const entries = {};
  if (input[_EGI] != null) {
    const memberEntries = se_ElasticGpuIdSet(input[_EGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeExportImageTasksRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EITI] != null) {
    const memberEntries = se_ExportImageTaskIdList(input[_EITI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeExportTasksRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ETIx] != null) {
    const memberEntries = se_ExportTaskIdStringList(input[_ETIx], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeFastLaunchImagesRequest = (input, context) => {
  const entries = {};
  if (input[_IImag] != null) {
    const memberEntries = se_FastLaunchImageIdList(input[_IImag], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeFastSnapshotRestoresRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeFleetHistoryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ETv] != null) {
    entries[_ETv] = input[_ETv];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  return entries;
};
var se_DescribeFleetInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeFleetsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FI] != null) {
    const memberEntries = se_FleetIdSet(input[_FI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeFlowLogsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FLI] != null) {
    const memberEntries = se_FlowLogIdList(input[_FLI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeFpgaImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};
var se_DescribeFpgaImagesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FIIp] != null) {
    const memberEntries = se_FpgaImageIdList(input[_FIIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ow] != null) {
    const memberEntries = se_OwnerStringList(input[_Ow], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeHostReservationOfferingsRequest = (input, context) => {
  const entries = {};
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MD] != null) {
    entries[_MD] = input[_MD];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_MDi] != null) {
    entries[_MDi] = input[_MDi];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};
var se_DescribeHostReservationsRequest = (input, context) => {
  const entries = {};
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HRIS] != null) {
    const memberEntries = se_HostReservationIdSet(input[_HRIS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeHostsRequest = (input, context) => {
  const entries = {};
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIamInstanceProfileAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_AIs] != null) {
    const memberEntries = se_AssociationIdList(input[_AIs], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeIdentityIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  if (input[_PAr] != null) {
    entries[_PAr] = input[_PAr];
  }
  return entries;
};
var se_DescribeIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  return entries;
};
var se_DescribeImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeImagesRequest = (input, context) => {
  const entries = {};
  if (input[_EU] != null) {
    const memberEntries = se_ExecutableByStringList(input[_EU], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdStringList(input[_IImag], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ow] != null) {
    const memberEntries = se_OwnerStringList(input[_Ow], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  if (input[_IDn] != null) {
    entries[_IDn] = input[_IDn];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeImportImageTasksRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITIm] != null) {
    const memberEntries = se_ImportTaskIdList(input[_ITIm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeImportSnapshotTasksRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITIm] != null) {
    const memberEntries = se_ImportSnapshotTaskIdList(input[_ITIm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeInstanceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};
var se_DescribeInstanceConnectEndpointsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ICEIn] != null) {
    const memberEntries = se_ValueStringList(input[_ICEIn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceConnectEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeInstanceCreditSpecificationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeInstanceEventNotificationAttributesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeInstanceEventWindowsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWIn] != null) {
    const memberEntries = se_InstanceEventWindowIdSet(input[_IEWIn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeInstanceImageMetadataRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeInstanceStatusRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAI] != null) {
    entries[_IAI] = input[_IAI];
  }
  return entries;
};
var se_DescribeInstanceTopologyGroupNameSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DescribeInstanceTopologyInstanceIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DescribeInstanceTopologyRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_IIns] != null) {
    const memberEntries = se_DescribeInstanceTopologyInstanceIdSet(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_DescribeInstanceTopologyGroupNameSet(input[_GNr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeInstanceTypeOfferingsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LT] != null) {
    entries[_LT] = input[_LT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeInstanceTypesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITnst] != null) {
    const memberEntries = se_RequestInstanceTypeList(input[_ITnst], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeInternetGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGIn] != null) {
    const memberEntries = se_InternetGatewayIdList(input[_IGIn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamByoasnRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeIpamExternalResourceVerificationTokensRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_IERVTIp] != null) {
    const memberEntries = se_ValueStringList(input[_IERVTIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamExternalResourceVerificationTokenId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamPoolsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_IPIp] != null) {
    const memberEntries = se_ValueStringList(input[_IPIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamResourceDiscoveriesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDIp] != null) {
    const memberEntries = se_ValueStringList(input[_IRDIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamResourceDiscoveryAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDAI] != null) {
    const memberEntries = se_ValueStringList(input[_IRDAI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamScopesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ISIp] != null) {
    const memberEntries = se_ValueStringList(input[_ISIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpamsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_IIpa] != null) {
    const memberEntries = se_ValueStringList(input[_IIpa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeIpv6PoolsRequest = (input, context) => {
  const entries = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_Ipv6PoolIdList(input[_PIoo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeKeyPairsRequest = (input, context) => {
  const entries = {};
  if (input[_KNe] != null) {
    const memberEntries = se_KeyNameStringList(input[_KNe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KPIe] != null) {
    const memberEntries = se_KeyPairIdStringList(input[_KPIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPK] != null) {
    entries[_IPK] = input[_IPK];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeLaunchTemplatesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTIa] != null) {
    const memberEntries = se_LaunchTemplateIdStringList(input[_LTIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTNa] != null) {
    const memberEntries = se_LaunchTemplateNameStringList(input[_LTNa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeLaunchTemplateVersionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_Ve] != null) {
    const memberEntries = se_VersionStringList(input[_Ve], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MVi] != null) {
    entries[_MVi] = input[_MVi];
  }
  if (input[_MVa] != null) {
    entries[_MVa] = input[_MVa];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RAe] != null) {
    entries[_RAe] = input[_RAe];
  }
  return entries;
};
var se_DescribeLocalGatewayRouteTablesRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableIdSet(input[_LGRTIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTVIGAIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input[_LGRTVIGAIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLocalGatewayRouteTableVpcAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTVAIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableVpcAssociationIdSet(input[_LGRTVAIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLocalGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_LGIo] != null) {
    const memberEntries = se_LocalGatewayIdSet(input[_LGIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLocalGatewayVirtualInterfaceGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_LGVIGIo] != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceGroupIdSet(input[_LGVIGIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLocalGatewayVirtualInterfacesRequest = (input, context) => {
  const entries = {};
  if (input[_LGVII] != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceIdSet(input[_LGVII], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeLockedSnapshotsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeMacHostsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeManagedPrefixListsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_ValueStringList(input[_PLIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeMovingAddressesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PIu] != null) {
    const memberEntries = se_ValueStringList(input[_PIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeNatGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NGIa] != null) {
    const memberEntries = se_NatGatewayIdStringList(input[_NGIa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeNetworkAclsRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAIe] != null) {
    const memberEntries = se_NetworkAclIdStringList(input[_NAIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeNetworkInsightsAccessScopeAnalysesRequest = (input, context) => {
  const entries = {};
  if (input[_NIASAIe] != null) {
    const memberEntries = se_NetworkInsightsAccessScopeAnalysisIdList(input[_NIASAIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_ASTB] != null) {
    entries[_ASTB] = serializeDateTime(input[_ASTB]);
  }
  if (input[_ASTE] != null) {
    entries[_ASTE] = serializeDateTime(input[_ASTE]);
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeNetworkInsightsAccessScopesRequest = (input, context) => {
  const entries = {};
  if (input[_NIASIe] != null) {
    const memberEntries = se_NetworkInsightsAccessScopeIdList(input[_NIASIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeNetworkInsightsAnalysesRequest = (input, context) => {
  const entries = {};
  if (input[_NIAIe] != null) {
    const memberEntries = se_NetworkInsightsAnalysisIdList(input[_NIAIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  if (input[_AST] != null) {
    entries[_AST] = serializeDateTime(input[_AST]);
  }
  if (input[_AET] != null) {
    entries[_AET] = serializeDateTime(input[_AET]);
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeNetworkInsightsPathsRequest = (input, context) => {
  const entries = {};
  if (input[_NIPIet] != null) {
    const memberEntries = se_NetworkInsightsPathIdList(input[_NIPIet], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeNetworkInterfaceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};
var se_DescribeNetworkInterfacePermissionsRequest = (input, context) => {
  const entries = {};
  if (input[_NIPIetw] != null) {
    const memberEntries = se_NetworkInterfacePermissionIdList(input[_NIPIetw], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeNetworkInterfacesRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_NetworkInterfaceIdList(input[_NIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribePlacementGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_GIro] != null) {
    const memberEntries = se_PlacementGroupIdStringList(input[_GIro], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GNr] != null) {
    const memberEntries = se_PlacementGroupStringList(input[_GNr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribePrefixListsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_PrefixListResourceIdStringList(input[_PLIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribePrincipalIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Re] != null) {
    const memberEntries = se_ResourceList(input[_Re], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribePublicIpv4PoolsRequest = (input, context) => {
  const entries = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_PublicIpv4PoolIdStringList(input[_PIoo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeRegionsRequest = (input, context) => {
  const entries = {};
  if (input[_RNe] != null) {
    const memberEntries = se_RegionNameStringList(input[_RNe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ARll] != null) {
    entries[_ARll] = input[_ARll];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeReplaceRootVolumeTasksRequest = (input, context) => {
  const entries = {};
  if (input[_RRVTI] != null) {
    const memberEntries = se_ReplaceRootVolumeTaskIds(input[_RRVTI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeReservedInstancesListingsRequest = (input, context) => {
  const entries = {};
  if (input[_RIIe] != null) {
    entries[_RIIe] = input[_RIIe];
  }
  if (input[_RILI] != null) {
    entries[_RILI] = input[_RILI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeReservedInstancesModificationsRequest = (input, context) => {
  const entries = {};
  if (input[_RIMI] != null) {
    const memberEntries = se_ReservedInstancesModificationIdStringList(input[_RIMI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeReservedInstancesOfferingsRequest = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_IM] != null) {
    entries[_IM] = input[_IM];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_MD] != null) {
    entries[_MD] = input[_MD];
  }
  if (input[_MIC] != null) {
    entries[_MIC] = input[_MIC];
  }
  if (input[_MDi] != null) {
    entries[_MDi] = input[_MDi];
  }
  if (input[_OC] != null) {
    entries[_OC] = input[_OC];
  }
  if (input[_PDr] != null) {
    entries[_PDr] = input[_PDr];
  }
  if (input[_RIOI] != null) {
    const memberEntries = se_ReservedInstancesOfferingIdStringList(input[_RIOI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeReservedInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_OC] != null) {
    entries[_OC] = input[_OC];
  }
  if (input[_RIIes] != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  return entries;
};
var se_DescribeRouteTablesRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTIo] != null) {
    const memberEntries = se_RouteTableIdStringList(input[_RTIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeScheduledInstanceAvailabilityRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FSSTR] != null) {
    const memberEntries = se_SlotDateTimeRangeRequest(input[_FSSTR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FirstSlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_MSDIH] != null) {
    entries[_MSDIH] = input[_MSDIH];
  }
  if (input[_MSDIHi] != null) {
    entries[_MSDIHi] = input[_MSDIHi];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Rec] != null) {
    const memberEntries = se_ScheduledInstanceRecurrenceRequest(input[_Rec], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Recurrence.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeScheduledInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIIc] != null) {
    const memberEntries = se_ScheduledInstanceIdRequestSet(input[_SIIc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSTR] != null) {
    const memberEntries = se_SlotStartTimeRangeRequest(input[_SSTR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeSecurityGroupReferencesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    const memberEntries = se_GroupIds(input[_GIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeSecurityGroupRulesRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSecurityGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_GIro] != null) {
    const memberEntries = se_GroupIdStringList(input[_GIro], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_GroupNameStringList(input[_GNr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeSecurityGroupVpcAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeSnapshotAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeSnapshotsRequest = (input, context) => {
  const entries = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_OIw] != null) {
    const memberEntries = se_OwnerStringList(input[_OIw], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RBUI] != null) {
    const memberEntries = se_RestorableByStringList(input[_RBUI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeSnapshotTierStatusRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSpotDatafeedSubscriptionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeSpotFleetInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSpotFleetRequestHistoryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  if (input[_ETv] != null) {
    entries[_ETv] = input[_ETv];
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSpotFleetRequestsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRI] != null) {
    const memberEntries = se_SpotFleetRequestIdList(input[_SFRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSpotInstanceRequestsRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIRI] != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeSpotPriceHistoryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  if (input[_ETn] != null) {
    entries[_ETn] = serializeDateTime(input[_ETn]);
  }
  if (input[_ITnst] != null) {
    const memberEntries = se_InstanceTypeList(input[_ITnst], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDro] != null) {
    const memberEntries = se_ProductDescriptionList(input[_PDro], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeStaleSecurityGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DescribeStoreImageTasksRequest = (input, context) => {
  const entries = {};
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdList(input[_IImag], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeSubnetsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIu] != null) {
    const memberEntries = se_SubnetIdStringList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTagsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeTrafficMirrorFilterRulesRequest = (input, context) => {
  const entries = {};
  if (input[_TMFRIr] != null) {
    const memberEntries = se_TrafficMirrorFilterRuleIdList(input[_TMFRIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorFilterRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeTrafficMirrorFiltersRequest = (input, context) => {
  const entries = {};
  if (input[_TMFIr] != null) {
    const memberEntries = se_TrafficMirrorFilterIdList(input[_TMFIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeTrafficMirrorSessionsRequest = (input, context) => {
  const entries = {};
  if (input[_TMSIr] != null) {
    const memberEntries = se_TrafficMirrorSessionIdList(input[_TMSIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeTrafficMirrorTargetsRequest = (input, context) => {
  const entries = {};
  if (input[_TMTIr] != null) {
    const memberEntries = se_TrafficMirrorTargetIdList(input[_TMTIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeTransitGatewayAttachmentsRequest = (input, context) => {
  const entries = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayConnectPeersRequest = (input, context) => {
  const entries = {};
  if (input[_TGCPIr] != null) {
    const memberEntries = se_TransitGatewayConnectPeerIdStringList(input[_TGCPIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayConnectsRequest = (input, context) => {
  const entries = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayMulticastDomainsRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDIr] != null) {
    const memberEntries = se_TransitGatewayMulticastDomainIdStringList(input[_TGMDIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayPeeringAttachmentsRequest = (input, context) => {
  const entries = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayPolicyTablesRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTIr] != null) {
    const memberEntries = se_TransitGatewayPolicyTableIdStringList(input[_TGPTIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayPolicyTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayRouteTableAnnouncementsRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTAIr] != null) {
    const memberEntries = se_TransitGatewayRouteTableAnnouncementIdStringList(input[_TGRTAIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableAnnouncementIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayRouteTablesRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTIr] != null) {
    const memberEntries = se_TransitGatewayRouteTableIdStringList(input[_TGRTIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_TGIr] != null) {
    const memberEntries = se_TransitGatewayIdStringList(input[_TGIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTransitGatewayVpcAttachmentsRequest = (input, context) => {
  const entries = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeTrunkInterfaceAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_AIs] != null) {
    const memberEntries = se_TrunkInterfaceAssociationIdList(input[_AIs], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeVerifiedAccessEndpointsRequest = (input, context) => {
  const entries = {};
  if (input[_VAEIe] != null) {
    const memberEntries = se_VerifiedAccessEndpointIdList(input[_VAEIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVerifiedAccessGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_VAGIe] != null) {
    const memberEntries = se_VerifiedAccessGroupIdList(input[_VAGIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest = (input, context) => {
  const entries = {};
  if (input[_VAIIe] != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVerifiedAccessInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_VAIIe] != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVerifiedAccessTrustProvidersRequest = (input, context) => {
  const entries = {};
  if (input[_VATPIe] != null) {
    const memberEntries = se_VerifiedAccessTrustProviderIdList(input[_VATPIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessTrustProviderId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVolumeAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVolumesModificationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeVolumesRequest = (input, context) => {
  const entries = {};
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeVolumeStatusRequest = (input, context) => {
  const entries = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeVpcAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVpcBlockPublicAccessExclusionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EIxcl] != null) {
    const memberEntries = se_VpcBlockPublicAccessExclusionIdList(input[_EIxcl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExclusionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_DescribeVpcBlockPublicAccessOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVpcClassicLinkDnsSupportRequest = (input, context) => {
  const entries = {};
  if (input[_VIp] != null) {
    const memberEntries = se_VpcClassicLinkIdList(input[_VIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcClassicLinkRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIp] != null) {
    const memberEntries = se_VpcClassicLinkIdList(input[_VIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeVpcEndpointAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcEndpointConnectionNotificationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIon] != null) {
    entries[_CNIon] = input[_CNIon];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcEndpointConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcEndpointServiceConfigurationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIer] != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input[_SIer], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcEndpointServicePermissionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcEndpointServicesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SNer] != null) {
    const memberEntries = se_ValueStringList(input[_SNer], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SRer] != null) {
    const memberEntries = se_ValueStringList(input[_SRer], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeVpcEndpointsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_DescribeVpcPeeringConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCIp] != null) {
    const memberEntries = se_VpcPeeringConnectionIdList(input[_VPCIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DescribeVpcsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VIp] != null) {
    const memberEntries = se_VpcIdStringList(input[_VIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVpnConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VCIp] != null) {
    const memberEntries = se_VpnConnectionIdStringList(input[_VCIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DescribeVpnGatewaysRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VGIp] != null) {
    const memberEntries = se_VpnGatewayIdStringList(input[_VGIp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DestinationOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_FF] != null) {
    entries[_FF] = input[_FF];
  }
  if (input[_HCP] != null) {
    entries[_HCP] = input[_HCP];
  }
  if (input[_PHP] != null) {
    entries[_PHP] = input[_PHP];
  }
  return entries;
};
var se_DetachClassicLinkVpcRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DetachInternetGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DetachNetworkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AIt] != null) {
    entries[_AIt] = input[_AIt];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  return entries;
};
var se_DetachVerifiedAccessTrustProviderRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DetachVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_Dev] != null) {
    entries[_Dev] = input[_Dev];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DetachVpnGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DhcpOptionsIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`DhcpOptionsId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_DirectoryServiceAuthenticationRequest = (input, context) => {
  const entries = {};
  if (input[_DIir] != null) {
    entries[_DIir] = input[_DIir];
  }
  return entries;
};
var se_DisableAddressTransferRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableAllowedImagesSettingsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
  const entries = {};
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableEbsEncryptionByDefaultRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableFastLaunchRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableFastSnapshotRestoresRequest = (input, context) => {
  const entries = {};
  if (input[_AZv] != null) {
    const memberEntries = se_AvailabilityZoneStringList(input[_AZv], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSIo] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SSIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableImageBlockPublicAccessRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableImageDeprecationRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableImageDeregistrationProtectionRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableImageRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableIpamOrganizationAdminAccountRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DAAI] != null) {
    entries[_DAAI] = input[_DAAI];
  }
  return entries;
};
var se_DisableSerialConsoleAccessRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableSnapshotBlockPublicAccessRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableTransitGatewayRouteTablePropagationRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  return entries;
};
var se_DisableVgwRoutePropagationRequest = (input, context) => {
  const entries = {};
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisableVpcClassicLinkDnsSupportRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DisableVpcClassicLinkRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_DisassociateAddressRequest = (input, context) => {
  const entries = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateCapacityReservationBillingOwnerRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_URBOI] != null) {
    entries[_URBOI] = input[_URBOI];
  }
  return entries;
};
var se_DisassociateClientVpnTargetNetworkRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateEnclaveCertificateIamRoleRequest = (input, context) => {
  const entries = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_RAo] != null) {
    entries[_RAo] = input[_RAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateIamInstanceProfileRequest = (input, context) => {
  const entries = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};
var se_DisassociateInstanceEventWindowRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_AT] != null) {
    const memberEntries = se_InstanceEventWindowDisassociationRequest(input[_AT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DisassociateIpamByoasnRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};
var se_DisassociateIpamResourceDiscoveryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDAIp] != null) {
    entries[_IRDAIp] = input[_IRDAIp];
  }
  return entries;
};
var se_DisassociateNatGatewayAddressRequest = (input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_AIs] != null) {
    const memberEntries = se_EipAssociationIdList(input[_AIs], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MDDS] != null) {
    entries[_MDDS] = input[_MDDS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};
var se_DisassociateSecurityGroupVpcRequest = (input, context) => {
  const entries = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateSubnetCidrBlockRequest = (input, context) => {
  const entries = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};
var se_DisassociateTransitGatewayMulticastDomainRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateTransitGatewayPolicyTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateTransitGatewayRouteTableRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateTrunkInterfaceRequest = (input, context) => {
  const entries = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_DisassociateVpcCidrBlockRequest = (input, context) => {
  const entries = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};
var se_DiskImage = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Im] != null) {
    const memberEntries = se_DiskImageDetail(input[_Im], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Vo] != null) {
    const memberEntries = se_VolumeDetail(input[_Vo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_DiskImageDetail = (input, context) => {
  const entries = {};
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_By] != null) {
    entries[_By] = input[_By];
  }
  if (input[_IMU] != null) {
    entries[_IMU] = input[_IMU];
  }
  return entries;
};
var se_DiskImageList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DiskImage(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_DnsOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_DRIT] != null) {
    entries[_DRIT] = input[_DRIT];
  }
  if (input[_PDOFIRE] != null) {
    entries[_PDOFIRE] = input[_PDOFIRE];
  }
  return entries;
};
var se_DnsServersOptionsModifyStructure = (input, context) => {
  const entries = {};
  if (input[_CDSu] != null) {
    const memberEntries = se_ValueStringList(input[_CDSu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_EbsBlockDevice = (input, context) => {
  const entries = {};
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  return entries;
};
var se_EbsInstanceBlockDeviceSpecification = (input, context) => {
  const entries = {};
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  return entries;
};
var se_EgressOnlyInternetGatewayIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_EipAssociationIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ElasticGpuIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ElasticGpuSpecification = (input, context) => {
  const entries = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  return entries;
};
var se_ElasticGpuSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ElasticGpuSpecifications = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ElasticInferenceAccelerator = (input, context) => {
  const entries = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_Cou] != null) {
    entries[_Cou] = input[_Cou];
  }
  return entries;
};
var se_ElasticInferenceAccelerators = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_EnableAddressTransferRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_TAI] != null) {
    entries[_TAI] = input[_TAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableAllowedImagesSettingsRequest = (input, context) => {
  const entries = {};
  if (input[_AISS] != null) {
    entries[_AISS] = input[_AISS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
  const entries = {};
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableEbsEncryptionByDefaultRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableFastLaunchRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_SCn] != null) {
    const memberEntries = se_FastLaunchSnapshotConfigurationRequest(input[_SCn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LTa] != null) {
    const memberEntries = se_FastLaunchLaunchTemplateSpecificationRequest(input[_LTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MPL] != null) {
    entries[_MPL] = input[_MPL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableFastSnapshotRestoresRequest = (input, context) => {
  const entries = {};
  if (input[_AZv] != null) {
    const memberEntries = se_AvailabilityZoneStringList(input[_AZv], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSIo] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SSIo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableImageBlockPublicAccessRequest = (input, context) => {
  const entries = {};
  if (input[_IBPAS] != null) {
    entries[_IBPAS] = input[_IBPAS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableImageDeprecationRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DAe] != null) {
    entries[_DAe] = serializeDateTime(input[_DAe]);
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableImageDeregistrationProtectionRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_WC] != null) {
    entries[_WC] = input[_WC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableImageRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableIpamOrganizationAdminAccountRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DAAI] != null) {
    entries[_DAAI] = input[_DAAI];
  }
  return entries;
};
var se_EnableReachabilityAnalyzerOrganizationSharingRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableSerialConsoleAccessRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableSnapshotBlockPublicAccessRequest = (input, context) => {
  const entries = {};
  if (input[_Stat] != null) {
    entries[_Stat] = input[_Stat];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableTransitGatewayRouteTablePropagationRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  return entries;
};
var se_EnableVgwRoutePropagationRequest = (input, context) => {
  const entries = {};
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_EnableVolumeIORequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  return entries;
};
var se_EnableVpcClassicLinkDnsSupportRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_EnableVpcClassicLinkRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};
var se_EnaSrdSpecification = (input, context) => {
  const entries = {};
  if (input[_ESE] != null) {
    entries[_ESE] = input[_ESE];
  }
  if (input[_ESUS] != null) {
    const memberEntries = se_EnaSrdUdpSpecification(input[_ESUS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdUdpSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_EnaSrdSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_ESE] != null) {
    entries[_ESE] = input[_ESE];
  }
  if (input[_ESUS] != null) {
    const memberEntries = se_EnaSrdUdpSpecificationRequest(input[_ESUS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdUdpSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_EnaSrdUdpSpecification = (input, context) => {
  const entries = {};
  if (input[_ESUE] != null) {
    entries[_ESUE] = input[_ESUE];
  }
  return entries;
};
var se_EnaSrdUdpSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_ESUE] != null) {
    entries[_ESUE] = input[_ESUE];
  }
  return entries;
};
var se_EnclaveOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_ExcludedInstanceTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ExecutableByStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExecutableBy.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ExportClientVpnClientCertificateRevocationListRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ExportClientVpnClientConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ExportImageRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIFi] != null) {
    entries[_DIFi] = input[_DIFi];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_SEL] != null) {
    const memberEntries = se_ExportTaskS3LocationRequest(input[_SEL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ExportLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ExportImageTaskIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportImageTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ExportTaskIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ExportTaskS3LocationRequest = (input, context) => {
  const entries = {};
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  return entries;
};
var se_ExportToS3TaskSpecification = (input, context) => {
  const entries = {};
  if (input[_DIFi] != null) {
    entries[_DIFi] = input[_DIFi];
  }
  if (input[_CFo] != null) {
    entries[_CFo] = input[_CFo];
  }
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  return entries;
};
var se_ExportTransitGatewayRoutesRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ExportVerifiedAccessInstanceClientConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_FastLaunchImageIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_FastLaunchLaunchTemplateSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};
var se_FastLaunchSnapshotConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_TRC] != null) {
    entries[_TRC] = input[_TRC];
  }
  return entries;
};
var se_FederatedAuthenticationRequest = (input, context) => {
  const entries = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  if (input[_SSSAMLPA] != null) {
    entries[_SSSAMLPA] = input[_SSSAMLPA];
  }
  return entries;
};
var se_Filter = (input, context) => {
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_Val] != null) {
    const memberEntries = se_ValueStringList(input[_Val], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_FilterList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Filter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_FleetIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_FleetLaunchTemplateConfigListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateConfigRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_FleetLaunchTemplateConfigRequest = (input, context) => {
  const entries = {};
  if (input[_LTS] != null) {
    const memberEntries = se_FleetLaunchTemplateSpecificationRequest(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ov] != null) {
    const memberEntries = se_FleetLaunchTemplateOverridesListRequest(input[_Ov], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_FleetLaunchTemplateOverridesListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateOverridesRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_FleetLaunchTemplateOverridesRequest = (input, context) => {
  const entries = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_WCe] != null) {
    entries[_WCe] = serializeFloat(input[_WCe]);
  }
  if (input[_Pri] != null) {
    entries[_Pri] = serializeFloat(input[_Pri]);
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  return entries;
};
var se_FleetLaunchTemplateSpecification = (input, context) => {
  const entries = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};
var se_FleetLaunchTemplateSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};
var se_FleetSpotCapacityRebalanceRequest = (input, context) => {
  const entries = {};
  if (input[_RS] != null) {
    entries[_RS] = input[_RS];
  }
  if (input[_TDe] != null) {
    entries[_TDe] = input[_TDe];
  }
  return entries;
};
var se_FleetSpotMaintenanceStrategiesRequest = (input, context) => {
  const entries = {};
  if (input[_CRap] != null) {
    const memberEntries = se_FleetSpotCapacityRebalanceRequest(input[_CRap], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_FlowLogIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_FlowLogResourceIds = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_FpgaImageIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_GetAllowedImagesSettingsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetAssociatedEnclaveCertificateIamRolesRequest = (input, context) => {
  const entries = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetAssociatedIpv6PoolCidrsRequest = (input, context) => {
  const entries = {};
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetAwsNetworkPerformanceDataRequest = (input, context) => {
  const entries = {};
  if (input[_DQ] != null) {
    const memberEntries = se_DataQueries(input[_DQ], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DataQuery.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  if (input[_ETn] != null) {
    entries[_ETn] = serializeDateTime(input[_ETn]);
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetCapacityReservationUsageRequest = (input, context) => {
  const entries = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetCoipPoolUsageRequest = (input, context) => {
  const entries = {};
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetConsoleOutputRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_La] != null) {
    entries[_La] = input[_La];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetConsoleScreenshotRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_WU] != null) {
    entries[_WU] = input[_WU];
  }
  return entries;
};
var se_GetDeclarativePoliciesReportSummaryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIep] != null) {
    entries[_RIep] = input[_RIep];
  }
  return entries;
};
var se_GetDefaultCreditSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  return entries;
};
var se_GetEbsDefaultKmsKeyIdRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetEbsEncryptionByDefaultRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetFlowLogsIntegrationTemplateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FLIl] != null) {
    entries[_FLIl] = input[_FLIl];
  }
  if (input[_CDSDA] != null) {
    entries[_CDSDA] = input[_CDSDA];
  }
  if (input[_ISnt] != null) {
    const memberEntries = se_IntegrateServices(input[_ISnt], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IntegrateService.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_GetGroupsForCapacityReservationRequest = (input, context) => {
  const entries = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetHostReservationPurchasePreviewRequest = (input, context) => {
  const entries = {};
  if (input[_HIS] != null) {
    const memberEntries = se_RequestHostIdSet(input[_HIS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};
var se_GetImageBlockPublicAccessStateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetInstanceMetadataDefaultsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetInstanceTpmEkPubRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_KT] != null) {
    entries[_KT] = input[_KT];
  }
  if (input[_KF] != null) {
    entries[_KF] = input[_KF];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetInstanceTypesFromInstanceRequirementsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ATr] != null) {
    const memberEntries = se_ArchitectureTypeSet(input[_ATr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VTi] != null) {
    const memberEntries = se_VirtualizationTypeSet(input[_VTi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetInstanceUefiDataRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetIpamAddressHistoryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  if (input[_ETn] != null) {
    entries[_ETn] = serializeDateTime(input[_ETn]);
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetIpamDiscoveredAccountsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_DRi] != null) {
    entries[_DRi] = input[_DRi];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_GetIpamDiscoveredPublicAddressesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_ARd] != null) {
    entries[_ARd] = input[_ARd];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_GetIpamDiscoveredResourceCidrsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_GetIpamPoolAllocationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_IPAI] != null) {
    entries[_IPAI] = input[_IPAI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetIpamPoolCidrsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetIpamResourceCidrsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_RTes] != null) {
    const memberEntries = se_RequestIpamResourceTag(input[_RTes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceTag.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ROe] != null) {
    entries[_ROe] = input[_ROe];
  }
  return entries;
};
var se_GetLaunchTemplateDataRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};
var se_GetManagedPrefixListAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetManagedPrefixListEntriesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TV] != null) {
    entries[_TV] = input[_TV];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (input, context) => {
  const entries = {};
  if (input[_NIASAI] != null) {
    entries[_NIASAI] = input[_NIASAI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetNetworkInsightsAccessScopeContentRequest = (input, context) => {
  const entries = {};
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetPasswordDataRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetReservedInstancesExchangeQuoteRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RII] != null) {
    const memberEntries = se_ReservedInstanceIdSet(input[_RII], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TC] != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input[_TC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_GetSecurityGroupsForVpcRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetSerialConsoleAccessStatusRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetSnapshotBlockPublicAccessStateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetSpotPlacementScoresRequest = (input, context) => {
  const entries = {};
  if (input[_ITnst] != null) {
    const memberEntries = se_InstanceTypes(input[_ITnst], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_RNe] != null) {
    const memberEntries = se_RegionNames(input[_RNe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IRWM] != null) {
    const memberEntries = se_InstanceRequirementsWithMetadataRequest(input[_IRWM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirementsWithMetadata.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};
var se_GetSubnetCidrReservationsRequest = (input, context) => {
  const entries = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};
var se_GetTransitGatewayAttachmentPropagationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayPolicyTableAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayPolicyTableEntriesRequest = (input, context) => {
  const entries = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayPrefixListReferencesRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayRouteTableAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetTransitGatewayRouteTablePropagationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVerifiedAccessEndpointPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVerifiedAccessEndpointTargetsRequest = (input, context) => {
  const entries = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVerifiedAccessGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVpnConnectionDeviceSampleConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VCDTI] != null) {
    entries[_VCDTI] = input[_VCDTI];
  }
  if (input[_IKEV] != null) {
    entries[_IKEV] = input[_IKEV];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVpnConnectionDeviceTypesRequest = (input, context) => {
  const entries = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GetVpnTunnelReplacementStatusRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_GroupIdentifier = (input, context) => {
  const entries = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};
var se_GroupIdentifierList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_GroupIdentifier(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_GroupIds = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_GroupIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_GroupNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_HibernationOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_Conf] != null) {
    entries[_Conf] = input[_Conf];
  }
  return entries;
};
var se_HostReservationIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IamInstanceProfileSpecification = (input, context) => {
  const entries = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};
var se_IcmpTypeCode = (input, context) => {
  const entries = {};
  if (input[_Cod] != null) {
    entries[_Cod] = input[_Cod];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  return entries;
};
var se_IKEVersionsRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IKEVersionsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_IKEVersionsRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_ImageCriterionRequest = (input, context) => {
  const entries = {};
  if (input[_IPm] != null) {
    const memberEntries = se_ImageProviderRequestList(input[_IPm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageProvider.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ImageCriterionRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImageCriterionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ImageCriterion.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ImageDiskContainer = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_UB] != null) {
    const memberEntries = se_UserBucket(input[_UB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ImageDiskContainerList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImageDiskContainer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ImageIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ImageIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ImageProviderRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ImportClientVpnClientCertificateRevocationListRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_CRL] != null) {
    entries[_CRL] = input[_CRL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ImportImageLicenseConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};
var se_ImportImageLicenseSpecificationListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImportImageLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ImportImageRequest = (input, context) => {
  const entries = {};
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_CDl] != null) {
    const memberEntries = se_ClientData(input[_CDl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DCi] != null) {
    const memberEntries = se_ImageDiskContainerList(input[_DCi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_H] != null) {
    entries[_H] = input[_H];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_LTi] != null) {
    entries[_LTi] = input[_LTi];
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_LSi] != null) {
    const memberEntries = se_ImportImageLicenseSpecificationListRequest(input[_LSi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UO] != null) {
    entries[_UO] = input[_UO];
  }
  if (input[_BM] != null) {
    entries[_BM] = input[_BM];
  }
  return entries;
};
var se_ImportInstanceLaunchSpecification = (input, context) => {
  const entries = {};
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_GNr] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_GNr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GIro] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_GIro], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_UD] != null) {
    const memberEntries = se_UserData(input[_UD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Mon] != null) {
    entries[_Mon] = input[_Mon];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};
var se_ImportInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_LSa] != null) {
    const memberEntries = se_ImportInstanceLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DIis] != null) {
    const memberEntries = se_DiskImageList(input[_DIis], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  return entries;
};
var se_ImportKeyPairRequest = (input, context) => {
  const entries = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_PKM] != null) {
    entries[_PKM] = context.base64Encoder(input[_PKM]);
  }
  return entries;
};
var se_ImportSnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_CDl] != null) {
    const memberEntries = se_ClientData(input[_CDl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DCis] != null) {
    const memberEntries = se_SnapshotDiskContainer(input[_DCis], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ImportSnapshotTaskIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ImportTaskIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ImportVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Im] != null) {
    const memberEntries = se_DiskImageDetail(input[_Im], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Vo] != null) {
    const memberEntries = se_VolumeDetail(input[_Vo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InsideCidrBlocksStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceBlockDeviceMappingSpecification = (input, context) => {
  const entries = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_E] != null) {
    const memberEntries = se_EbsInstanceBlockDeviceSpecification(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  return entries;
};
var se_InstanceBlockDeviceMappingSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceBlockDeviceMappingSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceCreditSpecificationListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceCreditSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceCreditSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};
var se_InstanceEventWindowAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITnsta] != null) {
    const memberEntries = se_TagList(input[_ITnsta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DHI] != null) {
    const memberEntries = se_DedicatedHostIdList(input[_DHI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceEventWindowDisassociationRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITnsta] != null) {
    const memberEntries = se_TagList(input[_ITnsta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DHI] != null) {
    const memberEntries = se_DedicatedHostIdList(input[_DHI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceEventWindowIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceEventWindowId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceEventWindowTimeRangeRequest = (input, context) => {
  const entries = {};
  if (input[_SWD] != null) {
    entries[_SWD] = input[_SWD];
  }
  if (input[_SH] != null) {
    entries[_SH] = input[_SH];
  }
  if (input[_EWD] != null) {
    entries[_EWD] = input[_EWD];
  }
  if (input[_EH] != null) {
    entries[_EH] = input[_EH];
  }
  return entries;
};
var se_InstanceEventWindowTimeRangeRequestSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceEventWindowTimeRangeRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceGenerationSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceIpv6Address = (input, context) => {
  const entries = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  if (input[_IPIs] != null) {
    entries[_IPIs] = input[_IPIs];
  }
  return entries;
};
var se_InstanceIpv6AddressList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceIpv6AddressListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6AddressRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceIpv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceIpv6AddressRequest = (input, context) => {
  const entries = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  return entries;
};
var se_InstanceMaintenanceOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  return entries;
};
var se_InstanceMarketOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_MT] != null) {
    entries[_MT] = input[_MT];
  }
  if (input[_SO] != null) {
    const memberEntries = se_SpotMarketOptions(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceMetadataOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};
var se_InstanceNetworkInterfaceSpecification = (input, context) => {
  const entries = {};
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_ACIA] != null) {
    entries[_ACIA] = input[_ACIA];
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_PIr] != null) {
    entries[_PIr] = input[_PIr];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceNetworkInterfaceSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceNetworkInterfaceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_InstanceNetworkPerformanceOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_BW] != null) {
    entries[_BW] = input[_BW];
  }
  return entries;
};
var se_InstanceRequirements = (input, context) => {
  const entries = {};
  if (input[_VCC] != null) {
    const memberEntries = se_VCpuCountRange(input[_VCC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MMB] != null) {
    const memberEntries = se_MemoryMiB(input[_MMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CM] != null) {
    const memberEntries = se_CpuManufacturerSet(input[_CM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MGBPVC] != null) {
    const memberEntries = se_MemoryGiBPerVCpu(input[_MGBPVC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIT] != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IG] != null) {
    const memberEntries = se_InstanceGenerationSet(input[_IG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SMPPOLP] != null) {
    entries[_SMPPOLP] = input[_SMPPOLP];
  }
  if (input[_ODMPPOLP] != null) {
    entries[_ODMPPOLP] = input[_ODMPPOLP];
  }
  if (input[_BMa] != null) {
    entries[_BMa] = input[_BMa];
  }
  if (input[_BP] != null) {
    entries[_BP] = input[_BP];
  }
  if (input[_RHS] != null) {
    entries[_RHS] = input[_RHS];
  }
  if (input[_NIC] != null) {
    const memberEntries = se_NetworkInterfaceCount(input[_NIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSo] != null) {
    entries[_LSo] = input[_LSo];
  }
  if (input[_LST] != null) {
    const memberEntries = se_LocalStorageTypeSet(input[_LST], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TLSGB] != null) {
    const memberEntries = se_TotalLocalStorageGB(input[_TLSGB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BEBM] != null) {
    const memberEntries = se_BaselineEbsBandwidthMbps(input[_BEBM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ATc] != null) {
    const memberEntries = se_AcceleratorTypeSet(input[_ATc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ACc] != null) {
    const memberEntries = se_AcceleratorCount(input[_ACc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input[_AM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ANc] != null) {
    const memberEntries = se_AcceleratorNameSet(input[_ANc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATMMB] != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiB(input[_ATMMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NBGe] != null) {
    const memberEntries = se_NetworkBandwidthGbps(input[_NBGe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIT] != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input[_AIT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MSPAPOOODP] != null) {
    entries[_MSPAPOOODP] = input[_MSPAPOOODP];
  }
  if (input[_BPF] != null) {
    const memberEntries = se_BaselinePerformanceFactors(input[_BPF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselinePerformanceFactors.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceRequirementsRequest = (input, context) => {
  const entries = {};
  if (input[_VCC] != null) {
    const memberEntries = se_VCpuCountRangeRequest(input[_VCC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MMB] != null) {
    const memberEntries = se_MemoryMiBRequest(input[_MMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CM] != null) {
    const memberEntries = se_CpuManufacturerSet(input[_CM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MGBPVC] != null) {
    const memberEntries = se_MemoryGiBPerVCpuRequest(input[_MGBPVC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIT] != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IG] != null) {
    const memberEntries = se_InstanceGenerationSet(input[_IG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SMPPOLP] != null) {
    entries[_SMPPOLP] = input[_SMPPOLP];
  }
  if (input[_ODMPPOLP] != null) {
    entries[_ODMPPOLP] = input[_ODMPPOLP];
  }
  if (input[_BMa] != null) {
    entries[_BMa] = input[_BMa];
  }
  if (input[_BP] != null) {
    entries[_BP] = input[_BP];
  }
  if (input[_RHS] != null) {
    entries[_RHS] = input[_RHS];
  }
  if (input[_NIC] != null) {
    const memberEntries = se_NetworkInterfaceCountRequest(input[_NIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSo] != null) {
    entries[_LSo] = input[_LSo];
  }
  if (input[_LST] != null) {
    const memberEntries = se_LocalStorageTypeSet(input[_LST], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TLSGB] != null) {
    const memberEntries = se_TotalLocalStorageGBRequest(input[_TLSGB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BEBM] != null) {
    const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input[_BEBM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ATc] != null) {
    const memberEntries = se_AcceleratorTypeSet(input[_ATc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ACc] != null) {
    const memberEntries = se_AcceleratorCountRequest(input[_ACc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input[_AM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ANc] != null) {
    const memberEntries = se_AcceleratorNameSet(input[_ANc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATMMB] != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input[_ATMMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NBGe] != null) {
    const memberEntries = se_NetworkBandwidthGbpsRequest(input[_NBGe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIT] != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input[_AIT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MSPAPOOODP] != null) {
    entries[_MSPAPOOODP] = input[_MSPAPOOODP];
  }
  if (input[_BPF] != null) {
    const memberEntries = se_BaselinePerformanceFactorsRequest(input[_BPF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselinePerformanceFactors.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceRequirementsWithMetadataRequest = (input, context) => {
  const entries = {};
  if (input[_ATr] != null) {
    const memberEntries = se_ArchitectureTypeSet(input[_ATr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VTi] != null) {
    const memberEntries = se_VirtualizationTypeSet(input[_VTi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceSpecification = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_EBV] != null) {
    entries[_EBV] = input[_EBV];
  }
  if (input[_EDVI] != null) {
    const memberEntries = se_VolumeIdStringList(input[_EDVI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludeDataVolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InstanceTagKeySet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceTypeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_InstanceTypes = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IntegrateServices = (input, context) => {
  const entries = {};
  if (input[_AIth] != null) {
    const memberEntries = se_AthenaIntegrationsSet(input[_AIth], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_InternetGatewayIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IpamCidrAuthorizationContext = (input, context) => {
  const entries = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};
var se_IpamPoolAllocationAllowedCidrs = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IpamPoolAllocationDisallowedCidrs = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IpamPoolSourceResourceRequest = (input, context) => {
  const entries = {};
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_ROe] != null) {
    entries[_ROe] = input[_ROe];
  }
  return entries;
};
var se_IpList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IpPermission = (input, context) => {
  const entries = {};
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_UIGP] != null) {
    const memberEntries = se_UserIdGroupPairList(input[_UIGP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IRp] != null) {
    const memberEntries = se_IpRangeList(input[_IRp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IRpv] != null) {
    const memberEntries = se_Ipv6RangeList(input[_IRpv], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_PrefixListIdList(input[_PLIr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_IpPermissionList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_IpPrefixList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_IpRange = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  return entries;
};
var se_IpRangeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Ipv4PrefixList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv4PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Ipv4PrefixSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_IPpvr] != null) {
    entries[_IPpvr] = input[_IPpvr];
  }
  return entries;
};
var se_Ipv6AddressList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_Ipv6PoolIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_Ipv6PrefixList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Ipv6PrefixSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_IPpvre] != null) {
    entries[_IPpvre] = input[_IPpvre];
  }
  return entries;
};
var se_Ipv6Range = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CIid] != null) {
    entries[_CIid] = input[_CIid];
  }
  return entries;
};
var se_Ipv6RangeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6Range(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_KeyNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyName.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_KeyPairIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyPairId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LaunchPermission = (input, context) => {
  const entries = {};
  if (input[_OAr] != null) {
    entries[_OAr] = input[_OAr];
  }
  if (input[_OUA] != null) {
    entries[_OUA] = input[_OUA];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  return entries;
};
var se_LaunchPermissionList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchPermissionModifications = (input, context) => {
  const entries = {};
  if (input[_Add] != null) {
    const memberEntries = se_LaunchPermissionList(input[_Add], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Rem] != null) {
    const memberEntries = se_LaunchPermissionList(input[_Rem], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchSpecsList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetLaunchSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateBlockDeviceMappingRequest = (input, context) => {
  const entries = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  if (input[_E] != null) {
    const memberEntries = se_LaunchTemplateEbsBlockDeviceRequest(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  return entries;
};
var se_LaunchTemplateBlockDeviceMappingRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateCapacityReservationSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_CRP] != null) {
    entries[_CRP] = input[_CRP];
  }
  if (input[_CRTa] != null) {
    const memberEntries = se_CapacityReservationTarget(input[_CRTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateConfig = (input, context) => {
  const entries = {};
  if (input[_LTS] != null) {
    const memberEntries = se_FleetLaunchTemplateSpecification(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ov] != null) {
    const memberEntries = se_LaunchTemplateOverridesList(input[_Ov], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateConfigList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateCpuOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_TPC] != null) {
    entries[_TPC] = input[_TPC];
  }
  if (input[_ASS] != null) {
    entries[_ASS] = input[_ASS];
  }
  return entries;
};
var se_LaunchTemplateEbsBlockDeviceRequest = (input, context) => {
  const entries = {};
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  return entries;
};
var se_LaunchTemplateElasticInferenceAccelerator = (input, context) => {
  const entries = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_Cou] != null) {
    entries[_Cou] = input[_Cou];
  }
  return entries;
};
var se_LaunchTemplateElasticInferenceAcceleratorList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateEnclaveOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_LaunchTemplateHibernationOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_Conf] != null) {
    entries[_Conf] = input[_Conf];
  }
  return entries;
};
var se_LaunchTemplateIamInstanceProfileSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};
var se_LaunchTemplateIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LaunchTemplateInstanceMaintenanceOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  return entries;
};
var se_LaunchTemplateInstanceMarketOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_MT] != null) {
    entries[_MT] = input[_MT];
  }
  if (input[_SO] != null) {
    const memberEntries = se_LaunchTemplateSpotMarketOptionsRequest(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateInstanceMetadataOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};
var se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_ACIA] != null) {
    entries[_ACIA] = input[_ACIA];
  }
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressListRequest(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_PIr] != null) {
    entries[_PIr] = input[_PIr];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateLicenseConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};
var se_LaunchTemplateLicenseSpecificationListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplateNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LaunchTemplateNetworkPerformanceOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_BW] != null) {
    entries[_BW] = input[_BW];
  }
  return entries;
};
var se_LaunchTemplateOverrides = (input, context) => {
  const entries = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_WCe] != null) {
    entries[_WCe] = serializeFloat(input[_WCe]);
  }
  if (input[_Pri] != null) {
    entries[_Pri] = serializeFloat(input[_Pri]);
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirements(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateOverridesList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateOverrides(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LaunchTemplatePlacementRequest = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_SDp] != null) {
    entries[_SDp] = input[_SDp];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  return entries;
};
var se_LaunchTemplatePrivateDnsNameOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_HTo] != null) {
    entries[_HTo] = input[_HTo];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};
var se_LaunchTemplatesMonitoringRequest = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_LaunchTemplateSpecification = (input, context) => {
  const entries = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};
var se_LaunchTemplateSpotMarketOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIT] != null) {
    entries[_SIT] = input[_SIT];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  if (input[_VU] != null) {
    entries[_VU] = serializeDateTime(input[_VU]);
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  return entries;
};
var se_LaunchTemplateTagSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LaunchTemplateTagSpecificationRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateTagSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LicenseConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};
var se_LicenseSpecificationListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ListImagesInRecycleBinRequest = (input, context) => {
  const entries = {};
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdStringList(input[_IImag], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ListSnapshotsInRecycleBinRequest = (input, context) => {
  const entries = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_LoadBalancersConfig = (input, context) => {
  const entries = {};
  if (input[_CLBC] != null) {
    const memberEntries = se_ClassicLoadBalancersConfig(input[_CLBC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TGC] != null) {
    const memberEntries = se_TargetGroupsConfig(input[_TGC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupsConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LoadPermissionListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LoadPermissionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_LoadPermissionModifications = (input, context) => {
  const entries = {};
  if (input[_Add] != null) {
    const memberEntries = se_LoadPermissionListRequest(input[_Add], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Rem] != null) {
    const memberEntries = se_LoadPermissionListRequest(input[_Rem], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_LoadPermissionRequest = (input, context) => {
  const entries = {};
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  return entries;
};
var se_LocalGatewayIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalGatewayRouteTableIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalGatewayRouteTableVpcAssociationIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalGatewayVirtualInterfaceGroupIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalGatewayVirtualInterfaceIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LocalStorageTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_LockSnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LM] != null) {
    entries[_LM] = input[_LM];
  }
  if (input[_COP] != null) {
    entries[_COP] = input[_COP];
  }
  if (input[_LDo] != null) {
    entries[_LDo] = input[_LDo];
  }
  if (input[_EDx] != null) {
    entries[_EDx] = serializeDateTime(input[_EDx]);
  }
  return entries;
};
var se_MemoryGiBPerVCpu = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_MemoryGiBPerVCpuRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_MemoryMiB = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_MemoryMiBRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_ModifyAddressAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_DNo] != null) {
    entries[_DNo] = input[_DNo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyAvailabilityZoneGroupRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_OIS] != null) {
    entries[_OIS] = input[_OIS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyCapacityReservationFleetRequest = (input, context) => {
  const entries = {};
  if (input[_CRFIa] != null) {
    entries[_CRFIa] = input[_CRFIa];
  }
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ED] != null) {
    entries[_ED] = serializeDateTime(input[_ED]);
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RED] != null) {
    entries[_RED] = input[_RED];
  }
  return entries;
};
var se_ModifyCapacityReservationRequest = (input, context) => {
  const entries = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_ED] != null) {
    entries[_ED] = serializeDateTime(input[_ED]);
  }
  if (input[_EDT] != null) {
    entries[_EDT] = input[_EDT];
  }
  if (input[_Ac] != null) {
    entries[_Ac] = input[_Ac];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_IMC] != null) {
    entries[_IMC] = input[_IMC];
  }
  return entries;
};
var se_ModifyClientVpnEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_SCA] != null) {
    entries[_SCA] = input[_SCA];
  }
  if (input[_CLO] != null) {
    const memberEntries = se_ConnectionLogOptions(input[_CLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DSn] != null) {
    const memberEntries = se_DnsServersOptionsModifyStructure(input[_DSn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VP] != null) {
    entries[_VP] = input[_VP];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SSP] != null) {
    entries[_SSP] = input[_SSP];
  }
  if (input[_CCO] != null) {
    const memberEntries = se_ClientConnectOptions(input[_CCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_STH] != null) {
    entries[_STH] = input[_STH];
  }
  if (input[_CLBO] != null) {
    const memberEntries = se_ClientLoginBannerOptions(input[_CLBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOST] != null) {
    entries[_DOST] = input[_DOST];
  }
  return entries;
};
var se_ModifyDefaultCreditSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};
var se_ModifyEbsDefaultKmsKeyIdRequest = (input, context) => {
  const entries = {};
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyFleetRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_LTC] != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_TCS] != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  return entries;
};
var se_ModifyFpgaImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UG] != null) {
    const memberEntries = se_UserGroupStringList(input[_UG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PCr] != null) {
    const memberEntries = se_ProductCodeStringList(input[_PCr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LP] != null) {
    const memberEntries = se_LoadPermissionModifications(input[_LP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};
var se_ModifyHostsRequest = (input, context) => {
  const entries = {};
  if (input[_HR] != null) {
    entries[_HR] = input[_HR];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_HM] != null) {
    entries[_HM] = input[_HM];
  }
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AP] != null) {
    entries[_AP] = input[_AP];
  }
  return entries;
};
var se_ModifyIdentityIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  if (input[_ULI] != null) {
    entries[_ULI] = input[_ULI];
  }
  if (input[_PAr] != null) {
    entries[_PAr] = input[_PAr];
  }
  return entries;
};
var se_ModifyIdFormatRequest = (input, context) => {
  const entries = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  if (input[_ULI] != null) {
    entries[_ULI] = input[_ULI];
  }
  return entries;
};
var se_ModifyImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_De] != null) {
    const memberEntries = se_AttributeValue(input[_De], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_LPa] != null) {
    const memberEntries = se_LaunchPermissionModifications(input[_LPa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_PCr] != null) {
    const memberEntries = se_ProductCodeStringList(input[_PCr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UG] != null) {
    const memberEntries = se_UserGroupStringList(input[_UG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  if (input[_OArg] != null) {
    const memberEntries = se_OrganizationArnStringList(input[_OArg], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OUAr] != null) {
    const memberEntries = se_OrganizationalUnitArnStringList(input[_OUAr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ISm] != null) {
    const memberEntries = se_AttributeValue(input[_ISm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImdsSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstanceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_SDC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_SDC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAS] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DAS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiStop.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_InstanceBlockDeviceMappingSpecificationList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DATis] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DATis], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiTermination.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IT] != null) {
    const memberEntries = se_AttributeValue(input[_IT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_K] != null) {
    const memberEntries = se_AttributeValue(input[_K], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Kernel.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ra] != null) {
    const memberEntries = se_AttributeValue(input[_Ra], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ramdisk.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UD] != null) {
    const memberEntries = se_BlobAttributeValue(input[_UD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IISB] != null) {
    const memberEntries = se_AttributeValue(input[_IISB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceInitiatedShutdownBehavior.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_G] != null) {
    const memberEntries = se_GroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EbsOptimized.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SNS] != null) {
    const memberEntries = se_AttributeValue(input[_SNS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SriovNetSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ESn] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ESn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSupport.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyInstanceCapacityReservationAttributesRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_CRS] != null) {
    const memberEntries = se_CapacityReservationSpecification(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstanceCpuOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_TPC] != null) {
    entries[_TPC] = input[_TPC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstanceCreditSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ICS] != null) {
    const memberEntries = se_InstanceCreditSpecificationListRequest(input[_ICS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyInstanceEventStartTimeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_IEI] != null) {
    entries[_IEI] = input[_IEI];
  }
  if (input[_NB] != null) {
    entries[_NB] = serializeDateTime(input[_NB]);
  }
  return entries;
};
var se_ModifyInstanceEventWindowRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_TRi] != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CE] != null) {
    entries[_CE] = input[_CE];
  }
  return entries;
};
var se_ModifyInstanceMaintenanceOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstanceMetadataDefaultsRequest = (input, context) => {
  const entries = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstanceMetadataOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};
var se_ModifyInstanceNetworkPerformanceRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_BW] != null) {
    entries[_BW] = input[_BW];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyInstancePlacementRequest = (input, context) => {
  const entries = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  return entries;
};
var se_ModifyIpamPoolRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AIu] != null) {
    entries[_AIu] = input[_AIu];
  }
  if (input[_AMNL] != null) {
    entries[_AMNL] = input[_AMNL];
  }
  if (input[_AMNLl] != null) {
    entries[_AMNLl] = input[_AMNLl];
  }
  if (input[_ADNL] != null) {
    entries[_ADNL] = input[_ADNL];
  }
  if (input[_CADNL] != null) {
    entries[_CADNL] = input[_CADNL];
  }
  if (input[_AART] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_AART], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RART] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_RART], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyIpamRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AOR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ROR] != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ti] != null) {
    entries[_Ti] = input[_Ti];
  }
  if (input[_EPG] != null) {
    entries[_EPG] = input[_EPG];
  }
  return entries;
};
var se_ModifyIpamResourceCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RC] != null) {
    entries[_RC] = input[_RC];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_CISI] != null) {
    entries[_CISI] = input[_CISI];
  }
  if (input[_DISI] != null) {
    entries[_DISI] = input[_DISI];
  }
  if (input[_Moni] != null) {
    entries[_Moni] = input[_Moni];
  }
  return entries;
};
var se_ModifyIpamResourceDiscoveryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AOR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ROR] != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AOUE] != null) {
    const memberEntries = se_AddIpamOrganizationalUnitExclusionSet(input[_AOUE], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOrganizationalUnitExclusion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ROUE] != null) {
    const memberEntries = se_RemoveIpamOrganizationalUnitExclusionSet(input[_ROUE], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOrganizationalUnitExclusion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyIpamScopeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};
var se_ModifyLaunchTemplateRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_DVef] != null) {
    entries[_SDV] = input[_DVef];
  }
  return entries;
};
var se_ModifyLocalGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};
var se_ModifyManagedPrefixListRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_CVu] != null) {
    entries[_CVu] = input[_CVu];
  }
  if (input[_PLN] != null) {
    entries[_PLN] = input[_PLN];
  }
  if (input[_AEd] != null) {
    const memberEntries = se_AddPrefixListEntries(input[_AEd], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_REe] != null) {
    const memberEntries = se_RemovePrefixListEntries(input[_REe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ME] != null) {
    entries[_ME] = input[_ME];
  }
  return entries;
};
var se_ModifyNetworkInterfaceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecification(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_De] != null) {
    const memberEntries = se_AttributeValue(input[_De], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SDC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_SDC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Att] != null) {
    const memberEntries = se_NetworkInterfaceAttachmentChanges(input[_Att], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attachment.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyPrivateDnsNameOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PDHT] != null) {
    entries[_PDHT] = input[_PDHT];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};
var se_ModifyReservedInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_RIIes] != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TC] != null) {
    const memberEntries = se_ReservedInstancesConfigurationList(input[_TC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifySecurityGroupRulesRequest = (input, context) => {
  const entries = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_SGR] != null) {
    const memberEntries = se_SecurityGroupRuleUpdateList(input[_SGR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifySnapshotAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_CVP] != null) {
    const memberEntries = se_CreateVolumePermissionModifications(input[_CVP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreateVolumePermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_GroupNameStringList(input[_GNr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifySnapshotTierRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_STto] != null) {
    entries[_STto] = input[_STto];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifySpotFleetRequestRequest = (input, context) => {
  const entries = {};
  if (input[_LTC] != null) {
    const memberEntries = se_LaunchTemplateConfigList(input[_LTC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  return entries;
};
var se_ModifySubnetAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_AIAOC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_AIAOC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssignIpv6AddressOnCreation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MPIOL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_MPIOL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapPublicIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_MCOIOL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_MCOIOL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_COIP] != null) {
    entries[_COIP] = input[_COIP];
  }
  if (input[_EDn] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDns64.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHTOL] != null) {
    entries[_PDHTOL] = input[_PDHTOL];
  }
  if (input[_ERNDAROL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ERNDAROL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ERNDAAAAROL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ERNDAAAAROL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ELADI] != null) {
    entries[_ELADI] = input[_ELADI];
  }
  if (input[_DLADI] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DLADI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableLniAtDeviceIndex.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyTrafficMirrorFilterNetworkServicesRequest = (input, context) => {
  const entries = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_ANS] != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input[_ANS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RNS] != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input[_RNS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTrafficMirrorFilterRuleRequest = (input, context) => {
  const entries = {};
  if (input[_TMFRI] != null) {
    entries[_TMFRI] = input[_TMFRI];
  }
  if (input[_TD] != null) {
    entries[_TD] = input[_TD];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_SCB] != null) {
    entries[_SCB] = input[_SCB];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_RF] != null) {
    const memberEntries = se_TrafficMirrorFilterRuleFieldList(input[_RF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTrafficMirrorSessionRequest = (input, context) => {
  const entries = {};
  if (input[_TMSI] != null) {
    entries[_TMSI] = input[_TMSI];
  }
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_PL] != null) {
    entries[_PL] = input[_PL];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_VNI] != null) {
    entries[_VNI] = input[_VNI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_RF] != null) {
    const memberEntries = se_TrafficMirrorSessionFieldList(input[_RF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTransitGatewayOptions = (input, context) => {
  const entries = {};
  if (input[_ATGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_ATGCB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RTGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_RTGCB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VES] != null) {
    entries[_VES] = input[_VES];
  }
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_AASAu] != null) {
    entries[_AASAu] = input[_AASAu];
  }
  if (input[_DRTA] != null) {
    entries[_DRTA] = input[_DRTA];
  }
  if (input[_ADRTI] != null) {
    entries[_ADRTI] = input[_ADRTI];
  }
  if (input[_DRTP] != null) {
    entries[_DRTP] = input[_DRTP];
  }
  if (input[_PDRTI] != null) {
    entries[_PDRTI] = input[_PDRTI];
  }
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  return entries;
};
var se_ModifyTransitGatewayPrefixListReferenceRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTransitGatewayRequest = (input, context) => {
  const entries = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Op] != null) {
    const memberEntries = se_ModifyTransitGatewayOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTransitGatewayVpcAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_ASI] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_ASI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIe] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_RSIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Op] != null) {
    const memberEntries = se_ModifyTransitGatewayVpcAttachmentRequestOptions(input[_Op], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
  const entries = {};
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_ISp] != null) {
    entries[_ISp] = input[_ISp];
  }
  if (input[_AMS] != null) {
    entries[_AMS] = input[_AMS];
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointCidrOptions = (input, context) => {
  const entries = {};
  if (input[_PRo] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointEniOptions = (input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_PRo] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
  const entries = {};
  if (input[_SIu] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_PRo] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_PE] != null) {
    entries[_PE] = input[_PE];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointPortRange = (input, context) => {
  const entries = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointPortRangeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ModifyVerifiedAccessEndpointPortRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointRdsOptions = (input, context) => {
  const entries = {};
  if (input[_SIu] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_RE] != null) {
    entries[_RE] = input[_RE];
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_LBO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointLoadBalancerOptions(input[_LBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointEniOptions(input[_NIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointRdsOptions(input[_RO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RdsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointCidrOptions(input[_CO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessEndpointSubnetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ModifyVerifiedAccessGroupPolicyRequest = (input, context) => {
  const entries = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_PE] != null) {
    entries[_PE] = input[_PE];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVerifiedAccessGroupRequest = (input, context) => {
  const entries = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_AL] != null) {
    const memberEntries = se_VerifiedAccessLogOptions(input[_AL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccessLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_ModifyVerifiedAccessInstanceRequest = (input, context) => {
  const entries = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_CECSD] != null) {
    entries[_CECSD] = input[_CECSD];
  }
  return entries;
};
var se_ModifyVerifiedAccessNativeApplicationOidcOptions = (input, context) => {
  const entries = {};
  if (input[_PSKE] != null) {
    entries[_PSKE] = input[_PSKE];
  }
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};
var se_ModifyVerifiedAccessTrustProviderDeviceOptions = (input, context) => {
  const entries = {};
  if (input[_PSKU] != null) {
    entries[_PSKU] = input[_PSKU];
  }
  return entries;
};
var se_ModifyVerifiedAccessTrustProviderOidcOptions = (input, context) => {
  const entries = {};
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};
var se_ModifyVerifiedAccessTrustProviderRequest = (input, context) => {
  const entries = {};
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_OO] != null) {
    const memberEntries = se_ModifyVerifiedAccessTrustProviderOidcOptions(input[_OO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOe] != null) {
    const memberEntries = se_ModifyVerifiedAccessTrustProviderDeviceOptions(input[_DOe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DeviceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NAOO] != null) {
    const memberEntries = se_ModifyVerifiedAccessNativeApplicationOidcOptions(input[_NAOO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NativeApplicationOidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVolumeAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_AEIO] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_AEIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoEnableIO.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVolumeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_MAE] != null) {
    entries[_MAE] = input[_MAE];
  }
  return entries;
};
var se_ModifyVpcAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_EDH] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDH], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsHostnames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EDS] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_ENAUM] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ENAUM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableNetworkAddressUsageMetrics.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVpcBlockPublicAccessExclusionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EIxc] != null) {
    entries[_EIxc] = input[_EIxc];
  }
  if (input[_IGEM] != null) {
    entries[_IGEM] = input[_IGEM];
  }
  return entries;
};
var se_ModifyVpcBlockPublicAccessOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGBM] != null) {
    entries[_IGBM] = input[_IGBM];
  }
  return entries;
};
var se_ModifyVpcEndpointConnectionNotificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIon] != null) {
    entries[_CNIon] = input[_CNIon];
  }
  if (input[_CNAon] != null) {
    entries[_CNAon] = input[_CNAon];
  }
  if (input[_CEo] != null) {
    const memberEntries = se_ValueStringList(input[_CEo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVpcEndpointRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_RP] != null) {
    entries[_RP] = input[_RP];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_ARTI] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_ARTI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RRTI] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_RRTI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASI] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_ASI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIe] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_RSIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGId] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_ASGId], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSGIe] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_RSGIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  if (input[_DOn] != null) {
    const memberEntries = se_DnsOptionsSpecification(input[_DOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDE] != null) {
    entries[_PDE] = input[_PDE];
  }
  if (input[_SC] != null) {
    const memberEntries = se_SubnetConfigurationsList(input[_SC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVpcEndpointServiceConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_PDN] != null) {
    entries[_PDN] = input[_PDN];
  }
  if (input[_RPDN] != null) {
    entries[_RPDN] = input[_RPDN];
  }
  if (input[_ARc] != null) {
    entries[_ARc] = input[_ARc];
  }
  if (input[_ANLBA] != null) {
    const memberEntries = se_ValueStringList(input[_ANLBA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RNLBA] != null) {
    const memberEntries = se_ValueStringList(input[_RNLBA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AGLBA] != null) {
    const memberEntries = se_ValueStringList(input[_AGLBA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RGLBA] != null) {
    const memberEntries = se_ValueStringList(input[_RGLBA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASIAT] != null) {
    const memberEntries = se_ValueStringList(input[_ASIAT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIAT] != null) {
    const memberEntries = se_ValueStringList(input[_RSIAT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASR] != null) {
    const memberEntries = se_ValueStringList(input[_ASR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSR] != null) {
    const memberEntries = se_ValueStringList(input[_RSR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVpcEndpointServicePayerResponsibilityRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_PRa] != null) {
    entries[_PRa] = input[_PRa];
  }
  return entries;
};
var se_ModifyVpcEndpointServicePermissionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_AAP] != null) {
    const memberEntries = se_ValueStringList(input[_AAP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RAP] != null) {
    const memberEntries = se_ValueStringList(input[_RAP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ModifyVpcPeeringConnectionOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_APCO] != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input[_APCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccepterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RPCO] != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input[_RPCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RequesterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};
var se_ModifyVpcTenancyRequest = (input, context) => {
  const entries = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVpnConnectionOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_LINC] != null) {
    entries[_LINC] = input[_LINC];
  }
  if (input[_RINC] != null) {
    entries[_RINC] = input[_RINC];
  }
  if (input[_LINCo] != null) {
    entries[_LINCo] = input[_LINCo];
  }
  if (input[_RINCe] != null) {
    entries[_RINCe] = input[_RINCe];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVpnConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVpnTunnelCertificateRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ModifyVpnTunnelOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_TO] != null) {
    const memberEntries = se_ModifyVpnTunnelOptionsSpecification(input[_TO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_STR] != null) {
    entries[_STR] = input[_STR];
  }
  return entries;
};
var se_ModifyVpnTunnelOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_TIC] != null) {
    entries[_TIC] = input[_TIC];
  }
  if (input[_TIIC] != null) {
    entries[_TIIC] = input[_TIIC];
  }
  if (input[_PSK] != null) {
    entries[_PSK] = input[_PSK];
  }
  if (input[_PLS] != null) {
    entries[_PLS] = input[_PLS];
  }
  if (input[_PLSh] != null) {
    entries[_PLSh] = input[_PLSh];
  }
  if (input[_RMTS] != null) {
    entries[_RMTS] = input[_RMTS];
  }
  if (input[_RFP] != null) {
    entries[_RFP] = input[_RFP];
  }
  if (input[_RWS] != null) {
    entries[_RWS] = input[_RWS];
  }
  if (input[_DPDTS] != null) {
    entries[_DPDTS] = input[_DPDTS];
  }
  if (input[_DPDTA] != null) {
    entries[_DPDTA] = input[_DPDTA];
  }
  if (input[_PEA] != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PEAh] != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAh] != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAha] != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGN] != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGNh] != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IKEVe] != null) {
    const memberEntries = se_IKEVersionsRequestList(input[_IKEVe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  if (input[_LO] != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ETLC] != null) {
    entries[_ETLC] = input[_ETLC];
  }
  return entries;
};
var se_MonitorInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_MoveAddressToVpcRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  return entries;
};
var se_MoveByoipCidrToIpamRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_IPO] != null) {
    entries[_IPO] = input[_IPO];
  }
  return entries;
};
var se_MoveCapacityReservationInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SCRI] != null) {
    entries[_SCRI] = input[_SCRI];
  }
  if (input[_DCRI] != null) {
    entries[_DCRI] = input[_DCRI];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  return entries;
};
var se_NatGatewayIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkAclIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkBandwidthGbps = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_NetworkBandwidthGbpsRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_NetworkInsightsAccessScopeAnalysisIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkInsightsAccessScopeIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkInsightsAnalysisIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkInsightsPathIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkInterfaceAttachmentChanges = (input, context) => {
  const entries = {};
  if (input[_AIt] != null) {
    entries[_AIt] = input[_AIt];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  return entries;
};
var se_NetworkInterfaceCount = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_NetworkInterfaceCountRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_NetworkInterfaceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NetworkInterfacePermissionIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_NewDhcpConfiguration = (input, context) => {
  const entries = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Val] != null) {
    const memberEntries = se_ValueStringList(input[_Val], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_NewDhcpConfigurationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_NewDhcpConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_OccurrenceDayRequestSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OccurenceDay.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_OnDemandOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_CRO] != null) {
    const memberEntries = se_CapacityReservationOptionsRequest(input[_CRO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SITi] != null) {
    entries[_SITi] = input[_SITi];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_MTC] != null) {
    entries[_MTC] = input[_MTC];
  }
  if (input[_MTP] != null) {
    entries[_MTP] = input[_MTP];
  }
  return entries;
};
var se_OperatorRequest = (input, context) => {
  const entries = {};
  if (input[_Prin] != null) {
    entries[_Prin] = input[_Prin];
  }
  return entries;
};
var se_OrganizationalUnitArnStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationalUnitArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_OrganizationArnStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_OwnerStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Owner.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PacketHeaderStatementRequest = (input, context) => {
  const entries = {};
  if (input[_SAo] != null) {
    const memberEntries = se_ValueStringList(input[_SAo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DAes] != null) {
    const memberEntries = se_ValueStringList(input[_DAes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPo] != null) {
    const memberEntries = se_ValueStringList(input[_SPo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DPes] != null) {
    const memberEntries = se_ValueStringList(input[_DPes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPL] != null) {
    const memberEntries = se_ValueStringList(input[_SPL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DPLe] != null) {
    const memberEntries = se_ValueStringList(input[_DPLe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pro] != null) {
    const memberEntries = se_ProtocolList(input[_Pro], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_PathRequestFilter = (input, context) => {
  const entries = {};
  if (input[_SAou] != null) {
    entries[_SAou] = input[_SAou];
  }
  if (input[_SPR] != null) {
    const memberEntries = se_RequestFilterPortRange(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAest] != null) {
    entries[_DAest] = input[_DAest];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_RequestFilterPortRange(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_PathStatementRequest = (input, context) => {
  const entries = {};
  if (input[_PHS] != null) {
    const memberEntries = se_PacketHeaderStatementRequest(input[_PHS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PacketHeaderStatement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RSe] != null) {
    const memberEntries = se_ResourceStatementRequest(input[_RSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_PeeringConnectionOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_ADRFRV] != null) {
    entries[_ADRFRV] = input[_ADRFRV];
  }
  if (input[_AEFLCLTRV] != null) {
    entries[_AEFLCLTRV] = input[_AEFLCLTRV];
  }
  if (input[_AEFLVTRCL] != null) {
    entries[_AEFLVTRCL] = input[_AEFLVTRCL];
  }
  return entries;
};
var se_PerformanceFactorReference = (input, context) => {
  const entries = {};
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  return entries;
};
var se_PerformanceFactorReferenceRequest = (input, context) => {
  const entries = {};
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  return entries;
};
var se_PerformanceFactorReferenceSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PerformanceFactorReference(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PerformanceFactorReferenceSetRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PerformanceFactorReferenceRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase1DHGroupNumbersRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase1DHGroupNumbersRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Phase1EncryptionAlgorithmsRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase1EncryptionAlgorithmsRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Phase1IntegrityAlgorithmsRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase1IntegrityAlgorithmsRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Phase2DHGroupNumbersRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase2DHGroupNumbersRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Phase2EncryptionAlgorithmsRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase2EncryptionAlgorithmsRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Phase2IntegrityAlgorithmsRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_Phase2IntegrityAlgorithmsRequestListValue = (input, context) => {
  const entries = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_Placement = (input, context) => {
  const entries = {};
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_SDp] != null) {
    entries[_SDp] = input[_SDp];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  return entries;
};
var se_PlacementGroupIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PlacementGroupStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PortRange = (input, context) => {
  const entries = {};
  if (input[_Fr] != null) {
    entries[_Fr] = input[_Fr];
  }
  if (input[_To] != null) {
    entries[_To] = input[_To];
  }
  return entries;
};
var se_PrefixListId = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  return entries;
};
var se_PrefixListIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrefixListId(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PrefixListResourceIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PriceScheduleSpecification = (input, context) => {
  const entries = {};
  if (input[_Ter] != null) {
    entries[_Ter] = input[_Ter];
  }
  if (input[_Pric] != null) {
    entries[_Pric] = serializeFloat(input[_Pric]);
  }
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  return entries;
};
var se_PriceScheduleSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PriceScheduleSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PrivateDnsNameOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_HTo] != null) {
    entries[_HTo] = input[_HTo];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};
var se_PrivateIpAddressConfigSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesPrivateIpAddressConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PrivateIpAddressSpecification = (input, context) => {
  const entries = {};
  if (input[_Prim] != null) {
    entries[_Prim] = input[_Prim];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};
var se_PrivateIpAddressSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrivateIpAddressSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PrivateIpAddressStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PrivateIpAddress.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ProductCodeStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ProductCode.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ProductDescriptionList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ProtocolList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ProvisionByoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CAC] != null) {
    const memberEntries = se_CidrAuthorizationContext(input[_CAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PTS] != null) {
    const memberEntries = se_TagSpecificationList(input[_PTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MRu] != null) {
    entries[_MRu] = input[_MRu];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  return entries;
};
var se_ProvisionIpamByoasnRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_AAC] != null) {
    const memberEntries = se_AsnAuthorizationContext(input[_AAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AsnAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ProvisionIpamPoolCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CAC] != null) {
    const memberEntries = se_IpamCidrAuthorizationContext(input[_CAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_VM] != null) {
    entries[_VM] = input[_VM];
  }
  if (input[_IERVTI] != null) {
    entries[_IERVTI] = input[_IERVTI];
  }
  return entries;
};
var se_ProvisionPublicIpv4PoolCidrRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  return entries;
};
var se_PublicIpStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PublicIp.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PublicIpv4PoolIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_PurchaseCapacityBlockExtensionRequest = (input, context) => {
  const entries = {};
  if (input[_CBEOI] != null) {
    entries[_CBEOI] = input[_CBEOI];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_PurchaseCapacityBlockRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CBOI] != null) {
    entries[_CBOI] = input[_CBOI];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  return entries;
};
var se_PurchaseHostReservationRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  if (input[_HIS] != null) {
    const memberEntries = se_RequestHostIdSet(input[_HIS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LPi] != null) {
    entries[_LPi] = input[_LPi];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_PurchaseRequest = (input, context) => {
  const entries = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_PT] != null) {
    entries[_PT] = input[_PT];
  }
  return entries;
};
var se_PurchaseRequestSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PurchaseRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PurchaseRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_PurchaseReservedInstancesOfferingRequest = (input, context) => {
  const entries = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_RIOIe] != null) {
    entries[_RIOIe] = input[_RIOIe];
  }
  if (input[_PTu] != null) {
    entries[_PTu] = serializeDateTime(input[_PTu]);
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LPi] != null) {
    const memberEntries = se_ReservedInstanceLimitPrice(input[_LPi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LimitPrice.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_PurchaseScheduledInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PRu] != null) {
    const memberEntries = se_PurchaseRequestSet(input[_PRu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ReasonCodesList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RebootInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RegionNames = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RegionNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`RegionName.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RegisterImageRequest = (input, context) => {
  const entries = {};
  if (input[_IL] != null) {
    entries[_IL] = input[_IL];
  }
  if (input[_BPi] != null) {
    const memberEntries = se_BillingProductList(input[_BPi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_BM] != null) {
    entries[_BM] = input[_BM];
  }
  if (input[_TSp] != null) {
    entries[_TSp] = input[_TSp];
  }
  if (input[_UDe] != null) {
    entries[_UDe] = input[_UDe];
  }
  if (input[_ISm] != null) {
    entries[_ISm] = input[_ISm];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_RDN] != null) {
    entries[_RDN] = input[_RDN];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VTir] != null) {
    entries[_VTir] = input[_VTir];
  }
  if (input[_SNS] != null) {
    entries[_SNS] = input[_SNS];
  }
  if (input[_ESn] != null) {
    entries[_ESn] = input[_ESn];
  }
  return entries;
};
var se_RegisterInstanceEventNotificationAttributesRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITA] != null) {
    const memberEntries = se_RegisterInstanceTagAttributeRequest(input[_ITA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RegisterInstanceTagAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_IATOI] != null) {
    entries[_IATOI] = input[_IATOI];
  }
  if (input[_ITK] != null) {
    const memberEntries = se_InstanceTagKeySet(input[_ITK], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RegisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RegisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RejectCapacityReservationBillingOwnershipRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  return entries;
};
var se_RejectTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_ValueStringList(input[_SIu], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RejectTransitGatewayPeeringAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RejectTransitGatewayVpcAttachmentRequest = (input, context) => {
  const entries = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RejectVpcEndpointConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RejectVpcPeeringConnectionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};
var se_ReleaseAddressRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ReleaseHostsRequest = (input, context) => {
  const entries = {};
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ReleaseIpamPoolAllocationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_IPAI] != null) {
    entries[_IPAI] = input[_IPAI];
  }
  return entries;
};
var se_RemoveIpamOperatingRegion = (input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};
var se_RemoveIpamOperatingRegionSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemoveIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_RemoveIpamOrganizationalUnitExclusion = (input, context) => {
  const entries = {};
  if (input[_OEP] != null) {
    entries[_OEP] = input[_OEP];
  }
  return entries;
};
var se_RemoveIpamOrganizationalUnitExclusionSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemoveIpamOrganizationalUnitExclusion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_RemovePrefixListEntries = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemovePrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_RemovePrefixListEntry = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};
var se_ReplaceIamInstanceProfileAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};
var se_ReplaceImageCriteriaInAllowedImagesSettingsRequest = (input, context) => {
  const entries = {};
  if (input[_ICm] != null) {
    const memberEntries = se_ImageCriterionRequestList(input[_ICm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageCriterion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ReplaceNetworkAclAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  return entries;
};
var se_ReplaceNetworkAclEntryRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_ITC] != null) {
    const memberEntries = se_IcmpTypeCode(input[_ITC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PR] != null) {
    const memberEntries = se_PortRange(input[_PR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ReplaceRootVolumeTaskIds = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ReplaceRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_LTo] != null) {
    entries[_LTo] = input[_LTo];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_CNAo] != null) {
    entries[_CNAo] = input[_CNAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  return entries;
};
var se_ReplaceRouteTableAssociationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};
var se_ReplaceTransitGatewayRouteRequest = (input, context) => {
  const entries = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ReplaceVpnTunnelRequest = (input, context) => {
  const entries = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_APM] != null) {
    entries[_APM] = input[_APM];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ReportInstanceStatusRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_In] != null) {
    const memberEntries = se_InstanceIdStringList(input[_In], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Statu] != null) {
    entries[_Statu] = input[_Statu];
  }
  if (input[_STt] != null) {
    entries[_STt] = serializeDateTime(input[_STt]);
  }
  if (input[_ETn] != null) {
    entries[_ETn] = serializeDateTime(input[_ETn]);
  }
  if (input[_RCe] != null) {
    const memberEntries = se_ReasonCodesList(input[_RCe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};
var se_RequestFilterPortRange = (input, context) => {
  const entries = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};
var se_RequestHostIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RequestHostIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RequestInstanceTypeList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RequestIpamResourceTag = (input, context) => {
  const entries = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_RequestIpamResourceTagList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RequestIpamResourceTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_RequestLaunchTemplateData = (input, context) => {
  const entries = {};
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_LaunchTemplateIamInstanceProfileSpecificationRequest(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BDM] != null) {
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequestList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input[_NI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_LaunchTemplatesMonitoringRequest(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_LaunchTemplatePlacementRequest(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RDI] != null) {
    entries[_RDI] = input[_RDI];
  }
  if (input[_DATis] != null) {
    entries[_DATis] = input[_DATis];
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_LaunchTemplateTagSpecificationRequestList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EGS] != null) {
    const memberEntries = se_ElasticGpuSpecificationList(input[_EGS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EIA] != null) {
    const memberEntries = se_LaunchTemplateElasticInferenceAcceleratorList(input[_EIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_SG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IMO] != null) {
    const memberEntries = se_LaunchTemplateInstanceMarketOptionsRequest(input[_IMO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSred] != null) {
    const memberEntries = se_CreditSpecificationRequest(input[_CSred], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_COp] != null) {
    const memberEntries = se_LaunchTemplateCpuOptionsRequest(input[_COp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CRS] != null) {
    const memberEntries = se_LaunchTemplateCapacityReservationSpecificationRequest(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSi] != null) {
    const memberEntries = se_LaunchTemplateLicenseSpecificationListRequest(input[_LSi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HO] != null) {
    const memberEntries = se_LaunchTemplateHibernationOptionsRequest(input[_HO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MO] != null) {
    const memberEntries = se_LaunchTemplateInstanceMetadataOptionsRequest(input[_MO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EOn] != null) {
    const memberEntries = se_LaunchTemplateEnclaveOptionsRequest(input[_EOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDNO] != null) {
    const memberEntries = se_LaunchTemplatePrivateDnsNameOptionsRequest(input[_PDNO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MOa] != null) {
    const memberEntries = se_LaunchTemplateInstanceMaintenanceOptionsRequest(input[_MOa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAS] != null) {
    entries[_DAS] = input[_DAS];
  }
  if (input[_O] != null) {
    const memberEntries = se_OperatorRequest(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Operator.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NPO] != null) {
    const memberEntries = se_LaunchTemplateNetworkPerformanceOptionsRequest(input[_NPO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkPerformanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RequestSpotFleetRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRC] != null) {
    const memberEntries = se_SpotFleetRequestConfigData(input[_SFRC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RequestSpotInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_LSa] != null) {
    const memberEntries = se_RequestSpotLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = serializeDateTime(input[_VF]);
  }
  if (input[_VU] != null) {
    entries[_VU] = serializeDateTime(input[_VU]);
  }
  if (input[_LG] != null) {
    entries[_LG] = input[_LG];
  }
  if (input[_AZG] != null) {
    entries[_AZG] = input[_AZG];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  return entries;
};
var se_RequestSpotLaunchSpecification = (input, context) => {
  const entries = {};
  if (input[_SGI] != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupIdList(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupList(input[_SG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATd] != null) {
    entries[_ATd] = input[_ATd];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_SpotPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  return entries;
};
var se_RequestSpotLaunchSpecificationSecurityGroupIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RequestSpotLaunchSpecificationSecurityGroupList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ReservationFleetInstanceSpecification = (input, context) => {
  const entries = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  if (input[_W] != null) {
    entries[_W] = serializeFloat(input[_W]);
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_Pri] != null) {
    entries[_Pri] = input[_Pri];
  }
  return entries;
};
var se_ReservationFleetInstanceSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservationFleetInstanceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ReservedInstanceIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ReservedInstanceLimitPrice = (input, context) => {
  const entries = {};
  if (input[_Am] != null) {
    entries[_Am] = serializeFloat(input[_Am]);
  }
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  return entries;
};
var se_ReservedInstancesConfiguration = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};
var se_ReservedInstancesConfigurationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservedInstancesConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ReservedInstancesIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ReservedInstancesModificationIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesModificationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ReservedInstancesOfferingIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ResetAddressAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ResetEbsDefaultKmsKeyIdRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ResetFpgaImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};
var se_ResetImageAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ResetInstanceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};
var se_ResetNetworkInterfaceAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_SDC] != null) {
    entries[_SDC] = input[_SDC];
  }
  return entries;
};
var se_ResetSnapshotAttributeRequest = (input, context) => {
  const entries = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ResourceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ResourceList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ResourceStatementRequest = (input, context) => {
  const entries = {};
  if (input[_Re] != null) {
    const memberEntries = se_ValueStringList(input[_Re], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RTeso] != null) {
    const memberEntries = se_ValueStringList(input[_RTeso], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RestorableByStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RestoreAddressToClassicRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  return entries;
};
var se_RestoreImageFromRecycleBinRequest = (input, context) => {
  const entries = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RestoreManagedPrefixListVersionRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_PV] != null) {
    entries[_PV] = input[_PV];
  }
  if (input[_CVu] != null) {
    entries[_CVu] = input[_CVu];
  }
  return entries;
};
var se_RestoreSnapshotFromRecycleBinRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RestoreSnapshotTierRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_TRD] != null) {
    entries[_TRD] = input[_TRD];
  }
  if (input[_PRer] != null) {
    entries[_PRer] = input[_PRer];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RevokeClientVpnIngressRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TNC] != null) {
    entries[_TNC] = input[_TNC];
  }
  if (input[_AGI] != null) {
    entries[_AGI] = input[_AGI];
  }
  if (input[_RAG] != null) {
    entries[_RAG] = input[_RAG];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RevokeSecurityGroupEgressRequest = (input, context) => {
  const entries = {};
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_RevokeSecurityGroupIngressRequest = (input, context) => {
  const entries = {};
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_RouteTableIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_RunInstancesMonitoringEnabled = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_RunInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_MC] != null) {
    entries[_MC] = input[_MC];
  }
  if (input[_MCi] != null) {
    entries[_MCi] = input[_MCi];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_SG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_EGSl] != null) {
    const memberEntries = se_ElasticGpuSpecifications(input[_EGSl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EIA] != null) {
    const memberEntries = se_ElasticInferenceAccelerators(input[_EIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTa] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IMO] != null) {
    const memberEntries = se_InstanceMarketOptionsRequest(input[_IMO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSred] != null) {
    const memberEntries = se_CreditSpecificationRequest(input[_CSred], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_COp] != null) {
    const memberEntries = se_CpuOptionsRequest(input[_COp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CRS] != null) {
    const memberEntries = se_CapacityReservationSpecification(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HO] != null) {
    const memberEntries = se_HibernationOptionsRequest(input[_HO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSi] != null) {
    const memberEntries = se_LicenseSpecificationListRequest(input[_LSi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MO] != null) {
    const memberEntries = se_InstanceMetadataOptionsRequest(input[_MO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EOn] != null) {
    const memberEntries = se_EnclaveOptionsRequest(input[_EOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDNO] != null) {
    const memberEntries = se_PrivateDnsNameOptionsRequest(input[_PDNO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MOa] != null) {
    const memberEntries = se_InstanceMaintenanceOptionsRequest(input[_MOa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAS] != null) {
    entries[_DAS] = input[_DAS];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_NPO] != null) {
    const memberEntries = se_InstanceNetworkPerformanceOptionsRequest(input[_NPO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkPerformanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_OperatorRequest(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Operator.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DATis] != null) {
    entries[_DATis] = input[_DATis];
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  return entries;
};
var se_RunScheduledInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_LSa] != null) {
    const memberEntries = se_ScheduledInstancesLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIIch] != null) {
    entries[_SIIch] = input[_SIIch];
  }
  return entries;
};
var se_S3ObjectTag = (input, context) => {
  const entries = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_S3ObjectTagList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_S3ObjectTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_S3Storage = (input, context) => {
  const entries = {};
  if (input[_AWSAKI] != null) {
    entries[_AWSAKI] = input[_AWSAKI];
  }
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  if (input[_UP] != null) {
    entries[_UP] = context.base64Encoder(input[_UP]);
  }
  if (input[_UPS] != null) {
    entries[_UPS] = input[_UPS];
  }
  return entries;
};
var se_ScheduledInstanceIdRequestSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ScheduledInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ScheduledInstanceRecurrenceRequest = (input, context) => {
  const entries = {};
  if (input[_Fre] != null) {
    entries[_Fre] = input[_Fre];
  }
  if (input[_Int] != null) {
    entries[_Int] = input[_Int];
  }
  if (input[_OD] != null) {
    const memberEntries = se_OccurrenceDayRequestSet(input[_OD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ORTE] != null) {
    entries[_ORTE] = input[_ORTE];
  }
  if (input[_OU] != null) {
    entries[_OU] = input[_OU];
  }
  return entries;
};
var se_ScheduledInstancesBlockDeviceMapping = (input, context) => {
  const entries = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_E] != null) {
    const memberEntries = se_ScheduledInstancesEbs(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  return entries;
};
var se_ScheduledInstancesBlockDeviceMappingSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesBlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ScheduledInstancesEbs = (input, context) => {
  const entries = {};
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  return entries;
};
var se_ScheduledInstancesIamInstanceProfile = (input, context) => {
  const entries = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};
var se_ScheduledInstancesIpv6Address = (input, context) => {
  const entries = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  return entries;
};
var se_ScheduledInstancesIpv6AddressList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Ipv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ScheduledInstancesLaunchSpecification = (input, context) => {
  const entries = {};
  if (input[_BDM] != null) {
    const memberEntries = se_ScheduledInstancesBlockDeviceMappingSet(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_ScheduledInstancesIamInstanceProfile(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_ScheduledInstancesMonitoring(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_ScheduledInstancesNetworkInterfaceSet(input[_NI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_ScheduledInstancesPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_SGI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  return entries;
};
var se_ScheduledInstancesMonitoring = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_ScheduledInstancesNetworkInterface = (input, context) => {
  const entries = {};
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_G], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_ScheduledInstancesIpv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIACr] != null) {
    const memberEntries = se_PrivateIpAddressConfigSet(input[_PIACr], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  return entries;
};
var se_ScheduledInstancesNetworkInterfaceSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesNetworkInterface(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`NetworkInterface.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_ScheduledInstancesPlacement = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};
var se_ScheduledInstancesPrivateIpAddressConfig = (input, context) => {
  const entries = {};
  if (input[_Prim] != null) {
    entries[_Prim] = input[_Prim];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};
var se_ScheduledInstancesSecurityGroupIdSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SearchLocalGatewayRoutesRequest = (input, context) => {
  const entries = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_SearchTransitGatewayMulticastGroupsRequest = (input, context) => {
  const entries = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_SearchTransitGatewayRoutesRequest = (input, context) => {
  const entries = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_SecurityGroupIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SecurityGroupIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SecurityGroupIdStringListRequest = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SecurityGroupRuleDescription = (input, context) => {
  const entries = {};
  if (input[_SGRIe] != null) {
    entries[_SGRIe] = input[_SGRIe];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};
var se_SecurityGroupRuleDescriptionList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleDescription(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_SecurityGroupRuleIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SecurityGroupRuleRequest = (input, context) => {
  const entries = {};
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_CIidr] != null) {
    entries[_CIidr] = input[_CIidr];
  }
  if (input[_CIid] != null) {
    entries[_CIid] = input[_CIid];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_RGI] != null) {
    entries[_RGI] = input[_RGI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};
var se_SecurityGroupRuleUpdate = (input, context) => {
  const entries = {};
  if (input[_SGRIe] != null) {
    entries[_SGRIe] = input[_SGRIe];
  }
  if (input[_SGRe] != null) {
    const memberEntries = se_SecurityGroupRuleRequest(input[_SGRe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SecurityGroupRuleUpdateList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleUpdate(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_SecurityGroupStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SendDiagnosticInterruptRequest = (input, context) => {
  const entries = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_SlotDateTimeRangeRequest = (input, context) => {
  const entries = {};
  if (input[_ETa] != null) {
    entries[_ETa] = serializeDateTime(input[_ETa]);
  }
  if (input[_LTat] != null) {
    entries[_LTat] = serializeDateTime(input[_LTat]);
  }
  return entries;
};
var se_SlotStartTimeRangeRequest = (input, context) => {
  const entries = {};
  if (input[_ETa] != null) {
    entries[_ETa] = serializeDateTime(input[_ETa]);
  }
  if (input[_LTat] != null) {
    entries[_LTat] = serializeDateTime(input[_LTat]);
  }
  return entries;
};
var se_SnapshotDiskContainer = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_UB] != null) {
    const memberEntries = se_UserBucket(input[_UB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SnapshotIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SnapshotId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SpotCapacityRebalance = (input, context) => {
  const entries = {};
  if (input[_RS] != null) {
    entries[_RS] = input[_RS];
  }
  if (input[_TDe] != null) {
    entries[_TDe] = input[_TDe];
  }
  return entries;
};
var se_SpotFleetLaunchSpecification = (input, context) => {
  const entries = {};
  if (input[_ATd] != null) {
    entries[_ATd] = input[_ATd];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingList(input[_BDM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_SpotFleetMonitoring(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_SpotPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_WCe] != null) {
    entries[_WCe] = serializeFloat(input[_WCe]);
  }
  if (input[_TS] != null) {
    const memberEntries = se_SpotFleetTagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirements(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_GroupIdentifierList(input[_SG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SpotFleetMonitoring = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};
var se_SpotFleetRequestConfigData = (input, context) => {
  const entries = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_ODAS] != null) {
    entries[_ODAS] = input[_ODAS];
  }
  if (input[_SMS] != null) {
    const memberEntries = se_SpotMaintenanceStrategies(input[_SMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotMaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_FC] != null) {
    entries[_FC] = serializeFloat(input[_FC]);
  }
  if (input[_ODFC] != null) {
    entries[_ODFC] = serializeFloat(input[_ODFC]);
  }
  if (input[_IFR] != null) {
    entries[_IFR] = input[_IFR];
  }
  if (input[_LSau] != null) {
    const memberEntries = se_LaunchSpecsList(input[_LSau], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTC] != null) {
    const memberEntries = se_LaunchTemplateConfigList(input[_LTC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_ODMTP] != null) {
    entries[_ODMTP] = input[_ODMTP];
  }
  if (input[_SMTP] != null) {
    entries[_SMTP] = input[_SMTP];
  }
  if (input[_TIWE] != null) {
    entries[_TIWE] = input[_TIWE];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = serializeDateTime(input[_VF]);
  }
  if (input[_VU] != null) {
    entries[_VU] = serializeDateTime(input[_VU]);
  }
  if (input[_RUI] != null) {
    entries[_RUI] = input[_RUI];
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  if (input[_LBC] != null) {
    const memberEntries = se_LoadBalancersConfig(input[_LBC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IPTUC] != null) {
    entries[_IPTUC] = input[_IPTUC];
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SpotFleetRequestIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SpotFleetTagSpecification = (input, context) => {
  const entries = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SpotFleetTagSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetTagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_SpotInstanceRequestIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SpotInstanceRequestId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_SpotMaintenanceStrategies = (input, context) => {
  const entries = {};
  if (input[_CRap] != null) {
    const memberEntries = se_SpotCapacityRebalance(input[_CRap], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_SpotMarketOptions = (input, context) => {
  const entries = {};
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIT] != null) {
    entries[_SIT] = input[_SIT];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  if (input[_VU] != null) {
    entries[_VU] = serializeDateTime(input[_VU]);
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  return entries;
};
var se_SpotOptionsRequest = (input, context) => {
  const entries = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_MS] != null) {
    const memberEntries = se_FleetSpotMaintenanceStrategiesRequest(input[_MS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  if (input[_IPTUC] != null) {
    entries[_IPTUC] = input[_IPTUC];
  }
  if (input[_SITi] != null) {
    entries[_SITi] = input[_SITi];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_MTC] != null) {
    entries[_MTC] = input[_MTC];
  }
  if (input[_MTP] != null) {
    entries[_MTP] = input[_MTP];
  }
  return entries;
};
var se_SpotPlacement = (input, context) => {
  const entries = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  return entries;
};
var se_StartDeclarativePoliciesReportRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  if (input[_TIa] != null) {
    entries[_TIa] = input[_TIa];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_StartInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_StartNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
  const entries = {};
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_StartNetworkInsightsAnalysisRequest = (input, context) => {
  const entries = {};
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  if (input[_AAd] != null) {
    const memberEntries = se_ValueStringList(input[_AAd], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AdditionalAccount.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FIA] != null) {
    const memberEntries = se_ArnList(input[_FIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === void 0) {
    input[_CTl] = v4_default();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};
var se_StartVpcEndpointServicePrivateDnsVerificationRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  return entries;
};
var se_StopInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Hi] != null) {
    entries[_Hi] = input[_Hi];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  return entries;
};
var se_Storage = (input, context) => {
  const entries = {};
  if (input[_S_] != null) {
    const memberEntries = se_S3Storage(input[_S_], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_StorageLocation = (input, context) => {
  const entries = {};
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  return entries;
};
var se_SubnetConfiguration = (input, context) => {
  const entries = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_Ip] != null) {
    entries[_Ip] = input[_Ip];
  }
  if (input[_Ipv] != null) {
    entries[_Ipv] = input[_Ipv];
  }
  return entries;
};
var se_SubnetConfigurationsList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SubnetConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_SubnetIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_Tag = (input, context) => {
  const entries = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};
var se_TagList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TagSpecification = (input, context) => {
  const entries = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TagSpecificationList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TargetCapacitySpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_STC] != null) {
    entries[_STC] = input[_STC];
  }
  if (input[_DTCT] != null) {
    entries[_DTCT] = input[_DTCT];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  return entries;
};
var se_TargetConfigurationRequest = (input, context) => {
  const entries = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};
var se_TargetConfigurationRequestSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TargetGroup = (input, context) => {
  const entries = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  return entries;
};
var se_TargetGroups = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetGroup(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TargetGroupsConfig = (input, context) => {
  const entries = {};
  if (input[_TG] != null) {
    const memberEntries = se_TargetGroups(input[_TG], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TerminateClientVpnConnectionsRequest = (input, context) => {
  const entries = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_CIo] != null) {
    entries[_CIo] = input[_CIo];
  }
  if (input[_Us] != null) {
    entries[_Us] = input[_Us];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_TerminateInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ThroughResourcesStatementRequest = (input, context) => {
  const entries = {};
  if (input[_RSe] != null) {
    const memberEntries = se_ResourceStatementRequest(input[_RSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_ThroughResourcesStatementRequestList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ThroughResourcesStatementRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_TotalLocalStorageGB = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_TotalLocalStorageGBRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = serializeFloat(input[_Ma]);
  }
  return entries;
};
var se_TrafficMirrorFilterIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorFilterRuleFieldList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorFilterRuleIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorNetworkServiceList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorPortRangeRequest = (input, context) => {
  const entries = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};
var se_TrafficMirrorSessionFieldList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorSessionIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrafficMirrorTargetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayAttachmentIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayCidrBlockStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayConnectPeerIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayConnectRequestBgpOptions = (input, context) => {
  const entries = {};
  if (input[_PAee] != null) {
    entries[_PAee] = input[_PAee];
  }
  return entries;
};
var se_TransitGatewayIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayMulticastDomainIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayNetworkInterfaceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayPolicyTableIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayRequestOptions = (input, context) => {
  const entries = {};
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  if (input[_AASAu] != null) {
    entries[_AASAu] = input[_AASAu];
  }
  if (input[_DRTA] != null) {
    entries[_DRTA] = input[_DRTA];
  }
  if (input[_DRTP] != null) {
    entries[_DRTP] = input[_DRTP];
  }
  if (input[_VES] != null) {
    entries[_VES] = input[_VES];
  }
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_MSu] != null) {
    entries[_MSu] = input[_MSu];
  }
  if (input[_TGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_TGCB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_TransitGatewayRouteTableAnnouncementIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewayRouteTableIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TransitGatewaySubnetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_TrunkInterfaceAssociationIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_UnassignIpv6AddressesRequest = (input, context) => {
  const entries = {};
  if (input[_IP] != null) {
    const memberEntries = se_IpPrefixList(input[_IP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_IA] != null) {
    const memberEntries = se_Ipv6AddressList(input[_IA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UnassignPrivateIpAddressesRequest = (input, context) => {
  const entries = {};
  if (input[_IPp] != null) {
    const memberEntries = se_IpPrefixList(input[_IPp], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressStringList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UnassignPrivateNatGatewayAddressRequest = (input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MDDS] != null) {
    entries[_MDDS] = input[_MDDS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_UnlockSnapshotRequest = (input, context) => {
  const entries = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_UnmonitorInstancesRequest = (input, context) => {
  const entries = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_UpdateSecurityGroupRuleDescriptionsEgressRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRD] != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UpdateSecurityGroupRuleDescriptionsIngressRequest = (input, context) => {
  const entries = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRD] != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_UserBucket = (input, context) => {
  const entries = {};
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SK] != null) {
    entries[_SK] = input[_SK];
  }
  return entries;
};
var se_UserData = (input, context) => {
  const entries = {};
  if (input[_Da] != null) {
    entries[_Da] = input[_Da];
  }
  return entries;
};
var se_UserGroupStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_UserIdGroupPair = (input, context) => {
  const entries = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  if (input[_PSe] != null) {
    entries[_PSe] = input[_PSe];
  }
  return entries;
};
var se_UserIdGroupPairList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_UserIdGroupPair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_UserIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ValueStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VCpuCountRange = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_VCpuCountRangeRequest = (input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};
var se_VerifiedAccessEndpointIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VerifiedAccessGroupIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VerifiedAccessInstanceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VerifiedAccessLogCloudWatchLogsDestinationOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_LGo] != null) {
    entries[_LGo] = input[_LGo];
  }
  return entries;
};
var se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_DSel] != null) {
    entries[_DSel] = input[_DSel];
  }
  return entries;
};
var se_VerifiedAccessLogOptions = (input, context) => {
  const entries = {};
  if (input[_S_] != null) {
    const memberEntries = se_VerifiedAccessLogS3DestinationOptions(input[_S_], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CWL] != null) {
    const memberEntries = se_VerifiedAccessLogCloudWatchLogsDestinationOptions(input[_CWL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KDF] != null) {
    const memberEntries = se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions(input[_KDF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KinesisDataFirehose.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LV] != null) {
    entries[_LV] = input[_LV];
  }
  if (input[_ITCn] != null) {
    entries[_ITCn] = input[_ITCn];
  }
  return entries;
};
var se_VerifiedAccessLogS3DestinationOptions = (input, context) => {
  const entries = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_BN] != null) {
    entries[_BN] = input[_BN];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  if (input[_BOu] != null) {
    entries[_BOu] = input[_BOu];
  }
  return entries;
};
var se_VerifiedAccessSseSpecificationRequest = (input, context) => {
  const entries = {};
  if (input[_CMKE] != null) {
    entries[_CMKE] = input[_CMKE];
  }
  if (input[_KKA] != null) {
    entries[_KKA] = input[_KKA];
  }
  return entries;
};
var se_VerifiedAccessTrustProviderIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VersionStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VirtualizationTypeSet = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VolumeDetail = (input, context) => {
  const entries = {};
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  return entries;
};
var se_VolumeIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VolumeId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcBlockPublicAccessExclusionIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcClassicLinkIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcEndpointIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcEndpointRouteTableIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcEndpointSecurityGroupIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcEndpointServiceIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcEndpointSubnetIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpcPeeringConnectionIdList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpnConnectionIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnConnectionId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpnConnectionOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_EA] != null) {
    entries[_EA] = input[_EA];
  }
  if (input[_TIIV] != null) {
    entries[_TIIV] = input[_TIIV];
  }
  if (input[_TO] != null) {
    const memberEntries = se_VpnTunnelOptionsSpecificationsList(input[_TO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LINC] != null) {
    entries[_LINC] = input[_LINC];
  }
  if (input[_RINC] != null) {
    entries[_RINC] = input[_RINC];
  }
  if (input[_LINCo] != null) {
    entries[_LINCo] = input[_LINCo];
  }
  if (input[_RINCe] != null) {
    entries[_RINCe] = input[_RINCe];
  }
  if (input[_OIAT] != null) {
    entries[_OIAT] = input[_OIAT];
  }
  if (input[_TTGAI] != null) {
    entries[_TTGAI] = input[_TTGAI];
  }
  if (input[_SRO] != null) {
    entries[_SRO] = input[_SRO];
  }
  return entries;
};
var se_VpnGatewayIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_VpnTunnelLogOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_CWLO] != null) {
    const memberEntries = se_CloudWatchLogOptionsSpecification(input[_CWLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};
var se_VpnTunnelOptionsSpecification = (input, context) => {
  const entries = {};
  if (input[_TIC] != null) {
    entries[_TIC] = input[_TIC];
  }
  if (input[_TIIC] != null) {
    entries[_TIIC] = input[_TIIC];
  }
  if (input[_PSK] != null) {
    entries[_PSK] = input[_PSK];
  }
  if (input[_PLS] != null) {
    entries[_PLS] = input[_PLS];
  }
  if (input[_PLSh] != null) {
    entries[_PLSh] = input[_PLSh];
  }
  if (input[_RMTS] != null) {
    entries[_RMTS] = input[_RMTS];
  }
  if (input[_RFP] != null) {
    entries[_RFP] = input[_RFP];
  }
  if (input[_RWS] != null) {
    entries[_RWS] = input[_RWS];
  }
  if (input[_DPDTS] != null) {
    entries[_DPDTS] = input[_DPDTS];
  }
  if (input[_DPDTA] != null) {
    entries[_DPDTA] = input[_DPDTA];
  }
  if (input[_PEA] != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PEAh] != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAh] != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAha] != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGN] != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGNh] != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IKEVe] != null) {
    const memberEntries = se_IKEVersionsRequestList(input[_IKEVe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  if (input[_LO] != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ETLC] != null) {
    entries[_ETLC] = input[_ETLC];
  }
  return entries;
};
var se_VpnTunnelOptionsSpecificationsList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_VpnTunnelOptionsSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};
var se_WithdrawByoipCidrRequest = (input, context) => {
  const entries = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};
var se_ZoneIdStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneId.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var se_ZoneNameStringList = (input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneName.${counter}`] = entry;
    counter++;
  }
  return entries;
};
var de_AcceleratorCount = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_AcceleratorManufacturerSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AcceleratorNameSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AcceleratorTotalMemoryMiB = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_AcceleratorTypeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AcceptAddressTransferResult = (output, context) => {
  const contents = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};
var de_AcceptCapacityReservationBillingOwnershipResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_AcceptReservedInstancesExchangeQuoteResult = (output, context) => {
  const contents = {};
  if (output[_eI] != null) {
    contents[_EIxch] = expectString(output[_eI]);
  }
  return contents;
};
var de_AcceptTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
  const contents = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};
var de_AcceptTransitGatewayPeeringAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};
var de_AcceptTransitGatewayVpcAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};
var de_AcceptVpcEndpointConnectionsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_AcceptVpcPeeringConnectionResult = (output, context) => {
  const contents = {};
  if (output[_vPC] != null) {
    contents[_VPC] = de_VpcPeeringConnection(output[_vPC], context);
  }
  return contents;
};
var de_AccessScopeAnalysisFinding = (output, context) => {
  const contents = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = expectString(output[_nIASAI]);
  }
  if (output[_nIASI] != null) {
    contents[_NIASI] = expectString(output[_nIASI]);
  }
  if (output[_fI] != null) {
    contents[_FIi] = expectString(output[_fI]);
  }
  if (output.findingComponentSet === "") {
    contents[_FCi] = [];
  } else if (output[_fCS] != null && output[_fCS][_i] != null) {
    contents[_FCi] = de_PathComponentList(getArrayIfSingleItem(output[_fCS][_i]), context);
  }
  return contents;
};
var de_AccessScopeAnalysisFindingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccessScopeAnalysisFinding(entry, context);
  });
};
var de_AccessScopePath = (output, context) => {
  const contents = {};
  if (output[_s] != null) {
    contents[_S] = de_PathStatement(output[_s], context);
  }
  if (output[_d] != null) {
    contents[_D] = de_PathStatement(output[_d], context);
  }
  if (output.throughResourceSet === "") {
    contents[_TR] = [];
  } else if (output[_tRS] != null && output[_tRS][_i] != null) {
    contents[_TR] = de_ThroughResourcesStatementList(getArrayIfSingleItem(output[_tRS][_i]), context);
  }
  return contents;
};
var de_AccessScopePathList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccessScopePath(entry, context);
  });
};
var de_AccountAttribute = (output, context) => {
  const contents = {};
  if (output[_aN] != null) {
    contents[_ANt] = expectString(output[_aN]);
  }
  if (output.attributeValueSet === "") {
    contents[_AVt] = [];
  } else if (output[_aVS] != null && output[_aVS][_i] != null) {
    contents[_AVt] = de_AccountAttributeValueList(getArrayIfSingleItem(output[_aVS][_i]), context);
  }
  return contents;
};
var de_AccountAttributeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccountAttribute(entry, context);
  });
};
var de_AccountAttributeValue = (output, context) => {
  const contents = {};
  if (output[_aV] != null) {
    contents[_AVtt] = expectString(output[_aV]);
  }
  return contents;
};
var de_AccountAttributeValueList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AccountAttributeValue(entry, context);
  });
};
var de_ActiveInstance = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = expectString(output[_sIRI]);
  }
  if (output[_iH] != null) {
    contents[_IH] = expectString(output[_iH]);
  }
  return contents;
};
var de_ActiveInstanceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ActiveInstance(entry, context);
  });
};
var de_AddedPrincipal = (output, context) => {
  const contents = {};
  if (output[_pT] != null) {
    contents[_PTr] = expectString(output[_pT]);
  }
  if (output[_p] != null) {
    contents[_Prin] = expectString(output[_p]);
  }
  if (output[_sPI] != null) {
    contents[_SPI] = expectString(output[_sPI]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  return contents;
};
var de_AddedPrincipalSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AddedPrincipal(entry, context);
  });
};
var de_AdditionalDetail = (output, context) => {
  const contents = {};
  if (output[_aDT] != null) {
    contents[_ADT] = expectString(output[_aDT]);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_vES] != null) {
    contents[_VESp] = de_AnalysisComponent(output[_vES], context);
  }
  if (output.ruleOptionSet === "") {
    contents[_ROu] = [];
  } else if (output[_rOS] != null && output[_rOS][_i] != null) {
    contents[_ROu] = de_RuleOptionList(getArrayIfSingleItem(output[_rOS][_i]), context);
  }
  if (output.ruleGroupTypePairSet === "") {
    contents[_RGTP] = [];
  } else if (output[_rGTPS] != null && output[_rGTPS][_i] != null) {
    contents[_RGTP] = de_RuleGroupTypePairList(getArrayIfSingleItem(output[_rGTPS][_i]), context);
  }
  if (output.ruleGroupRuleOptionsPairSet === "") {
    contents[_RGROP] = [];
  } else if (output[_rGROPS] != null && output[_rGROPS][_i] != null) {
    contents[_RGROP] = de_RuleGroupRuleOptionsPairList(getArrayIfSingleItem(output[_rGROPS][_i]), context);
  }
  if (output[_sN] != null) {
    contents[_SNe] = expectString(output[_sN]);
  }
  if (output.loadBalancerSet === "") {
    contents[_LB] = [];
  } else if (output[_lBS] != null && output[_lBS][_i] != null) {
    contents[_LB] = de_AnalysisComponentList(getArrayIfSingleItem(output[_lBS][_i]), context);
  }
  return contents;
};
var de_AdditionalDetailList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AdditionalDetail(entry, context);
  });
};
var de_Address = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_do] != null) {
    contents[_Do] = expectString(output[_do]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_nIOI] != null) {
    contents[_NIOI] = expectString(output[_nIOI]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pIP] != null) {
    contents[_PIP] = expectString(output[_pIP]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = expectString(output[_cOI]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = expectString(output[_cOIP]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = expectString(output[_cI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  return contents;
};
var de_AddressAttribute = (output, context) => {
  const contents = {};
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_pR] != null) {
    contents[_PRt] = expectString(output[_pR]);
  }
  if (output[_pRU] != null) {
    contents[_PRU] = de_PtrUpdateStatus(output[_pRU], context);
  }
  return contents;
};
var de_AddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Address(entry, context);
  });
};
var de_AddressSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AddressAttribute(entry, context);
  });
};
var de_AddressTransfer = (output, context) => {
  const contents = {};
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_tAI] != null) {
    contents[_TAI] = expectString(output[_tAI]);
  }
  if (output[_tOET] != null) {
    contents[_TOET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tOET]));
  }
  if (output[_tOAT] != null) {
    contents[_TOAT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tOAT]));
  }
  if (output[_aTS] != null) {
    contents[_ATS] = expectString(output[_aTS]);
  }
  return contents;
};
var de_AddressTransferList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AddressTransfer(entry, context);
  });
};
var de_AdvertiseByoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};
var de_AllocateAddressResult = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_pIP] != null) {
    contents[_PIP] = expectString(output[_pIP]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output[_do] != null) {
    contents[_Do] = expectString(output[_do]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = expectString(output[_cOI]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = expectString(output[_cOIP]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = expectString(output[_cI]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  return contents;
};
var de_AllocateHostsResult = (output, context) => {
  const contents = {};
  if (output.hostIdSet === "") {
    contents[_HI] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HI] = de_ResponseHostIdList(getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  return contents;
};
var de_AllocateIpamPoolCidrResult = (output, context) => {
  const contents = {};
  if (output[_iPA] != null) {
    contents[_IPA] = de_IpamPoolAllocation(output[_iPA], context);
  }
  return contents;
};
var de_AllowedInstanceTypeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AllowedPrincipal = (output, context) => {
  const contents = {};
  if (output[_pT] != null) {
    contents[_PTr] = expectString(output[_pT]);
  }
  if (output[_p] != null) {
    contents[_Prin] = expectString(output[_p]);
  }
  if (output[_sPI] != null) {
    contents[_SPI] = expectString(output[_sPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  return contents;
};
var de_AllowedPrincipalSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AllowedPrincipal(entry, context);
  });
};
var de_AlternatePathHint = (output, context) => {
  const contents = {};
  if (output[_cIo] != null) {
    contents[_CIom] = expectString(output[_cIo]);
  }
  if (output[_cA] != null) {
    contents[_CAo] = expectString(output[_cA]);
  }
  return contents;
};
var de_AlternatePathHintList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AlternatePathHint(entry, context);
  });
};
var de_AnalysisAclRule = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_e] != null) {
    contents[_Eg] = parseBoolean(output[_e]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = expectString(output[_rA]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = strictParseInt32(output[_rN]);
  }
  return contents;
};
var de_AnalysisComponent = (output, context) => {
  const contents = {};
  if (output[_id] != null) {
    contents[_Id] = expectString(output[_id]);
  }
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_AnalysisComponentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AnalysisComponent(entry, context);
  });
};
var de_AnalysisLoadBalancerListener = (output, context) => {
  const contents = {};
  if (output[_lBP] != null) {
    contents[_LBP] = strictParseInt32(output[_lBP]);
  }
  if (output[_iP] != null) {
    contents[_IPns] = strictParseInt32(output[_iP]);
  }
  return contents;
};
var de_AnalysisLoadBalancerTarget = (output, context) => {
  const contents = {};
  if (output[_ad] != null) {
    contents[_Ad] = expectString(output[_ad]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_in] != null) {
    contents[_Ins] = de_AnalysisComponent(output[_in], context);
  }
  if (output[_po] != null) {
    contents[_Po] = strictParseInt32(output[_po]);
  }
  return contents;
};
var de_AnalysisPacketHeader = (output, context) => {
  const contents = {};
  if (output.destinationAddressSet === "") {
    contents[_DAes] = [];
  } else if (output[_dAS] != null && output[_dAS][_i] != null) {
    contents[_DAes] = de_IpAddressList(getArrayIfSingleItem(output[_dAS][_i]), context);
  }
  if (output.destinationPortRangeSet === "") {
    contents[_DPRe] = [];
  } else if (output[_dPRS] != null && output[_dPRS][_i] != null) {
    contents[_DPRe] = de_PortRangeList(getArrayIfSingleItem(output[_dPRS][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output.sourceAddressSet === "") {
    contents[_SAo] = [];
  } else if (output[_sAS] != null && output[_sAS][_i] != null) {
    contents[_SAo] = de_IpAddressList(getArrayIfSingleItem(output[_sAS][_i]), context);
  }
  if (output.sourcePortRangeSet === "") {
    contents[_SPRo] = [];
  } else if (output[_sPRS] != null && output[_sPRS][_i] != null) {
    contents[_SPRo] = de_PortRangeList(getArrayIfSingleItem(output[_sPRS][_i]), context);
  }
  return contents;
};
var de_AnalysisRouteTableRoute = (output, context) => {
  const contents = {};
  if (output[_dC] != null) {
    contents[_DCe] = expectString(output[_dC]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = expectString(output[_dPLI]);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = expectString(output[_eOIGI]);
  }
  if (output[_gI] != null) {
    contents[_GI] = expectString(output[_gI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_o] != null) {
    contents[_Or] = expectString(output[_o]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cGI] != null) {
    contents[_CGI] = expectString(output[_cGI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = expectString(output[_cNA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  return contents;
};
var de_AnalysisSecurityGroupRule = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_di] != null) {
    contents[_Di] = expectString(output[_di]);
  }
  if (output[_sGI] != null) {
    contents[_SGIe] = expectString(output[_sGI]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  return contents;
};
var de_ApplySecurityGroupsToClientVpnTargetNetworkResult = (output, context) => {
  const contents = {};
  if (output.securityGroupIds === "") {
    contents[_SGI] = [];
  } else if (output[_sGIe] != null && output[_sGIe][_i] != null) {
    contents[_SGI] = de_ClientVpnSecurityGroupIdSet(getArrayIfSingleItem(output[_sGIe][_i]), context);
  }
  return contents;
};
var de_ArchitectureTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ArnList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_AsnAssociation = (output, context) => {
  const contents = {};
  if (output[_as] != null) {
    contents[_As] = expectString(output[_as]);
  }
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_AsnAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AsnAssociation(entry, context);
  });
};
var de_AssignedPrivateIpAddress = (output, context) => {
  const contents = {};
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  return contents;
};
var de_AssignedPrivateIpAddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AssignedPrivateIpAddress(entry, context);
  });
};
var de_AssignIpv6AddressesResult = (output, context) => {
  const contents = {};
  if (output.assignedIpv6Addresses === "") {
    contents[_AIAs] = [];
  } else if (output[_aIA] != null && output[_aIA][_i] != null) {
    contents[_AIAs] = de_Ipv6AddressList(getArrayIfSingleItem(output[_aIA][_i]), context);
  }
  if (output.assignedIpv6PrefixSet === "") {
    contents[_AIP] = [];
  } else if (output[_aIPS] != null && output[_aIPS][_i] != null) {
    contents[_AIP] = de_IpPrefixList(getArrayIfSingleItem(output[_aIPS][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  return contents;
};
var de_AssignPrivateIpAddressesResult = (output, context) => {
  const contents = {};
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output.assignedPrivateIpAddressesSet === "") {
    contents[_APIAss] = [];
  } else if (output[_aPIAS] != null && output[_aPIAS][_i] != null) {
    contents[_APIAss] = de_AssignedPrivateIpAddressList(getArrayIfSingleItem(output[_aPIAS][_i]), context);
  }
  if (output.assignedIpv4PrefixSet === "") {
    contents[_AIPs] = [];
  } else if (output[_aIPSs] != null && output[_aIPSs][_i] != null) {
    contents[_AIPs] = de_Ipv4PrefixesList(getArrayIfSingleItem(output[_aIPSs][_i]), context);
  }
  return contents;
};
var de_AssignPrivateNatGatewayAddressResult = (output, context) => {
  const contents = {};
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};
var de_AssociateAddressResult = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  return contents;
};
var de_AssociateCapacityReservationBillingOwnerResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_AssociateClientVpnTargetNetworkResult = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  return contents;
};
var de_AssociatedRole = (output, context) => {
  const contents = {};
  if (output[_aRA] != null) {
    contents[_ARA] = expectString(output[_aRA]);
  }
  if (output[_cSBN] != null) {
    contents[_CSBN] = expectString(output[_cSBN]);
  }
  if (output[_cSOK] != null) {
    contents[_CSOK] = expectString(output[_cSOK]);
  }
  if (output[_eKKI] != null) {
    contents[_EKKI] = expectString(output[_eKKI]);
  }
  return contents;
};
var de_AssociatedRolesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AssociatedRole(entry, context);
  });
};
var de_AssociatedTargetNetwork = (output, context) => {
  const contents = {};
  if (output[_nI] != null) {
    contents[_NIe] = expectString(output[_nI]);
  }
  if (output[_nT] != null) {
    contents[_NTe] = expectString(output[_nT]);
  }
  return contents;
};
var de_AssociatedTargetNetworkSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AssociatedTargetNetwork(entry, context);
  });
};
var de_AssociateEnclaveCertificateIamRoleResult = (output, context) => {
  const contents = {};
  if (output[_cSBN] != null) {
    contents[_CSBN] = expectString(output[_cSBN]);
  }
  if (output[_cSOK] != null) {
    contents[_CSOK] = expectString(output[_cSOK]);
  }
  if (output[_eKKI] != null) {
    contents[_EKKI] = expectString(output[_eKKI]);
  }
  return contents;
};
var de_AssociateIamInstanceProfileResult = (output, context) => {
  const contents = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};
var de_AssociateInstanceEventWindowResult = (output, context) => {
  const contents = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};
var de_AssociateIpamByoasnResult = (output, context) => {
  const contents = {};
  if (output[_aA] != null) {
    contents[_AAsn] = de_AsnAssociation(output[_aA], context);
  }
  return contents;
};
var de_AssociateIpamResourceDiscoveryResult = (output, context) => {
  const contents = {};
  if (output[_iRDA] != null) {
    contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA], context);
  }
  return contents;
};
var de_AssociateNatGatewayAddressResult = (output, context) => {
  const contents = {};
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};
var de_AssociateRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};
var de_AssociateSecurityGroupVpcResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_AssociateSubnetCidrBlockResult = (output, context) => {
  const contents = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  return contents;
};
var de_AssociateTransitGatewayMulticastDomainResult = (output, context) => {
  const contents = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};
var de_AssociateTransitGatewayPolicyTableResult = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass], context);
  }
  return contents;
};
var de_AssociateTransitGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAssociation(output[_ass], context);
  }
  return contents;
};
var de_AssociateTrunkInterfaceResult = (output, context) => {
  const contents = {};
  if (output[_iA] != null) {
    contents[_IAn] = de_TrunkInterfaceAssociation(output[_iA], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_AssociateVpcCidrBlockResult = (output, context) => {
  const contents = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_cBA] != null) {
    contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_AssociationStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_AttachClassicLinkVpcResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_AttachmentEnaSrdSpecification = (output, context) => {
  const contents = {};
  if (output[_eSE] != null) {
    contents[_ESE] = parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_AttachmentEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};
var de_AttachmentEnaSrdUdpSpecification = (output, context) => {
  const contents = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = parseBoolean(output[_eSUE]);
  }
  return contents;
};
var de_AttachNetworkInterfaceResult = (output, context) => {
  const contents = {};
  if (output[_aIt] != null) {
    contents[_AIt] = expectString(output[_aIt]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = strictParseInt32(output[_nCI]);
  }
  return contents;
};
var de_AttachVerifiedAccessTrustProviderResult = (output, context) => {
  const contents = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};
var de_AttachVpnGatewayResult = (output, context) => {
  const contents = {};
  if (output[_at] != null) {
    contents[_VA] = de_VpcAttachment(output[_at], context);
  }
  return contents;
};
var de_AttributeBooleanValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = parseBoolean(output[_v]);
  }
  return contents;
};
var de_AttributeSummary = (output, context) => {
  const contents = {};
  if (output[_aN] != null) {
    contents[_ANt] = expectString(output[_aN]);
  }
  if (output[_mFV] != null) {
    contents[_MFV] = expectString(output[_mFV]);
  }
  if (output[_nOMA] != null) {
    contents[_NOMA] = strictParseInt32(output[_nOMA]);
  }
  if (output[_nOUA] != null) {
    contents[_NOUA] = strictParseInt32(output[_nOUA]);
  }
  if (output.regionalSummarySet === "") {
    contents[_RSeg] = [];
  } else if (output[_rSS] != null && output[_rSS][_i] != null) {
    contents[_RSeg] = de_RegionalSummaryList(getArrayIfSingleItem(output[_rSS][_i]), context);
  }
  return contents;
};
var de_AttributeSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AttributeSummary(entry, context);
  });
};
var de_AttributeValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_AuthorizationRule = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_aAc] != null) {
    contents[_AAc] = parseBoolean(output[_aAc]);
  }
  if (output[_dC] != null) {
    contents[_DCe] = expectString(output[_dC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};
var de_AuthorizationRuleSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AuthorizationRule(entry, context);
  });
};
var de_AuthorizeClientVpnIngressResult = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};
var de_AuthorizeSecurityGroupEgressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  return contents;
};
var de_AuthorizeSecurityGroupIngressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  return contents;
};
var de_AvailabilityZone = (output, context) => {
  const contents = {};
  if (output[_oIS] != null) {
    contents[_OIS] = expectString(output[_oIS]);
  }
  if (output.messageSet === "") {
    contents[_Mes] = [];
  } else if (output[_mS] != null && output[_mS][_i] != null) {
    contents[_Mes] = de_AvailabilityZoneMessageList(getArrayIfSingleItem(output[_mS][_i]), context);
  }
  if (output[_rNe] != null) {
    contents[_RN] = expectString(output[_rNe]);
  }
  if (output[_zN] != null) {
    contents[_ZNo] = expectString(output[_zN]);
  }
  if (output[_zI] != null) {
    contents[_ZIo] = expectString(output[_zI]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output[_zT] != null) {
    contents[_ZT] = expectString(output[_zT]);
  }
  if (output[_pZN] != null) {
    contents[_PZN] = expectString(output[_pZN]);
  }
  if (output[_pZI] != null) {
    contents[_PZI] = expectString(output[_pZI]);
  }
  if (output[_zS] != null) {
    contents[_Stat] = expectString(output[_zS]);
  }
  return contents;
};
var de_AvailabilityZoneList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AvailabilityZone(entry, context);
  });
};
var de_AvailabilityZoneMessage = (output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_AvailabilityZoneMessageList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AvailabilityZoneMessage(entry, context);
  });
};
var de_AvailableCapacity = (output, context) => {
  const contents = {};
  if (output.availableInstanceCapacity === "") {
    contents[_AIC] = [];
  } else if (output[_aIC] != null && output[_aIC][_i] != null) {
    contents[_AIC] = de_AvailableInstanceCapacityList(getArrayIfSingleItem(output[_aIC][_i]), context);
  }
  if (output[_aVC] != null) {
    contents[_AVC] = strictParseInt32(output[_aVC]);
  }
  return contents;
};
var de_AvailableInstanceCapacityList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceCapacity(entry, context);
  });
};
var de_BandwidthWeightingTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_BaselineEbsBandwidthMbps = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_BaselinePerformanceFactors = (output, context) => {
  const contents = {};
  if (output[_cp] != null) {
    contents[_Cp] = de_CpuPerformanceFactor(output[_cp], context);
  }
  return contents;
};
var de_BlockDeviceMapping = (output, context) => {
  const contents = {};
  if (output[_eb] != null) {
    contents[_E] = de_EbsBlockDevice(output[_eb], context);
  }
  if (output[_nD] != null) {
    contents[_ND] = expectString(output[_nD]);
  }
  if (output[_dN] != null) {
    contents[_DN] = expectString(output[_dN]);
  }
  if (output[_vN] != null) {
    contents[_VN] = expectString(output[_vN]);
  }
  return contents;
};
var de_BlockDeviceMappingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_BlockDeviceMapping(entry, context);
  });
};
var de_BlockPublicAccessStates = (output, context) => {
  const contents = {};
  if (output[_iGBM] != null) {
    contents[_IGBM] = expectString(output[_iGBM]);
  }
  return contents;
};
var de_BootModeTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_BundleInstanceResult = (output, context) => {
  const contents = {};
  if (output[_bIT] != null) {
    contents[_BTu] = de_BundleTask(output[_bIT], context);
  }
  return contents;
};
var de_BundleTask = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_bI] != null) {
    contents[_BIu] = expectString(output[_bI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_uT] != null) {
    contents[_UTp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  if (output[_sto] != null) {
    contents[_St] = de_Storage(output[_sto], context);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_er] != null) {
    contents[_BTE] = de_BundleTaskError(output[_er], context);
  }
  return contents;
};
var de_BundleTaskError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_BundleTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_BundleTask(entry, context);
  });
};
var de_Byoasn = (output, context) => {
  const contents = {};
  if (output[_as] != null) {
    contents[_As] = expectString(output[_as]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = expectString(output[_iIp]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_ByoasnSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Byoasn(entry, context);
  });
};
var de_ByoipCidr = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.asnAssociationSet === "") {
    contents[_AAsns] = [];
  } else if (output[_aAS] != null && output[_aAS][_i] != null) {
    contents[_AAsns] = de_AsnAssociationSet(getArrayIfSingleItem(output[_aAS][_i]), context);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  return contents;
};
var de_ByoipCidrSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ByoipCidr(entry, context);
  });
};
var de_CancelBundleTaskResult = (output, context) => {
  const contents = {};
  if (output[_bIT] != null) {
    contents[_BTu] = de_BundleTask(output[_bIT], context);
  }
  return contents;
};
var de_CancelCapacityReservationFleetError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_CancelCapacityReservationFleetsResult = (output, context) => {
  const contents = {};
  if (output.successfulFleetCancellationSet === "") {
    contents[_SFC] = [];
  } else if (output[_sFCS] != null && output[_sFCS][_i] != null) {
    contents[_SFC] = de_CapacityReservationFleetCancellationStateSet(getArrayIfSingleItem(output[_sFCS][_i]), context);
  }
  if (output.failedFleetCancellationSet === "") {
    contents[_FFC] = [];
  } else if (output[_fFCS] != null && output[_fFCS][_i] != null) {
    contents[_FFC] = de_FailedCapacityReservationFleetCancellationResultSet(getArrayIfSingleItem(output[_fFCS][_i]), context);
  }
  return contents;
};
var de_CancelCapacityReservationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_CancelDeclarativePoliciesReportResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_CancelImageLaunchPermissionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_CancelImportTaskResult = (output, context) => {
  const contents = {};
  if (output[_iTI] != null) {
    contents[_ITI] = expectString(output[_iTI]);
  }
  if (output[_pS] != null) {
    contents[_PSr] = expectString(output[_pS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_CancelledSpotInstanceRequest = (output, context) => {
  const contents = {};
  if (output[_sIRI] != null) {
    contents[_SIRIp] = expectString(output[_sIRI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_CancelledSpotInstanceRequestList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CancelledSpotInstanceRequest(entry, context);
  });
};
var de_CancelReservedInstancesListingResult = (output, context) => {
  const contents = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};
var de_CancelSpotFleetRequestsError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_CancelSpotFleetRequestsErrorItem = (output, context) => {
  const contents = {};
  if (output[_er] != null) {
    contents[_Er] = de_CancelSpotFleetRequestsError(output[_er], context);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  return contents;
};
var de_CancelSpotFleetRequestsErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CancelSpotFleetRequestsErrorItem(entry, context);
  });
};
var de_CancelSpotFleetRequestsResponse = (output, context) => {
  const contents = {};
  if (output.successfulFleetRequestSet === "") {
    contents[_SFR] = [];
  } else if (output[_sFRS] != null && output[_sFRS][_i] != null) {
    contents[_SFR] = de_CancelSpotFleetRequestsSuccessSet(getArrayIfSingleItem(output[_sFRS][_i]), context);
  }
  if (output.unsuccessfulFleetRequestSet === "") {
    contents[_UFR] = [];
  } else if (output[_uFRS] != null && output[_uFRS][_i] != null) {
    contents[_UFR] = de_CancelSpotFleetRequestsErrorSet(getArrayIfSingleItem(output[_uFRS][_i]), context);
  }
  return contents;
};
var de_CancelSpotFleetRequestsSuccessItem = (output, context) => {
  const contents = {};
  if (output[_cSFRS] != null) {
    contents[_CSFRS] = expectString(output[_cSFRS]);
  }
  if (output[_pSFRS] != null) {
    contents[_PSFRS] = expectString(output[_pSFRS]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  return contents;
};
var de_CancelSpotFleetRequestsSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CancelSpotFleetRequestsSuccessItem(entry, context);
  });
};
var de_CancelSpotInstanceRequestsResult = (output, context) => {
  const contents = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_CSIRa] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_CSIRa] = de_CancelledSpotInstanceRequestList(getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  return contents;
};
var de_CapacityAllocation = (output, context) => {
  const contents = {};
  if (output[_aTl] != null) {
    contents[_ATl] = expectString(output[_aTl]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  return contents;
};
var de_CapacityAllocations = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityAllocation(entry, context);
  });
};
var de_CapacityBlockExtension = (output, context) => {
  const contents = {};
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_cBEOI] != null) {
    contents[_CBEOI] = expectString(output[_cBEOI]);
  }
  if (output[_cBEDH] != null) {
    contents[_CBEDH] = strictParseInt32(output[_cBEDH]);
  }
  if (output[_cBES] != null) {
    contents[_CBES] = expectString(output[_cBES]);
  }
  if (output[_cBEPD] != null) {
    contents[_CBEPD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cBEPD]));
  }
  if (output[_cBESD] != null) {
    contents[_CBESD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cBESD]));
  }
  if (output[_cBEED] != null) {
    contents[_CBEED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cBEED]));
  }
  if (output[_uF] != null) {
    contents[_UF] = expectString(output[_uF]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  return contents;
};
var de_CapacityBlockExtensionOffering = (output, context) => {
  const contents = {};
  if (output[_cBEOI] != null) {
    contents[_CBEOI] = expectString(output[_cBEOI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_cBESD] != null) {
    contents[_CBESD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cBESD]));
  }
  if (output[_cBEED] != null) {
    contents[_CBEED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cBEED]));
  }
  if (output[_cBEDH] != null) {
    contents[_CBEDH] = strictParseInt32(output[_cBEDH]);
  }
  if (output[_uF] != null) {
    contents[_UF] = expectString(output[_uF]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  return contents;
};
var de_CapacityBlockExtensionOfferingSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityBlockExtensionOffering(entry, context);
  });
};
var de_CapacityBlockExtensionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityBlockExtension(entry, context);
  });
};
var de_CapacityBlockOffering = (output, context) => {
  const contents = {};
  if (output[_cBOI] != null) {
    contents[_CBOI] = expectString(output[_cBOI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_cBDH] != null) {
    contents[_CBDH] = strictParseInt32(output[_cBDH]);
  }
  if (output[_uF] != null) {
    contents[_UF] = expectString(output[_uF]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output[_cBDM] != null) {
    contents[_CBDM] = strictParseInt32(output[_cBDM]);
  }
  return contents;
};
var de_CapacityBlockOfferingSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityBlockOffering(entry, context);
  });
};
var de_CapacityReservation = (output, context) => {
  const contents = {};
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_cRA] != null) {
    contents[_CRA] = expectString(output[_cRA]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_iPn] != null) {
    contents[_IPn] = expectString(output[_iPn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = strictParseInt32(output[_tIC]);
  }
  if (output[_aICv] != null) {
    contents[_AICv] = strictParseInt32(output[_aICv]);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_eS] != null) {
    contents[_ES] = parseBoolean(output[_eS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_eDT] != null) {
    contents[_EDT] = expectString(output[_eDT]);
  }
  if (output[_iMC] != null) {
    contents[_IMC] = expectString(output[_iMC]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_cRFI] != null) {
    contents[_CRFIa] = expectString(output[_cRFI]);
  }
  if (output[_pGA] != null) {
    contents[_PGA] = expectString(output[_pGA]);
  }
  if (output.capacityAllocationSet === "") {
    contents[_CAa] = [];
  } else if (output[_cAS] != null && output[_cAS][_i] != null) {
    contents[_CAa] = de_CapacityAllocations(getArrayIfSingleItem(output[_cAS][_i]), context);
  }
  if (output[_rT] != null) {
    contents[_RTe] = expectString(output[_rT]);
  }
  if (output[_uRBOI] != null) {
    contents[_URBOI] = expectString(output[_uRBOI]);
  }
  if (output[_cIom] != null) {
    contents[_CIomm] = de_CapacityReservationCommitmentInfo(output[_cIom], context);
  }
  if (output[_dP] != null) {
    contents[_DP] = expectString(output[_dP]);
  }
  return contents;
};
var de_CapacityReservationBillingRequest = (output, context) => {
  const contents = {};
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_rB] != null) {
    contents[_RB] = expectString(output[_rB]);
  }
  if (output[_uRBOI] != null) {
    contents[_URBOI] = expectString(output[_uRBOI]);
  }
  if (output[_lUT] != null) {
    contents[_LUT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lUT]));
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_cRIa] != null) {
    contents[_CRIap] = de_CapacityReservationInfo(output[_cRIa], context);
  }
  return contents;
};
var de_CapacityReservationBillingRequestSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityReservationBillingRequest(entry, context);
  });
};
var de_CapacityReservationCommitmentInfo = (output, context) => {
  const contents = {};
  if (output[_cIC] != null) {
    contents[_CIC] = strictParseInt32(output[_cIC]);
  }
  if (output[_cED] != null) {
    contents[_CED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cED]));
  }
  return contents;
};
var de_CapacityReservationFleet = (output, context) => {
  const contents = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = expectString(output[_cRFI]);
  }
  if (output[_cRFA] != null) {
    contents[_CRFA] = expectString(output[_cRFA]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_tTC] != null) {
    contents[_TTC] = strictParseInt32(output[_tTC]);
  }
  if (output[_tFC] != null) {
    contents[_TFC] = strictParseFloat(output[_tFC]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_iMC] != null) {
    contents[_IMC] = expectString(output[_iMC]);
  }
  if (output[_aSl] != null) {
    contents[_AS] = expectString(output[_aSl]);
  }
  if (output.instanceTypeSpecificationSet === "") {
    contents[_ITS] = [];
  } else if (output[_iTSS] != null && output[_iTSS][_i] != null) {
    contents[_ITS] = de_FleetCapacityReservationSet(getArrayIfSingleItem(output[_iTSS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_CapacityReservationFleetCancellationState = (output, context) => {
  const contents = {};
  if (output[_cFS] != null) {
    contents[_CFS] = expectString(output[_cFS]);
  }
  if (output[_pFS] != null) {
    contents[_PFS] = expectString(output[_pFS]);
  }
  if (output[_cRFI] != null) {
    contents[_CRFIa] = expectString(output[_cRFI]);
  }
  return contents;
};
var de_CapacityReservationFleetCancellationStateSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityReservationFleetCancellationState(entry, context);
  });
};
var de_CapacityReservationFleetSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityReservationFleet(entry, context);
  });
};
var de_CapacityReservationGroup = (output, context) => {
  const contents = {};
  if (output[_gA] != null) {
    contents[_GA] = expectString(output[_gA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_CapacityReservationGroupSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityReservationGroup(entry, context);
  });
};
var de_CapacityReservationInfo = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  return contents;
};
var de_CapacityReservationOptions = (output, context) => {
  const contents = {};
  if (output[_uS] != null) {
    contents[_USs] = expectString(output[_uS]);
  }
  return contents;
};
var de_CapacityReservationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CapacityReservation(entry, context);
  });
};
var de_CapacityReservationSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_cRP] != null) {
    contents[_CRP] = expectString(output[_cRP]);
  }
  if (output[_cRT] != null) {
    contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT], context);
  }
  return contents;
};
var de_CapacityReservationTargetResponse = (output, context) => {
  const contents = {};
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_cRRGA] != null) {
    contents[_CRRGA] = expectString(output[_cRRGA]);
  }
  return contents;
};
var de_CarrierGateway = (output, context) => {
  const contents = {};
  if (output[_cGI] != null) {
    contents[_CGI] = expectString(output[_cGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_CarrierGatewaySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CarrierGateway(entry, context);
  });
};
var de_CertificateAuthentication = (output, context) => {
  const contents = {};
  if (output[_cRCC] != null) {
    contents[_CRCC] = expectString(output[_cRCC]);
  }
  return contents;
};
var de_CidrBlock = (output, context) => {
  const contents = {};
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  return contents;
};
var de_CidrBlockSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CidrBlock(entry, context);
  });
};
var de_ClassicLinkDnsSupport = (output, context) => {
  const contents = {};
  if (output[_cLDS] != null) {
    contents[_CLDS] = parseBoolean(output[_cLDS]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_ClassicLinkDnsSupportList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClassicLinkDnsSupport(entry, context);
  });
};
var de_ClassicLinkInstance = (output, context) => {
  const contents = {};
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_ClassicLinkInstanceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClassicLinkInstance(entry, context);
  });
};
var de_ClassicLoadBalancer = (output, context) => {
  const contents = {};
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_ClassicLoadBalancers = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClassicLoadBalancer(entry, context);
  });
};
var de_ClassicLoadBalancersConfig = (output, context) => {
  const contents = {};
  if (output.classicLoadBalancers === "") {
    contents[_CLB] = [];
  } else if (output[_cLB] != null && output[_cLB][_i] != null) {
    contents[_CLB] = de_ClassicLoadBalancers(getArrayIfSingleItem(output[_cLB][_i]), context);
  }
  return contents;
};
var de_ClientCertificateRevocationListStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientConnectResponseOptions = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  if (output[_lFA] != null) {
    contents[_LFA] = expectString(output[_lFA]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointAttributeStatus(output[_sta], context);
  }
  return contents;
};
var de_ClientLoginBannerResponseOptions = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  if (output[_bT] != null) {
    contents[_BT] = expectString(output[_bT]);
  }
  return contents;
};
var de_ClientVpnAuthentication = (output, context) => {
  const contents = {};
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_aD] != null) {
    contents[_AD] = de_DirectoryServiceAuthentication(output[_aD], context);
  }
  if (output[_mA] != null) {
    contents[_MA] = de_CertificateAuthentication(output[_mA], context);
  }
  if (output[_fA] != null) {
    contents[_FA] = de_FederatedAuthentication(output[_fA], context);
  }
  return contents;
};
var de_ClientVpnAuthenticationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClientVpnAuthentication(entry, context);
  });
};
var de_ClientVpnAuthorizationRuleStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientVpnConnection = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectString(output[_ti]);
  }
  if (output[_cIon] != null) {
    contents[_CIo] = expectString(output[_cIon]);
  }
  if (output[_us] != null) {
    contents[_Us] = expectString(output[_us]);
  }
  if (output[_cET] != null) {
    contents[_CETo] = expectString(output[_cET]);
  }
  if (output[_iB] != null) {
    contents[_IB] = expectString(output[_iB]);
  }
  if (output[_eB] != null) {
    contents[_EB] = expectString(output[_eB]);
  }
  if (output[_iPng] != null) {
    contents[_IPng] = expectString(output[_iPng]);
  }
  if (output[_eP] != null) {
    contents[_EPg] = expectString(output[_eP]);
  }
  if (output[_cIl] != null) {
    contents[_CIli] = expectString(output[_cIl]);
  }
  if (output[_cN] != null) {
    contents[_CN] = expectString(output[_cN]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnConnectionStatus(output[_sta], context);
  }
  if (output[_cETo] != null) {
    contents[_CETon] = expectString(output[_cETo]);
  }
  if (output.postureComplianceStatusSet === "") {
    contents[_PCS] = [];
  } else if (output[_pCSS] != null && output[_pCSS][_i] != null) {
    contents[_PCS] = de_ValueStringList(getArrayIfSingleItem(output[_pCSS][_i]), context);
  }
  return contents;
};
var de_ClientVpnConnectionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClientVpnConnection(entry, context);
  });
};
var de_ClientVpnConnectionStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientVpnEndpoint = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectString(output[_cTre]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = expectString(output[_dT]);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = expectString(output[_dNn]);
  }
  if (output[_cCB] != null) {
    contents[_CCB] = expectString(output[_cCB]);
  }
  if (output.dnsServer === "") {
    contents[_DSn] = [];
  } else if (output[_dS] != null && output[_dS][_i] != null) {
    contents[_DSn] = de_ValueStringList(getArrayIfSingleItem(output[_dS][_i]), context);
  }
  if (output[_sTp] != null) {
    contents[_ST] = parseBoolean(output[_sTp]);
  }
  if (output[_vP] != null) {
    contents[_VPp] = expectString(output[_vP]);
  }
  if (output[_tP] != null) {
    contents[_TPr] = expectString(output[_tP]);
  }
  if (output[_vPp] != null) {
    contents[_VP] = strictParseInt32(output[_vPp]);
  }
  if (output.associatedTargetNetwork === "") {
    contents[_ATN] = [];
  } else if (output[_aTN] != null && output[_aTN][_i] != null) {
    contents[_ATN] = de_AssociatedTargetNetworkSet(getArrayIfSingleItem(output[_aTN][_i]), context);
  }
  if (output[_sCA] != null) {
    contents[_SCA] = expectString(output[_sCA]);
  }
  if (output.authenticationOptions === "") {
    contents[_AO] = [];
  } else if (output[_aO] != null && output[_aO][_i] != null) {
    contents[_AO] = de_ClientVpnAuthenticationList(getArrayIfSingleItem(output[_aO][_i]), context);
  }
  if (output[_cLO] != null) {
    contents[_CLO] = de_ConnectionLogResponseOptions(output[_cLO], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_ClientVpnSecurityGroupIdSet(getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sSPU] != null) {
    contents[_SSPU] = expectString(output[_sSPU]);
  }
  if (output[_cCO] != null) {
    contents[_CCO] = de_ClientConnectResponseOptions(output[_cCO], context);
  }
  if (output[_sTH] != null) {
    contents[_STH] = strictParseInt32(output[_sTH]);
  }
  if (output[_cLBO] != null) {
    contents[_CLBO] = de_ClientLoginBannerResponseOptions(output[_cLBO], context);
  }
  if (output[_dOST] != null) {
    contents[_DOST] = parseBoolean(output[_dOST]);
  }
  return contents;
};
var de_ClientVpnEndpointAttributeStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientVpnEndpointStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientVpnRoute = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_dC] != null) {
    contents[_DCe] = expectString(output[_dC]);
  }
  if (output[_tSa] != null) {
    contents[_TSa] = expectString(output[_tSa]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_o] != null) {
    contents[_Or] = expectString(output[_o]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  return contents;
};
var de_ClientVpnRouteSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClientVpnRoute(entry, context);
  });
};
var de_ClientVpnRouteStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ClientVpnSecurityGroupIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CloudWatchLogOptions = (output, context) => {
  const contents = {};
  if (output[_lE] != null) {
    contents[_LE] = parseBoolean(output[_lE]);
  }
  if (output[_lGA] != null) {
    contents[_LGA] = expectString(output[_lGA]);
  }
  if (output[_lOF] != null) {
    contents[_LOF] = expectString(output[_lOF]);
  }
  return contents;
};
var de_CoipAddressUsage = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_aAI] != null) {
    contents[_AAI] = expectString(output[_aAI]);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = expectString(output[_aSw]);
  }
  if (output[_cIop] != null) {
    contents[_CIop] = expectString(output[_cIop]);
  }
  return contents;
};
var de_CoipAddressUsageSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CoipAddressUsage(entry, context);
  });
};
var de_CoipCidr = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_cPI] != null) {
    contents[_CPIo] = expectString(output[_cPI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  return contents;
};
var de_CoipPool = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  if (output.poolCidrSet === "") {
    contents[_PCo] = [];
  } else if (output[_pCS] != null && output[_pCS][_i] != null) {
    contents[_PCo] = de_ValueStringList(getArrayIfSingleItem(output[_pCS][_i]), context);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pA] != null) {
    contents[_PAo] = expectString(output[_pA]);
  }
  return contents;
};
var de_CoipPoolSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CoipPool(entry, context);
  });
};
var de_ConfirmProductInstanceResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_ConnectionLogResponseOptions = (output, context) => {
  const contents = {};
  if (output[_En] != null) {
    contents[_En] = parseBoolean(output[_En]);
  }
  if (output[_CLG] != null) {
    contents[_CLG] = expectString(output[_CLG]);
  }
  if (output[_CLS] != null) {
    contents[_CLS] = expectString(output[_CLS]);
  }
  return contents;
};
var de_ConnectionNotification = (output, context) => {
  const contents = {};
  if (output[_cNI] != null) {
    contents[_CNIon] = expectString(output[_cNI]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  if (output[_vEI] != null) {
    contents[_VEIp] = expectString(output[_vEI]);
  }
  if (output[_cNT] != null) {
    contents[_CNT] = expectString(output[_cNT]);
  }
  if (output[_cNAo] != null) {
    contents[_CNAon] = expectString(output[_cNAo]);
  }
  if (output.connectionEvents === "") {
    contents[_CEo] = [];
  } else if (output[_cE] != null && output[_cE][_i] != null) {
    contents[_CEo] = de_ValueStringList(getArrayIfSingleItem(output[_cE][_i]), context);
  }
  if (output[_cNS] != null) {
    contents[_CNS] = expectString(output[_cNS]);
  }
  if (output[_sR] != null) {
    contents[_SRe] = expectString(output[_sR]);
  }
  return contents;
};
var de_ConnectionNotificationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ConnectionNotification(entry, context);
  });
};
var de_ConnectionTrackingConfiguration = (output, context) => {
  const contents = {};
  if (output[_tET] != null) {
    contents[_TET] = strictParseInt32(output[_tET]);
  }
  if (output[_uST] != null) {
    contents[_UST] = strictParseInt32(output[_uST]);
  }
  if (output[_uTd] != null) {
    contents[_UT] = strictParseInt32(output[_uTd]);
  }
  return contents;
};
var de_ConnectionTrackingSpecification = (output, context) => {
  const contents = {};
  if (output[_tET] != null) {
    contents[_TET] = strictParseInt32(output[_tET]);
  }
  if (output[_uTd] != null) {
    contents[_UT] = strictParseInt32(output[_uTd]);
  }
  if (output[_uST] != null) {
    contents[_UST] = strictParseInt32(output[_uST]);
  }
  return contents;
};
var de_ConnectionTrackingSpecificationRequest = (output, context) => {
  const contents = {};
  if (output[_TET] != null) {
    contents[_TET] = strictParseInt32(output[_TET]);
  }
  if (output[_UST] != null) {
    contents[_UST] = strictParseInt32(output[_UST]);
  }
  if (output[_UT] != null) {
    contents[_UT] = strictParseInt32(output[_UT]);
  }
  return contents;
};
var de_ConnectionTrackingSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_tET] != null) {
    contents[_TET] = strictParseInt32(output[_tET]);
  }
  if (output[_uST] != null) {
    contents[_UST] = strictParseInt32(output[_uST]);
  }
  if (output[_uTd] != null) {
    contents[_UT] = strictParseInt32(output[_uTd]);
  }
  return contents;
};
var de_ConversionTask = (output, context) => {
  const contents = {};
  if (output[_cTI] != null) {
    contents[_CTI] = expectString(output[_cTI]);
  }
  if (output[_eT] != null) {
    contents[_ETx] = expectString(output[_eT]);
  }
  if (output[_iIm] != null) {
    contents[_IIm] = de_ImportInstanceTaskDetails(output[_iIm], context);
  }
  if (output[_iV] != null) {
    contents[_IV] = de_ImportVolumeTaskDetails(output[_iV], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_CopyFpgaImageResult = (output, context) => {
  const contents = {};
  if (output[_fII] != null) {
    contents[_FII] = expectString(output[_fII]);
  }
  return contents;
};
var de_CopyImageResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  return contents;
};
var de_CopySnapshotResult = (output, context) => {
  const contents = {};
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  return contents;
};
var de_CoreCountList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return strictParseInt32(entry);
  });
};
var de_CpuManufacturerSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CpuOptions = (output, context) => {
  const contents = {};
  if (output[_cCo] != null) {
    contents[_CC] = strictParseInt32(output[_cCo]);
  }
  if (output[_tPC] != null) {
    contents[_TPC] = strictParseInt32(output[_tPC]);
  }
  if (output[_aSS] != null) {
    contents[_ASS] = expectString(output[_aSS]);
  }
  return contents;
};
var de_CpuPerformanceFactor = (output, context) => {
  const contents = {};
  if (output.referenceSet === "") {
    contents[_R] = [];
  } else if (output[_rS] != null && output[_rS][_i] != null) {
    contents[_R] = de_PerformanceFactorReferenceSet(getArrayIfSingleItem(output[_rS][_i]), context);
  }
  return contents;
};
var de_CreateCapacityReservationBySplittingResult = (output, context) => {
  const contents = {};
  if (output[_sCR] != null) {
    contents[_SCR] = de_CapacityReservation(output[_sCR], context);
  }
  if (output[_dCR] != null) {
    contents[_DCRe] = de_CapacityReservation(output[_dCR], context);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  return contents;
};
var de_CreateCapacityReservationFleetResult = (output, context) => {
  const contents = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = expectString(output[_cRFI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_tTC] != null) {
    contents[_TTC] = strictParseInt32(output[_tTC]);
  }
  if (output[_tFC] != null) {
    contents[_TFC] = strictParseFloat(output[_tFC]);
  }
  if (output[_iMC] != null) {
    contents[_IMC] = expectString(output[_iMC]);
  }
  if (output[_aSl] != null) {
    contents[_AS] = expectString(output[_aSl]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output.fleetCapacityReservationSet === "") {
    contents[_FCR] = [];
  } else if (output[_fCRS] != null && output[_fCRS][_i] != null) {
    contents[_FCR] = de_FleetCapacityReservationSet(getArrayIfSingleItem(output[_fCRS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_CreateCapacityReservationResult = (output, context) => {
  const contents = {};
  if (output[_cR] != null) {
    contents[_CRapa] = de_CapacityReservation(output[_cR], context);
  }
  return contents;
};
var de_CreateCarrierGatewayResult = (output, context) => {
  const contents = {};
  if (output[_cG] != null) {
    contents[_CG] = de_CarrierGateway(output[_cG], context);
  }
  return contents;
};
var de_CreateClientVpnEndpointResult = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = expectString(output[_dNn]);
  }
  return contents;
};
var de_CreateClientVpnRouteResult = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  return contents;
};
var de_CreateCoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_cCoi] != null) {
    contents[_CCo] = de_CoipCidr(output[_cCoi], context);
  }
  return contents;
};
var de_CreateCoipPoolResult = (output, context) => {
  const contents = {};
  if (output[_cP] != null) {
    contents[_CP] = de_CoipPool(output[_cP], context);
  }
  return contents;
};
var de_CreateCustomerGatewayResult = (output, context) => {
  const contents = {};
  if (output[_cGu] != null) {
    contents[_CGu] = de_CustomerGateway(output[_cGu], context);
  }
  return contents;
};
var de_CreateDefaultSubnetResult = (output, context) => {
  const contents = {};
  if (output[_su] != null) {
    contents[_Su] = de_Subnet(output[_su], context);
  }
  return contents;
};
var de_CreateDefaultVpcResult = (output, context) => {
  const contents = {};
  if (output[_vp] != null) {
    contents[_Vp] = de_Vpc(output[_vp], context);
  }
  return contents;
};
var de_CreateDhcpOptionsResult = (output, context) => {
  const contents = {};
  if (output[_dO] != null) {
    contents[_DOh] = de_DhcpOptions(output[_dO], context);
  }
  return contents;
};
var de_CreateEgressOnlyInternetGatewayResult = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_eOIG] != null) {
    contents[_EOIG] = de_EgressOnlyInternetGateway(output[_eOIG], context);
  }
  return contents;
};
var de_CreateFleetError = (output, context) => {
  const contents = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = expectString(output[_l]);
  }
  if (output[_eC] != null) {
    contents[_EC] = expectString(output[_eC]);
  }
  if (output[_eM] != null) {
    contents[_EM] = expectString(output[_eM]);
  }
  return contents;
};
var de_CreateFleetErrorsSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CreateFleetError(entry, context);
  });
};
var de_CreateFleetInstance = (output, context) => {
  const contents = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = expectString(output[_l]);
  }
  if (output.instanceIds === "") {
    contents[_IIns] = [];
  } else if (output[_iIn] != null && output[_iIn][_i] != null) {
    contents[_IIns] = de_InstanceIdsSet(getArrayIfSingleItem(output[_iIn][_i]), context);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  return contents;
};
var de_CreateFleetInstancesSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CreateFleetInstance(entry, context);
  });
};
var de_CreateFleetResult = (output, context) => {
  const contents = {};
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_CreateFleetErrorsSet(getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents[_In] = [];
  } else if (output[_fIS] != null && output[_fIS][_i] != null) {
    contents[_In] = de_CreateFleetInstancesSet(getArrayIfSingleItem(output[_fIS][_i]), context);
  }
  return contents;
};
var de_CreateFlowLogsResult = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output.flowLogIdSet === "") {
    contents[_FLI] = [];
  } else if (output[_fLIS] != null && output[_fLIS][_i] != null) {
    contents[_FLI] = de_ValueStringList(getArrayIfSingleItem(output[_fLIS][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_CreateFpgaImageResult = (output, context) => {
  const contents = {};
  if (output[_fII] != null) {
    contents[_FII] = expectString(output[_fII]);
  }
  if (output[_fIGI] != null) {
    contents[_FIGI] = expectString(output[_fIGI]);
  }
  return contents;
};
var de_CreateImageResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  return contents;
};
var de_CreateInstanceConnectEndpointResult = (output, context) => {
  const contents = {};
  if (output[_iCE] != null) {
    contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateInstanceEventWindowResult = (output, context) => {
  const contents = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};
var de_CreateInstanceExportTaskResult = (output, context) => {
  const contents = {};
  if (output[_eTx] != null) {
    contents[_ETxp] = de_ExportTask(output[_eTx], context);
  }
  return contents;
};
var de_CreateInternetGatewayResult = (output, context) => {
  const contents = {};
  if (output[_iG] != null) {
    contents[_IGn] = de_InternetGateway(output[_iG], context);
  }
  return contents;
};
var de_CreateIpamExternalResourceVerificationTokenResult = (output, context) => {
  const contents = {};
  if (output[_iERVT] != null) {
    contents[_IERVT] = de_IpamExternalResourceVerificationToken(output[_iERVT], context);
  }
  return contents;
};
var de_CreateIpamPoolResult = (output, context) => {
  const contents = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};
var de_CreateIpamResourceDiscoveryResult = (output, context) => {
  const contents = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};
var de_CreateIpamResult = (output, context) => {
  const contents = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};
var de_CreateIpamScopeResult = (output, context) => {
  const contents = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};
var de_CreateLaunchTemplateResult = (output, context) => {
  const contents = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  if (output[_w] != null) {
    contents[_Wa] = de_ValidationWarning(output[_w], context);
  }
  return contents;
};
var de_CreateLaunchTemplateVersionResult = (output, context) => {
  const contents = {};
  if (output[_lTV] != null) {
    contents[_LTV] = de_LaunchTemplateVersion(output[_lTV], context);
  }
  if (output[_w] != null) {
    contents[_Wa] = de_ValidationWarning(output[_w], context);
  }
  return contents;
};
var de_CreateLocalGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_CreateLocalGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_lGRT] != null) {
    contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT], context);
  }
  return contents;
};
var de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
  const contents = {};
  if (output[_lGRTVIGA] != null) {
    contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA], context);
  }
  return contents;
};
var de_CreateLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
  const contents = {};
  if (output[_lGRTVA] != null) {
    contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA], context);
  }
  return contents;
};
var de_CreateManagedPrefixListResult = (output, context) => {
  const contents = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};
var de_CreateNatGatewayResult = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_nG] != null) {
    contents[_NG] = de_NatGateway(output[_nG], context);
  }
  return contents;
};
var de_CreateNetworkAclResult = (output, context) => {
  const contents = {};
  if (output[_nA] != null) {
    contents[_NA] = de_NetworkAcl(output[_nA], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateNetworkInsightsAccessScopeResult = (output, context) => {
  const contents = {};
  if (output[_nIAS] != null) {
    contents[_NIAS] = de_NetworkInsightsAccessScope(output[_nIAS], context);
  }
  if (output[_nIASC] != null) {
    contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC], context);
  }
  return contents;
};
var de_CreateNetworkInsightsPathResult = (output, context) => {
  const contents = {};
  if (output[_nIP] != null) {
    contents[_NIP] = de_NetworkInsightsPath(output[_nIP], context);
  }
  return contents;
};
var de_CreateNetworkInterfacePermissionResult = (output, context) => {
  const contents = {};
  if (output[_iPnt] != null) {
    contents[_IPnt] = de_NetworkInterfacePermission(output[_iPnt], context);
  }
  return contents;
};
var de_CreateNetworkInterfaceResult = (output, context) => {
  const contents = {};
  if (output[_nIe] != null) {
    contents[_NIet] = de_NetworkInterface(output[_nIe], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreatePlacementGroupResult = (output, context) => {
  const contents = {};
  if (output[_pG] != null) {
    contents[_PG] = de_PlacementGroup(output[_pG], context);
  }
  return contents;
};
var de_CreatePublicIpv4PoolResult = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  return contents;
};
var de_CreateReplaceRootVolumeTaskResult = (output, context) => {
  const contents = {};
  if (output[_rRVT] != null) {
    contents[_RRVT] = de_ReplaceRootVolumeTask(output[_rRVT], context);
  }
  return contents;
};
var de_CreateReservedInstancesListingResult = (output, context) => {
  const contents = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};
var de_CreateRestoreImageTaskResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  return contents;
};
var de_CreateRouteResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_CreateRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_rTo] != null) {
    contents[_RTo] = de_RouteTable(output[_rTo], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateSecurityGroupResult = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sGA] != null) {
    contents[_SGA] = expectString(output[_sGA]);
  }
  return contents;
};
var de_CreateSnapshotsResult = (output, context) => {
  const contents = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotSet(getArrayIfSingleItem(output[_sS][_i]), context);
  }
  return contents;
};
var de_CreateSpotDatafeedSubscriptionResult = (output, context) => {
  const contents = {};
  if (output[_sDS] != null) {
    contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS], context);
  }
  return contents;
};
var de_CreateStoreImageTaskResult = (output, context) => {
  const contents = {};
  if (output[_oK] != null) {
    contents[_OK] = expectString(output[_oK]);
  }
  return contents;
};
var de_CreateSubnetCidrReservationResult = (output, context) => {
  const contents = {};
  if (output[_sCRu] != null) {
    contents[_SCRu] = de_SubnetCidrReservation(output[_sCRu], context);
  }
  return contents;
};
var de_CreateSubnetResult = (output, context) => {
  const contents = {};
  if (output[_su] != null) {
    contents[_Su] = de_Subnet(output[_su], context);
  }
  return contents;
};
var de_CreateTrafficMirrorFilterResult = (output, context) => {
  const contents = {};
  if (output[_tMF] != null) {
    contents[_TMF] = de_TrafficMirrorFilter(output[_tMF], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateTrafficMirrorFilterRuleResult = (output, context) => {
  const contents = {};
  if (output[_tMFR] != null) {
    contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateTrafficMirrorSessionResult = (output, context) => {
  const contents = {};
  if (output[_tMS] != null) {
    contents[_TMS] = de_TrafficMirrorSession(output[_tMS], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateTrafficMirrorTargetResult = (output, context) => {
  const contents = {};
  if (output[_tMT] != null) {
    contents[_TMT] = de_TrafficMirrorTarget(output[_tMT], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateTransitGatewayConnectPeerResult = (output, context) => {
  const contents = {};
  if (output[_tGCP] != null) {
    contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP], context);
  }
  return contents;
};
var de_CreateTransitGatewayConnectResult = (output, context) => {
  const contents = {};
  if (output[_tGC] != null) {
    contents[_TGCr] = de_TransitGatewayConnect(output[_tGC], context);
  }
  return contents;
};
var de_CreateTransitGatewayMulticastDomainResult = (output, context) => {
  const contents = {};
  if (output[_tGMD] != null) {
    contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD], context);
  }
  return contents;
};
var de_CreateTransitGatewayPeeringAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};
var de_CreateTransitGatewayPolicyTableResult = (output, context) => {
  const contents = {};
  if (output[_tGPT] != null) {
    contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT], context);
  }
  return contents;
};
var de_CreateTransitGatewayPrefixListReferenceResult = (output, context) => {
  const contents = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};
var de_CreateTransitGatewayResult = (output, context) => {
  const contents = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};
var de_CreateTransitGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_CreateTransitGatewayRouteTableAnnouncementResult = (output, context) => {
  const contents = {};
  if (output[_tGRTA] != null) {
    contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA], context);
  }
  return contents;
};
var de_CreateTransitGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT], context);
  }
  return contents;
};
var de_CreateTransitGatewayVpcAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};
var de_CreateVerifiedAccessEndpointResult = (output, context) => {
  const contents = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};
var de_CreateVerifiedAccessGroupResult = (output, context) => {
  const contents = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};
var de_CreateVerifiedAccessInstanceResult = (output, context) => {
  const contents = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};
var de_CreateVerifiedAccessTrustProviderResult = (output, context) => {
  const contents = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};
var de_CreateVolumePermission = (output, context) => {
  const contents = {};
  if (output[_uI] != null) {
    contents[_UIs] = expectString(output[_uI]);
  }
  if (output[_g] != null) {
    contents[_Gr] = expectString(output[_g]);
  }
  return contents;
};
var de_CreateVolumePermissionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CreateVolumePermission(entry, context);
  });
};
var de_CreateVpcBlockPublicAccessExclusionResult = (output, context) => {
  const contents = {};
  if (output[_vBPAE] != null) {
    contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE], context);
  }
  return contents;
};
var de_CreateVpcEndpointConnectionNotificationResult = (output, context) => {
  const contents = {};
  if (output[_cNo] != null) {
    contents[_CNo] = de_ConnectionNotification(output[_cNo], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateVpcEndpointResult = (output, context) => {
  const contents = {};
  if (output[_vE] != null) {
    contents[_VE] = de_VpcEndpoint(output[_vE], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateVpcEndpointServiceConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_sC] != null) {
    contents[_SCe] = de_ServiceConfiguration(output[_sC], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_CreateVpcPeeringConnectionResult = (output, context) => {
  const contents = {};
  if (output[_vPC] != null) {
    contents[_VPC] = de_VpcPeeringConnection(output[_vPC], context);
  }
  return contents;
};
var de_CreateVpcResult = (output, context) => {
  const contents = {};
  if (output[_vp] != null) {
    contents[_Vp] = de_Vpc(output[_vp], context);
  }
  return contents;
};
var de_CreateVpnConnectionResult = (output, context) => {
  const contents = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};
var de_CreateVpnGatewayResult = (output, context) => {
  const contents = {};
  if (output[_vG] != null) {
    contents[_VG] = de_VpnGateway(output[_vG], context);
  }
  return contents;
};
var de_CreditSpecification = (output, context) => {
  const contents = {};
  if (output[_cCp] != null) {
    contents[_CCp] = expectString(output[_cCp]);
  }
  return contents;
};
var de_CustomerGateway = (output, context) => {
  const contents = {};
  if (output[_cAe] != null) {
    contents[_CA] = expectString(output[_cAe]);
  }
  if (output[_dN] != null) {
    contents[_DN] = expectString(output[_dN]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_bAE] != null) {
    contents[_BAE] = expectString(output[_bAE]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = expectString(output[_cGIu]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_iAp] != null) {
    contents[_IAp] = expectString(output[_iAp]);
  }
  if (output[_bA] != null) {
    contents[_BA] = expectString(output[_bA]);
  }
  return contents;
};
var de_CustomerGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CustomerGateway(entry, context);
  });
};
var de_DataResponse = (output, context) => {
  const contents = {};
  if (output[_id] != null) {
    contents[_Id] = expectString(output[_id]);
  }
  if (output[_s] != null) {
    contents[_S] = expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = expectString(output[_d]);
  }
  if (output[_met] != null) {
    contents[_Met] = expectString(output[_met]);
  }
  if (output[_stat] != null) {
    contents[_Sta] = expectString(output[_stat]);
  }
  if (output[_pe] != null) {
    contents[_Per] = expectString(output[_pe]);
  }
  if (output.metricPointSet === "") {
    contents[_MPe] = [];
  } else if (output[_mPS] != null && output[_mPS][_i] != null) {
    contents[_MPe] = de_MetricPoints(getArrayIfSingleItem(output[_mPS][_i]), context);
  }
  return contents;
};
var de_DataResponses = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DataResponse(entry, context);
  });
};
var de_DeclarativePoliciesReport = (output, context) => {
  const contents = {};
  if (output[_rI] != null) {
    contents[_RIep] = expectString(output[_rI]);
  }
  if (output[_sB] != null) {
    contents[_SB] = expectString(output[_sB]);
  }
  if (output[_sP] != null) {
    contents[_SP] = expectString(output[_sP]);
  }
  if (output[_tI] != null) {
    contents[_TIa] = expectString(output[_tI]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_eTn] != null) {
    contents[_ETn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_DeclarativePoliciesReportList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DeclarativePoliciesReport(entry, context);
  });
};
var de_DedicatedHostIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_DeleteCarrierGatewayResult = (output, context) => {
  const contents = {};
  if (output[_cG] != null) {
    contents[_CG] = de_CarrierGateway(output[_cG], context);
  }
  return contents;
};
var de_DeleteClientVpnEndpointResult = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  return contents;
};
var de_DeleteClientVpnRouteResult = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  return contents;
};
var de_DeleteCoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_cCoi] != null) {
    contents[_CCo] = de_CoipCidr(output[_cCoi], context);
  }
  return contents;
};
var de_DeleteCoipPoolResult = (output, context) => {
  const contents = {};
  if (output[_cP] != null) {
    contents[_CP] = de_CoipPool(output[_cP], context);
  }
  return contents;
};
var de_DeleteEgressOnlyInternetGatewayResult = (output, context) => {
  const contents = {};
  if (output[_rC] != null) {
    contents[_RCet] = parseBoolean(output[_rC]);
  }
  return contents;
};
var de_DeleteFleetError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_DeleteFleetErrorItem = (output, context) => {
  const contents = {};
  if (output[_er] != null) {
    contents[_Er] = de_DeleteFleetError(output[_er], context);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  return contents;
};
var de_DeleteFleetErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DeleteFleetErrorItem(entry, context);
  });
};
var de_DeleteFleetsResult = (output, context) => {
  const contents = {};
  if (output.successfulFleetDeletionSet === "") {
    contents[_SFD] = [];
  } else if (output[_sFDS] != null && output[_sFDS][_i] != null) {
    contents[_SFD] = de_DeleteFleetSuccessSet(getArrayIfSingleItem(output[_sFDS][_i]), context);
  }
  if (output.unsuccessfulFleetDeletionSet === "") {
    contents[_UFD] = [];
  } else if (output[_uFDS] != null && output[_uFDS][_i] != null) {
    contents[_UFD] = de_DeleteFleetErrorSet(getArrayIfSingleItem(output[_uFDS][_i]), context);
  }
  return contents;
};
var de_DeleteFleetSuccessItem = (output, context) => {
  const contents = {};
  if (output[_cFS] != null) {
    contents[_CFS] = expectString(output[_cFS]);
  }
  if (output[_pFS] != null) {
    contents[_PFS] = expectString(output[_pFS]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  return contents;
};
var de_DeleteFleetSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DeleteFleetSuccessItem(entry, context);
  });
};
var de_DeleteFlowLogsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_DeleteFpgaImageResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DeleteInstanceConnectEndpointResult = (output, context) => {
  const contents = {};
  if (output[_iCE] != null) {
    contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE], context);
  }
  return contents;
};
var de_DeleteInstanceEventWindowResult = (output, context) => {
  const contents = {};
  if (output[_iEWS] != null) {
    contents[_IEWS] = de_InstanceEventWindowStateChange(output[_iEWS], context);
  }
  return contents;
};
var de_DeleteIpamExternalResourceVerificationTokenResult = (output, context) => {
  const contents = {};
  if (output[_iERVT] != null) {
    contents[_IERVT] = de_IpamExternalResourceVerificationToken(output[_iERVT], context);
  }
  return contents;
};
var de_DeleteIpamPoolResult = (output, context) => {
  const contents = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};
var de_DeleteIpamResourceDiscoveryResult = (output, context) => {
  const contents = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};
var de_DeleteIpamResult = (output, context) => {
  const contents = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};
var de_DeleteIpamScopeResult = (output, context) => {
  const contents = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};
var de_DeleteKeyPairResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output[_kPI] != null) {
    contents[_KPI] = expectString(output[_kPI]);
  }
  return contents;
};
var de_DeleteLaunchTemplateResult = (output, context) => {
  const contents = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  return contents;
};
var de_DeleteLaunchTemplateVersionsResponseErrorItem = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = strictParseLong(output[_vNe]);
  }
  if (output[_rE] != null) {
    contents[_REes] = de_ResponseError(output[_rE], context);
  }
  return contents;
};
var de_DeleteLaunchTemplateVersionsResponseErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
  });
};
var de_DeleteLaunchTemplateVersionsResponseSuccessItem = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = strictParseLong(output[_vNe]);
  }
  return contents;
};
var de_DeleteLaunchTemplateVersionsResponseSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
  });
};
var de_DeleteLaunchTemplateVersionsResult = (output, context) => {
  const contents = {};
  if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
    contents[_SDLTV] = [];
  } else if (output[_sDLTVS] != null && output[_sDLTVS][_i] != null) {
    contents[_SDLTV] = de_DeleteLaunchTemplateVersionsResponseSuccessSet(getArrayIfSingleItem(output[_sDLTVS][_i]), context);
  }
  if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
    contents[_UDLTV] = [];
  } else if (output[_uDLTVS] != null && output[_uDLTVS][_i] != null) {
    contents[_UDLTV] = de_DeleteLaunchTemplateVersionsResponseErrorSet(getArrayIfSingleItem(output[_uDLTVS][_i]), context);
  }
  return contents;
};
var de_DeleteLocalGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_DeleteLocalGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_lGRT] != null) {
    contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT], context);
  }
  return contents;
};
var de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
  const contents = {};
  if (output[_lGRTVIGA] != null) {
    contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA], context);
  }
  return contents;
};
var de_DeleteLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
  const contents = {};
  if (output[_lGRTVA] != null) {
    contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA], context);
  }
  return contents;
};
var de_DeleteManagedPrefixListResult = (output, context) => {
  const contents = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};
var de_DeleteNatGatewayResult = (output, context) => {
  const contents = {};
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  return contents;
};
var de_DeleteNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
  const contents = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = expectString(output[_nIASAI]);
  }
  return contents;
};
var de_DeleteNetworkInsightsAccessScopeResult = (output, context) => {
  const contents = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = expectString(output[_nIASI]);
  }
  return contents;
};
var de_DeleteNetworkInsightsAnalysisResult = (output, context) => {
  const contents = {};
  if (output[_nIAI] != null) {
    contents[_NIAI] = expectString(output[_nIAI]);
  }
  return contents;
};
var de_DeleteNetworkInsightsPathResult = (output, context) => {
  const contents = {};
  if (output[_nIPI] != null) {
    contents[_NIPI] = expectString(output[_nIPI]);
  }
  return contents;
};
var de_DeleteNetworkInterfacePermissionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DeletePublicIpv4PoolResult = (output, context) => {
  const contents = {};
  if (output[_rV] != null) {
    contents[_RV] = parseBoolean(output[_rV]);
  }
  return contents;
};
var de_DeleteQueuedReservedInstancesError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_DeleteQueuedReservedInstancesResult = (output, context) => {
  const contents = {};
  if (output.successfulQueuedPurchaseDeletionSet === "") {
    contents[_SQPD] = [];
  } else if (output[_sQPDS] != null && output[_sQPDS][_i] != null) {
    contents[_SQPD] = de_SuccessfulQueuedPurchaseDeletionSet(getArrayIfSingleItem(output[_sQPDS][_i]), context);
  }
  if (output.failedQueuedPurchaseDeletionSet === "") {
    contents[_FQPD] = [];
  } else if (output[_fQPDS] != null && output[_fQPDS][_i] != null) {
    contents[_FQPD] = de_FailedQueuedPurchaseDeletionSet(getArrayIfSingleItem(output[_fQPDS][_i]), context);
  }
  return contents;
};
var de_DeleteSecurityGroupResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  return contents;
};
var de_DeleteSubnetCidrReservationResult = (output, context) => {
  const contents = {};
  if (output[_dSCR] != null) {
    contents[_DSCRe] = de_SubnetCidrReservation(output[_dSCR], context);
  }
  return contents;
};
var de_DeleteTrafficMirrorFilterResult = (output, context) => {
  const contents = {};
  if (output[_tMFI] != null) {
    contents[_TMFI] = expectString(output[_tMFI]);
  }
  return contents;
};
var de_DeleteTrafficMirrorFilterRuleResult = (output, context) => {
  const contents = {};
  if (output[_tMFRI] != null) {
    contents[_TMFRI] = expectString(output[_tMFRI]);
  }
  return contents;
};
var de_DeleteTrafficMirrorSessionResult = (output, context) => {
  const contents = {};
  if (output[_tMSI] != null) {
    contents[_TMSI] = expectString(output[_tMSI]);
  }
  return contents;
};
var de_DeleteTrafficMirrorTargetResult = (output, context) => {
  const contents = {};
  if (output[_tMTI] != null) {
    contents[_TMTI] = expectString(output[_tMTI]);
  }
  return contents;
};
var de_DeleteTransitGatewayConnectPeerResult = (output, context) => {
  const contents = {};
  if (output[_tGCP] != null) {
    contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP], context);
  }
  return contents;
};
var de_DeleteTransitGatewayConnectResult = (output, context) => {
  const contents = {};
  if (output[_tGC] != null) {
    contents[_TGCr] = de_TransitGatewayConnect(output[_tGC], context);
  }
  return contents;
};
var de_DeleteTransitGatewayMulticastDomainResult = (output, context) => {
  const contents = {};
  if (output[_tGMD] != null) {
    contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD], context);
  }
  return contents;
};
var de_DeleteTransitGatewayPeeringAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};
var de_DeleteTransitGatewayPolicyTableResult = (output, context) => {
  const contents = {};
  if (output[_tGPT] != null) {
    contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT], context);
  }
  return contents;
};
var de_DeleteTransitGatewayPrefixListReferenceResult = (output, context) => {
  const contents = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};
var de_DeleteTransitGatewayResult = (output, context) => {
  const contents = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};
var de_DeleteTransitGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_DeleteTransitGatewayRouteTableAnnouncementResult = (output, context) => {
  const contents = {};
  if (output[_tGRTA] != null) {
    contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA], context);
  }
  return contents;
};
var de_DeleteTransitGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT], context);
  }
  return contents;
};
var de_DeleteTransitGatewayVpcAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};
var de_DeleteVerifiedAccessEndpointResult = (output, context) => {
  const contents = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};
var de_DeleteVerifiedAccessGroupResult = (output, context) => {
  const contents = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};
var de_DeleteVerifiedAccessInstanceResult = (output, context) => {
  const contents = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};
var de_DeleteVerifiedAccessTrustProviderResult = (output, context) => {
  const contents = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};
var de_DeleteVpcBlockPublicAccessExclusionResult = (output, context) => {
  const contents = {};
  if (output[_vBPAE] != null) {
    contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE], context);
  }
  return contents;
};
var de_DeleteVpcEndpointConnectionNotificationsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_DeleteVpcEndpointServiceConfigurationsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_DeleteVpcEndpointsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_DeleteVpcPeeringConnectionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DeprovisionByoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};
var de_DeprovisionedAddressSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_DeprovisionIpamByoasnResult = (output, context) => {
  const contents = {};
  if (output[_b] != null) {
    contents[_Byo] = de_Byoasn(output[_b], context);
  }
  return contents;
};
var de_DeprovisionIpamPoolCidrResult = (output, context) => {
  const contents = {};
  if (output[_iPC] != null) {
    contents[_IPCpa] = de_IpamPoolCidr(output[_iPC], context);
  }
  return contents;
};
var de_DeprovisionPublicIpv4PoolCidrResult = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  if (output.deprovisionedAddressSet === "") {
    contents[_DAep] = [];
  } else if (output[_dASe] != null && output[_dASe][_i] != null) {
    contents[_DAep] = de_DeprovisionedAddressSet(getArrayIfSingleItem(output[_dASe][_i]), context);
  }
  return contents;
};
var de_DeregisterInstanceEventNotificationAttributesResult = (output, context) => {
  const contents = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};
var de_DeregisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
  const contents = {};
  if (output[_dMGM] != null) {
    contents[_DMGM] = de_TransitGatewayMulticastDeregisteredGroupMembers(output[_dMGM], context);
  }
  return contents;
};
var de_DeregisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
  const contents = {};
  if (output[_dMGS] != null) {
    contents[_DMGS] = de_TransitGatewayMulticastDeregisteredGroupSources(output[_dMGS], context);
  }
  return contents;
};
var de_DescribeAccountAttributesResult = (output, context) => {
  const contents = {};
  if (output.accountAttributeSet === "") {
    contents[_AAcc] = [];
  } else if (output[_aASc] != null && output[_aASc][_i] != null) {
    contents[_AAcc] = de_AccountAttributeList(getArrayIfSingleItem(output[_aASc][_i]), context);
  }
  return contents;
};
var de_DescribeAddressesAttributeResult = (output, context) => {
  const contents = {};
  if (output.addressSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSd] != null && output[_aSd][_i] != null) {
    contents[_Addr] = de_AddressSet(getArrayIfSingleItem(output[_aSd][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeAddressesResult = (output, context) => {
  const contents = {};
  if (output.addressesSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSdd] != null && output[_aSdd][_i] != null) {
    contents[_Addr] = de_AddressList(getArrayIfSingleItem(output[_aSdd][_i]), context);
  }
  return contents;
};
var de_DescribeAddressTransfersResult = (output, context) => {
  const contents = {};
  if (output.addressTransferSet === "") {
    contents[_ATddr] = [];
  } else if (output[_aTSd] != null && output[_aTSd][_i] != null) {
    contents[_ATddr] = de_AddressTransferList(getArrayIfSingleItem(output[_aTSd][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeAggregateIdFormatResult = (output, context) => {
  const contents = {};
  if (output[_uLIA] != null) {
    contents[_ULIA] = parseBoolean(output[_uLIA]);
  }
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};
var de_DescribeAvailabilityZonesResult = (output, context) => {
  const contents = {};
  if (output.availabilityZoneInfo === "") {
    contents[_AZv] = [];
  } else if (output[_aZIv] != null && output[_aZIv][_i] != null) {
    contents[_AZv] = de_AvailabilityZoneList(getArrayIfSingleItem(output[_aZIv][_i]), context);
  }
  return contents;
};
var de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.subscriptionSet === "") {
    contents[_Sub] = [];
  } else if (output[_sSu] != null && output[_sSu][_i] != null) {
    contents[_Sub] = de_SubscriptionList(getArrayIfSingleItem(output[_sSu][_i]), context);
  }
  return contents;
};
var de_DescribeBundleTasksResult = (output, context) => {
  const contents = {};
  if (output.bundleInstanceTasksSet === "") {
    contents[_BTun] = [];
  } else if (output[_bITS] != null && output[_bITS][_i] != null) {
    contents[_BTun] = de_BundleTaskList(getArrayIfSingleItem(output[_bITS][_i]), context);
  }
  return contents;
};
var de_DescribeByoipCidrsResult = (output, context) => {
  const contents = {};
  if (output.byoipCidrSet === "") {
    contents[_BCy] = [];
  } else if (output[_bCS] != null && output[_bCS][_i] != null) {
    contents[_BCy] = de_ByoipCidrSet(getArrayIfSingleItem(output[_bCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCapacityBlockExtensionHistoryResult = (output, context) => {
  const contents = {};
  if (output.capacityBlockExtensionSet === "") {
    contents[_CBE] = [];
  } else if (output[_cBESa] != null && output[_cBESa][_i] != null) {
    contents[_CBE] = de_CapacityBlockExtensionSet(getArrayIfSingleItem(output[_cBESa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCapacityBlockExtensionOfferingsResult = (output, context) => {
  const contents = {};
  if (output.capacityBlockExtensionOfferingSet === "") {
    contents[_CBEO] = [];
  } else if (output[_cBEOS] != null && output[_cBEOS][_i] != null) {
    contents[_CBEO] = de_CapacityBlockExtensionOfferingSet(getArrayIfSingleItem(output[_cBEOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCapacityBlockOfferingsResult = (output, context) => {
  const contents = {};
  if (output.capacityBlockOfferingSet === "") {
    contents[_CBO] = [];
  } else if (output[_cBOS] != null && output[_cBOS][_i] != null) {
    contents[_CBO] = de_CapacityBlockOfferingSet(getArrayIfSingleItem(output[_cBOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCapacityReservationBillingRequestsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.capacityReservationBillingRequestSet === "") {
    contents[_CRBR] = [];
  } else if (output[_cRBRS] != null && output[_cRBRS][_i] != null) {
    contents[_CRBR] = de_CapacityReservationBillingRequestSet(getArrayIfSingleItem(output[_cRBRS][_i]), context);
  }
  return contents;
};
var de_DescribeCapacityReservationFleetsResult = (output, context) => {
  const contents = {};
  if (output.capacityReservationFleetSet === "") {
    contents[_CRF] = [];
  } else if (output[_cRFS] != null && output[_cRFS][_i] != null) {
    contents[_CRF] = de_CapacityReservationFleetSet(getArrayIfSingleItem(output[_cRFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCapacityReservationsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.capacityReservationSet === "") {
    contents[_CRapac] = [];
  } else if (output[_cRS] != null && output[_cRS][_i] != null) {
    contents[_CRapac] = de_CapacityReservationSet(getArrayIfSingleItem(output[_cRS][_i]), context);
  }
  return contents;
};
var de_DescribeCarrierGatewaysResult = (output, context) => {
  const contents = {};
  if (output.carrierGatewaySet === "") {
    contents[_CGa] = [];
  } else if (output[_cGS] != null && output[_cGS][_i] != null) {
    contents[_CGa] = de_CarrierGatewaySet(getArrayIfSingleItem(output[_cGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClassicLinkInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_In] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_In] = de_ClassicLinkInstanceList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClientVpnAuthorizationRulesResult = (output, context) => {
  const contents = {};
  if (output.authorizationRule === "") {
    contents[_ARut] = [];
  } else if (output[_aR] != null && output[_aR][_i] != null) {
    contents[_ARut] = de_AuthorizationRuleSet(getArrayIfSingleItem(output[_aR][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClientVpnConnectionsResult = (output, context) => {
  const contents = {};
  if (output.connections === "") {
    contents[_Conn] = [];
  } else if (output[_con] != null && output[_con][_i] != null) {
    contents[_Conn] = de_ClientVpnConnectionSet(getArrayIfSingleItem(output[_con][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClientVpnEndpointsResult = (output, context) => {
  const contents = {};
  if (output.clientVpnEndpoint === "") {
    contents[_CVEl] = [];
  } else if (output[_cVE] != null && output[_cVE][_i] != null) {
    contents[_CVEl] = de_EndpointSet(getArrayIfSingleItem(output[_cVE][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClientVpnRoutesResult = (output, context) => {
  const contents = {};
  if (output.routes === "") {
    contents[_Rout] = [];
  } else if (output[_rou] != null && output[_rou][_i] != null) {
    contents[_Rout] = de_ClientVpnRouteSet(getArrayIfSingleItem(output[_rou][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeClientVpnTargetNetworksResult = (output, context) => {
  const contents = {};
  if (output.clientVpnTargetNetworks === "") {
    contents[_CVTN] = [];
  } else if (output[_cVTN] != null && output[_cVTN][_i] != null) {
    contents[_CVTN] = de_TargetNetworkSet(getArrayIfSingleItem(output[_cVTN][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeCoipPoolsResult = (output, context) => {
  const contents = {};
  if (output.coipPoolSet === "") {
    contents[_CPo] = [];
  } else if (output[_cPS] != null && output[_cPS][_i] != null) {
    contents[_CPo] = de_CoipPoolSet(getArrayIfSingleItem(output[_cPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeConversionTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ConversionTask(entry, context);
  });
};
var de_DescribeConversionTasksResult = (output, context) => {
  const contents = {};
  if (output.conversionTasks === "") {
    contents[_CTon] = [];
  } else if (output[_cTo] != null && output[_cTo][_i] != null) {
    contents[_CTon] = de_DescribeConversionTaskList(getArrayIfSingleItem(output[_cTo][_i]), context);
  }
  return contents;
};
var de_DescribeCustomerGatewaysResult = (output, context) => {
  const contents = {};
  if (output.customerGatewaySet === "") {
    contents[_CGus] = [];
  } else if (output[_cGSu] != null && output[_cGSu][_i] != null) {
    contents[_CGus] = de_CustomerGatewayList(getArrayIfSingleItem(output[_cGSu][_i]), context);
  }
  return contents;
};
var de_DescribeDeclarativePoliciesReportsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.reportSet === "") {
    contents[_Rep] = [];
  } else if (output[_rSe] != null && output[_rSe][_i] != null) {
    contents[_Rep] = de_DeclarativePoliciesReportList(getArrayIfSingleItem(output[_rSe][_i]), context);
  }
  return contents;
};
var de_DescribeDhcpOptionsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.dhcpOptionsSet === "") {
    contents[_DOh] = [];
  } else if (output[_dOS] != null && output[_dOS][_i] != null) {
    contents[_DOh] = de_DhcpOptionsList(getArrayIfSingleItem(output[_dOS][_i]), context);
  }
  return contents;
};
var de_DescribeEgressOnlyInternetGatewaysResult = (output, context) => {
  const contents = {};
  if (output.egressOnlyInternetGatewaySet === "") {
    contents[_EOIGg] = [];
  } else if (output[_eOIGS] != null && output[_eOIGS][_i] != null) {
    contents[_EOIGg] = de_EgressOnlyInternetGatewayList(getArrayIfSingleItem(output[_eOIGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeElasticGpusResult = (output, context) => {
  const contents = {};
  if (output.elasticGpuSet === "") {
    contents[_EGSla] = [];
  } else if (output[_eGS] != null && output[_eGS][_i] != null) {
    contents[_EGSla] = de_ElasticGpuSet(getArrayIfSingleItem(output[_eGS][_i]), context);
  }
  if (output[_mR] != null) {
    contents[_MR] = strictParseInt32(output[_mR]);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeExportImageTasksResult = (output, context) => {
  const contents = {};
  if (output.exportImageTaskSet === "") {
    contents[_EITx] = [];
  } else if (output[_eITS] != null && output[_eITS][_i] != null) {
    contents[_EITx] = de_ExportImageTaskList(getArrayIfSingleItem(output[_eITS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeExportTasksResult = (output, context) => {
  const contents = {};
  if (output.exportTaskSet === "") {
    contents[_ETxpo] = [];
  } else if (output[_eTS] != null && output[_eTS][_i] != null) {
    contents[_ETxpo] = de_ExportTaskList(getArrayIfSingleItem(output[_eTS][_i]), context);
  }
  return contents;
};
var de_DescribeFastLaunchImagesResult = (output, context) => {
  const contents = {};
  if (output.fastLaunchImageSet === "") {
    contents[_FLIa] = [];
  } else if (output[_fLISa] != null && output[_fLISa][_i] != null) {
    contents[_FLIa] = de_DescribeFastLaunchImagesSuccessSet(getArrayIfSingleItem(output[_fLISa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeFastLaunchImagesSuccessItem = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = strictParseInt32(output[_mPL]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};
var de_DescribeFastLaunchImagesSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DescribeFastLaunchImagesSuccessItem(entry, context);
  });
};
var de_DescribeFastSnapshotRestoresResult = (output, context) => {
  const contents = {};
  if (output.fastSnapshotRestoreSet === "") {
    contents[_FSR] = [];
  } else if (output[_fSRS] != null && output[_fSRS][_i] != null) {
    contents[_FSR] = de_DescribeFastSnapshotRestoreSuccessSet(getArrayIfSingleItem(output[_fSRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeFastSnapshotRestoreSuccessItem = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = expectString(output[_oAw]);
  }
  if (output[_eTna] != null) {
    contents[_ETna] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTnab] != null) {
    contents[_ETnab] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTnab]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};
var de_DescribeFastSnapshotRestoreSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DescribeFastSnapshotRestoreSuccessItem(entry, context);
  });
};
var de_DescribeFleetError = (output, context) => {
  const contents = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = expectString(output[_l]);
  }
  if (output[_eC] != null) {
    contents[_EC] = expectString(output[_eC]);
  }
  if (output[_eM] != null) {
    contents[_EM] = expectString(output[_eM]);
  }
  return contents;
};
var de_DescribeFleetHistoryResult = (output, context) => {
  const contents = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_HistoryRecordSet(getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_lET] != null) {
    contents[_LET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lET]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  return contents;
};
var de_DescribeFleetInstancesResult = (output, context) => {
  const contents = {};
  if (output.activeInstanceSet === "") {
    contents[_AIc] = [];
  } else if (output[_aIS] != null && output[_aIS][_i] != null) {
    contents[_AIc] = de_ActiveInstanceSet(getArrayIfSingleItem(output[_aIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  return contents;
};
var de_DescribeFleetsErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DescribeFleetError(entry, context);
  });
};
var de_DescribeFleetsInstances = (output, context) => {
  const contents = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = expectString(output[_l]);
  }
  if (output.instanceIds === "") {
    contents[_IIns] = [];
  } else if (output[_iIn] != null && output[_iIn][_i] != null) {
    contents[_IIns] = de_InstanceIdsSet(getArrayIfSingleItem(output[_iIn][_i]), context);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  return contents;
};
var de_DescribeFleetsInstancesSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DescribeFleetsInstances(entry, context);
  });
};
var de_DescribeFleetsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.fleetSet === "") {
    contents[_Fl] = [];
  } else if (output[_fS] != null && output[_fS][_i] != null) {
    contents[_Fl] = de_FleetSet(getArrayIfSingleItem(output[_fS][_i]), context);
  }
  return contents;
};
var de_DescribeFlowLogsResult = (output, context) => {
  const contents = {};
  if (output.flowLogSet === "") {
    contents[_FL] = [];
  } else if (output[_fLS] != null && output[_fLS][_i] != null) {
    contents[_FL] = de_FlowLogSet(getArrayIfSingleItem(output[_fLS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeFpgaImageAttributeResult = (output, context) => {
  const contents = {};
  if (output[_fIA] != null) {
    contents[_FIAp] = de_FpgaImageAttribute(output[_fIA], context);
  }
  return contents;
};
var de_DescribeFpgaImagesResult = (output, context) => {
  const contents = {};
  if (output.fpgaImageSet === "") {
    contents[_FIp] = [];
  } else if (output[_fISp] != null && output[_fISp][_i] != null) {
    contents[_FIp] = de_FpgaImageList(getArrayIfSingleItem(output[_fISp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeHostReservationOfferingsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.offeringSet === "") {
    contents[_OS] = [];
  } else if (output[_oS] != null && output[_oS][_i] != null) {
    contents[_OS] = de_HostOfferingSet(getArrayIfSingleItem(output[_oS][_i]), context);
  }
  return contents;
};
var de_DescribeHostReservationsResult = (output, context) => {
  const contents = {};
  if (output.hostReservationSet === "") {
    contents[_HRS] = [];
  } else if (output[_hRSo] != null && output[_hRSo][_i] != null) {
    contents[_HRS] = de_HostReservationSet(getArrayIfSingleItem(output[_hRSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeHostsResult = (output, context) => {
  const contents = {};
  if (output.hostSet === "") {
    contents[_Ho] = [];
  } else if (output[_hS] != null && output[_hS][_i] != null) {
    contents[_Ho] = de_HostList(getArrayIfSingleItem(output[_hS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIamInstanceProfileAssociationsResult = (output, context) => {
  const contents = {};
  if (output.iamInstanceProfileAssociationSet === "") {
    contents[_IIPAa] = [];
  } else if (output[_iIPAS] != null && output[_iIPAS][_i] != null) {
    contents[_IIPAa] = de_IamInstanceProfileAssociationSet(getArrayIfSingleItem(output[_iIPAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIdentityIdFormatResult = (output, context) => {
  const contents = {};
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};
var de_DescribeIdFormatResult = (output, context) => {
  const contents = {};
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};
var de_DescribeImagesResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.imagesSet === "") {
    contents[_Ima] = [];
  } else if (output[_iSm] != null && output[_iSm][_i] != null) {
    contents[_Ima] = de_ImageList(getArrayIfSingleItem(output[_iSm][_i]), context);
  }
  return contents;
};
var de_DescribeImportImageTasksResult = (output, context) => {
  const contents = {};
  if (output.importImageTaskSet === "") {
    contents[_IIT] = [];
  } else if (output[_iITS] != null && output[_iITS][_i] != null) {
    contents[_IIT] = de_ImportImageTaskList(getArrayIfSingleItem(output[_iITS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeImportSnapshotTasksResult = (output, context) => {
  const contents = {};
  if (output.importSnapshotTaskSet === "") {
    contents[_IST] = [];
  } else if (output[_iSTS] != null && output[_iSTS][_i] != null) {
    contents[_IST] = de_ImportSnapshotTaskList(getArrayIfSingleItem(output[_iSTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceConnectEndpointsResult = (output, context) => {
  const contents = {};
  if (output.instanceConnectEndpointSet === "") {
    contents[_ICEn] = [];
  } else if (output[_iCES] != null && output[_iCES][_i] != null) {
    contents[_ICEn] = de_InstanceConnectEndpointSet(getArrayIfSingleItem(output[_iCES][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceCreditSpecificationsResult = (output, context) => {
  const contents = {};
  if (output.instanceCreditSpecificationSet === "") {
    contents[_ICS] = [];
  } else if (output[_iCSS] != null && output[_iCSS][_i] != null) {
    contents[_ICS] = de_InstanceCreditSpecificationList(getArrayIfSingleItem(output[_iCSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceEventNotificationAttributesResult = (output, context) => {
  const contents = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};
var de_DescribeInstanceEventWindowsResult = (output, context) => {
  const contents = {};
  if (output.instanceEventWindowSet === "") {
    contents[_IEWn] = [];
  } else if (output[_iEWSn] != null && output[_iEWSn][_i] != null) {
    contents[_IEWn] = de_InstanceEventWindowSet(getArrayIfSingleItem(output[_iEWSn][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceImageMetadataResult = (output, context) => {
  const contents = {};
  if (output.instanceImageMetadataSet === "") {
    contents[_IIM] = [];
  } else if (output[_iIMS] != null && output[_iIMS][_i] != null) {
    contents[_IIM] = de_InstanceImageMetadataList(getArrayIfSingleItem(output[_iIMS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstancesResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.reservationSet === "") {
    contents[_Rese] = [];
  } else if (output[_rSes] != null && output[_rSes][_i] != null) {
    contents[_Rese] = de_ReservationList(getArrayIfSingleItem(output[_rSes][_i]), context);
  }
  return contents;
};
var de_DescribeInstanceStatusResult = (output, context) => {
  const contents = {};
  if (output.instanceStatusSet === "") {
    contents[_ISns] = [];
  } else if (output[_iSS] != null && output[_iSS][_i] != null) {
    contents[_ISns] = de_InstanceStatusList(getArrayIfSingleItem(output[_iSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceTopologyResult = (output, context) => {
  const contents = {};
  if (output.instanceSet === "") {
    contents[_In] = [];
  } else if (output[_iSns] != null && output[_iSns][_i] != null) {
    contents[_In] = de_InstanceSet(getArrayIfSingleItem(output[_iSns][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceTypeOfferingsResult = (output, context) => {
  const contents = {};
  if (output.instanceTypeOfferingSet === "") {
    contents[_ITO] = [];
  } else if (output[_iTOS] != null && output[_iTOS][_i] != null) {
    contents[_ITO] = de_InstanceTypeOfferingsList(getArrayIfSingleItem(output[_iTOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInstanceTypesResult = (output, context) => {
  const contents = {};
  if (output.instanceTypeSet === "") {
    contents[_ITnst] = [];
  } else if (output[_iTS] != null && output[_iTS][_i] != null) {
    contents[_ITnst] = de_InstanceTypeInfoList(getArrayIfSingleItem(output[_iTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeInternetGatewaysResult = (output, context) => {
  const contents = {};
  if (output.internetGatewaySet === "") {
    contents[_IGnt] = [];
  } else if (output[_iGS] != null && output[_iGS][_i] != null) {
    contents[_IGnt] = de_InternetGatewayList(getArrayIfSingleItem(output[_iGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIpamByoasnResult = (output, context) => {
  const contents = {};
  if (output.byoasnSet === "") {
    contents[_Byoa] = [];
  } else if (output[_bS] != null && output[_bS][_i] != null) {
    contents[_Byoa] = de_ByoasnSet(getArrayIfSingleItem(output[_bS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIpamExternalResourceVerificationTokensResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.ipamExternalResourceVerificationTokenSet === "") {
    contents[_IERVTp] = [];
  } else if (output[_iERVTS] != null && output[_iERVTS][_i] != null) {
    contents[_IERVTp] = de_IpamExternalResourceVerificationTokenSet(getArrayIfSingleItem(output[_iERVTS][_i]), context);
  }
  return contents;
};
var de_DescribeIpamPoolsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.ipamPoolSet === "") {
    contents[_IPpam] = [];
  } else if (output[_iPS] != null && output[_iPS][_i] != null) {
    contents[_IPpam] = de_IpamPoolSet(getArrayIfSingleItem(output[_iPS][_i]), context);
  }
  return contents;
};
var de_DescribeIpamResourceDiscoveriesResult = (output, context) => {
  const contents = {};
  if (output.ipamResourceDiscoverySet === "") {
    contents[_IRDp] = [];
  } else if (output[_iRDS] != null && output[_iRDS][_i] != null) {
    contents[_IRDp] = de_IpamResourceDiscoverySet(getArrayIfSingleItem(output[_iRDS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIpamResourceDiscoveryAssociationsResult = (output, context) => {
  const contents = {};
  if (output.ipamResourceDiscoveryAssociationSet === "") {
    contents[_IRDAp] = [];
  } else if (output[_iRDAS] != null && output[_iRDAS][_i] != null) {
    contents[_IRDAp] = de_IpamResourceDiscoveryAssociationSet(getArrayIfSingleItem(output[_iRDAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeIpamScopesResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.ipamScopeSet === "") {
    contents[_ISpam] = [];
  } else if (output[_iSSp] != null && output[_iSSp][_i] != null) {
    contents[_ISpam] = de_IpamScopeSet(getArrayIfSingleItem(output[_iSSp][_i]), context);
  }
  return contents;
};
var de_DescribeIpamsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.ipamSet === "") {
    contents[_Ipam] = [];
  } else if (output[_iSp] != null && output[_iSp][_i] != null) {
    contents[_Ipam] = de_IpamSet(getArrayIfSingleItem(output[_iSp][_i]), context);
  }
  return contents;
};
var de_DescribeIpv6PoolsResult = (output, context) => {
  const contents = {};
  if (output.ipv6PoolSet === "") {
    contents[_IPpvo] = [];
  } else if (output[_iPSp] != null && output[_iPSp][_i] != null) {
    contents[_IPpvo] = de_Ipv6PoolSet(getArrayIfSingleItem(output[_iPSp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeKeyPairsResult = (output, context) => {
  const contents = {};
  if (output.keySet === "") {
    contents[_KP] = [];
  } else if (output[_kS] != null && output[_kS][_i] != null) {
    contents[_KP] = de_KeyPairList(getArrayIfSingleItem(output[_kS][_i]), context);
  }
  return contents;
};
var de_DescribeLaunchTemplatesResult = (output, context) => {
  const contents = {};
  if (output.launchTemplates === "") {
    contents[_LTau] = [];
  } else if (output[_lTa] != null && output[_lTa][_i] != null) {
    contents[_LTau] = de_LaunchTemplateSet(getArrayIfSingleItem(output[_lTa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLaunchTemplateVersionsResult = (output, context) => {
  const contents = {};
  if (output.launchTemplateVersionSet === "") {
    contents[_LTVa] = [];
  } else if (output[_lTVS] != null && output[_lTVS][_i] != null) {
    contents[_LTVa] = de_LaunchTemplateVersionSet(getArrayIfSingleItem(output[_lTVS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewayRouteTablesResult = (output, context) => {
  const contents = {};
  if (output.localGatewayRouteTableSet === "") {
    contents[_LGRTo] = [];
  } else if (output[_lGRTS] != null && output[_lGRTS][_i] != null) {
    contents[_LGRTo] = de_LocalGatewayRouteTableSet(getArrayIfSingleItem(output[_lGRTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (output, context) => {
  const contents = {};
  if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
    contents[_LGRTVIGAo] = [];
  } else if (output[_lGRTVIGAS] != null && output[_lGRTVIGAS][_i] != null) {
    contents[_LGRTVIGAo] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(getArrayIfSingleItem(output[_lGRTVIGAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewayRouteTableVpcAssociationsResult = (output, context) => {
  const contents = {};
  if (output.localGatewayRouteTableVpcAssociationSet === "") {
    contents[_LGRTVAo] = [];
  } else if (output[_lGRTVAS] != null && output[_lGRTVAS][_i] != null) {
    contents[_LGRTVAo] = de_LocalGatewayRouteTableVpcAssociationSet(getArrayIfSingleItem(output[_lGRTVAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewaysResult = (output, context) => {
  const contents = {};
  if (output.localGatewaySet === "") {
    contents[_LGoc] = [];
  } else if (output[_lGS] != null && output[_lGS][_i] != null) {
    contents[_LGoc] = de_LocalGatewaySet(getArrayIfSingleItem(output[_lGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewayVirtualInterfaceGroupsResult = (output, context) => {
  const contents = {};
  if (output.localGatewayVirtualInterfaceGroupSet === "") {
    contents[_LGVIG] = [];
  } else if (output[_lGVIGS] != null && output[_lGVIGS][_i] != null) {
    contents[_LGVIG] = de_LocalGatewayVirtualInterfaceGroupSet(getArrayIfSingleItem(output[_lGVIGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLocalGatewayVirtualInterfacesResult = (output, context) => {
  const contents = {};
  if (output.localGatewayVirtualInterfaceSet === "") {
    contents[_LGVI] = [];
  } else if (output[_lGVIS] != null && output[_lGVIS][_i] != null) {
    contents[_LGVI] = de_LocalGatewayVirtualInterfaceSet(getArrayIfSingleItem(output[_lGVIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeLockedSnapshotsResult = (output, context) => {
  const contents = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_LockedSnapshotsInfoList(getArrayIfSingleItem(output[_sS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeMacHostsResult = (output, context) => {
  const contents = {};
  if (output.macHostSet === "") {
    contents[_MHa] = [];
  } else if (output[_mHS] != null && output[_mHS][_i] != null) {
    contents[_MHa] = de_MacHostList(getArrayIfSingleItem(output[_mHS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeManagedPrefixListsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.prefixListSet === "") {
    contents[_PLre] = [];
  } else if (output[_pLS] != null && output[_pLS][_i] != null) {
    contents[_PLre] = de_ManagedPrefixListSet(getArrayIfSingleItem(output[_pLS][_i]), context);
  }
  return contents;
};
var de_DescribeMovingAddressesResult = (output, context) => {
  const contents = {};
  if (output.movingAddressStatusSet === "") {
    contents[_MAS] = [];
  } else if (output[_mASS] != null && output[_mASS][_i] != null) {
    contents[_MAS] = de_MovingAddressStatusSet(getArrayIfSingleItem(output[_mASS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNatGatewaysResult = (output, context) => {
  const contents = {};
  if (output.natGatewaySet === "") {
    contents[_NGa] = [];
  } else if (output[_nGS] != null && output[_nGS][_i] != null) {
    contents[_NGa] = de_NatGatewayList(getArrayIfSingleItem(output[_nGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkAclsResult = (output, context) => {
  const contents = {};
  if (output.networkAclSet === "") {
    contents[_NAe] = [];
  } else if (output[_nAS] != null && output[_nAS][_i] != null) {
    contents[_NAe] = de_NetworkAclList(getArrayIfSingleItem(output[_nAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInsightsAccessScopeAnalysesResult = (output, context) => {
  const contents = {};
  if (output.networkInsightsAccessScopeAnalysisSet === "") {
    contents[_NIASA] = [];
  } else if (output[_nIASAS] != null && output[_nIASAS][_i] != null) {
    contents[_NIASA] = de_NetworkInsightsAccessScopeAnalysisList(getArrayIfSingleItem(output[_nIASAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInsightsAccessScopesResult = (output, context) => {
  const contents = {};
  if (output.networkInsightsAccessScopeSet === "") {
    contents[_NIASe] = [];
  } else if (output[_nIASS] != null && output[_nIASS][_i] != null) {
    contents[_NIASe] = de_NetworkInsightsAccessScopeList(getArrayIfSingleItem(output[_nIASS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInsightsAnalysesResult = (output, context) => {
  const contents = {};
  if (output.networkInsightsAnalysisSet === "") {
    contents[_NIA] = [];
  } else if (output[_nIASe] != null && output[_nIASe][_i] != null) {
    contents[_NIA] = de_NetworkInsightsAnalysisList(getArrayIfSingleItem(output[_nIASe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInsightsPathsResult = (output, context) => {
  const contents = {};
  if (output.networkInsightsPathSet === "") {
    contents[_NIPe] = [];
  } else if (output[_nIPS] != null && output[_nIPS][_i] != null) {
    contents[_NIPe] = de_NetworkInsightsPathList(getArrayIfSingleItem(output[_nIPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInterfaceAttributeResult = (output, context) => {
  const contents = {};
  if (output[_at] != null) {
    contents[_Att] = de_NetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_de] != null) {
    contents[_De] = de_AttributeValue(output[_de], context);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = de_AttributeBooleanValue(output[_sDC], context);
  }
  if (output[_aPIA] != null) {
    contents[_APIAs] = parseBoolean(output[_aPIA]);
  }
  return contents;
};
var de_DescribeNetworkInterfacePermissionsResult = (output, context) => {
  const contents = {};
  if (output.networkInterfacePermissions === "") {
    contents[_NIPet] = [];
  } else if (output[_nIPe] != null && output[_nIPe][_i] != null) {
    contents[_NIPet] = de_NetworkInterfacePermissionList(getArrayIfSingleItem(output[_nIPe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeNetworkInterfacesResult = (output, context) => {
  const contents = {};
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_NetworkInterfaceList(getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribePlacementGroupsResult = (output, context) => {
  const contents = {};
  if (output.placementGroupSet === "") {
    contents[_PGl] = [];
  } else if (output[_pGS] != null && output[_pGS][_i] != null) {
    contents[_PGl] = de_PlacementGroupList(getArrayIfSingleItem(output[_pGS][_i]), context);
  }
  return contents;
};
var de_DescribePrefixListsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.prefixListSet === "") {
    contents[_PLre] = [];
  } else if (output[_pLS] != null && output[_pLS][_i] != null) {
    contents[_PLre] = de_PrefixListSet(getArrayIfSingleItem(output[_pLS][_i]), context);
  }
  return contents;
};
var de_DescribePrincipalIdFormatResult = (output, context) => {
  const contents = {};
  if (output.principalSet === "") {
    contents[_Princ] = [];
  } else if (output[_pSr] != null && output[_pSr][_i] != null) {
    contents[_Princ] = de_PrincipalIdFormatList(getArrayIfSingleItem(output[_pSr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribePublicIpv4PoolsResult = (output, context) => {
  const contents = {};
  if (output.publicIpv4PoolSet === "") {
    contents[_PIPu] = [];
  } else if (output[_pIPS] != null && output[_pIPS][_i] != null) {
    contents[_PIPu] = de_PublicIpv4PoolSet(getArrayIfSingleItem(output[_pIPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeRegionsResult = (output, context) => {
  const contents = {};
  if (output.regionInfo === "") {
    contents[_Reg] = [];
  } else if (output[_rIe] != null && output[_rIe][_i] != null) {
    contents[_Reg] = de_RegionList(getArrayIfSingleItem(output[_rIe][_i]), context);
  }
  return contents;
};
var de_DescribeReplaceRootVolumeTasksResult = (output, context) => {
  const contents = {};
  if (output.replaceRootVolumeTaskSet === "") {
    contents[_RRVTe] = [];
  } else if (output[_rRVTS] != null && output[_rRVTS][_i] != null) {
    contents[_RRVTe] = de_ReplaceRootVolumeTasks(getArrayIfSingleItem(output[_rRVTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeReservedInstancesListingsResult = (output, context) => {
  const contents = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};
var de_DescribeReservedInstancesModificationsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.reservedInstancesModificationsSet === "") {
    contents[_RIM] = [];
  } else if (output[_rIMS] != null && output[_rIMS][_i] != null) {
    contents[_RIM] = de_ReservedInstancesModificationList(getArrayIfSingleItem(output[_rIMS][_i]), context);
  }
  return contents;
};
var de_DescribeReservedInstancesOfferingsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.reservedInstancesOfferingsSet === "") {
    contents[_RIO] = [];
  } else if (output[_rIOS] != null && output[_rIOS][_i] != null) {
    contents[_RIO] = de_ReservedInstancesOfferingList(getArrayIfSingleItem(output[_rIOS][_i]), context);
  }
  return contents;
};
var de_DescribeReservedInstancesResult = (output, context) => {
  const contents = {};
  if (output.reservedInstancesSet === "") {
    contents[_RIese] = [];
  } else if (output[_rIS] != null && output[_rIS][_i] != null) {
    contents[_RIese] = de_ReservedInstancesList(getArrayIfSingleItem(output[_rIS][_i]), context);
  }
  return contents;
};
var de_DescribeRouteTablesResult = (output, context) => {
  const contents = {};
  if (output.routeTableSet === "") {
    contents[_RTou] = [];
  } else if (output[_rTS] != null && output[_rTS][_i] != null) {
    contents[_RTou] = de_RouteTableList(getArrayIfSingleItem(output[_rTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeScheduledInstanceAvailabilityResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.scheduledInstanceAvailabilitySet === "") {
    contents[_SIAS] = [];
  } else if (output[_sIAS] != null && output[_sIAS][_i] != null) {
    contents[_SIAS] = de_ScheduledInstanceAvailabilitySet(getArrayIfSingleItem(output[_sIAS][_i]), context);
  }
  return contents;
};
var de_DescribeScheduledInstancesResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.scheduledInstanceSet === "") {
    contents[_SIS] = [];
  } else if (output[_sIS] != null && output[_sIS][_i] != null) {
    contents[_SIS] = de_ScheduledInstanceSet(getArrayIfSingleItem(output[_sIS][_i]), context);
  }
  return contents;
};
var de_DescribeSecurityGroupReferencesResult = (output, context) => {
  const contents = {};
  if (output.securityGroupReferenceSet === "") {
    contents[_SGRSe] = [];
  } else if (output[_sGRSe] != null && output[_sGRSe][_i] != null) {
    contents[_SGRSe] = de_SecurityGroupReferences(getArrayIfSingleItem(output[_sGRSe][_i]), context);
  }
  return contents;
};
var de_DescribeSecurityGroupRulesResult = (output, context) => {
  const contents = {};
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeSecurityGroupsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.securityGroupInfo === "") {
    contents[_SG] = [];
  } else if (output[_sGIec] != null && output[_sGIec][_i] != null) {
    contents[_SG] = de_SecurityGroupList(getArrayIfSingleItem(output[_sGIec][_i]), context);
  }
  return contents;
};
var de_DescribeSecurityGroupVpcAssociationsResult = (output, context) => {
  const contents = {};
  if (output.securityGroupVpcAssociationSet === "") {
    contents[_SGVA] = [];
  } else if (output[_sGVAS] != null && output[_sGVAS][_i] != null) {
    contents[_SGVA] = de_SecurityGroupVpcAssociationList(getArrayIfSingleItem(output[_sGVAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeSnapshotAttributeResult = (output, context) => {
  const contents = {};
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output.createVolumePermission === "") {
    contents[_CVPr] = [];
  } else if (output[_cVP] != null && output[_cVP][_i] != null) {
    contents[_CVPr] = de_CreateVolumePermissionList(getArrayIfSingleItem(output[_cVP][_i]), context);
  }
  return contents;
};
var de_DescribeSnapshotsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotList(getArrayIfSingleItem(output[_sS][_i]), context);
  }
  return contents;
};
var de_DescribeSnapshotTierStatusResult = (output, context) => {
  const contents = {};
  if (output.snapshotTierStatusSet === "") {
    contents[_STS] = [];
  } else if (output[_sTSS] != null && output[_sTSS][_i] != null) {
    contents[_STS] = de_snapshotTierStatusSet(getArrayIfSingleItem(output[_sTSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeSpotDatafeedSubscriptionResult = (output, context) => {
  const contents = {};
  if (output[_sDS] != null) {
    contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS], context);
  }
  return contents;
};
var de_DescribeSpotFleetInstancesResponse = (output, context) => {
  const contents = {};
  if (output.activeInstanceSet === "") {
    contents[_AIc] = [];
  } else if (output[_aIS] != null && output[_aIS][_i] != null) {
    contents[_AIc] = de_ActiveInstanceSet(getArrayIfSingleItem(output[_aIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  return contents;
};
var de_DescribeSpotFleetRequestHistoryResponse = (output, context) => {
  const contents = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_HistoryRecords(getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_lET] != null) {
    contents[_LET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lET]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  return contents;
};
var de_DescribeSpotFleetRequestsResponse = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.spotFleetRequestConfigSet === "") {
    contents[_SFRCp] = [];
  } else if (output[_sFRCS] != null && output[_sFRCS][_i] != null) {
    contents[_SFRCp] = de_SpotFleetRequestConfigSet(getArrayIfSingleItem(output[_sFRCS][_i]), context);
  }
  return contents;
};
var de_DescribeSpotInstanceRequestsResult = (output, context) => {
  const contents = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_SIR] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_SIR] = de_SpotInstanceRequestList(getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeSpotPriceHistoryResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.spotPriceHistorySet === "") {
    contents[_SPH] = [];
  } else if (output[_sPHS] != null && output[_sPHS][_i] != null) {
    contents[_SPH] = de_SpotPriceHistoryList(getArrayIfSingleItem(output[_sPHS][_i]), context);
  }
  return contents;
};
var de_DescribeStaleSecurityGroupsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.staleSecurityGroupSet === "") {
    contents[_SSGS] = [];
  } else if (output[_sSGS] != null && output[_sSGS][_i] != null) {
    contents[_SSGS] = de_StaleSecurityGroupSet(getArrayIfSingleItem(output[_sSGS][_i]), context);
  }
  return contents;
};
var de_DescribeStoreImageTasksResult = (output, context) => {
  const contents = {};
  if (output.storeImageTaskResultSet === "") {
    contents[_SITR] = [];
  } else if (output[_sITRS] != null && output[_sITRS][_i] != null) {
    contents[_SITR] = de_StoreImageTaskResultSet(getArrayIfSingleItem(output[_sITRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeSubnetsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.subnetSet === "") {
    contents[_Subn] = [];
  } else if (output[_sSub] != null && output[_sSub][_i] != null) {
    contents[_Subn] = de_SubnetList(getArrayIfSingleItem(output[_sSub][_i]), context);
  }
  return contents;
};
var de_DescribeTagsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagDescriptionList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_DescribeTrafficMirrorFilterRulesResult = (output, context) => {
  const contents = {};
  if (output.trafficMirrorFilterRuleSet === "") {
    contents[_TMFRr] = [];
  } else if (output[_tMFRS] != null && output[_tMFRS][_i] != null) {
    contents[_TMFRr] = de_TrafficMirrorFilterRuleSet(getArrayIfSingleItem(output[_tMFRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTrafficMirrorFiltersResult = (output, context) => {
  const contents = {};
  if (output.trafficMirrorFilterSet === "") {
    contents[_TMFr] = [];
  } else if (output[_tMFS] != null && output[_tMFS][_i] != null) {
    contents[_TMFr] = de_TrafficMirrorFilterSet(getArrayIfSingleItem(output[_tMFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTrafficMirrorSessionsResult = (output, context) => {
  const contents = {};
  if (output.trafficMirrorSessionSet === "") {
    contents[_TMSr] = [];
  } else if (output[_tMSS] != null && output[_tMSS][_i] != null) {
    contents[_TMSr] = de_TrafficMirrorSessionSet(getArrayIfSingleItem(output[_tMSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTrafficMirrorTargetsResult = (output, context) => {
  const contents = {};
  if (output.trafficMirrorTargetSet === "") {
    contents[_TMTr] = [];
  } else if (output[_tMTS] != null && output[_tMTS][_i] != null) {
    contents[_TMTr] = de_TrafficMirrorTargetSet(getArrayIfSingleItem(output[_tMTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayAttachmentsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayAttachments === "") {
    contents[_TGAr] = [];
  } else if (output[_tGA] != null && output[_tGA][_i] != null) {
    contents[_TGAr] = de_TransitGatewayAttachmentList(getArrayIfSingleItem(output[_tGA][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayConnectPeersResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayConnectPeerSet === "") {
    contents[_TGCPr] = [];
  } else if (output[_tGCPS] != null && output[_tGCPS][_i] != null) {
    contents[_TGCPr] = de_TransitGatewayConnectPeerList(getArrayIfSingleItem(output[_tGCPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayConnectsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayConnectSet === "") {
    contents[_TGCra] = [];
  } else if (output[_tGCS] != null && output[_tGCS][_i] != null) {
    contents[_TGCra] = de_TransitGatewayConnectList(getArrayIfSingleItem(output[_tGCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayMulticastDomainsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayMulticastDomains === "") {
    contents[_TGMDr] = [];
  } else if (output[_tGMDr] != null && output[_tGMDr][_i] != null) {
    contents[_TGMDr] = de_TransitGatewayMulticastDomainList(getArrayIfSingleItem(output[_tGMDr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayPeeringAttachmentsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayPeeringAttachments === "") {
    contents[_TGPAr] = [];
  } else if (output[_tGPAr] != null && output[_tGPAr][_i] != null) {
    contents[_TGPAr] = de_TransitGatewayPeeringAttachmentList(getArrayIfSingleItem(output[_tGPAr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayPolicyTablesResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayPolicyTables === "") {
    contents[_TGPTr] = [];
  } else if (output[_tGPTr] != null && output[_tGPTr][_i] != null) {
    contents[_TGPTr] = de_TransitGatewayPolicyTableList(getArrayIfSingleItem(output[_tGPTr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayRouteTableAnnouncementsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayRouteTableAnnouncements === "") {
    contents[_TGRTAr] = [];
  } else if (output[_tGRTAr] != null && output[_tGRTAr][_i] != null) {
    contents[_TGRTAr] = de_TransitGatewayRouteTableAnnouncementList(getArrayIfSingleItem(output[_tGRTAr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayRouteTablesResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayRouteTables === "") {
    contents[_TGRTr] = [];
  } else if (output[_tGRTr] != null && output[_tGRTr][_i] != null) {
    contents[_TGRTr] = de_TransitGatewayRouteTableList(getArrayIfSingleItem(output[_tGRTr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewaysResult = (output, context) => {
  const contents = {};
  if (output.transitGatewaySet === "") {
    contents[_TGra] = [];
  } else if (output[_tGS] != null && output[_tGS][_i] != null) {
    contents[_TGra] = de_TransitGatewayList(getArrayIfSingleItem(output[_tGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTransitGatewayVpcAttachmentsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayVpcAttachments === "") {
    contents[_TGVAr] = [];
  } else if (output[_tGVAr] != null && output[_tGVAr][_i] != null) {
    contents[_TGVAr] = de_TransitGatewayVpcAttachmentList(getArrayIfSingleItem(output[_tGVAr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeTrunkInterfaceAssociationsResult = (output, context) => {
  const contents = {};
  if (output.interfaceAssociationSet === "") {
    contents[_IAnt] = [];
  } else if (output[_iAS] != null && output[_iAS][_i] != null) {
    contents[_IAnt] = de_TrunkInterfaceAssociationList(getArrayIfSingleItem(output[_iAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVerifiedAccessEndpointsResult = (output, context) => {
  const contents = {};
  if (output.verifiedAccessEndpointSet === "") {
    contents[_VAEe] = [];
  } else if (output[_vAES] != null && output[_vAES][_i] != null) {
    contents[_VAEe] = de_VerifiedAccessEndpointList(getArrayIfSingleItem(output[_vAES][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVerifiedAccessGroupsResult = (output, context) => {
  const contents = {};
  if (output.verifiedAccessGroupSet === "") {
    contents[_VAGe] = [];
  } else if (output[_vAGS] != null && output[_vAGS][_i] != null) {
    contents[_VAGe] = de_VerifiedAccessGroupList(getArrayIfSingleItem(output[_vAGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult = (output, context) => {
  const contents = {};
  if (output.loggingConfigurationSet === "") {
    contents[_LC] = [];
  } else if (output[_lCS] != null && output[_lCS][_i] != null) {
    contents[_LC] = de_VerifiedAccessInstanceLoggingConfigurationList(getArrayIfSingleItem(output[_lCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVerifiedAccessInstancesResult = (output, context) => {
  const contents = {};
  if (output.verifiedAccessInstanceSet === "") {
    contents[_VAIe] = [];
  } else if (output[_vAIS] != null && output[_vAIS][_i] != null) {
    contents[_VAIe] = de_VerifiedAccessInstanceList(getArrayIfSingleItem(output[_vAIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVerifiedAccessTrustProvidersResult = (output, context) => {
  const contents = {};
  if (output.verifiedAccessTrustProviderSet === "") {
    contents[_VATPe] = [];
  } else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
    contents[_VATPe] = de_VerifiedAccessTrustProviderList(getArrayIfSingleItem(output[_vATPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVolumeAttributeResult = (output, context) => {
  const contents = {};
  if (output[_aEIO] != null) {
    contents[_AEIO] = de_AttributeBooleanValue(output[_aEIO], context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  return contents;
};
var de_DescribeVolumesModificationsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.volumeModificationSet === "") {
    contents[_VMo] = [];
  } else if (output[_vMS] != null && output[_vMS][_i] != null) {
    contents[_VMo] = de_VolumeModificationList(getArrayIfSingleItem(output[_vMS][_i]), context);
  }
  return contents;
};
var de_DescribeVolumesResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.volumeSet === "") {
    contents[_Vol] = [];
  } else if (output[_vS] != null && output[_vS][_i] != null) {
    contents[_Vol] = de_VolumeList(getArrayIfSingleItem(output[_vS][_i]), context);
  }
  return contents;
};
var de_DescribeVolumeStatusResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.volumeStatusSet === "") {
    contents[_VSo] = [];
  } else if (output[_vSS] != null && output[_vSS][_i] != null) {
    contents[_VSo] = de_VolumeStatusList(getArrayIfSingleItem(output[_vSS][_i]), context);
  }
  return contents;
};
var de_DescribeVpcAttributeResult = (output, context) => {
  const contents = {};
  if (output[_eDH] != null) {
    contents[_EDH] = de_AttributeBooleanValue(output[_eDH], context);
  }
  if (output[_eDS] != null) {
    contents[_EDS] = de_AttributeBooleanValue(output[_eDS], context);
  }
  if (output[_eNAUM] != null) {
    contents[_ENAUM] = de_AttributeBooleanValue(output[_eNAUM], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_DescribeVpcBlockPublicAccessExclusionsResult = (output, context) => {
  const contents = {};
  if (output.vpcBlockPublicAccessExclusionSet === "") {
    contents[_VBPAEp] = [];
  } else if (output[_vBPAES] != null && output[_vBPAES][_i] != null) {
    contents[_VBPAEp] = de_VpcBlockPublicAccessExclusionList(getArrayIfSingleItem(output[_vBPAES][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcBlockPublicAccessOptionsResult = (output, context) => {
  const contents = {};
  if (output[_vBPAO] != null) {
    contents[_VBPAO] = de_VpcBlockPublicAccessOptions(output[_vBPAO], context);
  }
  return contents;
};
var de_DescribeVpcClassicLinkDnsSupportResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.vpcs === "") {
    contents[_Vpc] = [];
  } else if (output[_vpc] != null && output[_vpc][_i] != null) {
    contents[_Vpc] = de_ClassicLinkDnsSupportList(getArrayIfSingleItem(output[_vpc][_i]), context);
  }
  return contents;
};
var de_DescribeVpcClassicLinkResult = (output, context) => {
  const contents = {};
  if (output.vpcSet === "") {
    contents[_Vpc] = [];
  } else if (output[_vSp] != null && output[_vSp][_i] != null) {
    contents[_Vpc] = de_VpcClassicLinkList(getArrayIfSingleItem(output[_vSp][_i]), context);
  }
  return contents;
};
var de_DescribeVpcEndpointAssociationsResult = (output, context) => {
  const contents = {};
  if (output.vpcEndpointAssociationSet === "") {
    contents[_VEA] = [];
  } else if (output[_vEAS] != null && output[_vEAS][_i] != null) {
    contents[_VEA] = de_VpcEndpointAssociationSet(getArrayIfSingleItem(output[_vEAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointConnectionNotificationsResult = (output, context) => {
  const contents = {};
  if (output.connectionNotificationSet === "") {
    contents[_CNSo] = [];
  } else if (output[_cNSo] != null && output[_cNSo][_i] != null) {
    contents[_CNSo] = de_ConnectionNotificationSet(getArrayIfSingleItem(output[_cNSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointConnectionsResult = (output, context) => {
  const contents = {};
  if (output.vpcEndpointConnectionSet === "") {
    contents[_VEC] = [];
  } else if (output[_vECS] != null && output[_vECS][_i] != null) {
    contents[_VEC] = de_VpcEndpointConnectionSet(getArrayIfSingleItem(output[_vECS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointServiceConfigurationsResult = (output, context) => {
  const contents = {};
  if (output.serviceConfigurationSet === "") {
    contents[_SCer] = [];
  } else if (output[_sCS] != null && output[_sCS][_i] != null) {
    contents[_SCer] = de_ServiceConfigurationSet(getArrayIfSingleItem(output[_sCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointServicePermissionsResult = (output, context) => {
  const contents = {};
  if (output.allowedPrincipals === "") {
    contents[_APl] = [];
  } else if (output[_aP] != null && output[_aP][_i] != null) {
    contents[_APl] = de_AllowedPrincipalSet(getArrayIfSingleItem(output[_aP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointServicesResult = (output, context) => {
  const contents = {};
  if (output.serviceNameSet === "") {
    contents[_SNer] = [];
  } else if (output[_sNS] != null && output[_sNS][_i] != null) {
    contents[_SNer] = de_ValueStringList(getArrayIfSingleItem(output[_sNS][_i]), context);
  }
  if (output.serviceDetailSet === "") {
    contents[_SDe] = [];
  } else if (output[_sDSe] != null && output[_sDSe][_i] != null) {
    contents[_SDe] = de_ServiceDetailSet(getArrayIfSingleItem(output[_sDSe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcEndpointsResult = (output, context) => {
  const contents = {};
  if (output.vpcEndpointSet === "") {
    contents[_VEp] = [];
  } else if (output[_vESp] != null && output[_vESp][_i] != null) {
    contents[_VEp] = de_VpcEndpointSet(getArrayIfSingleItem(output[_vESp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcPeeringConnectionsResult = (output, context) => {
  const contents = {};
  if (output.vpcPeeringConnectionSet === "") {
    contents[_VPCp] = [];
  } else if (output[_vPCS] != null && output[_vPCS][_i] != null) {
    contents[_VPCp] = de_VpcPeeringConnectionList(getArrayIfSingleItem(output[_vPCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_DescribeVpcsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.vpcSet === "") {
    contents[_Vpc] = [];
  } else if (output[_vSp] != null && output[_vSp][_i] != null) {
    contents[_Vpc] = de_VpcList(getArrayIfSingleItem(output[_vSp][_i]), context);
  }
  return contents;
};
var de_DescribeVpnConnectionsResult = (output, context) => {
  const contents = {};
  if (output.vpnConnectionSet === "") {
    contents[_VCp] = [];
  } else if (output[_vCS] != null && output[_vCS][_i] != null) {
    contents[_VCp] = de_VpnConnectionList(getArrayIfSingleItem(output[_vCS][_i]), context);
  }
  return contents;
};
var de_DescribeVpnGatewaysResult = (output, context) => {
  const contents = {};
  if (output.vpnGatewaySet === "") {
    contents[_VGp] = [];
  } else if (output[_vGS] != null && output[_vGS][_i] != null) {
    contents[_VGp] = de_VpnGatewayList(getArrayIfSingleItem(output[_vGS][_i]), context);
  }
  return contents;
};
var de_DestinationOptionsResponse = (output, context) => {
  const contents = {};
  if (output[_fF] != null) {
    contents[_FF] = expectString(output[_fF]);
  }
  if (output[_hCP] != null) {
    contents[_HCP] = parseBoolean(output[_hCP]);
  }
  if (output[_pHP] != null) {
    contents[_PHP] = parseBoolean(output[_pHP]);
  }
  return contents;
};
var de_DetachClassicLinkVpcResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DetachVerifiedAccessTrustProviderResult = (output, context) => {
  const contents = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};
var de_DeviceOptions = (output, context) => {
  const contents = {};
  if (output[_tIe] != null) {
    contents[_TIe] = expectString(output[_tIe]);
  }
  if (output[_pSKU] != null) {
    contents[_PSKU] = expectString(output[_pSKU]);
  }
  return contents;
};
var de_DeviceTrustProviderTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_DhcpConfiguration = (output, context) => {
  const contents = {};
  if (output[_k] != null) {
    contents[_Ke] = expectString(output[_k]);
  }
  if (output.valueSet === "") {
    contents[_Val] = [];
  } else if (output[_vSa] != null && output[_vSa][_i] != null) {
    contents[_Val] = de_DhcpConfigurationValueList(getArrayIfSingleItem(output[_vSa][_i]), context);
  }
  return contents;
};
var de_DhcpConfigurationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DhcpConfiguration(entry, context);
  });
};
var de_DhcpConfigurationValueList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AttributeValue(entry, context);
  });
};
var de_DhcpOptions = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_dOI] != null) {
    contents[_DOI] = expectString(output[_dOI]);
  }
  if (output.dhcpConfigurationSet === "") {
    contents[_DCh] = [];
  } else if (output[_dCS] != null && output[_dCS][_i] != null) {
    contents[_DCh] = de_DhcpConfigurationList(getArrayIfSingleItem(output[_dCS][_i]), context);
  }
  return contents;
};
var de_DhcpOptionsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DhcpOptions(entry, context);
  });
};
var de_DirectoryServiceAuthentication = (output, context) => {
  const contents = {};
  if (output[_dI] != null) {
    contents[_DIir] = expectString(output[_dI]);
  }
  return contents;
};
var de_DisableAddressTransferResult = (output, context) => {
  const contents = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};
var de_DisableAllowedImagesSettingsResult = (output, context) => {
  const contents = {};
  if (output[_aISS] != null) {
    contents[_AISS] = expectString(output[_aISS]);
  }
  return contents;
};
var de_DisableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
  const contents = {};
  if (output[_ou] != null) {
    contents[_Ou] = parseBoolean(output[_ou]);
  }
  return contents;
};
var de_DisableEbsEncryptionByDefaultResult = (output, context) => {
  const contents = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = parseBoolean(output[_eEBD]);
  }
  return contents;
};
var de_DisableFastLaunchResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = strictParseInt32(output[_mPL]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};
var de_DisableFastSnapshotRestoreErrorItem = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents[_FSRSE] = [];
  } else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
    contents[_FSRSE] = de_DisableFastSnapshotRestoreStateErrorSet(getArrayIfSingleItem(output[_fSRSES][_i]), context);
  }
  return contents;
};
var de_DisableFastSnapshotRestoreErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DisableFastSnapshotRestoreErrorItem(entry, context);
  });
};
var de_DisableFastSnapshotRestoresResult = (output, context) => {
  const contents = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_DisableFastSnapshotRestoreSuccessSet(getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_DisableFastSnapshotRestoreErrorSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_DisableFastSnapshotRestoreStateError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_DisableFastSnapshotRestoreStateErrorItem = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_DisableFastSnapshotRestoreStateError(output[_er], context);
  }
  return contents;
};
var de_DisableFastSnapshotRestoreStateErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DisableFastSnapshotRestoreStateErrorItem(entry, context);
  });
};
var de_DisableFastSnapshotRestoreSuccessItem = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = expectString(output[_oAw]);
  }
  if (output[_eTna] != null) {
    contents[_ETna] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTnab] != null) {
    contents[_ETnab] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTnab]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};
var de_DisableFastSnapshotRestoreSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DisableFastSnapshotRestoreSuccessItem(entry, context);
  });
};
var de_DisableImageBlockPublicAccessResult = (output, context) => {
  const contents = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = expectString(output[_iBPAS]);
  }
  return contents;
};
var de_DisableImageDeprecationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisableImageDeregistrationProtectionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = expectString(output[_r]);
  }
  return contents;
};
var de_DisableImageResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisableIpamOrganizationAdminAccountResult = (output, context) => {
  const contents = {};
  if (output[_succ] != null) {
    contents[_Succ] = parseBoolean(output[_succ]);
  }
  return contents;
};
var de_DisableSerialConsoleAccessResult = (output, context) => {
  const contents = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = parseBoolean(output[_sCAE]);
  }
  return contents;
};
var de_DisableSnapshotBlockPublicAccessResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_DisableTransitGatewayRouteTablePropagationResult = (output, context) => {
  const contents = {};
  if (output[_prop] != null) {
    contents[_Prop] = de_TransitGatewayPropagation(output[_prop], context);
  }
  return contents;
};
var de_DisableVpcClassicLinkDnsSupportResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisableVpcClassicLinkResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisassociateCapacityReservationBillingOwnerResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisassociateClientVpnTargetNetworkResult = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  return contents;
};
var de_DisassociateEnclaveCertificateIamRoleResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_DisassociateIamInstanceProfileResult = (output, context) => {
  const contents = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};
var de_DisassociateInstanceEventWindowResult = (output, context) => {
  const contents = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};
var de_DisassociateIpamByoasnResult = (output, context) => {
  const contents = {};
  if (output[_aA] != null) {
    contents[_AAsn] = de_AsnAssociation(output[_aA], context);
  }
  return contents;
};
var de_DisassociateIpamResourceDiscoveryResult = (output, context) => {
  const contents = {};
  if (output[_iRDA] != null) {
    contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA], context);
  }
  return contents;
};
var de_DisassociateNatGatewayAddressResult = (output, context) => {
  const contents = {};
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};
var de_DisassociateSecurityGroupVpcResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_DisassociateSubnetCidrBlockResult = (output, context) => {
  const contents = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  return contents;
};
var de_DisassociateTransitGatewayMulticastDomainResult = (output, context) => {
  const contents = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};
var de_DisassociateTransitGatewayPolicyTableResult = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass], context);
  }
  return contents;
};
var de_DisassociateTransitGatewayRouteTableResult = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAssociation(output[_ass], context);
  }
  return contents;
};
var de_DisassociateTrunkInterfaceResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  return contents;
};
var de_DisassociateVpcCidrBlockResult = (output, context) => {
  const contents = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_cBA] != null) {
    contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_DiskImageDescription = (output, context) => {
  const contents = {};
  if (output[_ch] != null) {
    contents[_Ch] = expectString(output[_ch]);
  }
  if (output[_f] != null) {
    contents[_Fo] = expectString(output[_f]);
  }
  if (output[_iMU] != null) {
    contents[_IMU] = expectString(output[_iMU]);
  }
  if (output[_si] != null) {
    contents[_Siz] = strictParseLong(output[_si]);
  }
  return contents;
};
var de_DiskImageVolumeDescription = (output, context) => {
  const contents = {};
  if (output[_id] != null) {
    contents[_Id] = expectString(output[_id]);
  }
  if (output[_si] != null) {
    contents[_Siz] = strictParseLong(output[_si]);
  }
  return contents;
};
var de_DiskInfo = (output, context) => {
  const contents = {};
  if (output[_sIGB] != null) {
    contents[_SIGB] = strictParseLong(output[_sIGB]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  return contents;
};
var de_DiskInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DiskInfo(entry, context);
  });
};
var de_DnsEntry = (output, context) => {
  const contents = {};
  if (output[_dNn] != null) {
    contents[_DNn] = expectString(output[_dNn]);
  }
  if (output[_hZI] != null) {
    contents[_HZI] = expectString(output[_hZI]);
  }
  return contents;
};
var de_DnsEntrySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DnsEntry(entry, context);
  });
};
var de_DnsOptions = (output, context) => {
  const contents = {};
  if (output[_dRIT] != null) {
    contents[_DRIT] = expectString(output[_dRIT]);
  }
  if (output[_pDOFIRE] != null) {
    contents[_PDOFIRE] = parseBoolean(output[_pDOFIRE]);
  }
  return contents;
};
var de_EbsBlockDevice = (output, context) => {
  const contents = {};
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_io] != null) {
    contents[_Io] = strictParseInt32(output[_io]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = strictParseInt32(output[_vSo]);
  }
  if (output[_vT] != null) {
    contents[_VT] = expectString(output[_vT]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_th] != null) {
    contents[_Th] = strictParseInt32(output[_th]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  return contents;
};
var de_EbsInfo = (output, context) => {
  const contents = {};
  if (output[_eOS] != null) {
    contents[_EOS] = expectString(output[_eOS]);
  }
  if (output[_eSn] != null) {
    contents[_ESnc] = expectString(output[_eSn]);
  }
  if (output[_eOI] != null) {
    contents[_EOI] = de_EbsOptimizedInfo(output[_eOI], context);
  }
  if (output[_nS] != null) {
    contents[_NS] = expectString(output[_nS]);
  }
  return contents;
};
var de_EbsInstanceBlockDevice = (output, context) => {
  const contents = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_aRs] != null) {
    contents[_ARs] = expectString(output[_aRs]);
  }
  if (output[_vOI] != null) {
    contents[_VOI] = expectString(output[_vOI]);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_EbsOptimizedInfo = (output, context) => {
  const contents = {};
  if (output[_bBIM] != null) {
    contents[_BBIM] = strictParseInt32(output[_bBIM]);
  }
  if (output[_bTIMB] != null) {
    contents[_BTIMB] = strictParseFloat(output[_bTIMB]);
  }
  if (output[_bIa] != null) {
    contents[_BIa] = strictParseInt32(output[_bIa]);
  }
  if (output[_mBIM] != null) {
    contents[_MBIM] = strictParseInt32(output[_mBIM]);
  }
  if (output[_mTIMB] != null) {
    contents[_MTIMB] = strictParseFloat(output[_mTIMB]);
  }
  if (output[_mI] != null) {
    contents[_MIa] = strictParseInt32(output[_mI]);
  }
  return contents;
};
var de_EbsStatusDetails = (output, context) => {
  const contents = {};
  if (output[_iSmp] != null) {
    contents[_ISmp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_iSmp]));
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_EbsStatusDetailsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EbsStatusDetails(entry, context);
  });
};
var de_EbsStatusSummary = (output, context) => {
  const contents = {};
  if (output.details === "") {
    contents[_Det] = [];
  } else if (output[_det] != null && output[_det][_i] != null) {
    contents[_Det] = de_EbsStatusDetailsList(getArrayIfSingleItem(output[_det][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_Ec2InstanceConnectEndpoint = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iCEI] != null) {
    contents[_ICEI] = expectString(output[_iCEI]);
  }
  if (output[_iCEA] != null) {
    contents[_ICEA] = expectString(output[_iCEA]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = expectString(output[_sMt]);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = expectString(output[_dNn]);
  }
  if (output[_fDN] != null) {
    contents[_FDN] = expectString(output[_fDN]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents[_NIIe] = [];
  } else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
    contents[_NIIe] = de_NetworkInterfaceIdSet(getArrayIfSingleItem(output[_nIIS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_cAr] != null) {
    contents[_CAr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cAr]));
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_pCI] != null) {
    contents[_PCI] = parseBoolean(output[_pCI]);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_SecurityGroupIdSet(getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_EfaInfo = (output, context) => {
  const contents = {};
  if (output[_mEI] != null) {
    contents[_MEI] = strictParseInt32(output[_mEI]);
  }
  return contents;
};
var de_EgressOnlyInternetGateway = (output, context) => {
  const contents = {};
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_InternetGatewayAttachmentList(getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = expectString(output[_eOIGI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_EgressOnlyInternetGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EgressOnlyInternetGateway(entry, context);
  });
};
var de_ElasticGpuAssociation = (output, context) => {
  const contents = {};
  if (output[_eGI] != null) {
    contents[_EGIl] = expectString(output[_eGI]);
  }
  if (output[_eGAI] != null) {
    contents[_EGAI] = expectString(output[_eGAI]);
  }
  if (output[_eGAS] != null) {
    contents[_EGAS] = expectString(output[_eGAS]);
  }
  if (output[_eGAT] != null) {
    contents[_EGAT] = expectString(output[_eGAT]);
  }
  return contents;
};
var de_ElasticGpuAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ElasticGpuAssociation(entry, context);
  });
};
var de_ElasticGpuHealth = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_ElasticGpus = (output, context) => {
  const contents = {};
  if (output[_eGI] != null) {
    contents[_EGIl] = expectString(output[_eGI]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_eGT] != null) {
    contents[_EGT] = expectString(output[_eGT]);
  }
  if (output[_eGH] != null) {
    contents[_EGH] = de_ElasticGpuHealth(output[_eGH], context);
  }
  if (output[_eGSl] != null) {
    contents[_EGSlas] = expectString(output[_eGSl]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ElasticGpuSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ElasticGpus(entry, context);
  });
};
var de_ElasticGpuSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  return contents;
};
var de_ElasticGpuSpecificationResponseList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ElasticGpuSpecificationResponse(entry, context);
  });
};
var de_ElasticInferenceAcceleratorAssociation = (output, context) => {
  const contents = {};
  if (output[_eIAA] != null) {
    contents[_EIAA] = expectString(output[_eIAA]);
  }
  if (output[_eIAAI] != null) {
    contents[_EIAAI] = expectString(output[_eIAAI]);
  }
  if (output[_eIAAS] != null) {
    contents[_EIAAS] = expectString(output[_eIAAS]);
  }
  if (output[_eIAAT] != null) {
    contents[_EIAAT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eIAAT]));
  }
  return contents;
};
var de_ElasticInferenceAcceleratorAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ElasticInferenceAcceleratorAssociation(entry, context);
  });
};
var de_EnableAddressTransferResult = (output, context) => {
  const contents = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};
var de_EnableAllowedImagesSettingsResult = (output, context) => {
  const contents = {};
  if (output[_aISS] != null) {
    contents[_AISS] = expectString(output[_aISS]);
  }
  return contents;
};
var de_EnableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
  const contents = {};
  if (output[_ou] != null) {
    contents[_Ou] = parseBoolean(output[_ou]);
  }
  return contents;
};
var de_EnableEbsEncryptionByDefaultResult = (output, context) => {
  const contents = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = parseBoolean(output[_eEBD]);
  }
  return contents;
};
var de_EnableFastLaunchResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = strictParseInt32(output[_mPL]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};
var de_EnableFastSnapshotRestoreErrorItem = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents[_FSRSE] = [];
  } else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
    contents[_FSRSE] = de_EnableFastSnapshotRestoreStateErrorSet(getArrayIfSingleItem(output[_fSRSES][_i]), context);
  }
  return contents;
};
var de_EnableFastSnapshotRestoreErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EnableFastSnapshotRestoreErrorItem(entry, context);
  });
};
var de_EnableFastSnapshotRestoresResult = (output, context) => {
  const contents = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_EnableFastSnapshotRestoreSuccessSet(getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_EnableFastSnapshotRestoreErrorSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_EnableFastSnapshotRestoreStateError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_EnableFastSnapshotRestoreStateErrorItem = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_EnableFastSnapshotRestoreStateError(output[_er], context);
  }
  return contents;
};
var de_EnableFastSnapshotRestoreStateErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EnableFastSnapshotRestoreStateErrorItem(entry, context);
  });
};
var de_EnableFastSnapshotRestoreSuccessItem = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = expectString(output[_oAw]);
  }
  if (output[_eTna] != null) {
    contents[_ETna] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTnab] != null) {
    contents[_ETnab] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTnab]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};
var de_EnableFastSnapshotRestoreSuccessSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EnableFastSnapshotRestoreSuccessItem(entry, context);
  });
};
var de_EnableImageBlockPublicAccessResult = (output, context) => {
  const contents = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = expectString(output[_iBPAS]);
  }
  return contents;
};
var de_EnableImageDeprecationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_EnableImageDeregistrationProtectionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = expectString(output[_r]);
  }
  return contents;
};
var de_EnableImageResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_EnableIpamOrganizationAdminAccountResult = (output, context) => {
  const contents = {};
  if (output[_succ] != null) {
    contents[_Succ] = parseBoolean(output[_succ]);
  }
  return contents;
};
var de_EnableReachabilityAnalyzerOrganizationSharingResult = (output, context) => {
  const contents = {};
  if (output[_rV] != null) {
    contents[_RV] = parseBoolean(output[_rV]);
  }
  return contents;
};
var de_EnableSerialConsoleAccessResult = (output, context) => {
  const contents = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = parseBoolean(output[_sCAE]);
  }
  return contents;
};
var de_EnableSnapshotBlockPublicAccessResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_EnableTransitGatewayRouteTablePropagationResult = (output, context) => {
  const contents = {};
  if (output[_prop] != null) {
    contents[_Prop] = de_TransitGatewayPropagation(output[_prop], context);
  }
  return contents;
};
var de_EnableVpcClassicLinkDnsSupportResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_EnableVpcClassicLinkResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_EnaSrdSpecificationRequest = (output, context) => {
  const contents = {};
  if (output[_ESE] != null) {
    contents[_ESE] = parseBoolean(output[_ESE]);
  }
  if (output[_ESUS] != null) {
    contents[_ESUS] = de_EnaSrdUdpSpecificationRequest(output[_ESUS], context);
  }
  return contents;
};
var de_EnaSrdUdpSpecificationRequest = (output, context) => {
  const contents = {};
  if (output[_ESUE] != null) {
    contents[_ESUE] = parseBoolean(output[_ESUE]);
  }
  return contents;
};
var de_EnclaveOptions = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  return contents;
};
var de_EndpointSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ClientVpnEndpoint(entry, context);
  });
};
var de_ErrorSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ValidationError(entry, context);
  });
};
var de_EventInformation = (output, context) => {
  const contents = {};
  if (output[_eDv] != null) {
    contents[_EDv] = expectString(output[_eDv]);
  }
  if (output[_eST] != null) {
    contents[_EST] = expectString(output[_eST]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  return contents;
};
var de_ExcludedInstanceTypeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Explanation = (output, context) => {
  const contents = {};
  if (output[_ac] != null) {
    contents[_Acl] = de_AnalysisComponent(output[_ac], context);
  }
  if (output[_aRc] != null) {
    contents[_ARcl] = de_AnalysisAclRule(output[_aRc], context);
  }
  if (output[_ad] != null) {
    contents[_Ad] = expectString(output[_ad]);
  }
  if (output.addressSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSd] != null && output[_aSd][_i] != null) {
    contents[_Addr] = de_IpAddressList(getArrayIfSingleItem(output[_aSd][_i]), context);
  }
  if (output[_aTtt] != null) {
    contents[_ATtta] = de_AnalysisComponent(output[_aTtt], context);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output.cidrSet === "") {
    contents[_Ci] = [];
  } else if (output[_cS] != null && output[_cS][_i] != null) {
    contents[_Ci] = de_ValueStringList(getArrayIfSingleItem(output[_cS][_i]), context);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_cGu] != null) {
    contents[_CGu] = de_AnalysisComponent(output[_cGu], context);
  }
  if (output[_d] != null) {
    contents[_D] = de_AnalysisComponent(output[_d], context);
  }
  if (output[_dV] != null) {
    contents[_DVest] = de_AnalysisComponent(output[_dV], context);
  }
  if (output[_di] != null) {
    contents[_Di] = expectString(output[_di]);
  }
  if (output[_eCx] != null) {
    contents[_ECx] = expectString(output[_eCx]);
  }
  if (output[_iRT] != null) {
    contents[_IRT] = de_AnalysisComponent(output[_iRT], context);
  }
  if (output[_iG] != null) {
    contents[_IGn] = de_AnalysisComponent(output[_iG], context);
  }
  if (output[_lBA] != null) {
    contents[_LBA] = expectString(output[_lBA]);
  }
  if (output[_cLBL] != null) {
    contents[_CLBL] = de_AnalysisLoadBalancerListener(output[_cLBL], context);
  }
  if (output[_lBLP] != null) {
    contents[_LBLP] = strictParseInt32(output[_lBLP]);
  }
  if (output[_lBT] != null) {
    contents[_LBT] = de_AnalysisLoadBalancerTarget(output[_lBT], context);
  }
  if (output[_lBTG] != null) {
    contents[_LBTG] = de_AnalysisComponent(output[_lBTG], context);
  }
  if (output.loadBalancerTargetGroupSet === "") {
    contents[_LBTGo] = [];
  } else if (output[_lBTGS] != null && output[_lBTGS][_i] != null) {
    contents[_LBTGo] = de_AnalysisComponentList(getArrayIfSingleItem(output[_lBTGS][_i]), context);
  }
  if (output[_lBTP] != null) {
    contents[_LBTP] = strictParseInt32(output[_lBTP]);
  }
  if (output[_eLBL] != null) {
    contents[_ELBL] = de_AnalysisComponent(output[_eLBL], context);
  }
  if (output[_mC] != null) {
    contents[_MCis] = expectString(output[_mC]);
  }
  if (output[_nG] != null) {
    contents[_NG] = de_AnalysisComponent(output[_nG], context);
  }
  if (output[_nIe] != null) {
    contents[_NIet] = de_AnalysisComponent(output[_nIe], context);
  }
  if (output[_pF] != null) {
    contents[_PF] = expectString(output[_pF]);
  }
  if (output[_vPC] != null) {
    contents[_VPC] = de_AnalysisComponent(output[_vPC], context);
  }
  if (output[_po] != null) {
    contents[_Po] = strictParseInt32(output[_po]);
  }
  if (output.portRangeSet === "") {
    contents[_PRo] = [];
  } else if (output[_pRS] != null && output[_pRS][_i] != null) {
    contents[_PRo] = de_PortRangeList(getArrayIfSingleItem(output[_pRS][_i]), context);
  }
  if (output[_pL] != null) {
    contents[_PLr] = de_AnalysisComponent(output[_pL], context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_StringList(getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  if (output[_rTR] != null) {
    contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR], context);
  }
  if (output[_rTo] != null) {
    contents[_RTo] = de_AnalysisComponent(output[_rTo], context);
  }
  if (output[_sG] != null) {
    contents[_SGe] = de_AnalysisComponent(output[_sG], context);
  }
  if (output[_sGR] != null) {
    contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR], context);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_AnalysisComponentList(getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_sV] != null) {
    contents[_SVo] = de_AnalysisComponent(output[_sV], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_su] != null) {
    contents[_Su] = de_AnalysisComponent(output[_su], context);
  }
  if (output[_sRT] != null) {
    contents[_SRT] = de_AnalysisComponent(output[_sRT], context);
  }
  if (output[_vp] != null) {
    contents[_Vp] = de_AnalysisComponent(output[_vp], context);
  }
  if (output[_vE] != null) {
    contents[_VE] = de_AnalysisComponent(output[_vE], context);
  }
  if (output[_vC] != null) {
    contents[_VC] = de_AnalysisComponent(output[_vC], context);
  }
  if (output[_vG] != null) {
    contents[_VG] = de_AnalysisComponent(output[_vG], context);
  }
  if (output[_tG] != null) {
    contents[_TGr] = de_AnalysisComponent(output[_tG], context);
  }
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_AnalysisComponent(output[_tGRT], context);
  }
  if (output[_tGRTR] != null) {
    contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR], context);
  }
  if (output[_tGAr] != null) {
    contents[_TGAra] = de_AnalysisComponent(output[_tGAr], context);
  }
  if (output[_cAo] != null) {
    contents[_CAom] = expectString(output[_cAo]);
  }
  if (output[_cRo] != null) {
    contents[_CRo] = expectString(output[_cRo]);
  }
  if (output[_fSR] != null) {
    contents[_FSRi] = de_FirewallStatelessRule(output[_fSR], context);
  }
  if (output[_fSRi] != null) {
    contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi], context);
  }
  return contents;
};
var de_ExplanationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Explanation(entry, context);
  });
};
var de_ExportClientVpnClientCertificateRevocationListResult = (output, context) => {
  const contents = {};
  if (output[_cRL] != null) {
    contents[_CRL] = expectString(output[_cRL]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientCertificateRevocationListStatus(output[_sta], context);
  }
  return contents;
};
var de_ExportClientVpnClientConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_cCl] != null) {
    contents[_CCl] = expectString(output[_cCl]);
  }
  return contents;
};
var de_ExportImageResult = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_dIF] != null) {
    contents[_DIFi] = expectString(output[_dIF]);
  }
  if (output[_eITI] != null) {
    contents[_EITIx] = expectString(output[_eITI]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_rNo] != null) {
    contents[_RNo] = expectString(output[_rNo]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_sEL] != null) {
    contents[_SEL] = de_ExportTaskS3Location(output[_sEL], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ExportImageTask = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_eITI] != null) {
    contents[_EITIx] = expectString(output[_eITI]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_sEL] != null) {
    contents[_SEL] = de_ExportTaskS3Location(output[_sEL], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ExportImageTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ExportImageTask(entry, context);
  });
};
var de_ExportTask = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_eTI] != null) {
    contents[_ETI] = expectString(output[_eTI]);
  }
  if (output[_eTSx] != null) {
    contents[_ETST] = de_ExportToS3Task(output[_eTSx], context);
  }
  if (output[_iE] != null) {
    contents[_IED] = de_InstanceExportDetails(output[_iE], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ExportTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ExportTask(entry, context);
  });
};
var de_ExportTaskS3Location = (output, context) => {
  const contents = {};
  if (output[_sB] != null) {
    contents[_SB] = expectString(output[_sB]);
  }
  if (output[_sP] != null) {
    contents[_SP] = expectString(output[_sP]);
  }
  return contents;
};
var de_ExportToS3Task = (output, context) => {
  const contents = {};
  if (output[_cF] != null) {
    contents[_CFo] = expectString(output[_cF]);
  }
  if (output[_dIF] != null) {
    contents[_DIFi] = expectString(output[_dIF]);
  }
  if (output[_sB] != null) {
    contents[_SB] = expectString(output[_sB]);
  }
  if (output[_sK] != null) {
    contents[_SK] = expectString(output[_sK]);
  }
  return contents;
};
var de_ExportTransitGatewayRoutesResult = (output, context) => {
  const contents = {};
  if (output[_sL] != null) {
    contents[_SLo] = expectString(output[_sL]);
  }
  return contents;
};
var de_ExportVerifiedAccessInstanceClientConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_ve] != null) {
    contents[_V] = expectString(output[_ve]);
  }
  if (output[_vAII] != null) {
    contents[_VAII] = expectString(output[_vAII]);
  }
  if (output[_re] != null) {
    contents[_Regi] = expectString(output[_re]);
  }
  if (output.deviceTrustProviderSet === "") {
    contents[_DTP] = [];
  } else if (output[_dTPS] != null && output[_dTPS][_i] != null) {
    contents[_DTP] = de_DeviceTrustProviderTypeList(getArrayIfSingleItem(output[_dTPS][_i]), context);
  }
  if (output[_uTP] != null) {
    contents[_UTP] = de_VerifiedAccessInstanceUserTrustProviderClientConfiguration(output[_uTP], context);
  }
  if (output.openVpnConfigurationSet === "") {
    contents[_OVC] = [];
  } else if (output[_oVCS] != null && output[_oVCS][_i] != null) {
    contents[_OVC] = de_VerifiedAccessInstanceOpenVpnClientConfigurationList(getArrayIfSingleItem(output[_oVCS][_i]), context);
  }
  return contents;
};
var de_FailedCapacityReservationFleetCancellationResult = (output, context) => {
  const contents = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = expectString(output[_cRFI]);
  }
  if (output[_cCRFE] != null) {
    contents[_CCRFE] = de_CancelCapacityReservationFleetError(output[_cCRFE], context);
  }
  return contents;
};
var de_FailedCapacityReservationFleetCancellationResultSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FailedCapacityReservationFleetCancellationResult(entry, context);
  });
};
var de_FailedQueuedPurchaseDeletion = (output, context) => {
  const contents = {};
  if (output[_er] != null) {
    contents[_Er] = de_DeleteQueuedReservedInstancesError(output[_er], context);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  return contents;
};
var de_FailedQueuedPurchaseDeletionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FailedQueuedPurchaseDeletion(entry, context);
  });
};
var de_FastLaunchLaunchTemplateSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_ve] != null) {
    contents[_V] = expectString(output[_ve]);
  }
  return contents;
};
var de_FastLaunchSnapshotConfigurationResponse = (output, context) => {
  const contents = {};
  if (output[_tRC] != null) {
    contents[_TRC] = strictParseInt32(output[_tRC]);
  }
  return contents;
};
var de_FederatedAuthentication = (output, context) => {
  const contents = {};
  if (output[_sPA] != null) {
    contents[_SPA] = expectString(output[_sPA]);
  }
  if (output[_sSSPA] != null) {
    contents[_SSSPA] = expectString(output[_sSSPA]);
  }
  return contents;
};
var de_FilterPortRange = (output, context) => {
  const contents = {};
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  return contents;
};
var de_FirewallStatefulRule = (output, context) => {
  const contents = {};
  if (output[_rGA] != null) {
    contents[_RGA] = expectString(output[_rGA]);
  }
  if (output.sourceSet === "") {
    contents[_So] = [];
  } else if (output[_sSo] != null && output[_sSo][_i] != null) {
    contents[_So] = de_ValueStringList(getArrayIfSingleItem(output[_sSo][_i]), context);
  }
  if (output.destinationSet === "") {
    contents[_Des] = [];
  } else if (output[_dSe] != null && output[_dSe][_i] != null) {
    contents[_Des] = de_ValueStringList(getArrayIfSingleItem(output[_dSe][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_PortRangeList(getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPes] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPes] = de_PortRangeList(getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = expectString(output[_rA]);
  }
  if (output[_di] != null) {
    contents[_Di] = expectString(output[_di]);
  }
  return contents;
};
var de_FirewallStatelessRule = (output, context) => {
  const contents = {};
  if (output[_rGA] != null) {
    contents[_RGA] = expectString(output[_rGA]);
  }
  if (output.sourceSet === "") {
    contents[_So] = [];
  } else if (output[_sSo] != null && output[_sSo][_i] != null) {
    contents[_So] = de_ValueStringList(getArrayIfSingleItem(output[_sSo][_i]), context);
  }
  if (output.destinationSet === "") {
    contents[_Des] = [];
  } else if (output[_dSe] != null && output[_dSe][_i] != null) {
    contents[_Des] = de_ValueStringList(getArrayIfSingleItem(output[_dSe][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_PortRangeList(getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPes] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPes] = de_PortRangeList(getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_ProtocolIntList(getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  if (output[_rA] != null) {
    contents[_RAu] = expectString(output[_rA]);
  }
  if (output[_pri] != null) {
    contents[_Pri] = strictParseInt32(output[_pri]);
  }
  return contents;
};
var de_FleetCapacityReservation = (output, context) => {
  const contents = {};
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_iPn] != null) {
    contents[_IPn] = expectString(output[_iPn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = strictParseInt32(output[_tIC]);
  }
  if (output[_fC] != null) {
    contents[_FC] = strictParseFloat(output[_fC]);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_we] != null) {
    contents[_W] = strictParseFloat(output[_we]);
  }
  if (output[_pri] != null) {
    contents[_Pri] = strictParseInt32(output[_pri]);
  }
  return contents;
};
var de_FleetCapacityReservationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FleetCapacityReservation(entry, context);
  });
};
var de_FleetData = (output, context) => {
  const contents = {};
  if (output[_aSc] != null) {
    contents[_ASc] = expectString(output[_aSc]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_fIl] != null) {
    contents[_FIl] = expectString(output[_fIl]);
  }
  if (output[_fSl] != null) {
    contents[_FS] = expectString(output[_fSl]);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_eCTP] != null) {
    contents[_ECTP] = expectString(output[_eCTP]);
  }
  if (output[_fC] != null) {
    contents[_FC] = strictParseFloat(output[_fC]);
  }
  if (output[_fODC] != null) {
    contents[_FODC] = strictParseFloat(output[_fODC]);
  }
  if (output.launchTemplateConfigs === "") {
    contents[_LTC] = [];
  } else if (output[_lTC] != null && output[_lTC][_i] != null) {
    contents[_LTC] = de_FleetLaunchTemplateConfigList(getArrayIfSingleItem(output[_lTC][_i]), context);
  }
  if (output[_tCS] != null) {
    contents[_TCS] = de_TargetCapacitySpecification(output[_tCS], context);
  }
  if (output[_tIWE] != null) {
    contents[_TIWE] = parseBoolean(output[_tIWE]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_rUI] != null) {
    contents[_RUI] = parseBoolean(output[_rUI]);
  }
  if (output[_sO] != null) {
    contents[_SO] = de_SpotOptions(output[_sO], context);
  }
  if (output[_oDO] != null) {
    contents[_ODO] = de_OnDemandOptions(output[_oDO], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_DescribeFleetsErrorSet(getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents[_In] = [];
  } else if (output[_fIS] != null && output[_fIS][_i] != null) {
    contents[_In] = de_DescribeFleetsInstancesSet(getArrayIfSingleItem(output[_fIS][_i]), context);
  }
  if (output[_cont] != null) {
    contents[_Con] = expectString(output[_cont]);
  }
  return contents;
};
var de_FleetLaunchTemplateConfig = (output, context) => {
  const contents = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output.overrides === "") {
    contents[_Ov] = [];
  } else if (output[_ov] != null && output[_ov][_i] != null) {
    contents[_Ov] = de_FleetLaunchTemplateOverridesList(getArrayIfSingleItem(output[_ov][_i]), context);
  }
  return contents;
};
var de_FleetLaunchTemplateConfigList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FleetLaunchTemplateConfig(entry, context);
  });
};
var de_FleetLaunchTemplateOverrides = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_mP] != null) {
    contents[_MPa] = expectString(output[_mP]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_wC] != null) {
    contents[_WCe] = strictParseFloat(output[_wC]);
  }
  if (output[_pri] != null) {
    contents[_Pri] = strictParseFloat(output[_pri]);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_PlacementResponse(output[_pla], context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  return contents;
};
var de_FleetLaunchTemplateOverridesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FleetLaunchTemplateOverrides(entry, context);
  });
};
var de_FleetLaunchTemplateSpecification = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_ve] != null) {
    contents[_V] = expectString(output[_ve]);
  }
  return contents;
};
var de_FleetSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FleetData(entry, context);
  });
};
var de_FleetSpotCapacityRebalance = (output, context) => {
  const contents = {};
  if (output[_rSep] != null) {
    contents[_RS] = expectString(output[_rSep]);
  }
  if (output[_tD] != null) {
    contents[_TDe] = strictParseInt32(output[_tD]);
  }
  return contents;
};
var de_FleetSpotMaintenanceStrategies = (output, context) => {
  const contents = {};
  if (output[_cRa] != null) {
    contents[_CRap] = de_FleetSpotCapacityRebalance(output[_cRa], context);
  }
  return contents;
};
var de_FlowLog = (output, context) => {
  const contents = {};
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_dLEM] != null) {
    contents[_DLEM] = expectString(output[_dLEM]);
  }
  if (output[_dLPA] != null) {
    contents[_DLPA] = expectString(output[_dLPA]);
  }
  if (output[_dCAR] != null) {
    contents[_DCAR] = expectString(output[_dCAR]);
  }
  if (output[_dLS] != null) {
    contents[_DLSe] = expectString(output[_dLS]);
  }
  if (output[_fLI] != null) {
    contents[_FLIl] = expectString(output[_fLI]);
  }
  if (output[_fLSl] != null) {
    contents[_FLS] = expectString(output[_fLSl]);
  }
  if (output[_lGN] != null) {
    contents[_LGN] = expectString(output[_lGN]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_tT] != null) {
    contents[_TT] = expectString(output[_tT]);
  }
  if (output[_lDT] != null) {
    contents[_LDT] = expectString(output[_lDT]);
  }
  if (output[_lD] != null) {
    contents[_LD] = expectString(output[_lD]);
  }
  if (output[_lF] != null) {
    contents[_LF] = expectString(output[_lF]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_mAI] != null) {
    contents[_MAI] = strictParseInt32(output[_mAI]);
  }
  if (output[_dOe] != null) {
    contents[_DO] = de_DestinationOptionsResponse(output[_dOe], context);
  }
  return contents;
};
var de_FlowLogSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FlowLog(entry, context);
  });
};
var de_FpgaDeviceInfo = (output, context) => {
  const contents = {};
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = expectString(output[_man]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_FpgaDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};
var de_FpgaDeviceInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FpgaDeviceInfo(entry, context);
  });
};
var de_FpgaDeviceMemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseInt32(output[_sIMB]);
  }
  return contents;
};
var de_FpgaImage = (output, context) => {
  const contents = {};
  if (output[_fII] != null) {
    contents[_FII] = expectString(output[_fII]);
  }
  if (output[_fIGI] != null) {
    contents[_FIGI] = expectString(output[_fIGI]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_sVh] != null) {
    contents[_SVh] = expectString(output[_sVh]);
  }
  if (output[_pIc] != null) {
    contents[_PIc] = de_PciId(output[_pIc], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = de_FpgaImageState(output[_st], context);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_uT] != null) {
    contents[_UTp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = expectString(output[_oAw]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output.tags === "") {
    contents[_Ta] = [];
  } else if (output[_ta] != null && output[_ta][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_ta][_i]), context);
  }
  if (output[_pu] != null) {
    contents[_Pu] = parseBoolean(output[_pu]);
  }
  if (output[_dRS] != null) {
    contents[_DRS] = parseBoolean(output[_dRS]);
  }
  if (output.instanceTypes === "") {
    contents[_ITnst] = [];
  } else if (output[_iTn] != null && output[_iTn][_i] != null) {
    contents[_ITnst] = de_InstanceTypesList(getArrayIfSingleItem(output[_iTn][_i]), context);
  }
  return contents;
};
var de_FpgaImageAttribute = (output, context) => {
  const contents = {};
  if (output[_fII] != null) {
    contents[_FII] = expectString(output[_fII]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.loadPermissions === "") {
    contents[_LPo] = [];
  } else if (output[_lP] != null && output[_lP][_i] != null) {
    contents[_LPo] = de_LoadPermissionList(getArrayIfSingleItem(output[_lP][_i]), context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  return contents;
};
var de_FpgaImageList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_FpgaImage(entry, context);
  });
};
var de_FpgaImageState = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_FpgaInfo = (output, context) => {
  const contents = {};
  if (output.fpgas === "") {
    contents[_Fp] = [];
  } else if (output[_fp] != null && output[_fp][_i] != null) {
    contents[_Fp] = de_FpgaDeviceInfoList(getArrayIfSingleItem(output[_fp][_i]), context);
  }
  if (output[_tFMIMB] != null) {
    contents[_TFMIMB] = strictParseInt32(output[_tFMIMB]);
  }
  return contents;
};
var de_GetAllowedImagesSettingsResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.imageCriterionSet === "") {
    contents[_ICm] = [];
  } else if (output[_iCS] != null && output[_iCS][_i] != null) {
    contents[_ICm] = de_ImageCriterionList(getArrayIfSingleItem(output[_iCS][_i]), context);
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  return contents;
};
var de_GetAssociatedEnclaveCertificateIamRolesResult = (output, context) => {
  const contents = {};
  if (output.associatedRoleSet === "") {
    contents[_ARss] = [];
  } else if (output[_aRS] != null && output[_aRS][_i] != null) {
    contents[_ARss] = de_AssociatedRolesList(getArrayIfSingleItem(output[_aRS][_i]), context);
  }
  return contents;
};
var de_GetAssociatedIpv6PoolCidrsResult = (output, context) => {
  const contents = {};
  if (output.ipv6CidrAssociationSet === "") {
    contents[_ICA] = [];
  } else if (output[_iCAS] != null && output[_iCAS][_i] != null) {
    contents[_ICA] = de_Ipv6CidrAssociationSet(getArrayIfSingleItem(output[_iCAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetAwsNetworkPerformanceDataResult = (output, context) => {
  const contents = {};
  if (output.dataResponseSet === "") {
    contents[_DRa] = [];
  } else if (output[_dRSa] != null && output[_dRSa][_i] != null) {
    contents[_DRa] = de_DataResponses(getArrayIfSingleItem(output[_dRSa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetCapacityReservationUsageResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = strictParseInt32(output[_tIC]);
  }
  if (output[_aICv] != null) {
    contents[_AICv] = strictParseInt32(output[_aICv]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.instanceUsageSet === "") {
    contents[_IU] = [];
  } else if (output[_iUS] != null && output[_iUS][_i] != null) {
    contents[_IU] = de_InstanceUsageSet(getArrayIfSingleItem(output[_iUS][_i]), context);
  }
  return contents;
};
var de_GetCoipPoolUsageResult = (output, context) => {
  const contents = {};
  if (output[_cPI] != null) {
    contents[_CPIo] = expectString(output[_cPI]);
  }
  if (output.coipAddressUsageSet === "") {
    contents[_CAU] = [];
  } else if (output[_cAUS] != null && output[_cAUS][_i] != null) {
    contents[_CAU] = de_CoipAddressUsageSet(getArrayIfSingleItem(output[_cAUS][_i]), context);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetConsoleOutputResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  if (output[_ou] != null) {
    contents[_Ou] = expectString(output[_ou]);
  }
  return contents;
};
var de_GetConsoleScreenshotResult = (output, context) => {
  const contents = {};
  if (output[_iD] != null) {
    contents[_IDm] = expectString(output[_iD]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  return contents;
};
var de_GetDeclarativePoliciesReportSummaryResult = (output, context) => {
  const contents = {};
  if (output[_rI] != null) {
    contents[_RIep] = expectString(output[_rI]);
  }
  if (output[_sB] != null) {
    contents[_SB] = expectString(output[_sB]);
  }
  if (output[_sP] != null) {
    contents[_SP] = expectString(output[_sP]);
  }
  if (output[_tI] != null) {
    contents[_TIa] = expectString(output[_tI]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_eTn] != null) {
    contents[_ETn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  if (output[_nOA] != null) {
    contents[_NOA] = strictParseInt32(output[_nOA]);
  }
  if (output[_nOFA] != null) {
    contents[_NOFA] = strictParseInt32(output[_nOFA]);
  }
  if (output.attributeSummarySet === "") {
    contents[_ASt] = [];
  } else if (output[_aSSt] != null && output[_aSSt][_i] != null) {
    contents[_ASt] = de_AttributeSummaryList(getArrayIfSingleItem(output[_aSSt][_i]), context);
  }
  return contents;
};
var de_GetDefaultCreditSpecificationResult = (output, context) => {
  const contents = {};
  if (output[_iFCS] != null) {
    contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS], context);
  }
  return contents;
};
var de_GetEbsDefaultKmsKeyIdResult = (output, context) => {
  const contents = {};
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  return contents;
};
var de_GetEbsEncryptionByDefaultResult = (output, context) => {
  const contents = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = parseBoolean(output[_eEBD]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = expectString(output[_sTs]);
  }
  return contents;
};
var de_GetFlowLogsIntegrationTemplateResult = (output, context) => {
  const contents = {};
  if (output[_res] != null) {
    contents[_Resu] = expectString(output[_res]);
  }
  return contents;
};
var de_GetGroupsForCapacityReservationResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.capacityReservationGroupSet === "") {
    contents[_CRG] = [];
  } else if (output[_cRGS] != null && output[_cRGS][_i] != null) {
    contents[_CRG] = de_CapacityReservationGroupSet(getArrayIfSingleItem(output[_cRGS][_i]), context);
  }
  return contents;
};
var de_GetHostReservationPurchasePreviewResult = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output.purchase === "") {
    contents[_Pur] = [];
  } else if (output[_pur] != null && output[_pur][_i] != null) {
    contents[_Pur] = de_PurchaseSet(getArrayIfSingleItem(output[_pur][_i]), context);
  }
  if (output[_tHP] != null) {
    contents[_THP] = expectString(output[_tHP]);
  }
  if (output[_tUP] != null) {
    contents[_TUP] = expectString(output[_tUP]);
  }
  return contents;
};
var de_GetImageBlockPublicAccessStateResult = (output, context) => {
  const contents = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = expectString(output[_iBPAS]);
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  return contents;
};
var de_GetInstanceMetadataDefaultsResult = (output, context) => {
  const contents = {};
  if (output[_aL] != null) {
    contents[_ALc] = de_InstanceMetadataDefaultsResponse(output[_aL], context);
  }
  return contents;
};
var de_GetInstanceTpmEkPubResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_kT] != null) {
    contents[_KT] = expectString(output[_kT]);
  }
  if (output[_kF] != null) {
    contents[_KF] = expectString(output[_kF]);
  }
  if (output[_kV] != null) {
    contents[_KV] = expectString(output[_kV]);
  }
  return contents;
};
var de_GetInstanceTypesFromInstanceRequirementsResult = (output, context) => {
  const contents = {};
  if (output.instanceTypeSet === "") {
    contents[_ITnst] = [];
  } else if (output[_iTS] != null && output[_iTS][_i] != null) {
    contents[_ITnst] = de_InstanceTypeInfoFromInstanceRequirementsSet(getArrayIfSingleItem(output[_iTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetInstanceUefiDataResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_uD] != null) {
    contents[_UDe] = expectString(output[_uD]);
  }
  return contents;
};
var de_GetIpamAddressHistoryResult = (output, context) => {
  const contents = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_IpamAddressHistoryRecordSet(getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamDiscoveredAccountsResult = (output, context) => {
  const contents = {};
  if (output.ipamDiscoveredAccountSet === "") {
    contents[_IDA] = [];
  } else if (output[_iDAS] != null && output[_iDAS][_i] != null) {
    contents[_IDA] = de_IpamDiscoveredAccountSet(getArrayIfSingleItem(output[_iDAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamDiscoveredPublicAddressesResult = (output, context) => {
  const contents = {};
  if (output.ipamDiscoveredPublicAddressSet === "") {
    contents[_IDPA] = [];
  } else if (output[_iDPAS] != null && output[_iDPAS][_i] != null) {
    contents[_IDPA] = de_IpamDiscoveredPublicAddressSet(getArrayIfSingleItem(output[_iDPAS][_i]), context);
  }
  if (output[_oST] != null) {
    contents[_OST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_oST]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamDiscoveredResourceCidrsResult = (output, context) => {
  const contents = {};
  if (output.ipamDiscoveredResourceCidrSet === "") {
    contents[_IDRC] = [];
  } else if (output[_iDRCS] != null && output[_iDRCS][_i] != null) {
    contents[_IDRC] = de_IpamDiscoveredResourceCidrSet(getArrayIfSingleItem(output[_iDRCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamPoolAllocationsResult = (output, context) => {
  const contents = {};
  if (output.ipamPoolAllocationSet === "") {
    contents[_IPAp] = [];
  } else if (output[_iPAS] != null && output[_iPAS][_i] != null) {
    contents[_IPAp] = de_IpamPoolAllocationSet(getArrayIfSingleItem(output[_iPAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamPoolCidrsResult = (output, context) => {
  const contents = {};
  if (output.ipamPoolCidrSet === "") {
    contents[_IPCpam] = [];
  } else if (output[_iPCS] != null && output[_iPCS][_i] != null) {
    contents[_IPCpam] = de_IpamPoolCidrSet(getArrayIfSingleItem(output[_iPCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetIpamResourceCidrsResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.ipamResourceCidrSet === "") {
    contents[_IRC] = [];
  } else if (output[_iRCS] != null && output[_iRCS][_i] != null) {
    contents[_IRC] = de_IpamResourceCidrSet(getArrayIfSingleItem(output[_iRCS][_i]), context);
  }
  return contents;
};
var de_GetLaunchTemplateDataResult = (output, context) => {
  const contents = {};
  if (output[_lTD] != null) {
    contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD], context);
  }
  return contents;
};
var de_GetManagedPrefixListAssociationsResult = (output, context) => {
  const contents = {};
  if (output.prefixListAssociationSet === "") {
    contents[_PLA] = [];
  } else if (output[_pLAS] != null && output[_pLAS][_i] != null) {
    contents[_PLA] = de_PrefixListAssociationSet(getArrayIfSingleItem(output[_pLAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetManagedPrefixListEntriesResult = (output, context) => {
  const contents = {};
  if (output.entrySet === "") {
    contents[_Ent] = [];
  } else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
    contents[_Ent] = de_PrefixListEntrySet(getArrayIfSingleItem(output[_eSnt][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetNetworkInsightsAccessScopeAnalysisFindingsResult = (output, context) => {
  const contents = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = expectString(output[_nIASAI]);
  }
  if (output[_aSn] != null) {
    contents[_ASn] = expectString(output[_aSn]);
  }
  if (output.analysisFindingSet === "") {
    contents[_AFn] = [];
  } else if (output[_aFS] != null && output[_aFS][_i] != null) {
    contents[_AFn] = de_AccessScopeAnalysisFindingList(getArrayIfSingleItem(output[_aFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetNetworkInsightsAccessScopeContentResult = (output, context) => {
  const contents = {};
  if (output[_nIASC] != null) {
    contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC], context);
  }
  return contents;
};
var de_GetPasswordDataResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  if (output[_pD] != null) {
    contents[_PDa] = expectString(output[_pD]);
  }
  return contents;
};
var de_GetReservedInstancesExchangeQuoteResult = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_iVE] != null) {
    contents[_IVE] = parseBoolean(output[_iVE]);
  }
  if (output[_oRIWEA] != null) {
    contents[_ORIWEA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_oRIWEA]));
  }
  if (output[_pDa] != null) {
    contents[_PDay] = expectString(output[_pDa]);
  }
  if (output[_rIVR] != null) {
    contents[_RIVR] = de_ReservationValue(output[_rIVR], context);
  }
  if (output.reservedInstanceValueSet === "") {
    contents[_RIVS] = [];
  } else if (output[_rIVS] != null && output[_rIVS][_i] != null) {
    contents[_RIVS] = de_ReservedInstanceReservationValueSet(getArrayIfSingleItem(output[_rIVS][_i]), context);
  }
  if (output[_tCVR] != null) {
    contents[_TCVR] = de_ReservationValue(output[_tCVR], context);
  }
  if (output.targetConfigurationValueSet === "") {
    contents[_TCVS] = [];
  } else if (output[_tCVS] != null && output[_tCVS][_i] != null) {
    contents[_TCVS] = de_TargetReservationValueSet(getArrayIfSingleItem(output[_tCVS][_i]), context);
  }
  if (output[_vFR] != null) {
    contents[_VFR] = expectString(output[_vFR]);
  }
  return contents;
};
var de_GetSecurityGroupsForVpcResult = (output, context) => {
  const contents = {};
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  if (output.securityGroupForVpcSet === "") {
    contents[_SGFV] = [];
  } else if (output[_sGFVS] != null && output[_sGFVS][_i] != null) {
    contents[_SGFV] = de_SecurityGroupForVpcList(getArrayIfSingleItem(output[_sGFVS][_i]), context);
  }
  return contents;
};
var de_GetSerialConsoleAccessStatusResult = (output, context) => {
  const contents = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = parseBoolean(output[_sCAE]);
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  return contents;
};
var de_GetSnapshotBlockPublicAccessStateResult = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  return contents;
};
var de_GetSpotPlacementScoresResult = (output, context) => {
  const contents = {};
  if (output.spotPlacementScoreSet === "") {
    contents[_SPS] = [];
  } else if (output[_sPSS] != null && output[_sPSS][_i] != null) {
    contents[_SPS] = de_SpotPlacementScores(getArrayIfSingleItem(output[_sPSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetSubnetCidrReservationsResult = (output, context) => {
  const contents = {};
  if (output.subnetIpv4CidrReservationSet === "") {
    contents[_SICR] = [];
  } else if (output[_sICRS] != null && output[_sICRS][_i] != null) {
    contents[_SICR] = de_SubnetCidrReservationList(getArrayIfSingleItem(output[_sICRS][_i]), context);
  }
  if (output.subnetIpv6CidrReservationSet === "") {
    contents[_SICRu] = [];
  } else if (output[_sICRSu] != null && output[_sICRSu][_i] != null) {
    contents[_SICRu] = de_SubnetCidrReservationList(getArrayIfSingleItem(output[_sICRSu][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayAttachmentPropagationsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayAttachmentPropagations === "") {
    contents[_TGAP] = [];
  } else if (output[_tGAP] != null && output[_tGAP][_i] != null) {
    contents[_TGAP] = de_TransitGatewayAttachmentPropagationList(getArrayIfSingleItem(output[_tGAP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
  const contents = {};
  if (output.multicastDomainAssociations === "") {
    contents[_MDA] = [];
  } else if (output[_mDA] != null && output[_mDA][_i] != null) {
    contents[_MDA] = de_TransitGatewayMulticastDomainAssociationList(getArrayIfSingleItem(output[_mDA][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayPolicyTableAssociationsResult = (output, context) => {
  const contents = {};
  if (output.associations === "") {
    contents[_Ass] = [];
  } else if (output[_a] != null && output[_a][_i] != null) {
    contents[_Ass] = de_TransitGatewayPolicyTableAssociationList(getArrayIfSingleItem(output[_a][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayPolicyTableEntriesResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayPolicyTableEntries === "") {
    contents[_TGPTE] = [];
  } else if (output[_tGPTE] != null && output[_tGPTE][_i] != null) {
    contents[_TGPTE] = de_TransitGatewayPolicyTableEntryList(getArrayIfSingleItem(output[_tGPTE][_i]), context);
  }
  return contents;
};
var de_GetTransitGatewayPrefixListReferencesResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayPrefixListReferenceSet === "") {
    contents[_TGPLRr] = [];
  } else if (output[_tGPLRS] != null && output[_tGPLRS][_i] != null) {
    contents[_TGPLRr] = de_TransitGatewayPrefixListReferenceSet(getArrayIfSingleItem(output[_tGPLRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayRouteTableAssociationsResult = (output, context) => {
  const contents = {};
  if (output.associations === "") {
    contents[_Ass] = [];
  } else if (output[_a] != null && output[_a][_i] != null) {
    contents[_Ass] = de_TransitGatewayRouteTableAssociationList(getArrayIfSingleItem(output[_a][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetTransitGatewayRouteTablePropagationsResult = (output, context) => {
  const contents = {};
  if (output.transitGatewayRouteTablePropagations === "") {
    contents[_TGRTP] = [];
  } else if (output[_tGRTP] != null && output[_tGRTP][_i] != null) {
    contents[_TGRTP] = de_TransitGatewayRouteTablePropagationList(getArrayIfSingleItem(output[_tGRTP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetVerifiedAccessEndpointPolicyResult = (output, context) => {
  const contents = {};
  if (output[_pE] != null) {
    contents[_PE] = parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = expectString(output[_pDo]);
  }
  return contents;
};
var de_GetVerifiedAccessEndpointTargetsResult = (output, context) => {
  const contents = {};
  if (output.verifiedAccessEndpointTargetSet === "") {
    contents[_VAET] = [];
  } else if (output[_vAETS] != null && output[_vAETS][_i] != null) {
    contents[_VAET] = de_VerifiedAccessEndpointTargetList(getArrayIfSingleItem(output[_vAETS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetVerifiedAccessGroupPolicyResult = (output, context) => {
  const contents = {};
  if (output[_pE] != null) {
    contents[_PE] = parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = expectString(output[_pDo]);
  }
  return contents;
};
var de_GetVpnConnectionDeviceSampleConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_vCDSC] != null) {
    contents[_VCDSC] = expectString(output[_vCDSC]);
  }
  return contents;
};
var de_GetVpnConnectionDeviceTypesResult = (output, context) => {
  const contents = {};
  if (output.vpnConnectionDeviceTypeSet === "") {
    contents[_VCDT] = [];
  } else if (output[_vCDTS] != null && output[_vCDTS][_i] != null) {
    contents[_VCDT] = de_VpnConnectionDeviceTypeList(getArrayIfSingleItem(output[_vCDTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_GetVpnTunnelReplacementStatusResult = (output, context) => {
  const contents = {};
  if (output[_vCI] != null) {
    contents[_VCI] = expectString(output[_vCI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = expectString(output[_cGIu]);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = expectString(output[_vGI]);
  }
  if (output[_vTOIA] != null) {
    contents[_VTOIA] = expectString(output[_vTOIA]);
  }
  if (output[_mD] != null) {
    contents[_MDa] = de_MaintenanceDetails(output[_mD], context);
  }
  return contents;
};
var de_GpuDeviceInfo = (output, context) => {
  const contents = {};
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = expectString(output[_man]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_GpuDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};
var de_GpuDeviceInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GpuDeviceInfo(entry, context);
  });
};
var de_GpuDeviceMemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseInt32(output[_sIMB]);
  }
  return contents;
};
var de_GpuInfo = (output, context) => {
  const contents = {};
  if (output.gpus === "") {
    contents[_Gp] = [];
  } else if (output[_gp] != null && output[_gp][_i] != null) {
    contents[_Gp] = de_GpuDeviceInfoList(getArrayIfSingleItem(output[_gp][_i]), context);
  }
  if (output[_tGMIMB] != null) {
    contents[_TGMIMB] = strictParseInt32(output[_tGMIMB]);
  }
  return contents;
};
var de_GroupIdentifier = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  return contents;
};
var de_GroupIdentifierList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GroupIdentifier(entry, context);
  });
};
var de_GroupIdentifierSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroupIdentifier(entry, context);
  });
};
var de_GroupIdStringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_HibernationOptions = (output, context) => {
  const contents = {};
  if (output[_conf] != null) {
    contents[_Conf] = parseBoolean(output[_conf]);
  }
  return contents;
};
var de_HistoryRecord = (output, context) => {
  const contents = {};
  if (output[_eIv] != null) {
    contents[_EIv] = de_EventInformation(output[_eIv], context);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = expectString(output[_eTv]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};
var de_HistoryRecordEntry = (output, context) => {
  const contents = {};
  if (output[_eIv] != null) {
    contents[_EIv] = de_EventInformation(output[_eIv], context);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = expectString(output[_eTv]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};
var de_HistoryRecords = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HistoryRecord(entry, context);
  });
};
var de_HistoryRecordSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HistoryRecordEntry(entry, context);
  });
};
var de_Host = (output, context) => {
  const contents = {};
  if (output[_aPu] != null) {
    contents[_AP] = expectString(output[_aPu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_aC] != null) {
    contents[_ACv] = de_AvailableCapacity(output[_aC], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_hI] != null) {
    contents[_HIo] = expectString(output[_hI]);
  }
  if (output[_hP] != null) {
    contents[_HP] = de_HostProperties(output[_hP], context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = expectString(output[_hRI]);
  }
  if (output.instances === "") {
    contents[_In] = [];
  } else if (output[_ins] != null && output[_ins][_i] != null) {
    contents[_In] = de_HostInstanceList(getArrayIfSingleItem(output[_ins][_i]), context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_aTll] != null) {
    contents[_ATll] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aTll]));
  }
  if (output[_rTel] != null) {
    contents[_RTel] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rTel]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_hR] != null) {
    contents[_HR] = expectString(output[_hR]);
  }
  if (output[_aMIT] != null) {
    contents[_AMIT] = expectString(output[_aMIT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_mOSLRG] != null) {
    contents[_MOSLRG] = parseBoolean(output[_mOSLRG]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_hM] != null) {
    contents[_HM] = expectString(output[_hM]);
  }
  if (output[_aIss] != null) {
    contents[_AIsse] = expectString(output[_aIss]);
  }
  return contents;
};
var de_HostInstance = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_HostInstanceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HostInstance(entry, context);
  });
};
var de_HostList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Host(entry, context);
  });
};
var de_HostOffering = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = strictParseInt32(output[_du]);
  }
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  if (output[_oIf] != null) {
    contents[_OI] = expectString(output[_oIf]);
  }
  if (output[_pO] != null) {
    contents[_PO] = expectString(output[_pO]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = expectString(output[_uP]);
  }
  return contents;
};
var de_HostOfferingSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HostOffering(entry, context);
  });
};
var de_HostProperties = (output, context) => {
  const contents = {};
  if (output[_cor] != null) {
    contents[_Cor] = strictParseInt32(output[_cor]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  if (output[_so] != null) {
    contents[_Soc] = strictParseInt32(output[_so]);
  }
  if (output[_tVC] != null) {
    contents[_TVC] = strictParseInt32(output[_tVC]);
  }
  return contents;
};
var de_HostReservation = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = strictParseInt32(output[_du]);
  }
  if (output[_end] != null) {
    contents[_End] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_end]));
  }
  if (output.hostIdSet === "") {
    contents[_HIS] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HIS] = de_ResponseHostIdSet(getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = expectString(output[_hRI]);
  }
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  if (output[_oIf] != null) {
    contents[_OI] = expectString(output[_oIf]);
  }
  if (output[_pO] != null) {
    contents[_PO] = expectString(output[_pO]);
  }
  if (output[_star] != null) {
    contents[_Star] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_star]));
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = expectString(output[_uP]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_HostReservationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HostReservation(entry, context);
  });
};
var de_IamInstanceProfile = (output, context) => {
  const contents = {};
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  if (output[_id] != null) {
    contents[_Id] = expectString(output[_id]);
  }
  return contents;
};
var de_IamInstanceProfileAssociation = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfile(output[_iIP], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};
var de_IamInstanceProfileAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IamInstanceProfileAssociation(entry, context);
  });
};
var de_IamInstanceProfileSpecification = (output, context) => {
  const contents = {};
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_IcmpTypeCode = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = strictParseInt32(output[_co]);
  }
  if (output[_ty] != null) {
    contents[_T] = strictParseInt32(output[_ty]);
  }
  return contents;
};
var de_IdFormat = (output, context) => {
  const contents = {};
  if (output[_dea] != null) {
    contents[_Dea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dea]));
  }
  if (output[_reso] != null) {
    contents[_Res] = expectString(output[_reso]);
  }
  if (output[_uLI] != null) {
    contents[_ULI] = parseBoolean(output[_uLI]);
  }
  return contents;
};
var de_IdFormatList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IdFormat(entry, context);
  });
};
var de_IKEVersionsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IKEVersionsListValue(entry, context);
  });
};
var de_IKEVersionsListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_Image = (output, context) => {
  const contents = {};
  if (output[_pDl] != null) {
    contents[_PDl] = expectString(output[_pDl]);
  }
  if (output[_uO] != null) {
    contents[_UO] = expectString(output[_uO]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = parseBoolean(output[_eSna]);
  }
  if (output[_h] != null) {
    contents[_H] = expectString(output[_h]);
  }
  if (output[_iOA] != null) {
    contents[_IOA] = expectString(output[_iOA]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = expectString(output[_rDN]);
  }
  if (output[_rDT] != null) {
    contents[_RDT] = expectString(output[_rDT]);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = expectString(output[_sNSr]);
  }
  if (output[_sRt] != null) {
    contents[_SRt] = de_StateReason(output[_sRt], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vTi] != null) {
    contents[_VTir] = expectString(output[_vTi]);
  }
  if (output[_bM] != null) {
    contents[_BM] = expectString(output[_bM]);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = expectString(output[_tSp]);
  }
  if (output[_dTe] != null) {
    contents[_DTep] = expectString(output[_dTe]);
  }
  if (output[_iSmd] != null) {
    contents[_ISm] = expectString(output[_iSmd]);
  }
  if (output[_sII] != null) {
    contents[_SIIo] = expectString(output[_sII]);
  }
  if (output[_dPe] != null) {
    contents[_DPer] = expectString(output[_dPe]);
  }
  if (output[_lLT] != null) {
    contents[_LLT] = expectString(output[_lLT]);
  }
  if (output[_iAm] != null) {
    contents[_IAm] = parseBoolean(output[_iAm]);
  }
  if (output[_sIIo] != null) {
    contents[_SII] = expectString(output[_sIIo]);
  }
  if (output[_sIR] != null) {
    contents[_SIRo] = expectString(output[_sIR]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iL] != null) {
    contents[_IL] = expectString(output[_iL]);
  }
  if (output[_iSma] != null) {
    contents[_Stat] = expectString(output[_iSma]);
  }
  if (output[_iOI] != null) {
    contents[_OIwn] = expectString(output[_iOI]);
  }
  if (output[_cDr] != null) {
    contents[_CDre] = expectString(output[_cDr]);
  }
  if (output[_iPs] != null) {
    contents[_Pu] = parseBoolean(output[_iPs]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_arc] != null) {
    contents[_Arc] = expectString(output[_arc]);
  }
  if (output[_iTm] != null) {
    contents[_ITm] = expectString(output[_iTm]);
  }
  if (output[_kI] != null) {
    contents[_KI] = expectString(output[_kI]);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = expectString(output[_rIa]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  return contents;
};
var de_ImageAttribute = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = de_AttributeValue(output[_de], context);
  }
  if (output[_ke] != null) {
    contents[_KI] = de_AttributeValue(output[_ke], context);
  }
  if (output[_ra] != null) {
    contents[_RIa] = de_AttributeValue(output[_ra], context);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = de_AttributeValue(output[_sNSr], context);
  }
  if (output[_bM] != null) {
    contents[_BM] = de_AttributeValue(output[_bM], context);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = de_AttributeValue(output[_tSp], context);
  }
  if (output[_uD] != null) {
    contents[_UDe] = de_AttributeValue(output[_uD], context);
  }
  if (output[_lLT] != null) {
    contents[_LLT] = de_AttributeValue(output[_lLT], context);
  }
  if (output[_iSmd] != null) {
    contents[_ISm] = de_AttributeValue(output[_iSmd], context);
  }
  if (output[_dPe] != null) {
    contents[_DPer] = de_AttributeValue(output[_dPe], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output.launchPermission === "") {
    contents[_LPau] = [];
  } else if (output[_lPa] != null && output[_lPa][_i] != null) {
    contents[_LPau] = de_LaunchPermissionList(getArrayIfSingleItem(output[_lPa][_i]), context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  return contents;
};
var de_ImageCriterion = (output, context) => {
  const contents = {};
  if (output.imageProviderSet === "") {
    contents[_IPm] = [];
  } else if (output[_iPSm] != null && output[_iPSm][_i] != null) {
    contents[_IPm] = de_ImageProviderList(getArrayIfSingleItem(output[_iPSm][_i]), context);
  }
  return contents;
};
var de_ImageCriterionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImageCriterion(entry, context);
  });
};
var de_ImageList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Image(entry, context);
  });
};
var de_ImageMetadata = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_iOI] != null) {
    contents[_OIwn] = expectString(output[_iOI]);
  }
  if (output[_iSma] != null) {
    contents[_Stat] = expectString(output[_iSma]);
  }
  if (output[_iOA] != null) {
    contents[_IOA] = expectString(output[_iOA]);
  }
  if (output[_cDr] != null) {
    contents[_CDre] = expectString(output[_cDr]);
  }
  if (output[_dTe] != null) {
    contents[_DTep] = expectString(output[_dTe]);
  }
  if (output[_iAm] != null) {
    contents[_IAm] = parseBoolean(output[_iAm]);
  }
  if (output[_iPs] != null) {
    contents[_IPs] = parseBoolean(output[_iPs]);
  }
  return contents;
};
var de_ImageProviderList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ImageRecycleBinInfo = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_rBET] != null) {
    contents[_RBET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rBET]));
  }
  if (output[_rBETe] != null) {
    contents[_RBETe] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rBETe]));
  }
  return contents;
};
var de_ImageRecycleBinInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImageRecycleBinInfo(entry, context);
  });
};
var de_ImportClientVpnClientCertificateRevocationListResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ImportImageLicenseConfigurationResponse = (output, context) => {
  const contents = {};
  if (output[_lCA] != null) {
    contents[_LCA] = expectString(output[_lCA]);
  }
  return contents;
};
var de_ImportImageLicenseSpecificationListResponse = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImportImageLicenseConfigurationResponse(entry, context);
  });
};
var de_ImportImageResult = (output, context) => {
  const contents = {};
  if (output[_arc] != null) {
    contents[_Arc] = expectString(output[_arc]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_h] != null) {
    contents[_H] = expectString(output[_h]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = expectString(output[_iTI]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_lTi] != null) {
    contents[_LTi] = expectString(output[_lTi]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output.snapshotDetailSet === "") {
    contents[_SDn] = [];
  } else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
    contents[_SDn] = de_SnapshotDetailList(getArrayIfSingleItem(output[_sDSn][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.licenseSpecifications === "") {
    contents[_LSi] = [];
  } else if (output[_lS] != null && output[_lS][_i] != null) {
    contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(getArrayIfSingleItem(output[_lS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_uO] != null) {
    contents[_UO] = expectString(output[_uO]);
  }
  return contents;
};
var de_ImportImageTask = (output, context) => {
  const contents = {};
  if (output[_arc] != null) {
    contents[_Arc] = expectString(output[_arc]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_h] != null) {
    contents[_H] = expectString(output[_h]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = expectString(output[_iTI]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_lTi] != null) {
    contents[_LTi] = expectString(output[_lTi]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output.snapshotDetailSet === "") {
    contents[_SDn] = [];
  } else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
    contents[_SDn] = de_SnapshotDetailList(getArrayIfSingleItem(output[_sDSn][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.licenseSpecifications === "") {
    contents[_LSi] = [];
  } else if (output[_lS] != null && output[_lS][_i] != null) {
    contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(getArrayIfSingleItem(output[_lS][_i]), context);
  }
  if (output[_uO] != null) {
    contents[_UO] = expectString(output[_uO]);
  }
  if (output[_bM] != null) {
    contents[_BM] = expectString(output[_bM]);
  }
  return contents;
};
var de_ImportImageTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImportImageTask(entry, context);
  });
};
var de_ImportInstanceResult = (output, context) => {
  const contents = {};
  if (output[_cTon] != null) {
    contents[_CTonv] = de_ConversionTask(output[_cTon], context);
  }
  return contents;
};
var de_ImportInstanceTaskDetails = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output.volumes === "") {
    contents[_Vol] = [];
  } else if (output[_vo] != null && output[_vo][_i] != null) {
    contents[_Vol] = de_ImportInstanceVolumeDetailSet(getArrayIfSingleItem(output[_vo][_i]), context);
  }
  return contents;
};
var de_ImportInstanceVolumeDetailItem = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_bCy] != null) {
    contents[_BCyt] = strictParseLong(output[_bCy]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_im] != null) {
    contents[_Im] = de_DiskImageDescription(output[_im], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_vol] != null) {
    contents[_Vo] = de_DiskImageVolumeDescription(output[_vol], context);
  }
  return contents;
};
var de_ImportInstanceVolumeDetailSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImportInstanceVolumeDetailItem(entry, context);
  });
};
var de_ImportKeyPairResult = (output, context) => {
  const contents = {};
  if (output[_kFe] != null) {
    contents[_KFe] = expectString(output[_kFe]);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_kPI] != null) {
    contents[_KPI] = expectString(output[_kPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ImportSnapshotResult = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = expectString(output[_iTI]);
  }
  if (output[_sTD] != null) {
    contents[_STD] = de_SnapshotTaskDetail(output[_sTD], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ImportSnapshotTask = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = expectString(output[_iTI]);
  }
  if (output[_sTD] != null) {
    contents[_STD] = de_SnapshotTaskDetail(output[_sTD], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_ImportSnapshotTaskList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ImportSnapshotTask(entry, context);
  });
};
var de_ImportVolumeResult = (output, context) => {
  const contents = {};
  if (output[_cTon] != null) {
    contents[_CTonv] = de_ConversionTask(output[_cTon], context);
  }
  return contents;
};
var de_ImportVolumeTaskDetails = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_bCy] != null) {
    contents[_BCyt] = strictParseLong(output[_bCy]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_im] != null) {
    contents[_Im] = de_DiskImageDescription(output[_im], context);
  }
  if (output[_vol] != null) {
    contents[_Vo] = de_DiskImageVolumeDescription(output[_vol], context);
  }
  return contents;
};
var de_InferenceAcceleratorInfo = (output, context) => {
  const contents = {};
  if (output.accelerators === "") {
    contents[_Acc] = [];
  } else if (output[_acc] != null && output[_acc][_mem] != null) {
    contents[_Acc] = de_InferenceDeviceInfoList(getArrayIfSingleItem(output[_acc][_mem]), context);
  }
  if (output[_tIMIMB] != null) {
    contents[_TIMIMB] = strictParseInt32(output[_tIMIMB]);
  }
  return contents;
};
var de_InferenceDeviceInfo = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = expectString(output[_man]);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_InferenceDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};
var de_InferenceDeviceInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InferenceDeviceInfo(entry, context);
  });
};
var de_InferenceDeviceMemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseInt32(output[_sIMB]);
  }
  return contents;
};
var de_InsideCidrBlocksStringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Instance = (output, context) => {
  const contents = {};
  if (output[_arc] != null) {
    contents[_Arc] = expectString(output[_arc]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_InstanceBlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = parseBoolean(output[_eSna]);
  }
  if (output[_h] != null) {
    contents[_H] = expectString(output[_h]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfile(output[_iIP], context);
  }
  if (output[_iLn] != null) {
    contents[_ILn] = expectString(output[_iLn]);
  }
  if (output.elasticGpuAssociationSet === "") {
    contents[_EGA] = [];
  } else if (output[_eGASl] != null && output[_eGASl][_i] != null) {
    contents[_EGA] = de_ElasticGpuAssociationList(getArrayIfSingleItem(output[_eGASl][_i]), context);
  }
  if (output.elasticInferenceAcceleratorAssociationSet === "") {
    contents[_EIAAl] = [];
  } else if (output[_eIAASl] != null && output[_eIAASl][_i] != null) {
    contents[_EIAAl] = de_ElasticInferenceAcceleratorAssociationList(getArrayIfSingleItem(output[_eIAASl][_i]), context);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceList(getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = expectString(output[_rDN]);
  }
  if (output[_rDT] != null) {
    contents[_RDT] = expectString(output[_rDT]);
  }
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = parseBoolean(output[_sDC]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = expectString(output[_sIRI]);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = expectString(output[_sNSr]);
  }
  if (output[_sRt] != null) {
    contents[_SRt] = de_StateReason(output[_sRt], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vTi] != null) {
    contents[_VTir] = expectString(output[_vTi]);
  }
  if (output[_cO] != null) {
    contents[_COp] = de_CpuOptions(output[_cO], context);
  }
  if (output[_cRI] != null) {
    contents[_CRI] = expectString(output[_cRI]);
  }
  if (output[_cRSa] != null) {
    contents[_CRS] = de_CapacityReservationSpecificationResponse(output[_cRSa], context);
  }
  if (output[_hO] != null) {
    contents[_HO] = de_HibernationOptions(output[_hO], context);
  }
  if (output.licenseSet === "") {
    contents[_Lic] = [];
  } else if (output[_lSi] != null && output[_lSi][_i] != null) {
    contents[_Lic] = de_LicenseList(getArrayIfSingleItem(output[_lSi][_i]), context);
  }
  if (output[_mO] != null) {
    contents[_MO] = de_InstanceMetadataOptionsResponse(output[_mO], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_EnclaveOptions(output[_eOn], context);
  }
  if (output[_bM] != null) {
    contents[_BM] = expectString(output[_bM]);
  }
  if (output[_pDl] != null) {
    contents[_PDl] = expectString(output[_pDl]);
  }
  if (output[_uO] != null) {
    contents[_UO] = expectString(output[_uO]);
  }
  if (output[_uOUT] != null) {
    contents[_UOUT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uOUT]));
  }
  if (output[_pDNO] != null) {
    contents[_PDNO] = de_PrivateDnsNameOptionsResponse(output[_pDNO], context);
  }
  if (output[_iApv] != null) {
    contents[_IApv] = expectString(output[_iApv]);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = expectString(output[_tSp]);
  }
  if (output[_mOa] != null) {
    contents[_MOa] = de_InstanceMaintenanceOptions(output[_mOa], context);
  }
  if (output[_cIBM] != null) {
    contents[_CIBM] = expectString(output[_cIBM]);
  }
  if (output[_nPO] != null) {
    contents[_NPO] = de_InstanceNetworkPerformanceOptions(output[_nPO], context);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iSnst] != null) {
    contents[_Stat] = de_InstanceState(output[_iSnst], context);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_dNn] != null) {
    contents[_PDNu] = expectString(output[_dNn]);
  }
  if (output[_rea] != null) {
    contents[_STRt] = expectString(output[_rea]);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_aLI] != null) {
    contents[_ALI] = strictParseInt32(output[_aLI]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_lTau] != null) {
    contents[_LTaun] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lTau]));
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_Placement(output[_pla], context);
  }
  if (output[_kI] != null) {
    contents[_KI] = expectString(output[_kI]);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = expectString(output[_rIa]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_Monitoring(output[_mo], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output[_iAp] != null) {
    contents[_PIAu] = expectString(output[_iAp]);
  }
  return contents;
};
var de_InstanceAttachmentEnaSrdSpecification = (output, context) => {
  const contents = {};
  if (output[_eSE] != null) {
    contents[_ESE] = parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_InstanceAttachmentEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};
var de_InstanceAttachmentEnaSrdUdpSpecification = (output, context) => {
  const contents = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = parseBoolean(output[_eSUE]);
  }
  return contents;
};
var de_InstanceAttribute = (output, context) => {
  const contents = {};
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_InstanceBlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_dAT] != null) {
    contents[_DATis] = de_AttributeBooleanValue(output[_dAT], context);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = de_AttributeBooleanValue(output[_eSna], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_EnclaveOptions(output[_eOn], context);
  }
  if (output[_eO] != null) {
    contents[_EO] = de_AttributeBooleanValue(output[_eO], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iISB] != null) {
    contents[_IISB] = de_AttributeValue(output[_iISB], context);
  }
  if (output[_iT] != null) {
    contents[_IT] = de_AttributeValue(output[_iT], context);
  }
  if (output[_ke] != null) {
    contents[_KI] = de_AttributeValue(output[_ke], context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_ra] != null) {
    contents[_RIa] = de_AttributeValue(output[_ra], context);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = de_AttributeValue(output[_rDN], context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = de_AttributeBooleanValue(output[_sDC], context);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = de_AttributeValue(output[_sNSr], context);
  }
  if (output[_uDs] != null) {
    contents[_UD] = de_AttributeValue(output[_uDs], context);
  }
  if (output[_dASi] != null) {
    contents[_DAS] = de_AttributeBooleanValue(output[_dASi], context);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  return contents;
};
var de_InstanceBlockDeviceMapping = (output, context) => {
  const contents = {};
  if (output[_dN] != null) {
    contents[_DN] = expectString(output[_dN]);
  }
  if (output[_eb] != null) {
    contents[_E] = de_EbsInstanceBlockDevice(output[_eb], context);
  }
  return contents;
};
var de_InstanceBlockDeviceMappingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceBlockDeviceMapping(entry, context);
  });
};
var de_InstanceCapacity = (output, context) => {
  const contents = {};
  if (output[_aC] != null) {
    contents[_ACv] = strictParseInt32(output[_aC]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_tC] != null) {
    contents[_TCo] = strictParseInt32(output[_tC]);
  }
  return contents;
};
var de_InstanceConnectEndpointSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ec2InstanceConnectEndpoint(entry, context);
  });
};
var de_InstanceCount = (output, context) => {
  const contents = {};
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_InstanceCountList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceCount(entry, context);
  });
};
var de_InstanceCreditSpecification = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_cCp] != null) {
    contents[_CCp] = expectString(output[_cCp]);
  }
  return contents;
};
var de_InstanceCreditSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceCreditSpecification(entry, context);
  });
};
var de_InstanceEventWindow = (output, context) => {
  const contents = {};
  if (output[_iEWI] != null) {
    contents[_IEWI] = expectString(output[_iEWI]);
  }
  if (output.timeRangeSet === "") {
    contents[_TRi] = [];
  } else if (output[_tRSi] != null && output[_tRSi][_i] != null) {
    contents[_TRi] = de_InstanceEventWindowTimeRangeList(getArrayIfSingleItem(output[_tRSi][_i]), context);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_cEr] != null) {
    contents[_CE] = expectString(output[_cEr]);
  }
  if (output[_aTs] != null) {
    contents[_AT] = de_InstanceEventWindowAssociationTarget(output[_aTs], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_InstanceEventWindowAssociationTarget = (output, context) => {
  const contents = {};
  if (output.instanceIdSet === "") {
    contents[_IIns] = [];
  } else if (output[_iIS] != null && output[_iIS][_i] != null) {
    contents[_IIns] = de_InstanceIdList(getArrayIfSingleItem(output[_iIS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.dedicatedHostIdSet === "") {
    contents[_DHI] = [];
  } else if (output[_dHIS] != null && output[_dHIS][_i] != null) {
    contents[_DHI] = de_DedicatedHostIdList(getArrayIfSingleItem(output[_dHIS][_i]), context);
  }
  return contents;
};
var de_InstanceEventWindowSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceEventWindow(entry, context);
  });
};
var de_InstanceEventWindowStateChange = (output, context) => {
  const contents = {};
  if (output[_iEWI] != null) {
    contents[_IEWI] = expectString(output[_iEWI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_InstanceEventWindowTimeRange = (output, context) => {
  const contents = {};
  if (output[_sWD] != null) {
    contents[_SWD] = expectString(output[_sWD]);
  }
  if (output[_sH] != null) {
    contents[_SH] = strictParseInt32(output[_sH]);
  }
  if (output[_eWD] != null) {
    contents[_EWD] = expectString(output[_eWD]);
  }
  if (output[_eH] != null) {
    contents[_EH] = strictParseInt32(output[_eH]);
  }
  return contents;
};
var de_InstanceEventWindowTimeRangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceEventWindowTimeRange(entry, context);
  });
};
var de_InstanceExportDetails = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_tE] != null) {
    contents[_TE] = expectString(output[_tE]);
  }
  return contents;
};
var de_InstanceFamilyCreditSpecification = (output, context) => {
  const contents = {};
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  if (output[_cCp] != null) {
    contents[_CCp] = expectString(output[_cCp]);
  }
  return contents;
};
var de_InstanceGenerationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceIdsSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceImageMetadata = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_lTau] != null) {
    contents[_LTaun] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lTau]));
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_zI] != null) {
    contents[_ZIo] = expectString(output[_zI]);
  }
  if (output[_iSnst] != null) {
    contents[_Stat] = de_InstanceState(output[_iSnst], context);
  }
  if (output[_iOIn] != null) {
    contents[_OIwn] = expectString(output[_iOIn]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_iM] != null) {
    contents[_IMm] = de_ImageMetadata(output[_iM], context);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_InstanceImageMetadataList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceImageMetadata(entry, context);
  });
};
var de_InstanceIpv4Prefix = (output, context) => {
  const contents = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = expectString(output[_iPpv]);
  }
  return contents;
};
var de_InstanceIpv4PrefixList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceIpv4Prefix(entry, context);
  });
};
var de_InstanceIpv6Address = (output, context) => {
  const contents = {};
  if (output[_iApv] != null) {
    contents[_IApv] = expectString(output[_iApv]);
  }
  if (output[_iPI] != null) {
    contents[_IPIs] = parseBoolean(output[_iPI]);
  }
  return contents;
};
var de_InstanceIpv6AddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceIpv6Address(entry, context);
  });
};
var de_InstanceIpv6Prefix = (output, context) => {
  const contents = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = expectString(output[_iPpvr]);
  }
  return contents;
};
var de_InstanceIpv6PrefixList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceIpv6Prefix(entry, context);
  });
};
var de_InstanceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Instance(entry, context);
  });
};
var de_InstanceMaintenanceOptions = (output, context) => {
  const contents = {};
  if (output[_aRu] != null) {
    contents[_ARu] = expectString(output[_aRu]);
  }
  return contents;
};
var de_InstanceMetadataDefaultsResponse = (output, context) => {
  const contents = {};
  if (output[_hT] != null) {
    contents[_HT] = expectString(output[_hT]);
  }
  if (output[_hPRHL] != null) {
    contents[_HPRHL] = strictParseInt32(output[_hPRHL]);
  }
  if (output[_hE] != null) {
    contents[_HE] = expectString(output[_hE]);
  }
  if (output[_iMT] != null) {
    contents[_IMT] = expectString(output[_iMT]);
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  if (output[_mEM] != null) {
    contents[_MEM] = expectString(output[_mEM]);
  }
  return contents;
};
var de_InstanceMetadataOptionsResponse = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_hT] != null) {
    contents[_HT] = expectString(output[_hT]);
  }
  if (output[_hPRHL] != null) {
    contents[_HPRHL] = strictParseInt32(output[_hPRHL]);
  }
  if (output[_hE] != null) {
    contents[_HE] = expectString(output[_hE]);
  }
  if (output[_hPI] != null) {
    contents[_HPI] = expectString(output[_hPI]);
  }
  if (output[_iMT] != null) {
    contents[_IMT] = expectString(output[_iMT]);
  }
  return contents;
};
var de_InstanceMonitoring = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_Monitoring(output[_mo], context);
  }
  return contents;
};
var de_InstanceMonitoringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceMonitoring(entry, context);
  });
};
var de_InstanceNetworkInterface = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_at] != null) {
    contents[_Att] = de_InstanceNetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_mAa] != null) {
    contents[_MAa] = expectString(output[_mAa]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_InstancePrivateIpAddressList(getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = parseBoolean(output[_sDC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = expectString(output[_iTnt]);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_InstanceIpv4PrefixList(getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_InstanceIpv6PrefixList(getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_cTC] != null) {
    contents[_CTC] = de_ConnectionTrackingSpecificationResponse(output[_cTC], context);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_InstanceNetworkInterfaceAssociation = (output, context) => {
  const contents = {};
  if (output[_cI] != null) {
    contents[_CIa] = expectString(output[_cI]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = expectString(output[_cOI]);
  }
  if (output[_iOIp] != null) {
    contents[_IOI] = expectString(output[_iOIp]);
  }
  if (output[_pDNu] != null) {
    contents[_PDNu] = expectString(output[_pDNu]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  return contents;
};
var de_InstanceNetworkInterfaceAttachment = (output, context) => {
  const contents = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_aIt] != null) {
    contents[_AIt] = expectString(output[_aIt]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = strictParseInt32(output[_dIe]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = strictParseInt32(output[_nCI]);
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_InstanceAttachmentEnaSrdSpecification(output[_eSS], context);
  }
  return contents;
};
var de_InstanceNetworkInterfaceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceNetworkInterface(entry, context);
  });
};
var de_InstanceNetworkInterfaceSpecification = (output, context) => {
  const contents = {};
  if (output[_aPIA] != null) {
    contents[_APIAs] = parseBoolean(output[_aPIA]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = strictParseInt32(output[_dIe]);
  }
  if (output.SecurityGroupId === "") {
    contents[_G] = [];
  } else if (output[_SGIe] != null && output[_SGIe][_SGIe] != null) {
    contents[_G] = de_SecurityGroupIdStringList(getArrayIfSingleItem(output[_SGIe][_SGIe]), context);
  }
  if (output[_iAC] != null) {
    contents[_IAC] = strictParseInt32(output[_iAC]);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_PrivateIpAddressSpecificationList(getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sPIAC] != null) {
    contents[_SPIAC] = strictParseInt32(output[_sPIAC]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_ACIA] != null) {
    contents[_ACIA] = parseBoolean(output[_ACIA]);
  }
  if (output[_ITn] != null) {
    contents[_ITn] = expectString(output[_ITn]);
  }
  if (output[_NCI] != null) {
    contents[_NCI] = strictParseInt32(output[_NCI]);
  }
  if (output.Ipv4Prefix === "") {
    contents[_IPp] = [];
  } else if (output[_IPpvr] != null && output[_IPpvr][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixList(getArrayIfSingleItem(output[_IPpvr][_i]), context);
  }
  if (output[_IPCp] != null) {
    contents[_IPCp] = strictParseInt32(output[_IPCp]);
  }
  if (output.Ipv6Prefix === "") {
    contents[_IP] = [];
  } else if (output[_IPpvre] != null && output[_IPpvre][_i] != null) {
    contents[_IP] = de_Ipv6PrefixList(getArrayIfSingleItem(output[_IPpvre][_i]), context);
  }
  if (output[_IPC] != null) {
    contents[_IPC] = strictParseInt32(output[_IPC]);
  }
  if (output[_PIr] != null) {
    contents[_PIr] = parseBoolean(output[_PIr]);
  }
  if (output[_ESS] != null) {
    contents[_ESS] = de_EnaSrdSpecificationRequest(output[_ESS], context);
  }
  if (output[_CTS] != null) {
    contents[_CTS] = de_ConnectionTrackingSpecificationRequest(output[_CTS], context);
  }
  return contents;
};
var de_InstanceNetworkInterfaceSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceNetworkInterfaceSpecification(entry, context);
  });
};
var de_InstanceNetworkPerformanceOptions = (output, context) => {
  const contents = {};
  if (output[_bW] != null) {
    contents[_BW] = expectString(output[_bW]);
  }
  return contents;
};
var de_InstancePrivateIpAddress = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_prim] != null) {
    contents[_Prim] = parseBoolean(output[_prim]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  return contents;
};
var de_InstancePrivateIpAddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstancePrivateIpAddress(entry, context);
  });
};
var de_InstanceRequirements = (output, context) => {
  const contents = {};
  if (output[_vCC] != null) {
    contents[_VCC] = de_VCpuCountRange(output[_vCC], context);
  }
  if (output[_mMB] != null) {
    contents[_MMB] = de_MemoryMiB(output[_mMB], context);
  }
  if (output.cpuManufacturerSet === "") {
    contents[_CM] = [];
  } else if (output[_cMS] != null && output[_cMS][_i] != null) {
    contents[_CM] = de_CpuManufacturerSet(getArrayIfSingleItem(output[_cMS][_i]), context);
  }
  if (output[_mGBPVC] != null) {
    contents[_MGBPVC] = de_MemoryGiBPerVCpu(output[_mGBPVC], context);
  }
  if (output.excludedInstanceTypeSet === "") {
    contents[_EIT] = [];
  } else if (output[_eITSx] != null && output[_eITSx][_i] != null) {
    contents[_EIT] = de_ExcludedInstanceTypeSet(getArrayIfSingleItem(output[_eITSx][_i]), context);
  }
  if (output.instanceGenerationSet === "") {
    contents[_IG] = [];
  } else if (output[_iGSn] != null && output[_iGSn][_i] != null) {
    contents[_IG] = de_InstanceGenerationSet(getArrayIfSingleItem(output[_iGSn][_i]), context);
  }
  if (output[_sMPPOLP] != null) {
    contents[_SMPPOLP] = strictParseInt32(output[_sMPPOLP]);
  }
  if (output[_oDMPPOLP] != null) {
    contents[_ODMPPOLP] = strictParseInt32(output[_oDMPPOLP]);
  }
  if (output[_bMa] != null) {
    contents[_BMa] = expectString(output[_bMa]);
  }
  if (output[_bP] != null) {
    contents[_BP] = expectString(output[_bP]);
  }
  if (output[_rHS] != null) {
    contents[_RHS] = parseBoolean(output[_rHS]);
  }
  if (output[_nIC] != null) {
    contents[_NIC] = de_NetworkInterfaceCount(output[_nIC], context);
  }
  if (output[_lSo] != null) {
    contents[_LSo] = expectString(output[_lSo]);
  }
  if (output.localStorageTypeSet === "") {
    contents[_LST] = [];
  } else if (output[_lSTS] != null && output[_lSTS][_i] != null) {
    contents[_LST] = de_LocalStorageTypeSet(getArrayIfSingleItem(output[_lSTS][_i]), context);
  }
  if (output[_tLSGB] != null) {
    contents[_TLSGB] = de_TotalLocalStorageGB(output[_tLSGB], context);
  }
  if (output[_bEBM] != null) {
    contents[_BEBM] = de_BaselineEbsBandwidthMbps(output[_bEBM], context);
  }
  if (output.acceleratorTypeSet === "") {
    contents[_ATc] = [];
  } else if (output[_aTSc] != null && output[_aTSc][_i] != null) {
    contents[_ATc] = de_AcceleratorTypeSet(getArrayIfSingleItem(output[_aTSc][_i]), context);
  }
  if (output[_aCc] != null) {
    contents[_ACc] = de_AcceleratorCount(output[_aCc], context);
  }
  if (output.acceleratorManufacturerSet === "") {
    contents[_AM] = [];
  } else if (output[_aMS] != null && output[_aMS][_i] != null) {
    contents[_AM] = de_AcceleratorManufacturerSet(getArrayIfSingleItem(output[_aMS][_i]), context);
  }
  if (output.acceleratorNameSet === "") {
    contents[_ANc] = [];
  } else if (output[_aNS] != null && output[_aNS][_i] != null) {
    contents[_ANc] = de_AcceleratorNameSet(getArrayIfSingleItem(output[_aNS][_i]), context);
  }
  if (output[_aTMMB] != null) {
    contents[_ATMMB] = de_AcceleratorTotalMemoryMiB(output[_aTMMB], context);
  }
  if (output[_nBGe] != null) {
    contents[_NBGe] = de_NetworkBandwidthGbps(output[_nBGe], context);
  }
  if (output.allowedInstanceTypeSet === "") {
    contents[_AIT] = [];
  } else if (output[_aITS] != null && output[_aITS][_i] != null) {
    contents[_AIT] = de_AllowedInstanceTypeSet(getArrayIfSingleItem(output[_aITS][_i]), context);
  }
  if (output[_mSPAPOOODP] != null) {
    contents[_MSPAPOOODP] = strictParseInt32(output[_mSPAPOOODP]);
  }
  if (output[_bPF] != null) {
    contents[_BPF] = de_BaselinePerformanceFactors(output[_bPF], context);
  }
  return contents;
};
var de_InstanceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceTopology(entry, context);
  });
};
var de_InstanceState = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = strictParseInt32(output[_co]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_InstanceStateChange = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_cSu] != null) {
    contents[_CSu] = de_InstanceState(output[_cSu], context);
  }
  if (output[_pS] != null) {
    contents[_PSr] = de_InstanceState(output[_pS], context);
  }
  return contents;
};
var de_InstanceStateChangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceStateChange(entry, context);
  });
};
var de_InstanceStatus = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  if (output.eventsSet === "") {
    contents[_Ev] = [];
  } else if (output[_eSv] != null && output[_eSv][_i] != null) {
    contents[_Ev] = de_InstanceStatusEventList(getArrayIfSingleItem(output[_eSv][_i]), context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iSnst] != null) {
    contents[_ISnst] = de_InstanceState(output[_iSnst], context);
  }
  if (output[_iSnsta] != null) {
    contents[_ISnsta] = de_InstanceStatusSummary(output[_iSnsta], context);
  }
  if (output[_sSy] != null) {
    contents[_SSy] = de_InstanceStatusSummary(output[_sSy], context);
  }
  if (output[_aES] != null) {
    contents[_AES] = de_EbsStatusSummary(output[_aES], context);
  }
  return contents;
};
var de_InstanceStatusDetails = (output, context) => {
  const contents = {};
  if (output[_iSmp] != null) {
    contents[_ISmp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_iSmp]));
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_InstanceStatusDetailsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceStatusDetails(entry, context);
  });
};
var de_InstanceStatusEvent = (output, context) => {
  const contents = {};
  if (output[_iEI] != null) {
    contents[_IEI] = expectString(output[_iEI]);
  }
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_nAo] != null) {
    contents[_NAo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nAo]));
  }
  if (output[_nB] != null) {
    contents[_NB] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nB]));
  }
  if (output[_nBD] != null) {
    contents[_NBD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nBD]));
  }
  return contents;
};
var de_InstanceStatusEventList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceStatusEvent(entry, context);
  });
};
var de_InstanceStatusList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceStatus(entry, context);
  });
};
var de_InstanceStatusSummary = (output, context) => {
  const contents = {};
  if (output.details === "") {
    contents[_Det] = [];
  } else if (output[_det] != null && output[_det][_i] != null) {
    contents[_Det] = de_InstanceStatusDetailsList(getArrayIfSingleItem(output[_det][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_InstanceStorageInfo = (output, context) => {
  const contents = {};
  if (output[_tSIGB] != null) {
    contents[_TSIGB] = strictParseLong(output[_tSIGB]);
  }
  if (output.disks === "") {
    contents[_Dis] = [];
  } else if (output[_dis] != null && output[_dis][_i] != null) {
    contents[_Dis] = de_DiskInfoList(getArrayIfSingleItem(output[_dis][_i]), context);
  }
  if (output[_nS] != null) {
    contents[_NS] = expectString(output[_nS]);
  }
  if (output[_eSn] != null) {
    contents[_ESnc] = expectString(output[_eSn]);
  }
  return contents;
};
var de_InstanceTagKeySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceTagNotificationAttribute = (output, context) => {
  const contents = {};
  if (output.instanceTagKeySet === "") {
    contents[_ITK] = [];
  } else if (output[_iTKS] != null && output[_iTKS][_i] != null) {
    contents[_ITK] = de_InstanceTagKeySet(getArrayIfSingleItem(output[_iTKS][_i]), context);
  }
  if (output[_iATOI] != null) {
    contents[_IATOI] = parseBoolean(output[_iATOI]);
  }
  return contents;
};
var de_InstanceTopology = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output.networkNodeSet === "") {
    contents[_NN] = [];
  } else if (output[_nNS] != null && output[_nNS][_i] != null) {
    contents[_NN] = de_NetworkNodesList(getArrayIfSingleItem(output[_nNS][_i]), context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_zI] != null) {
    contents[_ZIo] = expectString(output[_zI]);
  }
  return contents;
};
var de_InstanceTypeInfo = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_cGur] != null) {
    contents[_CGur] = parseBoolean(output[_cGur]);
  }
  if (output[_fTE] != null) {
    contents[_FTE] = parseBoolean(output[_fTE]);
  }
  if (output.supportedUsageClasses === "") {
    contents[_SUC] = [];
  } else if (output[_sUC] != null && output[_sUC][_i] != null) {
    contents[_SUC] = de_UsageClassTypeList(getArrayIfSingleItem(output[_sUC][_i]), context);
  }
  if (output.supportedRootDeviceTypes === "") {
    contents[_SRDT] = [];
  } else if (output[_sRDT] != null && output[_sRDT][_i] != null) {
    contents[_SRDT] = de_RootDeviceTypeList(getArrayIfSingleItem(output[_sRDT][_i]), context);
  }
  if (output.supportedVirtualizationTypes === "") {
    contents[_SVT] = [];
  } else if (output[_sVT] != null && output[_sVT][_i] != null) {
    contents[_SVT] = de_VirtualizationTypeList(getArrayIfSingleItem(output[_sVT][_i]), context);
  }
  if (output[_bMa] != null) {
    contents[_BMa] = parseBoolean(output[_bMa]);
  }
  if (output[_h] != null) {
    contents[_H] = expectString(output[_h]);
  }
  if (output[_pIr] != null) {
    contents[_PIro] = de_ProcessorInfo(output[_pIr], context);
  }
  if (output[_vCIp] != null) {
    contents[_VCIpu] = de_VCpuInfo(output[_vCIp], context);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_MemoryInfo(output[_mIe], context);
  }
  if (output[_iSSn] != null) {
    contents[_ISS] = parseBoolean(output[_iSSn]);
  }
  if (output[_iSI] != null) {
    contents[_ISIn] = de_InstanceStorageInfo(output[_iSI], context);
  }
  if (output[_eIb] != null) {
    contents[_EIb] = de_EbsInfo(output[_eIb], context);
  }
  if (output[_nIet] != null) {
    contents[_NIetw] = de_NetworkInfo(output[_nIet], context);
  }
  if (output[_gIp] != null) {
    contents[_GIp] = de_GpuInfo(output[_gIp], context);
  }
  if (output[_fIp] != null) {
    contents[_FIpg] = de_FpgaInfo(output[_fIp], context);
  }
  if (output[_pGI] != null) {
    contents[_PGI] = de_PlacementGroupInfo(output[_pGI], context);
  }
  if (output[_iAI] != null) {
    contents[_IAIn] = de_InferenceAcceleratorInfo(output[_iAI], context);
  }
  if (output[_hSi] != null) {
    contents[_HS] = parseBoolean(output[_hSi]);
  }
  if (output[_bPS] != null) {
    contents[_BPS] = parseBoolean(output[_bPS]);
  }
  if (output[_dHS] != null) {
    contents[_DHS] = parseBoolean(output[_dHS]);
  }
  if (output[_aRSu] != null) {
    contents[_ARS] = parseBoolean(output[_aRSu]);
  }
  if (output.supportedBootModes === "") {
    contents[_SBM] = [];
  } else if (output[_sBM] != null && output[_sBM][_i] != null) {
    contents[_SBM] = de_BootModeTypeList(getArrayIfSingleItem(output[_sBM][_i]), context);
  }
  if (output[_nES] != null) {
    contents[_NES] = expectString(output[_nES]);
  }
  if (output[_nTS] != null) {
    contents[_NTS] = expectString(output[_nTS]);
  }
  if (output[_nTI] != null) {
    contents[_NTI] = de_NitroTpmInfo(output[_nTI], context);
  }
  if (output[_mAIe] != null) {
    contents[_MAIe] = de_MediaAcceleratorInfo(output[_mAIe], context);
  }
  if (output[_nIeu] != null) {
    contents[_NIeu] = de_NeuronInfo(output[_nIeu], context);
  }
  if (output[_pSh] != null) {
    contents[_PSh] = expectString(output[_pSh]);
  }
  return contents;
};
var de_InstanceTypeInfoFromInstanceRequirements = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  return contents;
};
var de_InstanceTypeInfoFromInstanceRequirementsSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceTypeInfoFromInstanceRequirements(entry, context);
  });
};
var de_InstanceTypeInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceTypeInfo(entry, context);
  });
};
var de_InstanceTypeOffering = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_lTo] != null) {
    contents[_LT] = expectString(output[_lTo]);
  }
  if (output[_lo] != null) {
    contents[_Lo] = expectString(output[_lo]);
  }
  return contents;
};
var de_InstanceTypeOfferingsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceTypeOffering(entry, context);
  });
};
var de_InstanceTypesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_InstanceUsage = (output, context) => {
  const contents = {};
  if (output[_aIc] != null) {
    contents[_AIcc] = expectString(output[_aIc]);
  }
  if (output[_uIC] != null) {
    contents[_UIC] = strictParseInt32(output[_uIC]);
  }
  return contents;
};
var de_InstanceUsageSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InstanceUsage(entry, context);
  });
};
var de_InternetGateway = (output, context) => {
  const contents = {};
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_InternetGatewayAttachmentList(getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_iGI] != null) {
    contents[_IGI] = expectString(output[_iGI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_InternetGatewayAttachment = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_InternetGatewayAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InternetGatewayAttachment(entry, context);
  });
};
var de_InternetGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_InternetGateway(entry, context);
  });
};
var de_IpAddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Ipam = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = expectString(output[_iIp]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = expectString(output[_iRp]);
  }
  if (output[_pDSI] != null) {
    contents[_PDSI] = expectString(output[_pDSI]);
  }
  if (output[_pDSIr] != null) {
    contents[_PDSIr] = expectString(output[_pDSIr]);
  }
  if (output[_sCc] != null) {
    contents[_SCc] = strictParseInt32(output[_sCc]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.operatingRegionSet === "") {
    contents[_OR] = [];
  } else if (output[_oRS] != null && output[_oRS][_i] != null) {
    contents[_OR] = de_IpamOperatingRegionSet(getArrayIfSingleItem(output[_oRS][_i]), context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_dRDI] != null) {
    contents[_DRDI] = expectString(output[_dRDI]);
  }
  if (output[_dRDAI] != null) {
    contents[_DRDAI] = expectString(output[_dRDAI]);
  }
  if (output[_rDAC] != null) {
    contents[_RDAC] = strictParseInt32(output[_rDAC]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = expectString(output[_sMt]);
  }
  if (output[_tie] != null) {
    contents[_Ti] = expectString(output[_tie]);
  }
  if (output[_ePG] != null) {
    contents[_EPG] = parseBoolean(output[_ePG]);
  }
  return contents;
};
var de_IpamAddressHistoryRecord = (output, context) => {
  const contents = {};
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = expectString(output[_rR]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = expectString(output[_rCe]);
  }
  if (output[_rNes] != null) {
    contents[_RNes] = expectString(output[_rNes]);
  }
  if (output[_rCS] != null) {
    contents[_RCS] = expectString(output[_rCS]);
  }
  if (output[_rOSe] != null) {
    contents[_ROS] = expectString(output[_rOSe]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sST] != null) {
    contents[_SST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sST]));
  }
  if (output[_sET] != null) {
    contents[_SET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sET]));
  }
  return contents;
};
var de_IpamAddressHistoryRecordSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamAddressHistoryRecord(entry, context);
  });
};
var de_IpamDiscoveredAccount = (output, context) => {
  const contents = {};
  if (output[_aIc] != null) {
    contents[_AIcc] = expectString(output[_aIc]);
  }
  if (output[_dR] != null) {
    contents[_DRi] = expectString(output[_dR]);
  }
  if (output[_fR] != null) {
    contents[_FR] = de_IpamDiscoveryFailureReason(output[_fR], context);
  }
  if (output[_lADT] != null) {
    contents[_LADT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lADT]));
  }
  if (output[_lSDT] != null) {
    contents[_LSDT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lSDT]));
  }
  if (output[_oUI] != null) {
    contents[_OUI] = expectString(output[_oUI]);
  }
  return contents;
};
var de_IpamDiscoveredAccountSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamDiscoveredAccount(entry, context);
  });
};
var de_IpamDiscoveredPublicAddress = (output, context) => {
  const contents = {};
  if (output[_iRDI] != null) {
    contents[_IRDI] = expectString(output[_iRDI]);
  }
  if (output[_aRd] != null) {
    contents[_ARd] = expectString(output[_aRd]);
  }
  if (output[_ad] != null) {
    contents[_Ad] = expectString(output[_ad]);
  }
  if (output[_aOI] != null) {
    contents[_AOI] = expectString(output[_aOI]);
  }
  if (output[_aAId] != null) {
    contents[_AAId] = expectString(output[_aAId]);
  }
  if (output[_aSs] != null) {
    contents[_ASss] = expectString(output[_aSs]);
  }
  if (output[_aTd] != null) {
    contents[_ATddre] = expectString(output[_aTd]);
  }
  if (output[_se] != null) {
    contents[_Se] = expectString(output[_se]);
  }
  if (output[_sRe] != null) {
    contents[_SRerv] = expectString(output[_sRe]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_pIPI] != null) {
    contents[_PIPI] = expectString(output[_pIPI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_nID] != null) {
    contents[_NID] = expectString(output[_nID]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_ta] != null) {
    contents[_Ta] = de_IpamPublicAddressTags(output[_ta], context);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_IpamPublicAddressSecurityGroupList(getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_sTa] != null) {
    contents[_STa] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sTa]));
  }
  return contents;
};
var de_IpamDiscoveredPublicAddressSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamDiscoveredPublicAddress(entry, context);
  });
};
var de_IpamDiscoveredResourceCidr = (output, context) => {
  const contents = {};
  if (output[_iRDI] != null) {
    contents[_IRDI] = expectString(output[_iRDI]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = expectString(output[_rR]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = expectString(output[_rCe]);
  }
  if (output[_iSpo] != null) {
    contents[_ISpo] = expectString(output[_iSpo]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output.resourceTagSet === "") {
    contents[_RTesou] = [];
  } else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
    contents[_RTesou] = de_IpamResourceTagList(getArrayIfSingleItem(output[_rTSe][_i]), context);
  }
  if (output[_iU] != null) {
    contents[_IUp] = strictParseFloat(output[_iU]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_nIASet] != null) {
    contents[_NIASet] = expectString(output[_nIASet]);
  }
  if (output[_sTa] != null) {
    contents[_STa] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sTa]));
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  return contents;
};
var de_IpamDiscoveredResourceCidrSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamDiscoveredResourceCidr(entry, context);
  });
};
var de_IpamDiscoveryFailureReason = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_IpamExternalResourceVerificationToken = (output, context) => {
  const contents = {};
  if (output[_iERVTI] != null) {
    contents[_IERVTI] = expectString(output[_iERVTI]);
  }
  if (output[_iERVTA] != null) {
    contents[_IERVTA] = expectString(output[_iERVTA]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = expectString(output[_iIp]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = expectString(output[_iRp]);
  }
  if (output[_tV] != null) {
    contents[_TVo] = expectString(output[_tV]);
  }
  if (output[_tN] != null) {
    contents[_TN] = expectString(output[_tN]);
  }
  if (output[_nAo] != null) {
    contents[_NAo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nAo]));
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_IpamExternalResourceVerificationTokenSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamExternalResourceVerificationToken(entry, context);
  });
};
var de_IpamOperatingRegion = (output, context) => {
  const contents = {};
  if (output[_rNe] != null) {
    contents[_RN] = expectString(output[_rNe]);
  }
  return contents;
};
var de_IpamOperatingRegionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamOperatingRegion(entry, context);
  });
};
var de_IpamOrganizationalUnitExclusion = (output, context) => {
  const contents = {};
  if (output[_oEP] != null) {
    contents[_OEP] = expectString(output[_oEP]);
  }
  return contents;
};
var de_IpamOrganizationalUnitExclusionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamOrganizationalUnitExclusion(entry, context);
  });
};
var de_IpamPool = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iPIp] != null) {
    contents[_IPI] = expectString(output[_iPIp]);
  }
  if (output[_sIPI] != null) {
    contents[_SIPI] = expectString(output[_sIPI]);
  }
  if (output[_iPAp] != null) {
    contents[_IPApa] = expectString(output[_iPAp]);
  }
  if (output[_iSA] != null) {
    contents[_ISA] = expectString(output[_iSA]);
  }
  if (output[_iST] != null) {
    contents[_ISTp] = expectString(output[_iST]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = expectString(output[_iRp]);
  }
  if (output[_loc] != null) {
    contents[_L] = expectString(output[_loc]);
  }
  if (output[_pDoo] != null) {
    contents[_PDo] = strictParseInt32(output[_pDoo]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = expectString(output[_sMt]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_aIu] != null) {
    contents[_AIu] = parseBoolean(output[_aIu]);
  }
  if (output[_pAu] != null) {
    contents[_PA] = parseBoolean(output[_pAu]);
  }
  if (output[_aF] != null) {
    contents[_AF] = expectString(output[_aF]);
  }
  if (output[_aMNL] != null) {
    contents[_AMNL] = strictParseInt32(output[_aMNL]);
  }
  if (output[_aMNLl] != null) {
    contents[_AMNLl] = strictParseInt32(output[_aMNLl]);
  }
  if (output[_aDNL] != null) {
    contents[_ADNL] = strictParseInt32(output[_aDNL]);
  }
  if (output.allocationResourceTagSet === "") {
    contents[_ARTl] = [];
  } else if (output[_aRTS] != null && output[_aRTS][_i] != null) {
    contents[_ARTl] = de_IpamResourceTagList(getArrayIfSingleItem(output[_aRTS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = expectString(output[_aSw]);
  }
  if (output[_pIS] != null) {
    contents[_PIS] = expectString(output[_pIS]);
  }
  if (output[_sRo] != null) {
    contents[_SRo] = de_IpamPoolSourceResource(output[_sRo], context);
  }
  return contents;
};
var de_IpamPoolAllocation = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_iPAI] != null) {
    contents[_IPAI] = expectString(output[_iPAI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = expectString(output[_rR]);
  }
  if (output[_rO] != null) {
    contents[_ROe] = expectString(output[_rO]);
  }
  return contents;
};
var de_IpamPoolAllocationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamPoolAllocation(entry, context);
  });
};
var de_IpamPoolCidr = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_fR] != null) {
    contents[_FR] = de_IpamPoolCidrFailureReason(output[_fR], context);
  }
  if (output[_iPCI] != null) {
    contents[_IPCI] = expectString(output[_iPCI]);
  }
  if (output[_nL] != null) {
    contents[_NL] = strictParseInt32(output[_nL]);
  }
  return contents;
};
var de_IpamPoolCidrFailureReason = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_IpamPoolCidrSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamPoolCidr(entry, context);
  });
};
var de_IpamPoolSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamPool(entry, context);
  });
};
var de_IpamPoolSourceResource = (output, context) => {
  const contents = {};
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = expectString(output[_rR]);
  }
  if (output[_rO] != null) {
    contents[_ROe] = expectString(output[_rO]);
  }
  return contents;
};
var de_IpamPublicAddressSecurityGroup = (output, context) => {
  const contents = {};
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  return contents;
};
var de_IpamPublicAddressSecurityGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamPublicAddressSecurityGroup(entry, context);
  });
};
var de_IpamPublicAddressTag = (output, context) => {
  const contents = {};
  if (output[_k] != null) {
    contents[_Ke] = expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_IpamPublicAddressTagList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamPublicAddressTag(entry, context);
  });
};
var de_IpamPublicAddressTags = (output, context) => {
  const contents = {};
  if (output.eipTagSet === "") {
    contents[_ETi] = [];
  } else if (output[_eTSi] != null && output[_eTSi][_i] != null) {
    contents[_ETi] = de_IpamPublicAddressTagList(getArrayIfSingleItem(output[_eTSi][_i]), context);
  }
  return contents;
};
var de_IpamResourceCidr = (output, context) => {
  const contents = {};
  if (output[_iIp] != null) {
    contents[_IIp] = expectString(output[_iIp]);
  }
  if (output[_iSIp] != null) {
    contents[_ISI] = expectString(output[_iSIp]);
  }
  if (output[_iPIp] != null) {
    contents[_IPI] = expectString(output[_iPIp]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = expectString(output[_rR]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rNes] != null) {
    contents[_RNes] = expectString(output[_rNes]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = expectString(output[_rCe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output.resourceTagSet === "") {
    contents[_RTesou] = [];
  } else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
    contents[_RTesou] = de_IpamResourceTagList(getArrayIfSingleItem(output[_rTSe][_i]), context);
  }
  if (output[_iU] != null) {
    contents[_IUp] = strictParseFloat(output[_iU]);
  }
  if (output[_cSo] != null) {
    contents[_CSo] = expectString(output[_cSo]);
  }
  if (output[_mSa] != null) {
    contents[_MSa] = expectString(output[_mSa]);
  }
  if (output[_oSv] != null) {
    contents[_OSv] = expectString(output[_oSv]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  return contents;
};
var de_IpamResourceCidrSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamResourceCidr(entry, context);
  });
};
var de_IpamResourceDiscovery = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iRDI] != null) {
    contents[_IRDI] = expectString(output[_iRDI]);
  }
  if (output[_iRDAp] != null) {
    contents[_IRDApa] = expectString(output[_iRDAp]);
  }
  if (output[_iRDR] != null) {
    contents[_IRDR] = expectString(output[_iRDR]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.operatingRegionSet === "") {
    contents[_OR] = [];
  } else if (output[_oRS] != null && output[_oRS][_i] != null) {
    contents[_OR] = de_IpamOperatingRegionSet(getArrayIfSingleItem(output[_oRS][_i]), context);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = parseBoolean(output[_iDs]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.organizationalUnitExclusionSet === "") {
    contents[_OUE] = [];
  } else if (output[_oUES] != null && output[_oUES][_i] != null) {
    contents[_OUE] = de_IpamOrganizationalUnitExclusionSet(getArrayIfSingleItem(output[_oUES][_i]), context);
  }
  return contents;
};
var de_IpamResourceDiscoveryAssociation = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iRDAI] != null) {
    contents[_IRDAIp] = expectString(output[_iRDAI]);
  }
  if (output[_iRDAA] != null) {
    contents[_IRDAA] = expectString(output[_iRDAA]);
  }
  if (output[_iRDI] != null) {
    contents[_IRDI] = expectString(output[_iRDI]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = expectString(output[_iIp]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = expectString(output[_iRp]);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = parseBoolean(output[_iDs]);
  }
  if (output[_rDS] != null) {
    contents[_RDS] = expectString(output[_rDS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_IpamResourceDiscoveryAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamResourceDiscoveryAssociation(entry, context);
  });
};
var de_IpamResourceDiscoverySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamResourceDiscovery(entry, context);
  });
};
var de_IpamResourceTag = (output, context) => {
  const contents = {};
  if (output[_k] != null) {
    contents[_Ke] = expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_IpamResourceTagList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamResourceTag(entry, context);
  });
};
var de_IpamScope = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iSIp] != null) {
    contents[_ISI] = expectString(output[_iSIp]);
  }
  if (output[_iSA] != null) {
    contents[_ISA] = expectString(output[_iSA]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = expectString(output[_iRp]);
  }
  if (output[_iST] != null) {
    contents[_ISTp] = expectString(output[_iST]);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = parseBoolean(output[_iDs]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_pCo] != null) {
    contents[_PCoo] = strictParseInt32(output[_pCo]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_IpamScopeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpamScope(entry, context);
  });
};
var de_IpamSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipam(entry, context);
  });
};
var de_IpPermission = (output, context) => {
  const contents = {};
  if (output[_iPpr] != null) {
    contents[_IPpr] = expectString(output[_iPpr]);
  }
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  if (output.groups === "") {
    contents[_UIGP] = [];
  } else if (output[_gr] != null && output[_gr][_i] != null) {
    contents[_UIGP] = de_UserIdGroupPairList(getArrayIfSingleItem(output[_gr][_i]), context);
  }
  if (output.ipRanges === "") {
    contents[_IRp] = [];
  } else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
    contents[_IRp] = de_IpRangeList(getArrayIfSingleItem(output[_iRpa][_i]), context);
  }
  if (output.ipv6Ranges === "") {
    contents[_IRpv] = [];
  } else if (output[_iRpv] != null && output[_iRpv][_i] != null) {
    contents[_IRpv] = de_Ipv6RangeList(getArrayIfSingleItem(output[_iRpv][_i]), context);
  }
  if (output.prefixListIds === "") {
    contents[_PLIr] = [];
  } else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
    contents[_PLIr] = de_PrefixListIdList(getArrayIfSingleItem(output[_pLIr][_i]), context);
  }
  return contents;
};
var de_IpPermissionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpPermission(entry, context);
  });
};
var de_IpPrefixList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_IpRange = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_cIi] != null) {
    contents[_CIi] = expectString(output[_cIi]);
  }
  return contents;
};
var de_IpRangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_IpRange(entry, context);
  });
};
var de_IpRanges = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Ipv4PrefixesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv4PrefixSpecification(entry, context);
  });
};
var de_Ipv4PrefixList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv4PrefixSpecificationRequest(entry, context);
  });
};
var de_Ipv4PrefixListResponse = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv4PrefixSpecificationResponse(entry, context);
  });
};
var de_Ipv4PrefixSpecification = (output, context) => {
  const contents = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = expectString(output[_iPpv]);
  }
  return contents;
};
var de_Ipv4PrefixSpecificationRequest = (output, context) => {
  const contents = {};
  if (output[_IPpvr] != null) {
    contents[_IPpvr] = expectString(output[_IPpvr]);
  }
  return contents;
};
var de_Ipv4PrefixSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = expectString(output[_iPpv]);
  }
  return contents;
};
var de_Ipv6AddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Ipv6CidrAssociation = (output, context) => {
  const contents = {};
  if (output[_iCp] != null) {
    contents[_ICp] = expectString(output[_iCp]);
  }
  if (output[_aRs] != null) {
    contents[_ARs] = expectString(output[_aRs]);
  }
  return contents;
};
var de_Ipv6CidrAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6CidrAssociation(entry, context);
  });
};
var de_Ipv6CidrBlock = (output, context) => {
  const contents = {};
  if (output[_iCB] != null) {
    contents[_ICB] = expectString(output[_iCB]);
  }
  return contents;
};
var de_Ipv6CidrBlockSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6CidrBlock(entry, context);
  });
};
var de_Ipv6Pool = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.poolCidrBlockSet === "") {
    contents[_PCBo] = [];
  } else if (output[_pCBS] != null && output[_pCBS][_i] != null) {
    contents[_PCBo] = de_PoolCidrBlocksSet(getArrayIfSingleItem(output[_pCBS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_Ipv6PoolSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6Pool(entry, context);
  });
};
var de_Ipv6PrefixesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6PrefixSpecification(entry, context);
  });
};
var de_Ipv6PrefixList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6PrefixSpecificationRequest(entry, context);
  });
};
var de_Ipv6PrefixListResponse = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6PrefixSpecificationResponse(entry, context);
  });
};
var de_Ipv6PrefixSpecification = (output, context) => {
  const contents = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = expectString(output[_iPpvr]);
  }
  return contents;
};
var de_Ipv6PrefixSpecificationRequest = (output, context) => {
  const contents = {};
  if (output[_IPpvre] != null) {
    contents[_IPpvre] = expectString(output[_IPpvre]);
  }
  return contents;
};
var de_Ipv6PrefixSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = expectString(output[_iPpvr]);
  }
  return contents;
};
var de_Ipv6Range = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_cIid] != null) {
    contents[_CIid] = expectString(output[_cIid]);
  }
  return contents;
};
var de_Ipv6RangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Ipv6Range(entry, context);
  });
};
var de_KeyPair = (output, context) => {
  const contents = {};
  if (output[_kPI] != null) {
    contents[_KPI] = expectString(output[_kPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_kFe] != null) {
    contents[_KFe] = expectString(output[_kFe]);
  }
  if (output[_kM] != null) {
    contents[_KM] = expectString(output[_kM]);
  }
  return contents;
};
var de_KeyPairInfo = (output, context) => {
  const contents = {};
  if (output[_kPI] != null) {
    contents[_KPI] = expectString(output[_kPI]);
  }
  if (output[_kT] != null) {
    contents[_KT] = expectString(output[_kT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pK] != null) {
    contents[_PK] = expectString(output[_pK]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_kFe] != null) {
    contents[_KFe] = expectString(output[_kFe]);
  }
  return contents;
};
var de_KeyPairList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KeyPairInfo(entry, context);
  });
};
var de_LastError = (output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  return contents;
};
var de_LaunchPermission = (output, context) => {
  const contents = {};
  if (output[_oAr] != null) {
    contents[_OAr] = expectString(output[_oAr]);
  }
  if (output[_oUA] != null) {
    contents[_OUA] = expectString(output[_oUA]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = expectString(output[_uI]);
  }
  if (output[_g] != null) {
    contents[_Gr] = expectString(output[_g]);
  }
  return contents;
};
var de_LaunchPermissionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchPermission(entry, context);
  });
};
var de_LaunchSpecification = (output, context) => {
  const contents = {};
  if (output[_uDs] != null) {
    contents[_UD] = expectString(output[_uDs]);
  }
  if (output[_aTdd] != null) {
    contents[_ATd] = expectString(output[_aTdd]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_kI] != null) {
    contents[_KI] = expectString(output[_kI]);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_SpotPlacement(output[_pla], context);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = expectString(output[_rIa]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_RunInstancesMonitoringEnabled(output[_mo], context);
  }
  return contents;
};
var de_LaunchSpecsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotFleetLaunchSpecification(entry, context);
  });
};
var de_LaunchTemplate = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_cBr] != null) {
    contents[_CBr] = expectString(output[_cBr]);
  }
  if (output[_dVN] != null) {
    contents[_DVN] = strictParseLong(output[_dVN]);
  }
  if (output[_lVN] != null) {
    contents[_LVN] = strictParseLong(output[_lVN]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_LaunchTemplateAndOverridesResponse = (output, context) => {
  const contents = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output[_ov] != null) {
    contents[_Ov] = de_FleetLaunchTemplateOverrides(output[_ov], context);
  }
  return contents;
};
var de_LaunchTemplateBlockDeviceMapping = (output, context) => {
  const contents = {};
  if (output[_dN] != null) {
    contents[_DN] = expectString(output[_dN]);
  }
  if (output[_vN] != null) {
    contents[_VN] = expectString(output[_vN]);
  }
  if (output[_eb] != null) {
    contents[_E] = de_LaunchTemplateEbsBlockDevice(output[_eb], context);
  }
  if (output[_nD] != null) {
    contents[_ND] = expectString(output[_nD]);
  }
  return contents;
};
var de_LaunchTemplateBlockDeviceMappingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateBlockDeviceMapping(entry, context);
  });
};
var de_LaunchTemplateCapacityReservationSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_cRP] != null) {
    contents[_CRP] = expectString(output[_cRP]);
  }
  if (output[_cRT] != null) {
    contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT], context);
  }
  return contents;
};
var de_LaunchTemplateConfig = (output, context) => {
  const contents = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output.overrides === "") {
    contents[_Ov] = [];
  } else if (output[_ov] != null && output[_ov][_i] != null) {
    contents[_Ov] = de_LaunchTemplateOverridesList(getArrayIfSingleItem(output[_ov][_i]), context);
  }
  return contents;
};
var de_LaunchTemplateConfigList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateConfig(entry, context);
  });
};
var de_LaunchTemplateCpuOptions = (output, context) => {
  const contents = {};
  if (output[_cCo] != null) {
    contents[_CC] = strictParseInt32(output[_cCo]);
  }
  if (output[_tPC] != null) {
    contents[_TPC] = strictParseInt32(output[_tPC]);
  }
  if (output[_aSS] != null) {
    contents[_ASS] = expectString(output[_aSS]);
  }
  return contents;
};
var de_LaunchTemplateEbsBlockDevice = (output, context) => {
  const contents = {};
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_io] != null) {
    contents[_Io] = strictParseInt32(output[_io]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = strictParseInt32(output[_vSo]);
  }
  if (output[_vT] != null) {
    contents[_VT] = expectString(output[_vT]);
  }
  if (output[_th] != null) {
    contents[_Th] = strictParseInt32(output[_th]);
  }
  return contents;
};
var de_LaunchTemplateElasticInferenceAcceleratorResponse = (output, context) => {
  const contents = {};
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  return contents;
};
var de_LaunchTemplateElasticInferenceAcceleratorResponseList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
  });
};
var de_LaunchTemplateEnaSrdSpecification = (output, context) => {
  const contents = {};
  if (output[_eSE] != null) {
    contents[_ESE] = parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_LaunchTemplateEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};
var de_LaunchTemplateEnaSrdUdpSpecification = (output, context) => {
  const contents = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = parseBoolean(output[_eSUE]);
  }
  return contents;
};
var de_LaunchTemplateEnclaveOptions = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  return contents;
};
var de_LaunchTemplateHibernationOptions = (output, context) => {
  const contents = {};
  if (output[_conf] != null) {
    contents[_Conf] = parseBoolean(output[_conf]);
  }
  return contents;
};
var de_LaunchTemplateIamInstanceProfileSpecification = (output, context) => {
  const contents = {};
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_LaunchTemplateInstanceMaintenanceOptions = (output, context) => {
  const contents = {};
  if (output[_aRu] != null) {
    contents[_ARu] = expectString(output[_aRu]);
  }
  return contents;
};
var de_LaunchTemplateInstanceMarketOptions = (output, context) => {
  const contents = {};
  if (output[_mT] != null) {
    contents[_MT] = expectString(output[_mT]);
  }
  if (output[_sO] != null) {
    contents[_SO] = de_LaunchTemplateSpotMarketOptions(output[_sO], context);
  }
  return contents;
};
var de_LaunchTemplateInstanceMetadataOptions = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_hT] != null) {
    contents[_HT] = expectString(output[_hT]);
  }
  if (output[_hPRHL] != null) {
    contents[_HPRHL] = strictParseInt32(output[_hPRHL]);
  }
  if (output[_hE] != null) {
    contents[_HE] = expectString(output[_hE]);
  }
  if (output[_hPI] != null) {
    contents[_HPI] = expectString(output[_hPI]);
  }
  if (output[_iMT] != null) {
    contents[_IMT] = expectString(output[_iMT]);
  }
  return contents;
};
var de_LaunchTemplateInstanceNetworkInterfaceSpecification = (output, context) => {
  const contents = {};
  if (output[_aCIA] != null) {
    contents[_ACIA] = parseBoolean(output[_aCIA]);
  }
  if (output[_aPIA] != null) {
    contents[_APIAs] = parseBoolean(output[_aPIA]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = strictParseInt32(output[_dIe]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_gIr] != null) {
    contents[_G] = de_GroupIdStringList(getArrayIfSingleItem(output[_gS][_gIr]), context);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = expectString(output[_iTnt]);
  }
  if (output[_iAC] != null) {
    contents[_IAC] = strictParseInt32(output[_iAC]);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_PrivateIpAddressSpecificationList(getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sPIAC] != null) {
    contents[_SPIAC] = strictParseInt32(output[_sPIAC]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = strictParseInt32(output[_nCI]);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixListResponse(getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output[_iPCp] != null) {
    contents[_IPCp] = strictParseInt32(output[_iPCp]);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_Ipv6PrefixListResponse(getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_iPCpv] != null) {
    contents[_IPC] = strictParseInt32(output[_iPCpv]);
  }
  if (output[_pIri] != null) {
    contents[_PIr] = parseBoolean(output[_pIri]);
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_LaunchTemplateEnaSrdSpecification(output[_eSS], context);
  }
  if (output[_cTS] != null) {
    contents[_CTS] = de_ConnectionTrackingSpecification(output[_cTS], context);
  }
  return contents;
};
var de_LaunchTemplateInstanceNetworkInterfaceSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
  });
};
var de_LaunchTemplateLicenseConfiguration = (output, context) => {
  const contents = {};
  if (output[_lCA] != null) {
    contents[_LCA] = expectString(output[_lCA]);
  }
  return contents;
};
var de_LaunchTemplateLicenseList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateLicenseConfiguration(entry, context);
  });
};
var de_LaunchTemplateNetworkPerformanceOptions = (output, context) => {
  const contents = {};
  if (output[_bW] != null) {
    contents[_BW] = expectString(output[_bW]);
  }
  return contents;
};
var de_LaunchTemplateOverrides = (output, context) => {
  const contents = {};
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = expectString(output[_sPp]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_wC] != null) {
    contents[_WCe] = strictParseFloat(output[_wC]);
  }
  if (output[_pri] != null) {
    contents[_Pri] = strictParseFloat(output[_pri]);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  return contents;
};
var de_LaunchTemplateOverridesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateOverrides(entry, context);
  });
};
var de_LaunchTemplatePlacement = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_af] != null) {
    contents[_Af] = expectString(output[_af]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_hI] != null) {
    contents[_HIo] = expectString(output[_hI]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output[_sDp] != null) {
    contents[_SDp] = expectString(output[_sDp]);
  }
  if (output[_hRGA] != null) {
    contents[_HRGA] = expectString(output[_hRGA]);
  }
  if (output[_pN] != null) {
    contents[_PN] = strictParseInt32(output[_pN]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  return contents;
};
var de_LaunchTemplatePrivateDnsNameOptions = (output, context) => {
  const contents = {};
  if (output[_hTo] != null) {
    contents[_HTo] = expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};
var de_LaunchTemplateSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplate(entry, context);
  });
};
var de_LaunchTemplatesMonitoring = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  return contents;
};
var de_LaunchTemplateSpotMarketOptions = (output, context) => {
  const contents = {};
  if (output[_mP] != null) {
    contents[_MPa] = expectString(output[_mP]);
  }
  if (output[_sIT] != null) {
    contents[_SIT] = expectString(output[_sIT]);
  }
  if (output[_bDMl] != null) {
    contents[_BDMl] = strictParseInt32(output[_bDMl]);
  }
  if (output[_vU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_iIB] != null) {
    contents[_IIB] = expectString(output[_iIB]);
  }
  return contents;
};
var de_LaunchTemplateTagSpecification = (output, context) => {
  const contents = {};
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LaunchTemplateTagSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateTagSpecification(entry, context);
  });
};
var de_LaunchTemplateVersion = (output, context) => {
  const contents = {};
  if (output[_lTI] != null) {
    contents[_LTI] = expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = strictParseLong(output[_vNe]);
  }
  if (output[_vD] != null) {
    contents[_VD] = expectString(output[_vD]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_cBr] != null) {
    contents[_CBr] = expectString(output[_cBr]);
  }
  if (output[_dVe] != null) {
    contents[_DVef] = parseBoolean(output[_dVe]);
  }
  if (output[_lTD] != null) {
    contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD], context);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_LaunchTemplateVersionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LaunchTemplateVersion(entry, context);
  });
};
var de_LicenseConfiguration = (output, context) => {
  const contents = {};
  if (output[_lCA] != null) {
    contents[_LCA] = expectString(output[_lCA]);
  }
  return contents;
};
var de_LicenseList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LicenseConfiguration(entry, context);
  });
};
var de_ListImagesInRecycleBinResult = (output, context) => {
  const contents = {};
  if (output.imageSet === "") {
    contents[_Ima] = [];
  } else if (output[_iSmag] != null && output[_iSmag][_i] != null) {
    contents[_Ima] = de_ImageRecycleBinInfoList(getArrayIfSingleItem(output[_iSmag][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_ListSnapshotsInRecycleBinResult = (output, context) => {
  const contents = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotRecycleBinInfoList(getArrayIfSingleItem(output[_sS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_LoadBalancersConfig = (output, context) => {
  const contents = {};
  if (output[_cLBC] != null) {
    contents[_CLBC] = de_ClassicLoadBalancersConfig(output[_cLBC], context);
  }
  if (output[_tGCa] != null) {
    contents[_TGC] = de_TargetGroupsConfig(output[_tGCa], context);
  }
  return contents;
};
var de_LoadPermission = (output, context) => {
  const contents = {};
  if (output[_uI] != null) {
    contents[_UIs] = expectString(output[_uI]);
  }
  if (output[_g] != null) {
    contents[_Gr] = expectString(output[_g]);
  }
  return contents;
};
var de_LoadPermissionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LoadPermission(entry, context);
  });
};
var de_LocalGateway = (output, context) => {
  const contents = {};
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LocalGatewayRoute = (output, context) => {
  const contents = {};
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = expectString(output[_lGVIGI]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = expectString(output[_lGRTA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_cPI] != null) {
    contents[_CPIo] = expectString(output[_cPI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = expectString(output[_dPLI]);
  }
  return contents;
};
var de_LocalGatewayRouteList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayRoute(entry, context);
  });
};
var de_LocalGatewayRouteTable = (output, context) => {
  const contents = {};
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = expectString(output[_lGRTA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_mod] != null) {
    contents[_Mo] = expectString(output[_mod]);
  }
  if (output[_sRt] != null) {
    contents[_SRt] = de_StateReason(output[_sRt], context);
  }
  return contents;
};
var de_LocalGatewayRouteTableSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayRouteTable(entry, context);
  });
};
var de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (output, context) => {
  const contents = {};
  if (output[_lGRTVIGAI] != null) {
    contents[_LGRTVIGAI] = expectString(output[_lGRTVIGAI]);
  }
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = expectString(output[_lGVIGI]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = expectString(output[_lGRTA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
  });
};
var de_LocalGatewayRouteTableVpcAssociation = (output, context) => {
  const contents = {};
  if (output[_lGRTVAI] != null) {
    contents[_LGRTVAI] = expectString(output[_lGRTVAI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = expectString(output[_lGRTA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LocalGatewayRouteTableVpcAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayRouteTableVpcAssociation(entry, context);
  });
};
var de_LocalGatewaySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGateway(entry, context);
  });
};
var de_LocalGatewayVirtualInterface = (output, context) => {
  const contents = {};
  if (output[_lGVII] != null) {
    contents[_LGVIIo] = expectString(output[_lGVII]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_vl] != null) {
    contents[_Vl] = strictParseInt32(output[_vl]);
  }
  if (output[_lA] != null) {
    contents[_LA] = expectString(output[_lA]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = expectString(output[_pAe]);
  }
  if (output[_lBAo] != null) {
    contents[_LBAo] = strictParseInt32(output[_lBAo]);
  }
  if (output[_pBA] != null) {
    contents[_PBA] = strictParseInt32(output[_pBA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LocalGatewayVirtualInterfaceGroup = (output, context) => {
  const contents = {};
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = expectString(output[_lGVIGI]);
  }
  if (output.localGatewayVirtualInterfaceIdSet === "") {
    contents[_LGVII] = [];
  } else if (output[_lGVIIS] != null && output[_lGVIIS][_i] != null) {
    contents[_LGVII] = de_LocalGatewayVirtualInterfaceIdSet(getArrayIfSingleItem(output[_lGVIIS][_i]), context);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_LocalGatewayVirtualInterfaceGroupSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayVirtualInterfaceGroup(entry, context);
  });
};
var de_LocalGatewayVirtualInterfaceIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_LocalGatewayVirtualInterfaceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocalGatewayVirtualInterface(entry, context);
  });
};
var de_LocalStorageTypeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_LockedSnapshotsInfo = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_lSoc] != null) {
    contents[_LSoc] = expectString(output[_lSoc]);
  }
  if (output[_lDo] != null) {
    contents[_LDo] = strictParseInt32(output[_lDo]);
  }
  if (output[_cOP] != null) {
    contents[_COP] = strictParseInt32(output[_cOP]);
  }
  if (output[_cOPEO] != null) {
    contents[_COPEO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cOPEO]));
  }
  if (output[_lCO] != null) {
    contents[_LCO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lCO]));
  }
  if (output[_lDST] != null) {
    contents[_LDST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lDST]));
  }
  if (output[_lEO] != null) {
    contents[_LEO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lEO]));
  }
  return contents;
};
var de_LockedSnapshotsInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LockedSnapshotsInfo(entry, context);
  });
};
var de_LockSnapshotResult = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_lSoc] != null) {
    contents[_LSoc] = expectString(output[_lSoc]);
  }
  if (output[_lDo] != null) {
    contents[_LDo] = strictParseInt32(output[_lDo]);
  }
  if (output[_cOP] != null) {
    contents[_COP] = strictParseInt32(output[_cOP]);
  }
  if (output[_cOPEO] != null) {
    contents[_COPEO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cOPEO]));
  }
  if (output[_lCO] != null) {
    contents[_LCO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lCO]));
  }
  if (output[_lEO] != null) {
    contents[_LEO] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lEO]));
  }
  if (output[_lDST] != null) {
    contents[_LDST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lDST]));
  }
  return contents;
};
var de_MacHost = (output, context) => {
  const contents = {};
  if (output[_hI] != null) {
    contents[_HIo] = expectString(output[_hI]);
  }
  if (output.macOSLatestSupportedVersionSet === "") {
    contents[_MOSLSV] = [];
  } else if (output[_mOSLSVS] != null && output[_mOSLSVS][_i] != null) {
    contents[_MOSLSV] = de_MacOSVersionStringList(getArrayIfSingleItem(output[_mOSLSVS][_i]), context);
  }
  return contents;
};
var de_MacHostList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MacHost(entry, context);
  });
};
var de_MacOSVersionStringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_MaintenanceDetails = (output, context) => {
  const contents = {};
  if (output[_pM] != null) {
    contents[_PM] = expectString(output[_pM]);
  }
  if (output[_mAAA] != null) {
    contents[_MAAA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_mAAA]));
  }
  if (output[_lMA] != null) {
    contents[_LMA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lMA]));
  }
  return contents;
};
var de_ManagedPrefixList = (output, context) => {
  const contents = {};
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_aF] != null) {
    contents[_AF] = expectString(output[_aF]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = expectString(output[_sMt]);
  }
  if (output[_pLA] != null) {
    contents[_PLAr] = expectString(output[_pLA]);
  }
  if (output[_pLN] != null) {
    contents[_PLN] = expectString(output[_pLN]);
  }
  if (output[_mE] != null) {
    contents[_ME] = strictParseInt32(output[_mE]);
  }
  if (output[_ve] != null) {
    contents[_V] = strictParseLong(output[_ve]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_ManagedPrefixListSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ManagedPrefixList(entry, context);
  });
};
var de_MediaAcceleratorInfo = (output, context) => {
  const contents = {};
  if (output.accelerators === "") {
    contents[_Acc] = [];
  } else if (output[_acc] != null && output[_acc][_i] != null) {
    contents[_Acc] = de_MediaDeviceInfoList(getArrayIfSingleItem(output[_acc][_i]), context);
  }
  if (output[_tMMIMB] != null) {
    contents[_TMMIMB] = strictParseInt32(output[_tMMIMB]);
  }
  return contents;
};
var de_MediaDeviceInfo = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = expectString(output[_man]);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_MediaDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};
var de_MediaDeviceInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MediaDeviceInfo(entry, context);
  });
};
var de_MediaDeviceMemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseInt32(output[_sIMB]);
  }
  return contents;
};
var de_MemoryGiBPerVCpu = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseFloat(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseFloat(output[_ma]);
  }
  return contents;
};
var de_MemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseLong(output[_sIMB]);
  }
  return contents;
};
var de_MemoryMiB = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_MetricPoint = (output, context) => {
  const contents = {};
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_v] != null) {
    contents[_Va] = strictParseFloat(output[_v]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_MetricPoints = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MetricPoint(entry, context);
  });
};
var de_ModifyAddressAttributeResult = (output, context) => {
  const contents = {};
  if (output[_ad] != null) {
    contents[_Ad] = de_AddressAttribute(output[_ad], context);
  }
  return contents;
};
var de_ModifyAvailabilityZoneGroupResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyCapacityReservationFleetResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyCapacityReservationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyClientVpnEndpointResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyDefaultCreditSpecificationResult = (output, context) => {
  const contents = {};
  if (output[_iFCS] != null) {
    contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS], context);
  }
  return contents;
};
var de_ModifyEbsDefaultKmsKeyIdResult = (output, context) => {
  const contents = {};
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  return contents;
};
var de_ModifyFleetResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyFpgaImageAttributeResult = (output, context) => {
  const contents = {};
  if (output[_fIA] != null) {
    contents[_FIAp] = de_FpgaImageAttribute(output[_fIA], context);
  }
  return contents;
};
var de_ModifyHostsResult = (output, context) => {
  const contents = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_ResponseHostIdList(getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemList(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_ModifyInstanceCapacityReservationAttributesResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyInstanceCpuOptionsResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_cCo] != null) {
    contents[_CC] = strictParseInt32(output[_cCo]);
  }
  if (output[_tPC] != null) {
    contents[_TPC] = strictParseInt32(output[_tPC]);
  }
  return contents;
};
var de_ModifyInstanceCreditSpecificationResult = (output, context) => {
  const contents = {};
  if (output.successfulInstanceCreditSpecificationSet === "") {
    contents[_SICS] = [];
  } else if (output[_sICSS] != null && output[_sICSS][_i] != null) {
    contents[_SICS] = de_SuccessfulInstanceCreditSpecificationSet(getArrayIfSingleItem(output[_sICSS][_i]), context);
  }
  if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
    contents[_UICS] = [];
  } else if (output[_uICSS] != null && output[_uICSS][_i] != null) {
    contents[_UICS] = de_UnsuccessfulInstanceCreditSpecificationSet(getArrayIfSingleItem(output[_uICSS][_i]), context);
  }
  return contents;
};
var de_ModifyInstanceEventStartTimeResult = (output, context) => {
  const contents = {};
  if (output[_ev] != null) {
    contents[_Eve] = de_InstanceStatusEvent(output[_ev], context);
  }
  return contents;
};
var de_ModifyInstanceEventWindowResult = (output, context) => {
  const contents = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};
var de_ModifyInstanceMaintenanceOptionsResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_aRu] != null) {
    contents[_ARu] = expectString(output[_aRu]);
  }
  return contents;
};
var de_ModifyInstanceMetadataDefaultsResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyInstanceMetadataOptionsResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iMO] != null) {
    contents[_IMOn] = de_InstanceMetadataOptionsResponse(output[_iMO], context);
  }
  return contents;
};
var de_ModifyInstanceNetworkPerformanceResult = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_bW] != null) {
    contents[_BW] = expectString(output[_bW]);
  }
  return contents;
};
var de_ModifyInstancePlacementResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyIpamPoolResult = (output, context) => {
  const contents = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};
var de_ModifyIpamResourceCidrResult = (output, context) => {
  const contents = {};
  if (output[_iRC] != null) {
    contents[_IRCp] = de_IpamResourceCidr(output[_iRC], context);
  }
  return contents;
};
var de_ModifyIpamResourceDiscoveryResult = (output, context) => {
  const contents = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};
var de_ModifyIpamResult = (output, context) => {
  const contents = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};
var de_ModifyIpamScopeResult = (output, context) => {
  const contents = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};
var de_ModifyLaunchTemplateResult = (output, context) => {
  const contents = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  return contents;
};
var de_ModifyLocalGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_ModifyManagedPrefixListResult = (output, context) => {
  const contents = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};
var de_ModifyPrivateDnsNameOptionsResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyReservedInstancesResult = (output, context) => {
  const contents = {};
  if (output[_rIMI] != null) {
    contents[_RIMIe] = expectString(output[_rIMI]);
  }
  return contents;
};
var de_ModifySecurityGroupRulesResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifySnapshotTierResult = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_tST] != null) {
    contents[_TST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tST]));
  }
  return contents;
};
var de_ModifySpotFleetRequestResponse = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyTrafficMirrorFilterNetworkServicesResult = (output, context) => {
  const contents = {};
  if (output[_tMF] != null) {
    contents[_TMF] = de_TrafficMirrorFilter(output[_tMF], context);
  }
  return contents;
};
var de_ModifyTrafficMirrorFilterRuleResult = (output, context) => {
  const contents = {};
  if (output[_tMFR] != null) {
    contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR], context);
  }
  return contents;
};
var de_ModifyTrafficMirrorSessionResult = (output, context) => {
  const contents = {};
  if (output[_tMS] != null) {
    contents[_TMS] = de_TrafficMirrorSession(output[_tMS], context);
  }
  return contents;
};
var de_ModifyTransitGatewayPrefixListReferenceResult = (output, context) => {
  const contents = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};
var de_ModifyTransitGatewayResult = (output, context) => {
  const contents = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};
var de_ModifyTransitGatewayVpcAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessEndpointPolicyResult = (output, context) => {
  const contents = {};
  if (output[_pE] != null) {
    contents[_PE] = parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = expectString(output[_pDo]);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessEndpointResult = (output, context) => {
  const contents = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessGroupPolicyResult = (output, context) => {
  const contents = {};
  if (output[_pE] != null) {
    contents[_PE] = parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = expectString(output[_pDo]);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessGroupResult = (output, context) => {
  const contents = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessInstanceLoggingConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_lC] != null) {
    contents[_LCo] = de_VerifiedAccessInstanceLoggingConfiguration(output[_lC], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessInstanceResult = (output, context) => {
  const contents = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};
var de_ModifyVerifiedAccessTrustProviderResult = (output, context) => {
  const contents = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};
var de_ModifyVolumeResult = (output, context) => {
  const contents = {};
  if (output[_vM] != null) {
    contents[_VMol] = de_VolumeModification(output[_vM], context);
  }
  return contents;
};
var de_ModifyVpcBlockPublicAccessExclusionResult = (output, context) => {
  const contents = {};
  if (output[_vBPAE] != null) {
    contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE], context);
  }
  return contents;
};
var de_ModifyVpcBlockPublicAccessOptionsResult = (output, context) => {
  const contents = {};
  if (output[_vBPAO] != null) {
    contents[_VBPAO] = de_VpcBlockPublicAccessOptions(output[_vBPAO], context);
  }
  return contents;
};
var de_ModifyVpcEndpointConnectionNotificationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpcEndpointResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpcEndpointServiceConfigurationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpcEndpointServicePayerResponsibilityResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpcEndpointServicePermissionsResult = (output, context) => {
  const contents = {};
  if (output.addedPrincipalSet === "") {
    contents[_APd] = [];
  } else if (output[_aPS] != null && output[_aPS][_i] != null) {
    contents[_APd] = de_AddedPrincipalSet(getArrayIfSingleItem(output[_aPS][_i]), context);
  }
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpcPeeringConnectionOptionsResult = (output, context) => {
  const contents = {};
  if (output[_aPCO] != null) {
    contents[_APCO] = de_PeeringConnectionOptions(output[_aPCO], context);
  }
  if (output[_rPCO] != null) {
    contents[_RPCO] = de_PeeringConnectionOptions(output[_rPCO], context);
  }
  return contents;
};
var de_ModifyVpcTenancyResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ModifyVpnConnectionOptionsResult = (output, context) => {
  const contents = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};
var de_ModifyVpnConnectionResult = (output, context) => {
  const contents = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};
var de_ModifyVpnTunnelCertificateResult = (output, context) => {
  const contents = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};
var de_ModifyVpnTunnelOptionsResult = (output, context) => {
  const contents = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};
var de_Monitoring = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_MonitorInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_IMn] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_IMn] = de_InstanceMonitoringList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_MoveAddressToVpcResult = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_MoveByoipCidrToIpamResult = (output, context) => {
  const contents = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};
var de_MoveCapacityReservationInstancesResult = (output, context) => {
  const contents = {};
  if (output[_sCR] != null) {
    contents[_SCR] = de_CapacityReservation(output[_sCR], context);
  }
  if (output[_dCR] != null) {
    contents[_DCRe] = de_CapacityReservation(output[_dCR], context);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  return contents;
};
var de_MovingAddressStatus = (output, context) => {
  const contents = {};
  if (output[_mSo] != null) {
    contents[_MSo] = expectString(output[_mSo]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  return contents;
};
var de_MovingAddressStatusSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MovingAddressStatus(entry, context);
  });
};
var de_NatGateway = (output, context) => {
  const contents = {};
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_dTel] != null) {
    contents[_DTele] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTel]));
  }
  if (output[_fCa] != null) {
    contents[_FCa] = expectString(output[_fCa]);
  }
  if (output[_fM] != null) {
    contents[_FM] = expectString(output[_fM]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output[_pB] != null) {
    contents[_PB] = de_ProvisionedBandwidth(output[_pB], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_cTonn] != null) {
    contents[_CTo] = expectString(output[_cTonn]);
  }
  return contents;
};
var de_NatGatewayAddress = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_pIriv] != null) {
    contents[_PIri] = expectString(output[_pIriv]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_iPsr] != null) {
    contents[_IPsr] = parseBoolean(output[_iPsr]);
  }
  if (output[_fM] != null) {
    contents[_FM] = expectString(output[_fM]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_NatGatewayAddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NatGatewayAddress(entry, context);
  });
};
var de_NatGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NatGateway(entry, context);
  });
};
var de_NativeApplicationOidcOptions = (output, context) => {
  const contents = {};
  if (output[_pSKE] != null) {
    contents[_PSKE] = expectString(output[_pSKE]);
  }
  if (output[_is] != null) {
    contents[_I] = expectString(output[_is]);
  }
  if (output[_aE] != null) {
    contents[_AE] = expectString(output[_aE]);
  }
  if (output[_tEo] != null) {
    contents[_TEo] = expectString(output[_tEo]);
  }
  if (output[_uIE] != null) {
    contents[_UIE] = expectString(output[_uIE]);
  }
  if (output[_cIli] != null) {
    contents[_CIl] = expectString(output[_cIli]);
  }
  if (output[_sc] != null) {
    contents[_Sc] = expectString(output[_sc]);
  }
  return contents;
};
var de_NetworkAcl = (output, context) => {
  const contents = {};
  if (output.associationSet === "") {
    contents[_Ass] = [];
  } else if (output[_aSss] != null && output[_aSss][_i] != null) {
    contents[_Ass] = de_NetworkAclAssociationList(getArrayIfSingleItem(output[_aSss][_i]), context);
  }
  if (output.entrySet === "") {
    contents[_Ent] = [];
  } else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
    contents[_Ent] = de_NetworkAclEntryList(getArrayIfSingleItem(output[_eSnt][_i]), context);
  }
  if (output[_def] != null) {
    contents[_IDs] = parseBoolean(output[_def]);
  }
  if (output[_nAI] != null) {
    contents[_NAI] = expectString(output[_nAI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_NetworkAclAssociation = (output, context) => {
  const contents = {};
  if (output[_nAAI] != null) {
    contents[_NAAI] = expectString(output[_nAAI]);
  }
  if (output[_nAI] != null) {
    contents[_NAI] = expectString(output[_nAI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  return contents;
};
var de_NetworkAclAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkAclAssociation(entry, context);
  });
};
var de_NetworkAclEntry = (output, context) => {
  const contents = {};
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  if (output[_e] != null) {
    contents[_Eg] = parseBoolean(output[_e]);
  }
  if (output[_iTC] != null) {
    contents[_ITC] = de_IcmpTypeCode(output[_iTC], context);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = expectString(output[_iCB]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = expectString(output[_rA]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = strictParseInt32(output[_rN]);
  }
  return contents;
};
var de_NetworkAclEntryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkAclEntry(entry, context);
  });
};
var de_NetworkAclList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkAcl(entry, context);
  });
};
var de_NetworkBandwidthGbps = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseFloat(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseFloat(output[_ma]);
  }
  return contents;
};
var de_NetworkCardInfo = (output, context) => {
  const contents = {};
  if (output[_nCI] != null) {
    contents[_NCI] = strictParseInt32(output[_nCI]);
  }
  if (output[_nP] != null) {
    contents[_NP] = expectString(output[_nP]);
  }
  if (output[_mNI] != null) {
    contents[_MNI] = strictParseInt32(output[_mNI]);
  }
  if (output[_bBIG] != null) {
    contents[_BBIG] = strictParseFloat(output[_bBIG]);
  }
  if (output[_pBIG] != null) {
    contents[_PBIG] = strictParseFloat(output[_pBIG]);
  }
  return contents;
};
var de_NetworkCardInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkCardInfo(entry, context);
  });
};
var de_NetworkInfo = (output, context) => {
  const contents = {};
  if (output[_nP] != null) {
    contents[_NP] = expectString(output[_nP]);
  }
  if (output[_mNI] != null) {
    contents[_MNI] = strictParseInt32(output[_mNI]);
  }
  if (output[_mNC] != null) {
    contents[_MNC] = strictParseInt32(output[_mNC]);
  }
  if (output[_dNCI] != null) {
    contents[_DNCI] = strictParseInt32(output[_dNCI]);
  }
  if (output.networkCards === "") {
    contents[_NC] = [];
  } else if (output[_nC] != null && output[_nC][_i] != null) {
    contents[_NC] = de_NetworkCardInfoList(getArrayIfSingleItem(output[_nC][_i]), context);
  }
  if (output[_iAPI] != null) {
    contents[_IAPI] = strictParseInt32(output[_iAPI]);
  }
  if (output[_iAPIp] != null) {
    contents[_IAPIp] = strictParseInt32(output[_iAPIp]);
  }
  if (output[_iSpv] != null) {
    contents[_ISpv] = parseBoolean(output[_iSpv]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = expectString(output[_eSna]);
  }
  if (output[_eSf] != null) {
    contents[_ESf] = parseBoolean(output[_eSf]);
  }
  if (output[_eIf] != null) {
    contents[_EIf] = de_EfaInfo(output[_eIf], context);
  }
  if (output[_eITSn] != null) {
    contents[_EITS] = parseBoolean(output[_eITSn]);
  }
  if (output[_eSSn] != null) {
    contents[_ESSn] = parseBoolean(output[_eSSn]);
  }
  if (output.bandwidthWeightings === "") {
    contents[_BWa] = [];
  } else if (output[_bWa] != null && output[_bWa][_i] != null) {
    contents[_BWa] = de_BandwidthWeightingTypeList(getArrayIfSingleItem(output[_bWa][_i]), context);
  }
  return contents;
};
var de_NetworkInsightsAccessScope = (output, context) => {
  const contents = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = expectString(output[_nIASI]);
  }
  if (output[_nIASA] != null) {
    contents[_NIASAe] = expectString(output[_nIASA]);
  }
  if (output[_cDre] != null) {
    contents[_CDrea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cDre]));
  }
  if (output[_uDp] != null) {
    contents[_UDp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uDp]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_NetworkInsightsAccessScopeAnalysis = (output, context) => {
  const contents = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = expectString(output[_nIASAI]);
  }
  if (output[_nIASAA] != null) {
    contents[_NIASAA] = expectString(output[_nIASAA]);
  }
  if (output[_nIASI] != null) {
    contents[_NIASI] = expectString(output[_nIASI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_wM] != null) {
    contents[_WM] = expectString(output[_wM]);
  }
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_fFi] != null) {
    contents[_FFi] = expectString(output[_fFi]);
  }
  if (output[_aEC] != null) {
    contents[_AEC] = strictParseInt32(output[_aEC]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_NetworkInsightsAccessScopeAnalysisList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInsightsAccessScopeAnalysis(entry, context);
  });
};
var de_NetworkInsightsAccessScopeContent = (output, context) => {
  const contents = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = expectString(output[_nIASI]);
  }
  if (output.matchPathSet === "") {
    contents[_MP] = [];
  } else if (output[_mPSa] != null && output[_mPSa][_i] != null) {
    contents[_MP] = de_AccessScopePathList(getArrayIfSingleItem(output[_mPSa][_i]), context);
  }
  if (output.excludePathSet === "") {
    contents[_EP] = [];
  } else if (output[_ePS] != null && output[_ePS][_i] != null) {
    contents[_EP] = de_AccessScopePathList(getArrayIfSingleItem(output[_ePS][_i]), context);
  }
  return contents;
};
var de_NetworkInsightsAccessScopeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInsightsAccessScope(entry, context);
  });
};
var de_NetworkInsightsAnalysis = (output, context) => {
  const contents = {};
  if (output[_nIAI] != null) {
    contents[_NIAI] = expectString(output[_nIAI]);
  }
  if (output[_nIAA] != null) {
    contents[_NIAA] = expectString(output[_nIAA]);
  }
  if (output[_nIPI] != null) {
    contents[_NIPI] = expectString(output[_nIPI]);
  }
  if (output.additionalAccountSet === "") {
    contents[_AAd] = [];
  } else if (output[_aASd] != null && output[_aASd][_i] != null) {
    contents[_AAd] = de_ValueStringList(getArrayIfSingleItem(output[_aASd][_i]), context);
  }
  if (output.filterInArnSet === "") {
    contents[_FIA] = [];
  } else if (output[_fIAS] != null && output[_fIAS][_i] != null) {
    contents[_FIA] = de_ArnList(getArrayIfSingleItem(output[_fIAS][_i]), context);
  }
  if (output[_sD] != null) {
    contents[_SD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_wM] != null) {
    contents[_WM] = expectString(output[_wM]);
  }
  if (output[_nPF] != null) {
    contents[_NPF] = parseBoolean(output[_nPF]);
  }
  if (output.forwardPathComponentSet === "") {
    contents[_FPC] = [];
  } else if (output[_fPCS] != null && output[_fPCS][_i] != null) {
    contents[_FPC] = de_PathComponentList(getArrayIfSingleItem(output[_fPCS][_i]), context);
  }
  if (output.returnPathComponentSet === "") {
    contents[_RPC] = [];
  } else if (output[_rPCS] != null && output[_rPCS][_i] != null) {
    contents[_RPC] = de_PathComponentList(getArrayIfSingleItem(output[_rPCS][_i]), context);
  }
  if (output.explanationSet === "") {
    contents[_Ex] = [];
  } else if (output[_eSx] != null && output[_eSx][_i] != null) {
    contents[_Ex] = de_ExplanationList(getArrayIfSingleItem(output[_eSx][_i]), context);
  }
  if (output.alternatePathHintSet === "") {
    contents[_APH] = [];
  } else if (output[_aPHS] != null && output[_aPHS][_i] != null) {
    contents[_APH] = de_AlternatePathHintList(getArrayIfSingleItem(output[_aPHS][_i]), context);
  }
  if (output.suggestedAccountSet === "") {
    contents[_SAu] = [];
  } else if (output[_sASu] != null && output[_sASu][_i] != null) {
    contents[_SAu] = de_ValueStringList(getArrayIfSingleItem(output[_sASu][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_NetworkInsightsAnalysisList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInsightsAnalysis(entry, context);
  });
};
var de_NetworkInsightsPath = (output, context) => {
  const contents = {};
  if (output[_nIPI] != null) {
    contents[_NIPI] = expectString(output[_nIPI]);
  }
  if (output[_nIPA] != null) {
    contents[_NIPA] = expectString(output[_nIPA]);
  }
  if (output[_cDre] != null) {
    contents[_CDrea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cDre]));
  }
  if (output[_s] != null) {
    contents[_S] = expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = expectString(output[_d]);
  }
  if (output[_sA] != null) {
    contents[_SAour] = expectString(output[_sA]);
  }
  if (output[_dA] != null) {
    contents[_DAesti] = expectString(output[_dA]);
  }
  if (output[_sIo] != null) {
    contents[_SIo] = expectString(output[_sIo]);
  }
  if (output[_dIes] != null) {
    contents[_DIest] = expectString(output[_dIes]);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_dPes] != null) {
    contents[_DPe] = strictParseInt32(output[_dPes]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_fAS] != null) {
    contents[_FAS] = de_PathFilter(output[_fAS], context);
  }
  if (output[_fAD] != null) {
    contents[_FAD] = de_PathFilter(output[_fAD], context);
  }
  return contents;
};
var de_NetworkInsightsPathList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInsightsPath(entry, context);
  });
};
var de_NetworkInterface = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_at] != null) {
    contents[_Att] = de_NetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_cTC] != null) {
    contents[_CTC] = de_ConnectionTrackingConfiguration(output[_cTC], context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = expectString(output[_iTnt]);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_NetworkInterfaceIpv6AddressesList(getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_mAa] != null) {
    contents[_MAa] = expectString(output[_mAa]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_NetworkInterfacePrivateIpAddressList(getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixesList(getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_Ipv6PrefixesList(getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_rIeq] != null) {
    contents[_RIeq] = expectString(output[_rIeq]);
  }
  if (output[_rM] != null) {
    contents[_RMe] = parseBoolean(output[_rM]);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = parseBoolean(output[_sDC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output.tagSet === "") {
    contents[_TSag] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_TSag] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_dAIT] != null) {
    contents[_DAIT] = parseBoolean(output[_dAIT]);
  }
  if (output[_iN] != null) {
    contents[_IN] = parseBoolean(output[_iN]);
  }
  if (output[_iApv] != null) {
    contents[_IApv] = expectString(output[_iApv]);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  return contents;
};
var de_NetworkInterfaceAssociation = (output, context) => {
  const contents = {};
  if (output[_aI] != null) {
    contents[_AIl] = expectString(output[_aI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_iOIp] != null) {
    contents[_IOI] = expectString(output[_iOIp]);
  }
  if (output[_pDNu] != null) {
    contents[_PDNu] = expectString(output[_pDNu]);
  }
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = expectString(output[_cOI]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = expectString(output[_cI]);
  }
  return contents;
};
var de_NetworkInterfaceAttachment = (output, context) => {
  const contents = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_aIt] != null) {
    contents[_AIt] = expectString(output[_aIt]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = strictParseInt32(output[_dIe]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = strictParseInt32(output[_nCI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iOIn] != null) {
    contents[_IOIn] = expectString(output[_iOIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_AttachmentEnaSrdSpecification(output[_eSS], context);
  }
  return contents;
};
var de_NetworkInterfaceCount = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_NetworkInterfaceIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_NetworkInterfaceIpv6Address = (output, context) => {
  const contents = {};
  if (output[_iApv] != null) {
    contents[_IApv] = expectString(output[_iApv]);
  }
  if (output[_iPI] != null) {
    contents[_IPIs] = parseBoolean(output[_iPI]);
  }
  return contents;
};
var de_NetworkInterfaceIpv6AddressesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInterfaceIpv6Address(entry, context);
  });
};
var de_NetworkInterfaceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInterface(entry, context);
  });
};
var de_NetworkInterfacePermission = (output, context) => {
  const contents = {};
  if (output[_nIPIe] != null) {
    contents[_NIPIe] = expectString(output[_nIPIe]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_aAI] != null) {
    contents[_AAI] = expectString(output[_aAI]);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = expectString(output[_aSw]);
  }
  if (output[_per] != null) {
    contents[_Pe] = expectString(output[_per]);
  }
  if (output[_pSe] != null) {
    contents[_PSer] = de_NetworkInterfacePermissionState(output[_pSe], context);
  }
  return contents;
};
var de_NetworkInterfacePermissionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInterfacePermission(entry, context);
  });
};
var de_NetworkInterfacePermissionState = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  return contents;
};
var de_NetworkInterfacePrivateIpAddress = (output, context) => {
  const contents = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_prim] != null) {
    contents[_Prim] = parseBoolean(output[_prim]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  return contents;
};
var de_NetworkInterfacePrivateIpAddressList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NetworkInterfacePrivateIpAddress(entry, context);
  });
};
var de_NetworkNodesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_NeuronDeviceCoreInfo = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_ve] != null) {
    contents[_V] = strictParseInt32(output[_ve]);
  }
  return contents;
};
var de_NeuronDeviceInfo = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_cIor] != null) {
    contents[_CIor] = de_NeuronDeviceCoreInfo(output[_cIor], context);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_NeuronDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};
var de_NeuronDeviceInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_NeuronDeviceInfo(entry, context);
  });
};
var de_NeuronDeviceMemoryInfo = (output, context) => {
  const contents = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = strictParseInt32(output[_sIMB]);
  }
  return contents;
};
var de_NeuronInfo = (output, context) => {
  const contents = {};
  if (output.neuronDevices === "") {
    contents[_NDe] = [];
  } else if (output[_nDe] != null && output[_nDe][_i] != null) {
    contents[_NDe] = de_NeuronDeviceInfoList(getArrayIfSingleItem(output[_nDe][_i]), context);
  }
  if (output[_tNDMIMB] != null) {
    contents[_TNDMIMB] = strictParseInt32(output[_tNDMIMB]);
  }
  return contents;
};
var de_NitroTpmInfo = (output, context) => {
  const contents = {};
  if (output.supportedVersions === "") {
    contents[_SVu] = [];
  } else if (output[_sVu] != null && output[_sVu][_i] != null) {
    contents[_SVu] = de_NitroTpmSupportedVersionsList(getArrayIfSingleItem(output[_sVu][_i]), context);
  }
  return contents;
};
var de_NitroTpmSupportedVersionsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_OccurrenceDaySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return strictParseInt32(entry);
  });
};
var de_OidcOptions = (output, context) => {
  const contents = {};
  if (output[_is] != null) {
    contents[_I] = expectString(output[_is]);
  }
  if (output[_aE] != null) {
    contents[_AE] = expectString(output[_aE]);
  }
  if (output[_tEo] != null) {
    contents[_TEo] = expectString(output[_tEo]);
  }
  if (output[_uIE] != null) {
    contents[_UIE] = expectString(output[_uIE]);
  }
  if (output[_cIli] != null) {
    contents[_CIl] = expectString(output[_cIli]);
  }
  if (output[_cSl] != null) {
    contents[_CSl] = expectString(output[_cSl]);
  }
  if (output[_sc] != null) {
    contents[_Sc] = expectString(output[_sc]);
  }
  return contents;
};
var de_OnDemandOptions = (output, context) => {
  const contents = {};
  if (output[_aSl] != null) {
    contents[_AS] = expectString(output[_aSl]);
  }
  if (output[_cRO] != null) {
    contents[_CRO] = de_CapacityReservationOptions(output[_cRO], context);
  }
  if (output[_sITi] != null) {
    contents[_SITi] = parseBoolean(output[_sITi]);
  }
  if (output[_sAZ] != null) {
    contents[_SAZ] = parseBoolean(output[_sAZ]);
  }
  if (output[_mTC] != null) {
    contents[_MTC] = strictParseInt32(output[_mTC]);
  }
  if (output[_mTP] != null) {
    contents[_MTP] = expectString(output[_mTP]);
  }
  return contents;
};
var de_OperatorResponse = (output, context) => {
  const contents = {};
  if (output[_mana] != null) {
    contents[_Mana] = parseBoolean(output[_mana]);
  }
  if (output[_p] != null) {
    contents[_Prin] = expectString(output[_p]);
  }
  return contents;
};
var de_PacketHeaderStatement = (output, context) => {
  const contents = {};
  if (output.sourceAddressSet === "") {
    contents[_SAo] = [];
  } else if (output[_sAS] != null && output[_sAS][_i] != null) {
    contents[_SAo] = de_ValueStringList(getArrayIfSingleItem(output[_sAS][_i]), context);
  }
  if (output.destinationAddressSet === "") {
    contents[_DAes] = [];
  } else if (output[_dAS] != null && output[_dAS][_i] != null) {
    contents[_DAes] = de_ValueStringList(getArrayIfSingleItem(output[_dAS][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_ValueStringList(getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPes] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPes] = de_ValueStringList(getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output.sourcePrefixListSet === "") {
    contents[_SPL] = [];
  } else if (output[_sPLS] != null && output[_sPLS][_i] != null) {
    contents[_SPL] = de_ValueStringList(getArrayIfSingleItem(output[_sPLS][_i]), context);
  }
  if (output.destinationPrefixListSet === "") {
    contents[_DPLe] = [];
  } else if (output[_dPLS] != null && output[_dPLS][_i] != null) {
    contents[_DPLe] = de_ValueStringList(getArrayIfSingleItem(output[_dPLS][_i]), context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_ProtocolList(getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  return contents;
};
var de_PathComponent = (output, context) => {
  const contents = {};
  if (output[_sNe] != null) {
    contents[_SNeq] = strictParseInt32(output[_sNe]);
  }
  if (output[_aRc] != null) {
    contents[_ARcl] = de_AnalysisAclRule(output[_aRc], context);
  }
  if (output[_aTtt] != null) {
    contents[_ATtta] = de_AnalysisComponent(output[_aTtt], context);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_dV] != null) {
    contents[_DVest] = de_AnalysisComponent(output[_dV], context);
  }
  if (output[_oH] != null) {
    contents[_OH] = de_AnalysisPacketHeader(output[_oH], context);
  }
  if (output[_iHn] != null) {
    contents[_IHn] = de_AnalysisPacketHeader(output[_iHn], context);
  }
  if (output[_rTR] != null) {
    contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR], context);
  }
  if (output[_sGR] != null) {
    contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR], context);
  }
  if (output[_sV] != null) {
    contents[_SVo] = de_AnalysisComponent(output[_sV], context);
  }
  if (output[_su] != null) {
    contents[_Su] = de_AnalysisComponent(output[_su], context);
  }
  if (output[_vp] != null) {
    contents[_Vp] = de_AnalysisComponent(output[_vp], context);
  }
  if (output.additionalDetailSet === "") {
    contents[_ADd] = [];
  } else if (output[_aDS] != null && output[_aDS][_i] != null) {
    contents[_ADd] = de_AdditionalDetailList(getArrayIfSingleItem(output[_aDS][_i]), context);
  }
  if (output[_tG] != null) {
    contents[_TGr] = de_AnalysisComponent(output[_tG], context);
  }
  if (output[_tGRTR] != null) {
    contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR], context);
  }
  if (output.explanationSet === "") {
    contents[_Ex] = [];
  } else if (output[_eSx] != null && output[_eSx][_i] != null) {
    contents[_Ex] = de_ExplanationList(getArrayIfSingleItem(output[_eSx][_i]), context);
  }
  if (output[_eLBL] != null) {
    contents[_ELBL] = de_AnalysisComponent(output[_eLBL], context);
  }
  if (output[_fSR] != null) {
    contents[_FSRi] = de_FirewallStatelessRule(output[_fSR], context);
  }
  if (output[_fSRi] != null) {
    contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi], context);
  }
  if (output[_sN] != null) {
    contents[_SNe] = expectString(output[_sN]);
  }
  return contents;
};
var de_PathComponentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PathComponent(entry, context);
  });
};
var de_PathFilter = (output, context) => {
  const contents = {};
  if (output[_sAo] != null) {
    contents[_SAou] = expectString(output[_sAo]);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = de_FilterPortRange(output[_sPR], context);
  }
  if (output[_dAe] != null) {
    contents[_DAest] = expectString(output[_dAe]);
  }
  if (output[_dPR] != null) {
    contents[_DPR] = de_FilterPortRange(output[_dPR], context);
  }
  return contents;
};
var de_PathStatement = (output, context) => {
  const contents = {};
  if (output[_pHS] != null) {
    contents[_PHS] = de_PacketHeaderStatement(output[_pHS], context);
  }
  if (output[_rSeso] != null) {
    contents[_RSe] = de_ResourceStatement(output[_rSeso], context);
  }
  return contents;
};
var de_PciId = (output, context) => {
  const contents = {};
  if (output[_DIevi] != null) {
    contents[_DIevi] = expectString(output[_DIevi]);
  }
  if (output[_VIe] != null) {
    contents[_VIe] = expectString(output[_VIe]);
  }
  if (output[_SIubs] != null) {
    contents[_SIubs] = expectString(output[_SIubs]);
  }
  if (output[_SVI] != null) {
    contents[_SVI] = expectString(output[_SVI]);
  }
  return contents;
};
var de_PeeringAttachmentStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_PeeringConnectionOptions = (output, context) => {
  const contents = {};
  if (output[_aDRFRV] != null) {
    contents[_ADRFRV] = parseBoolean(output[_aDRFRV]);
  }
  if (output[_aEFLCLTRV] != null) {
    contents[_AEFLCLTRV] = parseBoolean(output[_aEFLCLTRV]);
  }
  if (output[_aEFLVTRCL] != null) {
    contents[_AEFLVTRCL] = parseBoolean(output[_aEFLVTRCL]);
  }
  return contents;
};
var de_PeeringTgwInfo = (output, context) => {
  const contents = {};
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_cNIo] != null) {
    contents[_CNIor] = expectString(output[_cNIo]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_re] != null) {
    contents[_Regi] = expectString(output[_re]);
  }
  return contents;
};
var de_PerformanceFactorReference = (output, context) => {
  const contents = {};
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  return contents;
};
var de_PerformanceFactorReferenceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PerformanceFactorReference(entry, context);
  });
};
var de_Phase1DHGroupNumbersList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase1DHGroupNumbersListValue(entry, context);
  });
};
var de_Phase1DHGroupNumbersListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = strictParseInt32(output[_v]);
  }
  return contents;
};
var de_Phase1EncryptionAlgorithmsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase1EncryptionAlgorithmsListValue(entry, context);
  });
};
var de_Phase1EncryptionAlgorithmsListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_Phase1IntegrityAlgorithmsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase1IntegrityAlgorithmsListValue(entry, context);
  });
};
var de_Phase1IntegrityAlgorithmsListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_Phase2DHGroupNumbersList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase2DHGroupNumbersListValue(entry, context);
  });
};
var de_Phase2DHGroupNumbersListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = strictParseInt32(output[_v]);
  }
  return contents;
};
var de_Phase2EncryptionAlgorithmsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase2EncryptionAlgorithmsListValue(entry, context);
  });
};
var de_Phase2EncryptionAlgorithmsListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_Phase2IntegrityAlgorithmsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Phase2IntegrityAlgorithmsListValue(entry, context);
  });
};
var de_Phase2IntegrityAlgorithmsListValue = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_Placement = (output, context) => {
  const contents = {};
  if (output[_af] != null) {
    contents[_Af] = expectString(output[_af]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_pN] != null) {
    contents[_PN] = strictParseInt32(output[_pN]);
  }
  if (output[_hI] != null) {
    contents[_HIo] = expectString(output[_hI]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  if (output[_sDp] != null) {
    contents[_SDp] = expectString(output[_sDp]);
  }
  if (output[_hRGA] != null) {
    contents[_HRGA] = expectString(output[_hRGA]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  return contents;
};
var de_PlacementGroup = (output, context) => {
  const contents = {};
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_str] != null) {
    contents[_Str] = expectString(output[_str]);
  }
  if (output[_pCa] != null) {
    contents[_PCa] = strictParseInt32(output[_pCa]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_gA] != null) {
    contents[_GA] = expectString(output[_gA]);
  }
  if (output[_sLp] != null) {
    contents[_SL] = expectString(output[_sLp]);
  }
  return contents;
};
var de_PlacementGroupInfo = (output, context) => {
  const contents = {};
  if (output.supportedStrategies === "") {
    contents[_SSu] = [];
  } else if (output[_sSup] != null && output[_sSup][_i] != null) {
    contents[_SSu] = de_PlacementGroupStrategyList(getArrayIfSingleItem(output[_sSup][_i]), context);
  }
  return contents;
};
var de_PlacementGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PlacementGroup(entry, context);
  });
};
var de_PlacementGroupStrategyList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_PlacementResponse = (output, context) => {
  const contents = {};
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  return contents;
};
var de_PoolCidrBlock = (output, context) => {
  const contents = {};
  if (output[_pCB] != null) {
    contents[_C] = expectString(output[_pCB]);
  }
  return contents;
};
var de_PoolCidrBlocksSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PoolCidrBlock(entry, context);
  });
};
var de_PortRange = (output, context) => {
  const contents = {};
  if (output[_fr] != null) {
    contents[_Fr] = strictParseInt32(output[_fr]);
  }
  if (output[_to] != null) {
    contents[_To] = strictParseInt32(output[_to]);
  }
  return contents;
};
var de_PortRangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PortRange(entry, context);
  });
};
var de_PrefixList = (output, context) => {
  const contents = {};
  if (output.cidrSet === "") {
    contents[_Ci] = [];
  } else if (output[_cS] != null && output[_cS][_i] != null) {
    contents[_Ci] = de_ValueStringList(getArrayIfSingleItem(output[_cS][_i]), context);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_pLN] != null) {
    contents[_PLN] = expectString(output[_pLN]);
  }
  return contents;
};
var de_PrefixListAssociation = (output, context) => {
  const contents = {};
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rO] != null) {
    contents[_ROe] = expectString(output[_rO]);
  }
  return contents;
};
var de_PrefixListAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrefixListAssociation(entry, context);
  });
};
var de_PrefixListEntry = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  return contents;
};
var de_PrefixListEntrySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrefixListEntry(entry, context);
  });
};
var de_PrefixListId = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  return contents;
};
var de_PrefixListIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrefixListId(entry, context);
  });
};
var de_PrefixListIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_PrefixListSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrefixList(entry, context);
  });
};
var de_PriceSchedule = (output, context) => {
  const contents = {};
  if (output[_act] != null) {
    contents[_Act] = parseBoolean(output[_act]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_pric] != null) {
    contents[_Pric] = strictParseFloat(output[_pric]);
  }
  if (output[_te] != null) {
    contents[_Ter] = strictParseLong(output[_te]);
  }
  return contents;
};
var de_PriceScheduleList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PriceSchedule(entry, context);
  });
};
var de_PricingDetail = (output, context) => {
  const contents = {};
  if (output[_cou] != null) {
    contents[_Cou] = strictParseInt32(output[_cou]);
  }
  if (output[_pric] != null) {
    contents[_Pric] = strictParseFloat(output[_pric]);
  }
  return contents;
};
var de_PricingDetailsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PricingDetail(entry, context);
  });
};
var de_PrincipalIdFormat = (output, context) => {
  const contents = {};
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};
var de_PrincipalIdFormatList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrincipalIdFormat(entry, context);
  });
};
var de_PrivateDnsDetails = (output, context) => {
  const contents = {};
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  return contents;
};
var de_PrivateDnsDetailsSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrivateDnsDetails(entry, context);
  });
};
var de_PrivateDnsNameConfiguration = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  return contents;
};
var de_PrivateDnsNameOptionsOnLaunch = (output, context) => {
  const contents = {};
  if (output[_hTo] != null) {
    contents[_HTo] = expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};
var de_PrivateDnsNameOptionsResponse = (output, context) => {
  const contents = {};
  if (output[_hTo] != null) {
    contents[_HTo] = expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};
var de_PrivateIpAddressSpecification = (output, context) => {
  const contents = {};
  if (output[_prim] != null) {
    contents[_Prim] = parseBoolean(output[_prim]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = expectString(output[_pIA]);
  }
  return contents;
};
var de_PrivateIpAddressSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PrivateIpAddressSpecification(entry, context);
  });
};
var de_ProcessorInfo = (output, context) => {
  const contents = {};
  if (output.supportedArchitectures === "") {
    contents[_SAup] = [];
  } else if (output[_sAu] != null && output[_sAu][_i] != null) {
    contents[_SAup] = de_ArchitectureTypeList(getArrayIfSingleItem(output[_sAu][_i]), context);
  }
  if (output[_sCSIG] != null) {
    contents[_SCSIG] = strictParseFloat(output[_sCSIG]);
  }
  if (output.supportedFeatures === "") {
    contents[_SF] = [];
  } else if (output[_sF] != null && output[_sF][_i] != null) {
    contents[_SF] = de_SupportedAdditionalProcessorFeatureList(getArrayIfSingleItem(output[_sF][_i]), context);
  }
  if (output[_man] != null) {
    contents[_Man] = expectString(output[_man]);
  }
  return contents;
};
var de_ProductCode = (output, context) => {
  const contents = {};
  if (output[_pCr] != null) {
    contents[_PCIr] = expectString(output[_pCr]);
  }
  if (output[_ty] != null) {
    contents[_PCT] = expectString(output[_ty]);
  }
  return contents;
};
var de_ProductCodeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ProductCode(entry, context);
  });
};
var de_PropagatingVgw = (output, context) => {
  const contents = {};
  if (output[_gI] != null) {
    contents[_GI] = expectString(output[_gI]);
  }
  return contents;
};
var de_PropagatingVgwList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PropagatingVgw(entry, context);
  });
};
var de_ProtocolIntList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return strictParseInt32(entry);
  });
};
var de_ProtocolList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ProvisionByoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};
var de_ProvisionedBandwidth = (output, context) => {
  const contents = {};
  if (output[_pTr] != null) {
    contents[_PTro] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_pTr]));
  }
  if (output[_prov] != null) {
    contents[_Prov] = expectString(output[_prov]);
  }
  if (output[_rTeq] != null) {
    contents[_RTeq] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rTeq]));
  }
  if (output[_req] != null) {
    contents[_Req] = expectString(output[_req]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_ProvisionIpamByoasnResult = (output, context) => {
  const contents = {};
  if (output[_b] != null) {
    contents[_Byo] = de_Byoasn(output[_b], context);
  }
  return contents;
};
var de_ProvisionIpamPoolCidrResult = (output, context) => {
  const contents = {};
  if (output[_iPC] != null) {
    contents[_IPCpa] = de_IpamPoolCidr(output[_iPC], context);
  }
  return contents;
};
var de_ProvisionPublicIpv4PoolCidrResult = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  if (output[_pAR] != null) {
    contents[_PAR] = de_PublicIpv4PoolRange(output[_pAR], context);
  }
  return contents;
};
var de_PtrUpdateStatus = (output, context) => {
  const contents = {};
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_rea] != null) {
    contents[_Rea] = expectString(output[_rea]);
  }
  return contents;
};
var de_PublicIpv4Pool = (output, context) => {
  const contents = {};
  if (output[_pIo] != null) {
    contents[_PIo] = expectString(output[_pIo]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.poolAddressRangeSet === "") {
    contents[_PARo] = [];
  } else if (output[_pARS] != null && output[_pARS][_i] != null) {
    contents[_PARo] = de_PublicIpv4PoolRangeSet(getArrayIfSingleItem(output[_pARS][_i]), context);
  }
  if (output[_tAC] != null) {
    contents[_TAC] = strictParseInt32(output[_tAC]);
  }
  if (output[_tAAC] != null) {
    contents[_TAAC] = strictParseInt32(output[_tAAC]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_PublicIpv4PoolRange = (output, context) => {
  const contents = {};
  if (output[_fAi] != null) {
    contents[_FAi] = expectString(output[_fAi]);
  }
  if (output[_lAa] != null) {
    contents[_LAa] = expectString(output[_lAa]);
  }
  if (output[_aCd] != null) {
    contents[_ACd] = strictParseInt32(output[_aCd]);
  }
  if (output[_aAC] != null) {
    contents[_AACv] = strictParseInt32(output[_aAC]);
  }
  return contents;
};
var de_PublicIpv4PoolRangeSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PublicIpv4PoolRange(entry, context);
  });
};
var de_PublicIpv4PoolSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_PublicIpv4Pool(entry, context);
  });
};
var de_Purchase = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = strictParseInt32(output[_du]);
  }
  if (output.hostIdSet === "") {
    contents[_HIS] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HIS] = de_ResponseHostIdSet(getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = expectString(output[_hRI]);
  }
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = expectString(output[_iF]);
  }
  if (output[_pO] != null) {
    contents[_PO] = expectString(output[_pO]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = expectString(output[_uP]);
  }
  return contents;
};
var de_PurchaseCapacityBlockExtensionResult = (output, context) => {
  const contents = {};
  if (output.capacityBlockExtensionSet === "") {
    contents[_CBE] = [];
  } else if (output[_cBESa] != null && output[_cBESa][_i] != null) {
    contents[_CBE] = de_CapacityBlockExtensionSet(getArrayIfSingleItem(output[_cBESa][_i]), context);
  }
  return contents;
};
var de_PurchaseCapacityBlockResult = (output, context) => {
  const contents = {};
  if (output[_cR] != null) {
    contents[_CRapa] = de_CapacityReservation(output[_cR], context);
  }
  return contents;
};
var de_PurchasedScheduledInstanceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScheduledInstance(entry, context);
  });
};
var de_PurchaseHostReservationResult = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output.purchase === "") {
    contents[_Pur] = [];
  } else if (output[_pur] != null && output[_pur][_i] != null) {
    contents[_Pur] = de_PurchaseSet(getArrayIfSingleItem(output[_pur][_i]), context);
  }
  if (output[_tHP] != null) {
    contents[_THP] = expectString(output[_tHP]);
  }
  if (output[_tUP] != null) {
    contents[_TUP] = expectString(output[_tUP]);
  }
  return contents;
};
var de_PurchaseReservedInstancesOfferingResult = (output, context) => {
  const contents = {};
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  return contents;
};
var de_PurchaseScheduledInstancesResult = (output, context) => {
  const contents = {};
  if (output.scheduledInstanceSet === "") {
    contents[_SIS] = [];
  } else if (output[_sIS] != null && output[_sIS][_i] != null) {
    contents[_SIS] = de_PurchasedScheduledInstanceSet(getArrayIfSingleItem(output[_sIS][_i]), context);
  }
  return contents;
};
var de_PurchaseSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Purchase(entry, context);
  });
};
var de_RecurringCharge = (output, context) => {
  const contents = {};
  if (output[_am] != null) {
    contents[_Am] = strictParseFloat(output[_am]);
  }
  if (output[_fre] != null) {
    contents[_Fre] = expectString(output[_fre]);
  }
  return contents;
};
var de_RecurringChargesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RecurringCharge(entry, context);
  });
};
var de_ReferencedSecurityGroup = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_pSee] != null) {
    contents[_PSe] = expectString(output[_pSee]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = expectString(output[_uI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  return contents;
};
var de_Region = (output, context) => {
  const contents = {};
  if (output[_oIS] != null) {
    contents[_OIS] = expectString(output[_oIS]);
  }
  if (output[_rNe] != null) {
    contents[_RN] = expectString(output[_rNe]);
  }
  if (output[_rEe] != null) {
    contents[_Endp] = expectString(output[_rEe]);
  }
  return contents;
};
var de_RegionalSummary = (output, context) => {
  const contents = {};
  if (output[_rNe] != null) {
    contents[_RN] = expectString(output[_rNe]);
  }
  if (output[_nOMA] != null) {
    contents[_NOMA] = strictParseInt32(output[_nOMA]);
  }
  if (output[_nOUA] != null) {
    contents[_NOUA] = strictParseInt32(output[_nOUA]);
  }
  return contents;
};
var de_RegionalSummaryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RegionalSummary(entry, context);
  });
};
var de_RegionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Region(entry, context);
  });
};
var de_RegisterImageResult = (output, context) => {
  const contents = {};
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  return contents;
};
var de_RegisterInstanceEventNotificationAttributesResult = (output, context) => {
  const contents = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};
var de_RegisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
  const contents = {};
  if (output[_rMGM] != null) {
    contents[_RMGM] = de_TransitGatewayMulticastRegisteredGroupMembers(output[_rMGM], context);
  }
  return contents;
};
var de_RegisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
  const contents = {};
  if (output[_rMGS] != null) {
    contents[_RMGS] = de_TransitGatewayMulticastRegisteredGroupSources(output[_rMGS], context);
  }
  return contents;
};
var de_RejectCapacityReservationBillingOwnershipResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_RejectTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
  const contents = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};
var de_RejectTransitGatewayPeeringAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};
var de_RejectTransitGatewayVpcAttachmentResult = (output, context) => {
  const contents = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};
var de_RejectVpcEndpointConnectionsResult = (output, context) => {
  const contents = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_RejectVpcPeeringConnectionResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ReleaseHostsResult = (output, context) => {
  const contents = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_ResponseHostIdList(getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemList(getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};
var de_ReleaseIpamPoolAllocationResult = (output, context) => {
  const contents = {};
  if (output[_succ] != null) {
    contents[_Succ] = parseBoolean(output[_succ]);
  }
  return contents;
};
var de_ReplaceIamInstanceProfileAssociationResult = (output, context) => {
  const contents = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};
var de_ReplaceImageCriteriaInAllowedImagesSettingsResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ReplaceNetworkAclAssociationResult = (output, context) => {
  const contents = {};
  if (output[_nAIe] != null) {
    contents[_NAIew] = expectString(output[_nAIe]);
  }
  return contents;
};
var de_ReplaceRootVolumeTask = (output, context) => {
  const contents = {};
  if (output[_rRVTI] != null) {
    contents[_RRVTIe] = expectString(output[_rRVTI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_tSas] != null) {
    contents[_TSas] = expectString(output[_tSas]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectString(output[_sT]);
  }
  if (output[_cTom] != null) {
    contents[_CTom] = expectString(output[_cTom]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_dRRV] != null) {
    contents[_DRRV] = parseBoolean(output[_dRRV]);
  }
  return contents;
};
var de_ReplaceRootVolumeTasks = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReplaceRootVolumeTask(entry, context);
  });
};
var de_ReplaceRouteTableAssociationResult = (output, context) => {
  const contents = {};
  if (output[_nAIe] != null) {
    contents[_NAIew] = expectString(output[_nAIe]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};
var de_ReplaceTransitGatewayRouteResult = (output, context) => {
  const contents = {};
  if (output[_ro] != null) {
    contents[_Rou] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};
var de_ReplaceVpnTunnelResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_RequestSpotFleetResponse = (output, context) => {
  const contents = {};
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  return contents;
};
var de_RequestSpotInstancesResult = (output, context) => {
  const contents = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_SIR] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_SIR] = de_SpotInstanceRequestList(getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  return contents;
};
var de_Reservation = (output, context) => {
  const contents = {};
  if (output[_rIese] != null) {
    contents[_RIeser] = expectString(output[_rIese]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_rIeq] != null) {
    contents[_RIeq] = expectString(output[_rIeq]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output.instancesSet === "") {
    contents[_In] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_In] = de_InstanceList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_ReservationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Reservation(entry, context);
  });
};
var de_ReservationValue = (output, context) => {
  const contents = {};
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_rTV] != null) {
    contents[_RTV] = expectString(output[_rTV]);
  }
  if (output[_rUV] != null) {
    contents[_RUV] = expectString(output[_rUV]);
  }
  return contents;
};
var de_ReservedInstanceReservationValue = (output, context) => {
  const contents = {};
  if (output[_rVe] != null) {
    contents[_RVe] = de_ReservationValue(output[_rVe], context);
  }
  if (output[_rIIe] != null) {
    contents[_RIIese] = expectString(output[_rIIe]);
  }
  return contents;
};
var de_ReservedInstanceReservationValueSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstanceReservationValue(entry, context);
  });
};
var de_ReservedInstances = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = expectString(output[_iTns]);
  }
  if (output[_oC] != null) {
    contents[_OC] = expectString(output[_oC]);
  }
  if (output[_oTf] != null) {
    contents[_OT] = expectString(output[_oTf]);
  }
  if (output.recurringCharges === "") {
    contents[_RCec] = [];
  } else if (output[_rCec] != null && output[_rCec][_i] != null) {
    contents[_RCec] = de_RecurringChargesList(getArrayIfSingleItem(output[_rCec][_i]), context);
  }
  if (output[_sc] != null) {
    contents[_Sc] = expectString(output[_sc]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_star] != null) {
    contents[_Star] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_star]));
  }
  if (output[_end] != null) {
    contents[_End] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_end]));
  }
  if (output[_du] != null) {
    contents[_Du] = strictParseLong(output[_du]);
  }
  if (output[_uPs] != null) {
    contents[_UPs] = strictParseFloat(output[_uPs]);
  }
  if (output[_fPi] != null) {
    contents[_FPi] = strictParseFloat(output[_fPi]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = expectString(output[_pDr]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_ReservedInstancesConfiguration = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_sc] != null) {
    contents[_Sc] = expectString(output[_sc]);
  }
  return contents;
};
var de_ReservedInstancesId = (output, context) => {
  const contents = {};
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  return contents;
};
var de_ReservedInstancesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstances(entry, context);
  });
};
var de_ReservedInstancesListing = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output.instanceCounts === "") {
    contents[_ICn] = [];
  } else if (output[_iCn] != null && output[_iCn][_i] != null) {
    contents[_ICn] = de_InstanceCountList(getArrayIfSingleItem(output[_iCn][_i]), context);
  }
  if (output.priceSchedules === "") {
    contents[_PS] = [];
  } else if (output[_pSri] != null && output[_pSri][_i] != null) {
    contents[_PS] = de_PriceScheduleList(getArrayIfSingleItem(output[_pSri][_i]), context);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  if (output[_rILI] != null) {
    contents[_RILI] = expectString(output[_rILI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_uDpd] != null) {
    contents[_UDpd] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uDpd]));
  }
  return contents;
};
var de_ReservedInstancesListingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstancesListing(entry, context);
  });
};
var de_ReservedInstancesModification = (output, context) => {
  const contents = {};
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_eDf] != null) {
    contents[_EDf] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eDf]));
  }
  if (output.modificationResultSet === "") {
    contents[_MRo] = [];
  } else if (output[_mRS] != null && output[_mRS][_i] != null) {
    contents[_MRo] = de_ReservedInstancesModificationResultList(getArrayIfSingleItem(output[_mRS][_i]), context);
  }
  if (output.reservedInstancesSet === "") {
    contents[_RIIes] = [];
  } else if (output[_rIS] != null && output[_rIS][_i] != null) {
    contents[_RIIes] = de_ReservedIntancesIds(getArrayIfSingleItem(output[_rIS][_i]), context);
  }
  if (output[_rIMI] != null) {
    contents[_RIMIe] = expectString(output[_rIMI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_uDpd] != null) {
    contents[_UDpd] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uDpd]));
  }
  return contents;
};
var de_ReservedInstancesModificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstancesModification(entry, context);
  });
};
var de_ReservedInstancesModificationResult = (output, context) => {
  const contents = {};
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  if (output[_tCa] != null) {
    contents[_TCar] = de_ReservedInstancesConfiguration(output[_tCa], context);
  }
  return contents;
};
var de_ReservedInstancesModificationResultList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstancesModificationResult(entry, context);
  });
};
var de_ReservedInstancesOffering = (output, context) => {
  const contents = {};
  if (output[_cC] != null) {
    contents[_CCu] = expectString(output[_cC]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = expectString(output[_iTns]);
  }
  if (output[_mar] != null) {
    contents[_Mar] = parseBoolean(output[_mar]);
  }
  if (output[_oC] != null) {
    contents[_OC] = expectString(output[_oC]);
  }
  if (output[_oTf] != null) {
    contents[_OT] = expectString(output[_oTf]);
  }
  if (output.pricingDetailsSet === "") {
    contents[_PDri] = [];
  } else if (output[_pDS] != null && output[_pDS][_i] != null) {
    contents[_PDri] = de_PricingDetailsList(getArrayIfSingleItem(output[_pDS][_i]), context);
  }
  if (output.recurringCharges === "") {
    contents[_RCec] = [];
  } else if (output[_rCec] != null && output[_rCec][_i] != null) {
    contents[_RCec] = de_RecurringChargesList(getArrayIfSingleItem(output[_rCec][_i]), context);
  }
  if (output[_sc] != null) {
    contents[_Sc] = expectString(output[_sc]);
  }
  if (output[_rIOI] != null) {
    contents[_RIOIe] = expectString(output[_rIOI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_du] != null) {
    contents[_Du] = strictParseLong(output[_du]);
  }
  if (output[_uPs] != null) {
    contents[_UPs] = strictParseFloat(output[_uPs]);
  }
  if (output[_fPi] != null) {
    contents[_FPi] = strictParseFloat(output[_fPi]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = expectString(output[_pDr]);
  }
  return contents;
};
var de_ReservedInstancesOfferingList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstancesOffering(entry, context);
  });
};
var de_ReservedIntancesIds = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ReservedInstancesId(entry, context);
  });
};
var de_ResetAddressAttributeResult = (output, context) => {
  const contents = {};
  if (output[_ad] != null) {
    contents[_Ad] = de_AddressAttribute(output[_ad], context);
  }
  return contents;
};
var de_ResetEbsDefaultKmsKeyIdResult = (output, context) => {
  const contents = {};
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  return contents;
};
var de_ResetFpgaImageAttributeResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_ResourceStatement = (output, context) => {
  const contents = {};
  if (output.resourceSet === "") {
    contents[_Re] = [];
  } else if (output[_rSesou] != null && output[_rSesou][_i] != null) {
    contents[_Re] = de_ValueStringList(getArrayIfSingleItem(output[_rSesou][_i]), context);
  }
  if (output.resourceTypeSet === "") {
    contents[_RTeso] = [];
  } else if (output[_rTSes] != null && output[_rTSes][_i] != null) {
    contents[_RTeso] = de_ValueStringList(getArrayIfSingleItem(output[_rTSes][_i]), context);
  }
  return contents;
};
var de_ResponseError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ResponseHostIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ResponseHostIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ResponseLaunchTemplateData = (output, context) => {
  const contents = {};
  if (output[_kI] != null) {
    contents[_KI] = expectString(output[_kI]);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_LaunchTemplateIamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output.blockDeviceMappingSet === "") {
    contents[_BDM] = [];
  } else if (output[_bDMS] != null && output[_bDMS][_i] != null) {
    contents[_BDM] = de_LaunchTemplateBlockDeviceMappingList(getArrayIfSingleItem(output[_bDMS][_i]), context);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_LaunchTemplateInstanceNetworkInterfaceSpecificationList(getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_LaunchTemplatesMonitoring(output[_mo], context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_LaunchTemplatePlacement(output[_pla], context);
  }
  if (output[_rDI] != null) {
    contents[_RDI] = expectString(output[_rDI]);
  }
  if (output[_dAT] != null) {
    contents[_DATis] = parseBoolean(output[_dAT]);
  }
  if (output[_iISB] != null) {
    contents[_IISB] = expectString(output[_iISB]);
  }
  if (output[_uDs] != null) {
    contents[_UD] = expectString(output[_uDs]);
  }
  if (output.tagSpecificationSet === "") {
    contents[_TS] = [];
  } else if (output[_tSS] != null && output[_tSS][_i] != null) {
    contents[_TS] = de_LaunchTemplateTagSpecificationList(getArrayIfSingleItem(output[_tSS][_i]), context);
  }
  if (output.elasticGpuSpecificationSet === "") {
    contents[_EGS] = [];
  } else if (output[_eGSS] != null && output[_eGSS][_i] != null) {
    contents[_EGS] = de_ElasticGpuSpecificationResponseList(getArrayIfSingleItem(output[_eGSS][_i]), context);
  }
  if (output.elasticInferenceAcceleratorSet === "") {
    contents[_EIA] = [];
  } else if (output[_eIAS] != null && output[_eIAS][_i] != null) {
    contents[_EIA] = de_LaunchTemplateElasticInferenceAcceleratorResponseList(getArrayIfSingleItem(output[_eIAS][_i]), context);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_ValueStringList(getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_ValueStringList(getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_iMOn] != null) {
    contents[_IMO] = de_LaunchTemplateInstanceMarketOptions(output[_iMOn], context);
  }
  if (output[_cSr] != null) {
    contents[_CSred] = de_CreditSpecification(output[_cSr], context);
  }
  if (output[_cO] != null) {
    contents[_COp] = de_LaunchTemplateCpuOptions(output[_cO], context);
  }
  if (output[_cRSa] != null) {
    contents[_CRS] = de_LaunchTemplateCapacityReservationSpecificationResponse(output[_cRSa], context);
  }
  if (output.licenseSet === "") {
    contents[_LSi] = [];
  } else if (output[_lSi] != null && output[_lSi][_i] != null) {
    contents[_LSi] = de_LaunchTemplateLicenseList(getArrayIfSingleItem(output[_lSi][_i]), context);
  }
  if (output[_hO] != null) {
    contents[_HO] = de_LaunchTemplateHibernationOptions(output[_hO], context);
  }
  if (output[_mO] != null) {
    contents[_MO] = de_LaunchTemplateInstanceMetadataOptions(output[_mO], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_LaunchTemplateEnclaveOptions(output[_eOn], context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  if (output[_pDNO] != null) {
    contents[_PDNO] = de_LaunchTemplatePrivateDnsNameOptions(output[_pDNO], context);
  }
  if (output[_mOa] != null) {
    contents[_MOa] = de_LaunchTemplateInstanceMaintenanceOptions(output[_mOa], context);
  }
  if (output[_dASi] != null) {
    contents[_DAS] = parseBoolean(output[_dASi]);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  if (output[_nPO] != null) {
    contents[_NPO] = de_LaunchTemplateNetworkPerformanceOptions(output[_nPO], context);
  }
  return contents;
};
var de_RestoreAddressToClassicResult = (output, context) => {
  const contents = {};
  if (output[_pI] != null) {
    contents[_PI] = expectString(output[_pI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_RestoreImageFromRecycleBinResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_RestoreManagedPrefixListVersionResult = (output, context) => {
  const contents = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};
var de_RestoreSnapshotFromRecycleBinResult = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_sta] != null) {
    contents[_Stat] = expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = strictParseInt32(output[_vSo]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = expectString(output[_sTs]);
  }
  return contents;
};
var de_RestoreSnapshotTierResult = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_rST] != null) {
    contents[_RSTe] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rST]));
  }
  if (output[_rD] != null) {
    contents[_RD] = strictParseInt32(output[_rD]);
  }
  if (output[_iPR] != null) {
    contents[_IPR] = parseBoolean(output[_iPR]);
  }
  return contents;
};
var de_RevokeClientVpnIngressResult = (output, context) => {
  const contents = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};
var de_RevokedSecurityGroupRule = (output, context) => {
  const contents = {};
  if (output[_sGRI] != null) {
    contents[_SGRIe] = expectString(output[_sGRI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_iEs] != null) {
    contents[_IE] = parseBoolean(output[_iEs]);
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = expectString(output[_iPpr]);
  }
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  if (output[_cIidr] != null) {
    contents[_CIidr] = expectString(output[_cIidr]);
  }
  if (output[_cIid] != null) {
    contents[_CIid] = expectString(output[_cIid]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_rGI] != null) {
    contents[_RGI] = expectString(output[_rGI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  return contents;
};
var de_RevokedSecurityGroupRuleList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RevokedSecurityGroupRule(entry, context);
  });
};
var de_RevokeSecurityGroupEgressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents[_UIP] = [];
  } else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
    contents[_UIP] = de_IpPermissionList(getArrayIfSingleItem(output[_uIPS][_i]), context);
  }
  if (output.revokedSecurityGroupRuleSet === "") {
    contents[_RSGR] = [];
  } else if (output[_rSGRS] != null && output[_rSGRS][_i] != null) {
    contents[_RSGR] = de_RevokedSecurityGroupRuleList(getArrayIfSingleItem(output[_rSGRS][_i]), context);
  }
  return contents;
};
var de_RevokeSecurityGroupIngressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents[_UIP] = [];
  } else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
    contents[_UIP] = de_IpPermissionList(getArrayIfSingleItem(output[_uIPS][_i]), context);
  }
  if (output.revokedSecurityGroupRuleSet === "") {
    contents[_RSGR] = [];
  } else if (output[_rSGRS] != null && output[_rSGRS][_i] != null) {
    contents[_RSGR] = de_RevokedSecurityGroupRuleList(getArrayIfSingleItem(output[_rSGRS][_i]), context);
  }
  return contents;
};
var de_RootDeviceTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Route = (output, context) => {
  const contents = {};
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_dICB] != null) {
    contents[_DICB] = expectString(output[_dICB]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = expectString(output[_dPLI]);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = expectString(output[_eOIGI]);
  }
  if (output[_gI] != null) {
    contents[_GI] = expectString(output[_gI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_iOIn] != null) {
    contents[_IOIn] = expectString(output[_iOIn]);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = expectString(output[_lGI]);
  }
  if (output[_cGI] != null) {
    contents[_CGI] = expectString(output[_cGI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_o] != null) {
    contents[_Or] = expectString(output[_o]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = expectString(output[_cNA]);
  }
  return contents;
};
var de_RouteList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Route(entry, context);
  });
};
var de_RouteTable = (output, context) => {
  const contents = {};
  if (output.associationSet === "") {
    contents[_Ass] = [];
  } else if (output[_aSss] != null && output[_aSss][_i] != null) {
    contents[_Ass] = de_RouteTableAssociationList(getArrayIfSingleItem(output[_aSss][_i]), context);
  }
  if (output.propagatingVgwSet === "") {
    contents[_PVr] = [];
  } else if (output[_pVS] != null && output[_pVS][_i] != null) {
    contents[_PVr] = de_PropagatingVgwList(getArrayIfSingleItem(output[_pVS][_i]), context);
  }
  if (output[_rTI] != null) {
    contents[_RTI] = expectString(output[_rTI]);
  }
  if (output.routeSet === "") {
    contents[_Rout] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rout] = de_RouteList(getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  return contents;
};
var de_RouteTableAssociation = (output, context) => {
  const contents = {};
  if (output[_mai] != null) {
    contents[_Mai] = parseBoolean(output[_mai]);
  }
  if (output[_rTAI] != null) {
    contents[_RTAI] = expectString(output[_rTAI]);
  }
  if (output[_rTI] != null) {
    contents[_RTI] = expectString(output[_rTI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_gI] != null) {
    contents[_GI] = expectString(output[_gI]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};
var de_RouteTableAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RouteTableAssociation(entry, context);
  });
};
var de_RouteTableAssociationState = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  return contents;
};
var de_RouteTableList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RouteTable(entry, context);
  });
};
var de_RuleGroupRuleOptionsPair = (output, context) => {
  const contents = {};
  if (output[_rGA] != null) {
    contents[_RGA] = expectString(output[_rGA]);
  }
  if (output.ruleOptionSet === "") {
    contents[_ROu] = [];
  } else if (output[_rOS] != null && output[_rOS][_i] != null) {
    contents[_ROu] = de_RuleOptionList(getArrayIfSingleItem(output[_rOS][_i]), context);
  }
  return contents;
};
var de_RuleGroupRuleOptionsPairList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RuleGroupRuleOptionsPair(entry, context);
  });
};
var de_RuleGroupTypePair = (output, context) => {
  const contents = {};
  if (output[_rGA] != null) {
    contents[_RGA] = expectString(output[_rGA]);
  }
  if (output[_rGT] != null) {
    contents[_RGT] = expectString(output[_rGT]);
  }
  return contents;
};
var de_RuleGroupTypePairList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RuleGroupTypePair(entry, context);
  });
};
var de_RuleOption = (output, context) => {
  const contents = {};
  if (output[_key] != null) {
    contents[_Key] = expectString(output[_key]);
  }
  if (output.settingSet === "") {
    contents[_Set] = [];
  } else if (output[_sSe] != null && output[_sSe][_i] != null) {
    contents[_Set] = de_StringList(getArrayIfSingleItem(output[_sSe][_i]), context);
  }
  return contents;
};
var de_RuleOptionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_RuleOption(entry, context);
  });
};
var de_RunInstancesMonitoringEnabled = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  return contents;
};
var de_RunScheduledInstancesResult = (output, context) => {
  const contents = {};
  if (output.instanceIdSet === "") {
    contents[_IIS] = [];
  } else if (output[_iIS] != null && output[_iIS][_i] != null) {
    contents[_IIS] = de_InstanceIdSet(getArrayIfSingleItem(output[_iIS][_i]), context);
  }
  return contents;
};
var de_S3Storage = (output, context) => {
  const contents = {};
  if (output[_AWSAKI] != null) {
    contents[_AWSAKI] = expectString(output[_AWSAKI]);
  }
  if (output[_bu] != null) {
    contents[_B] = expectString(output[_bu]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = expectString(output[_pre]);
  }
  if (output[_uPp] != null) {
    contents[_UP] = context.base64Decoder(output[_uPp]);
  }
  if (output[_uPS] != null) {
    contents[_UPS] = expectString(output[_uPS]);
  }
  return contents;
};
var de_ScheduledInstance = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_nPe] != null) {
    contents[_NPe] = expectString(output[_nPe]);
  }
  if (output[_nSST] != null) {
    contents[_NSST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nSST]));
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_pSET] != null) {
    contents[_PSET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_pSET]));
  }
  if (output[_rec] != null) {
    contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec], context);
  }
  if (output[_sIIc] != null) {
    contents[_SIIch] = expectString(output[_sIIc]);
  }
  if (output[_sDIH] != null) {
    contents[_SDIH] = strictParseInt32(output[_sDIH]);
  }
  if (output[_tED] != null) {
    contents[_TED] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tED]));
  }
  if (output[_tSD] != null) {
    contents[_TSD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tSD]));
  }
  if (output[_tSIH] != null) {
    contents[_TSIH] = strictParseInt32(output[_tSIH]);
  }
  return contents;
};
var de_ScheduledInstanceAvailability = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_aICv] != null) {
    contents[_AICv] = strictParseInt32(output[_aICv]);
  }
  if (output[_fSST] != null) {
    contents[_FSST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_fSST]));
  }
  if (output[_hPo] != null) {
    contents[_HPo] = expectString(output[_hPo]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_mTDID] != null) {
    contents[_MTDID] = strictParseInt32(output[_mTDID]);
  }
  if (output[_mTDIDi] != null) {
    contents[_MTDIDi] = strictParseInt32(output[_mTDIDi]);
  }
  if (output[_nPe] != null) {
    contents[_NPe] = expectString(output[_nPe]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_pTu] != null) {
    contents[_PT] = expectString(output[_pTu]);
  }
  if (output[_rec] != null) {
    contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec], context);
  }
  if (output[_sDIH] != null) {
    contents[_SDIH] = strictParseInt32(output[_sDIH]);
  }
  if (output[_tSIH] != null) {
    contents[_TSIH] = strictParseInt32(output[_tSIH]);
  }
  return contents;
};
var de_ScheduledInstanceAvailabilitySet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScheduledInstanceAvailability(entry, context);
  });
};
var de_ScheduledInstanceRecurrence = (output, context) => {
  const contents = {};
  if (output[_fre] != null) {
    contents[_Fre] = expectString(output[_fre]);
  }
  if (output[_int] != null) {
    contents[_Int] = strictParseInt32(output[_int]);
  }
  if (output.occurrenceDaySet === "") {
    contents[_ODS] = [];
  } else if (output[_oDS] != null && output[_oDS][_i] != null) {
    contents[_ODS] = de_OccurrenceDaySet(getArrayIfSingleItem(output[_oDS][_i]), context);
  }
  if (output[_oRTE] != null) {
    contents[_ORTE] = parseBoolean(output[_oRTE]);
  }
  if (output[_oU] != null) {
    contents[_OU] = expectString(output[_oU]);
  }
  return contents;
};
var de_ScheduledInstanceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ScheduledInstance(entry, context);
  });
};
var de_SearchLocalGatewayRoutesResult = (output, context) => {
  const contents = {};
  if (output.routeSet === "") {
    contents[_Rout] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rout] = de_LocalGatewayRouteList(getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_SearchTransitGatewayMulticastGroupsResult = (output, context) => {
  const contents = {};
  if (output.multicastGroups === "") {
    contents[_MG] = [];
  } else if (output[_mG] != null && output[_mG][_i] != null) {
    contents[_MG] = de_TransitGatewayMulticastGroupList(getArrayIfSingleItem(output[_mG][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = expectString(output[_nTe]);
  }
  return contents;
};
var de_SearchTransitGatewayRoutesResult = (output, context) => {
  const contents = {};
  if (output.routeSet === "") {
    contents[_Rout] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rout] = de_TransitGatewayRouteList(getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output[_aRAd] != null) {
    contents[_ARAd] = parseBoolean(output[_aRAd]);
  }
  return contents;
};
var de_SecurityGroup = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output.ipPermissionsEgress === "") {
    contents[_IPE] = [];
  } else if (output[_iPE] != null && output[_iPE][_i] != null) {
    contents[_IPE] = de_IpPermissionList(getArrayIfSingleItem(output[_iPE][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sGA] != null) {
    contents[_SGA] = expectString(output[_sGA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_gD] != null) {
    contents[_De] = expectString(output[_gD]);
  }
  if (output.ipPermissions === "") {
    contents[_IPpe] = [];
  } else if (output[_iPpe] != null && output[_iPpe][_i] != null) {
    contents[_IPpe] = de_IpPermissionList(getArrayIfSingleItem(output[_iPpe][_i]), context);
  }
  return contents;
};
var de_SecurityGroupForVpc = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pVI] != null) {
    contents[_PVIr] = expectString(output[_pVI]);
  }
  return contents;
};
var de_SecurityGroupForVpcList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroupForVpc(entry, context);
  });
};
var de_SecurityGroupIdentifier = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  return contents;
};
var de_SecurityGroupIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_SecurityGroupIdSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_SecurityGroupIdStringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_SecurityGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroup(entry, context);
  });
};
var de_SecurityGroupReference = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_rVI] != null) {
    contents[_RVI] = expectString(output[_rVI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  return contents;
};
var de_SecurityGroupReferences = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroupReference(entry, context);
  });
};
var de_SecurityGroupRule = (output, context) => {
  const contents = {};
  if (output[_sGRI] != null) {
    contents[_SGRIe] = expectString(output[_sGRI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_gOI] != null) {
    contents[_GOI] = expectString(output[_gOI]);
  }
  if (output[_iEs] != null) {
    contents[_IE] = parseBoolean(output[_iEs]);
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = expectString(output[_iPpr]);
  }
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  if (output[_cIidr] != null) {
    contents[_CIidr] = expectString(output[_cIidr]);
  }
  if (output[_cIid] != null) {
    contents[_CIid] = expectString(output[_cIid]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_rGIe] != null) {
    contents[_RGIe] = de_ReferencedSecurityGroup(output[_rGIe], context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sGRA] != null) {
    contents[_SGRA] = expectString(output[_sGRA]);
  }
  return contents;
};
var de_SecurityGroupRuleList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroupRule(entry, context);
  });
};
var de_SecurityGroupVpcAssociation = (output, context) => {
  const contents = {};
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_vOIp] != null) {
    contents[_VOIp] = expectString(output[_vOIp]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sRt] != null) {
    contents[_SRt] = expectString(output[_sRt]);
  }
  return contents;
};
var de_SecurityGroupVpcAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SecurityGroupVpcAssociation(entry, context);
  });
};
var de_ServiceConfiguration = (output, context) => {
  const contents = {};
  if (output.serviceType === "") {
    contents[_STe] = [];
  } else if (output[_sTe] != null && output[_sTe][_i] != null) {
    contents[_STe] = de_ServiceTypeDetailSet(getArrayIfSingleItem(output[_sTe][_i]), context);
  }
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  if (output[_sN] != null) {
    contents[_SNe] = expectString(output[_sN]);
  }
  if (output[_sSer] != null) {
    contents[_SSe] = expectString(output[_sSer]);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output[_aRcc] != null) {
    contents[_ARc] = parseBoolean(output[_aRcc]);
  }
  if (output[_mVE] != null) {
    contents[_MVEa] = parseBoolean(output[_mVE]);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents[_NLBAe] = [];
  } else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
    contents[_NLBAe] = de_ValueStringList(getArrayIfSingleItem(output[_nLBAS][_i]), context);
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents[_GLBA] = [];
  } else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
    contents[_GLBA] = de_ValueStringList(getArrayIfSingleItem(output[_gLBAS][_i]), context);
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents[_SIAT] = [];
  } else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
    contents[_SIAT] = de_SupportedIpAddressTypes(getArrayIfSingleItem(output[_sIATS][_i]), context);
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents[_BEDN] = [];
  } else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
    contents[_BEDN] = de_ValueStringList(getArrayIfSingleItem(output[_bEDNS][_i]), context);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output[_pDNC] != null) {
    contents[_PDNC] = de_PrivateDnsNameConfiguration(output[_pDNC], context);
  }
  if (output[_pRa] != null) {
    contents[_PRa] = expectString(output[_pRa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.supportedRegionSet === "") {
    contents[_SRu] = [];
  } else if (output[_sRS] != null && output[_sRS][_i] != null) {
    contents[_SRu] = de_SupportedRegionSet(getArrayIfSingleItem(output[_sRS][_i]), context);
  }
  if (output[_rAE] != null) {
    contents[_RAE] = parseBoolean(output[_rAE]);
  }
  return contents;
};
var de_ServiceConfigurationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServiceConfiguration(entry, context);
  });
};
var de_ServiceDetail = (output, context) => {
  const contents = {};
  if (output[_sN] != null) {
    contents[_SNe] = expectString(output[_sN]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  if (output.serviceType === "") {
    contents[_STe] = [];
  } else if (output[_sTe] != null && output[_sTe][_i] != null) {
    contents[_STe] = de_ServiceTypeDetailSet(getArrayIfSingleItem(output[_sTe][_i]), context);
  }
  if (output[_sR] != null) {
    contents[_SRe] = expectString(output[_sR]);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output[_ow] != null) {
    contents[_Own] = expectString(output[_ow]);
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents[_BEDN] = [];
  } else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
    contents[_BEDN] = de_ValueStringList(getArrayIfSingleItem(output[_bEDNS][_i]), context);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = expectString(output[_pDN]);
  }
  if (output.privateDnsNameSet === "") {
    contents[_PDNr] = [];
  } else if (output[_pDNS] != null && output[_pDNS][_i] != null) {
    contents[_PDNr] = de_PrivateDnsDetailsSet(getArrayIfSingleItem(output[_pDNS][_i]), context);
  }
  if (output[_vEPS] != null) {
    contents[_VEPS] = parseBoolean(output[_vEPS]);
  }
  if (output[_aRcc] != null) {
    contents[_ARc] = parseBoolean(output[_aRcc]);
  }
  if (output[_mVE] != null) {
    contents[_MVEa] = parseBoolean(output[_mVE]);
  }
  if (output[_pRa] != null) {
    contents[_PRa] = expectString(output[_pRa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pDNVS] != null) {
    contents[_PDNVS] = expectString(output[_pDNVS]);
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents[_SIAT] = [];
  } else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
    contents[_SIAT] = de_SupportedIpAddressTypes(getArrayIfSingleItem(output[_sIATS][_i]), context);
  }
  return contents;
};
var de_ServiceDetailSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServiceDetail(entry, context);
  });
};
var de_ServiceTypeDetail = (output, context) => {
  const contents = {};
  if (output[_sTe] != null) {
    contents[_STe] = expectString(output[_sTe]);
  }
  return contents;
};
var de_ServiceTypeDetailSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ServiceTypeDetail(entry, context);
  });
};
var de_Snapshot = (output, context) => {
  const contents = {};
  if (output[_oAw] != null) {
    contents[_OAw] = expectString(output[_oAw]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sTt] != null) {
    contents[_STto] = expectString(output[_sTt]);
  }
  if (output[_rET] != null) {
    contents[_RET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rET]));
  }
  if (output[_sTs] != null) {
    contents[_STs] = expectString(output[_sTs]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_tTr] != null) {
    contents[_TTr] = expectString(output[_tTr]);
  }
  if (output[_cDM] != null) {
    contents[_CDM] = strictParseInt32(output[_cDM]);
  }
  if (output[_cTomp] != null) {
    contents[_CTomp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTomp]));
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_sta] != null) {
    contents[_Stat] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SMt] = expectString(output[_sM]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = strictParseInt32(output[_vSo]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_dEKI] != null) {
    contents[_DEKI] = expectString(output[_dEKI]);
  }
  return contents;
};
var de_SnapshotDetail = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_dN] != null) {
    contents[_DN] = expectString(output[_dN]);
  }
  if (output[_dIS] != null) {
    contents[_DISi] = strictParseFloat(output[_dIS]);
  }
  if (output[_f] != null) {
    contents[_Fo] = expectString(output[_f]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_ur] != null) {
    contents[_U] = expectString(output[_ur]);
  }
  if (output[_uB] != null) {
    contents[_UB] = de_UserBucketDetails(output[_uB], context);
  }
  return contents;
};
var de_SnapshotDetailList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SnapshotDetail(entry, context);
  });
};
var de_SnapshotInfo = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = strictParseInt32(output[_vSo]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = expectString(output[_sTs]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  return contents;
};
var de_SnapshotList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Snapshot(entry, context);
  });
};
var de_SnapshotRecycleBinInfo = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_rBET] != null) {
    contents[_RBET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rBET]));
  }
  if (output[_rBETe] != null) {
    contents[_RBETe] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rBETe]));
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  return contents;
};
var de_SnapshotRecycleBinInfoList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SnapshotRecycleBinInfo(entry, context);
  });
};
var de_SnapshotSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SnapshotInfo(entry, context);
  });
};
var de_SnapshotTaskDetail = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_dIS] != null) {
    contents[_DISi] = strictParseFloat(output[_dIS]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_f] != null) {
    contents[_Fo] = expectString(output[_f]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = expectString(output[_pro]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_ur] != null) {
    contents[_U] = expectString(output[_ur]);
  }
  if (output[_uB] != null) {
    contents[_UB] = de_UserBucketDetails(output[_uB], context);
  }
  return contents;
};
var de_SnapshotTierStatus = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sTt] != null) {
    contents[_STto] = expectString(output[_sTt]);
  }
  if (output[_lTST] != null) {
    contents[_LTST] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lTST]));
  }
  if (output[_lTP] != null) {
    contents[_LTP] = strictParseInt32(output[_lTP]);
  }
  if (output[_lTOS] != null) {
    contents[_LTOS] = expectString(output[_lTOS]);
  }
  if (output[_lTOSD] != null) {
    contents[_LTOSD] = expectString(output[_lTOSD]);
  }
  if (output[_aCT] != null) {
    contents[_ACT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aCT]));
  }
  if (output[_rET] != null) {
    contents[_RET] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_rET]));
  }
  return contents;
};
var de_snapshotTierStatusSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SnapshotTierStatus(entry, context);
  });
};
var de_SpotCapacityRebalance = (output, context) => {
  const contents = {};
  if (output[_rSep] != null) {
    contents[_RS] = expectString(output[_rSep]);
  }
  if (output[_tD] != null) {
    contents[_TDe] = strictParseInt32(output[_tD]);
  }
  return contents;
};
var de_SpotDatafeedSubscription = (output, context) => {
  const contents = {};
  if (output[_bu] != null) {
    contents[_B] = expectString(output[_bu]);
  }
  if (output[_fa] != null) {
    contents[_Fa] = de_SpotInstanceStateFault(output[_fa], context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = expectString(output[_pre]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_SpotFleetLaunchSpecification = (output, context) => {
  const contents = {};
  if (output[_aTdd] != null) {
    contents[_ATd] = expectString(output[_aTdd]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_eO] != null) {
    contents[_EO] = parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_kI] != null) {
    contents[_KI] = expectString(output[_kI]);
  }
  if (output[_kN] != null) {
    contents[_KN] = expectString(output[_kN]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_SpotFleetMonitoring(output[_mo], context);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_SpotPlacement(output[_pla], context);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = expectString(output[_rIa]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = expectString(output[_sPp]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_uDs] != null) {
    contents[_UD] = expectString(output[_uDs]);
  }
  if (output[_wC] != null) {
    contents[_WCe] = strictParseFloat(output[_wC]);
  }
  if (output.tagSpecificationSet === "") {
    contents[_TS] = [];
  } else if (output[_tSS] != null && output[_tSS][_i] != null) {
    contents[_TS] = de_SpotFleetTagSpecificationList(getArrayIfSingleItem(output[_tSS][_i]), context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  return contents;
};
var de_SpotFleetMonitoring = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  return contents;
};
var de_SpotFleetRequestConfig = (output, context) => {
  const contents = {};
  if (output[_aSc] != null) {
    contents[_ASc] = expectString(output[_aSc]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_sFRC] != null) {
    contents[_SFRC] = de_SpotFleetRequestConfigData(output[_sFRC], context);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = expectString(output[_sFRI]);
  }
  if (output[_sFRSp] != null) {
    contents[_SFRS] = expectString(output[_sFRSp]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_SpotFleetRequestConfigData = (output, context) => {
  const contents = {};
  if (output[_aSl] != null) {
    contents[_AS] = expectString(output[_aSl]);
  }
  if (output[_oDAS] != null) {
    contents[_ODAS] = expectString(output[_oDAS]);
  }
  if (output[_sMS] != null) {
    contents[_SMS] = de_SpotMaintenanceStrategies(output[_sMS], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = expectString(output[_cT]);
  }
  if (output[_eCTP] != null) {
    contents[_ECTP] = expectString(output[_eCTP]);
  }
  if (output[_fC] != null) {
    contents[_FC] = strictParseFloat(output[_fC]);
  }
  if (output[_oDFC] != null) {
    contents[_ODFC] = strictParseFloat(output[_oDFC]);
  }
  if (output[_iFR] != null) {
    contents[_IFR] = expectString(output[_iFR]);
  }
  if (output.launchSpecifications === "") {
    contents[_LSau] = [];
  } else if (output[_lSa] != null && output[_lSa][_i] != null) {
    contents[_LSau] = de_LaunchSpecsList(getArrayIfSingleItem(output[_lSa][_i]), context);
  }
  if (output.launchTemplateConfigs === "") {
    contents[_LTC] = [];
  } else if (output[_lTC] != null && output[_lTC][_i] != null) {
    contents[_LTC] = de_LaunchTemplateConfigList(getArrayIfSingleItem(output[_lTC][_i]), context);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = expectString(output[_sPp]);
  }
  if (output[_tCar] != null) {
    contents[_TCa] = strictParseInt32(output[_tCar]);
  }
  if (output[_oDTC] != null) {
    contents[_ODTC] = strictParseInt32(output[_oDTC]);
  }
  if (output[_oDMTP] != null) {
    contents[_ODMTP] = expectString(output[_oDMTP]);
  }
  if (output[_sMTP] != null) {
    contents[_SMTP] = expectString(output[_sMTP]);
  }
  if (output[_tIWE] != null) {
    contents[_TIWE] = parseBoolean(output[_tIWE]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_rUI] != null) {
    contents[_RUI] = parseBoolean(output[_rUI]);
  }
  if (output[_iIB] != null) {
    contents[_IIB] = expectString(output[_iIB]);
  }
  if (output[_lBC] != null) {
    contents[_LBC] = de_LoadBalancersConfig(output[_lBC], context);
  }
  if (output[_iPTUC] != null) {
    contents[_IPTUC] = strictParseInt32(output[_iPTUC]);
  }
  if (output[_cont] != null) {
    contents[_Con] = expectString(output[_cont]);
  }
  if (output[_tCUT] != null) {
    contents[_TCUT] = expectString(output[_tCUT]);
  }
  if (output.TagSpecification === "") {
    contents[_TS] = [];
  } else if (output[_TSagp] != null && output[_TSagp][_i] != null) {
    contents[_TS] = de_TagSpecificationList(getArrayIfSingleItem(output[_TSagp][_i]), context);
  }
  return contents;
};
var de_SpotFleetRequestConfigSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotFleetRequestConfig(entry, context);
  });
};
var de_SpotFleetTagSpecification = (output, context) => {
  const contents = {};
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output.tag === "") {
    contents[_Ta] = [];
  } else if (output[_tag] != null && output[_tag][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tag][_i]), context);
  }
  return contents;
};
var de_SpotFleetTagSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotFleetTagSpecification(entry, context);
  });
};
var de_SpotInstanceRequest = (output, context) => {
  const contents = {};
  if (output[_aBHP] != null) {
    contents[_ABHP] = expectString(output[_aBHP]);
  }
  if (output[_aZG] != null) {
    contents[_AZG] = expectString(output[_aZG]);
  }
  if (output[_bDMl] != null) {
    contents[_BDMl] = strictParseInt32(output[_bDMl]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_fa] != null) {
    contents[_Fa] = de_SpotInstanceStateFault(output[_fa], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_lG] != null) {
    contents[_LG] = expectString(output[_lG]);
  }
  if (output[_lSau] != null) {
    contents[_LSa] = de_LaunchSpecification(output[_lSau], context);
  }
  if (output[_lAZ] != null) {
    contents[_LAZ] = expectString(output[_lAZ]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = expectString(output[_pDr]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = expectString(output[_sIRI]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = expectString(output[_sPp]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_SpotInstanceStatus(output[_sta], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_iIB] != null) {
    contents[_IIB] = expectString(output[_iIB]);
  }
  return contents;
};
var de_SpotInstanceRequestList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotInstanceRequest(entry, context);
  });
};
var de_SpotInstanceStateFault = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_SpotInstanceStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  if (output[_uT] != null) {
    contents[_UTp] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  return contents;
};
var de_SpotMaintenanceStrategies = (output, context) => {
  const contents = {};
  if (output[_cRa] != null) {
    contents[_CRap] = de_SpotCapacityRebalance(output[_cRa], context);
  }
  return contents;
};
var de_SpotOptions = (output, context) => {
  const contents = {};
  if (output[_aSl] != null) {
    contents[_AS] = expectString(output[_aSl]);
  }
  if (output[_mSai] != null) {
    contents[_MS] = de_FleetSpotMaintenanceStrategies(output[_mSai], context);
  }
  if (output[_iIB] != null) {
    contents[_IIB] = expectString(output[_iIB]);
  }
  if (output[_iPTUC] != null) {
    contents[_IPTUC] = strictParseInt32(output[_iPTUC]);
  }
  if (output[_sITi] != null) {
    contents[_SITi] = parseBoolean(output[_sITi]);
  }
  if (output[_sAZ] != null) {
    contents[_SAZ] = parseBoolean(output[_sAZ]);
  }
  if (output[_mTC] != null) {
    contents[_MTC] = strictParseInt32(output[_mTC]);
  }
  if (output[_mTP] != null) {
    contents[_MTP] = expectString(output[_mTP]);
  }
  return contents;
};
var de_SpotPlacement = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_t] != null) {
    contents[_Te] = expectString(output[_t]);
  }
  return contents;
};
var de_SpotPlacementScore = (output, context) => {
  const contents = {};
  if (output[_re] != null) {
    contents[_Regi] = expectString(output[_re]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_sco] != null) {
    contents[_Sco] = strictParseInt32(output[_sco]);
  }
  return contents;
};
var de_SpotPlacementScores = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotPlacementScore(entry, context);
  });
};
var de_SpotPrice = (output, context) => {
  const contents = {};
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_iT] != null) {
    contents[_IT] = expectString(output[_iT]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = expectString(output[_pDr]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = expectString(output[_sPp]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};
var de_SpotPriceHistoryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SpotPrice(entry, context);
  });
};
var de_StaleIpPermission = (output, context) => {
  const contents = {};
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = expectString(output[_iPpr]);
  }
  if (output.ipRanges === "") {
    contents[_IRp] = [];
  } else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
    contents[_IRp] = de_IpRanges(getArrayIfSingleItem(output[_iRpa][_i]), context);
  }
  if (output.prefixListIds === "") {
    contents[_PLIr] = [];
  } else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
    contents[_PLIr] = de_PrefixListIdSet(getArrayIfSingleItem(output[_pLIr][_i]), context);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  if (output.groups === "") {
    contents[_UIGP] = [];
  } else if (output[_gr] != null && output[_gr][_i] != null) {
    contents[_UIGP] = de_UserIdGroupPairSet(getArrayIfSingleItem(output[_gr][_i]), context);
  }
  return contents;
};
var de_StaleIpPermissionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_StaleIpPermission(entry, context);
  });
};
var de_StaleSecurityGroup = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output.staleIpPermissions === "") {
    contents[_SIP] = [];
  } else if (output[_sIP] != null && output[_sIP][_i] != null) {
    contents[_SIP] = de_StaleIpPermissionSet(getArrayIfSingleItem(output[_sIP][_i]), context);
  }
  if (output.staleIpPermissionsEgress === "") {
    contents[_SIPE] = [];
  } else if (output[_sIPE] != null && output[_sIPE][_i] != null) {
    contents[_SIPE] = de_StaleIpPermissionSet(getArrayIfSingleItem(output[_sIPE][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_StaleSecurityGroupSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_StaleSecurityGroup(entry, context);
  });
};
var de_StartDeclarativePoliciesReportResult = (output, context) => {
  const contents = {};
  if (output[_rI] != null) {
    contents[_RIep] = expectString(output[_rI]);
  }
  return contents;
};
var de_StartInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_SIta] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_SIta] = de_InstanceStateChangeList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_StartNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
  const contents = {};
  if (output[_nIASAe] != null) {
    contents[_NIASAet] = de_NetworkInsightsAccessScopeAnalysis(output[_nIASAe], context);
  }
  return contents;
};
var de_StartNetworkInsightsAnalysisResult = (output, context) => {
  const contents = {};
  if (output[_nIA] != null) {
    contents[_NIAe] = de_NetworkInsightsAnalysis(output[_nIA], context);
  }
  return contents;
};
var de_StartVpcEndpointServicePrivateDnsVerificationResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_RV] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_StateReason = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_StopInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_SIto] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_SIto] = de_InstanceStateChangeList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_Storage = (output, context) => {
  const contents = {};
  if (output[_S_] != null) {
    contents[_S_] = de_S3Storage(output[_S_], context);
  }
  return contents;
};
var de_StoreImageTaskResult = (output, context) => {
  const contents = {};
  if (output[_aIm] != null) {
    contents[_AIm] = expectString(output[_aIm]);
  }
  if (output[_tSTa] != null) {
    contents[_TSTa] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_tSTa]));
  }
  if (output[_bu] != null) {
    contents[_B] = expectString(output[_bu]);
  }
  if (output[_sKo] != null) {
    contents[_SKo] = expectString(output[_sKo]);
  }
  if (output[_pP] != null) {
    contents[_PP] = strictParseInt32(output[_pP]);
  }
  if (output[_sTS] != null) {
    contents[_STSt] = expectString(output[_sTS]);
  }
  if (output[_sTFR] != null) {
    contents[_STFR] = expectString(output[_sTFR]);
  }
  return contents;
};
var de_StoreImageTaskResultSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_StoreImageTaskResult(entry, context);
  });
};
var de_StringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Subnet = (output, context) => {
  const contents = {};
  if (output[_aZI] != null) {
    contents[_AZI] = expectString(output[_aZI]);
  }
  if (output[_eLADI] != null) {
    contents[_ELADI] = strictParseInt32(output[_eLADI]);
  }
  if (output[_mCOIOL] != null) {
    contents[_MCOIOL] = parseBoolean(output[_mCOIOL]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = expectString(output[_cOIP]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_aIAOC] != null) {
    contents[_AIAOC] = parseBoolean(output[_aIAOC]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents[_ICBAS] = [];
  } else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
    contents[_ICBAS] = de_SubnetIpv6CidrBlockAssociationSet(getArrayIfSingleItem(output[_iCBAS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sAub] != null) {
    contents[_SAub] = expectString(output[_sAub]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_eDn] != null) {
    contents[_EDn] = parseBoolean(output[_eDn]);
  }
  if (output[_iN] != null) {
    contents[_IN] = parseBoolean(output[_iN]);
  }
  if (output[_pDNOOL] != null) {
    contents[_PDNOOL] = de_PrivateDnsNameOptionsOnLaunch(output[_pDNOOL], context);
  }
  if (output[_bPAS] != null) {
    contents[_BPAS] = de_BlockPublicAccessStates(output[_bPAS], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  if (output[_aIAC] != null) {
    contents[_AIAC] = strictParseInt32(output[_aIAC]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_dFA] != null) {
    contents[_DFA] = parseBoolean(output[_dFA]);
  }
  if (output[_mPIOL] != null) {
    contents[_MPIOL] = parseBoolean(output[_mPIOL]);
  }
  return contents;
};
var de_SubnetAssociation = (output, context) => {
  const contents = {};
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_SubnetAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SubnetAssociation(entry, context);
  });
};
var de_SubnetCidrBlockState = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  return contents;
};
var de_SubnetCidrReservation = (output, context) => {
  const contents = {};
  if (output[_sCRI] != null) {
    contents[_SCRIu] = expectString(output[_sCRI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output[_rT] != null) {
    contents[_RTe] = expectString(output[_rT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_SubnetCidrReservationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SubnetCidrReservation(entry, context);
  });
};
var de_SubnetIpPrefixes = (output, context) => {
  const contents = {};
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output.ipPrefixSet === "") {
    contents[_IPpre] = [];
  } else if (output[_iPSpr] != null && output[_iPSpr][_i] != null) {
    contents[_IPpre] = de_ValueStringList(getArrayIfSingleItem(output[_iPSpr][_i]), context);
  }
  return contents;
};
var de_SubnetIpPrefixesList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SubnetIpPrefixes(entry, context);
  });
};
var de_SubnetIpv6CidrBlockAssociation = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = expectString(output[_iCB]);
  }
  if (output[_iCBS] != null) {
    contents[_ICBS] = de_SubnetCidrBlockState(output[_iCBS], context);
  }
  if (output[_iAA] != null) {
    contents[_IAA] = expectString(output[_iAA]);
  }
  if (output[_iSpo] != null) {
    contents[_ISpo] = expectString(output[_iSpo]);
  }
  return contents;
};
var de_SubnetIpv6CidrBlockAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SubnetIpv6CidrBlockAssociation(entry, context);
  });
};
var de_SubnetList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Subnet(entry, context);
  });
};
var de_Subscription = (output, context) => {
  const contents = {};
  if (output[_s] != null) {
    contents[_S] = expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = expectString(output[_d]);
  }
  if (output[_met] != null) {
    contents[_Met] = expectString(output[_met]);
  }
  if (output[_stat] != null) {
    contents[_Sta] = expectString(output[_stat]);
  }
  if (output[_pe] != null) {
    contents[_Per] = expectString(output[_pe]);
  }
  return contents;
};
var de_SubscriptionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Subscription(entry, context);
  });
};
var de_SuccessfulInstanceCreditSpecificationItem = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  return contents;
};
var de_SuccessfulInstanceCreditSpecificationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SuccessfulInstanceCreditSpecificationItem(entry, context);
  });
};
var de_SuccessfulQueuedPurchaseDeletion = (output, context) => {
  const contents = {};
  if (output[_rII] != null) {
    contents[_RIIe] = expectString(output[_rII]);
  }
  return contents;
};
var de_SuccessfulQueuedPurchaseDeletionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SuccessfulQueuedPurchaseDeletion(entry, context);
  });
};
var de_SupportedAdditionalProcessorFeatureList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_SupportedIpAddressTypes = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_SupportedRegionDetail = (output, context) => {
  const contents = {};
  if (output[_re] != null) {
    contents[_Regi] = expectString(output[_re]);
  }
  if (output[_sSer] != null) {
    contents[_SSe] = expectString(output[_sSer]);
  }
  return contents;
};
var de_SupportedRegionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_SupportedRegionDetail(entry, context);
  });
};
var de_Tag = (output, context) => {
  const contents = {};
  if (output[_k] != null) {
    contents[_Ke] = expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_TagDescription = (output, context) => {
  const contents = {};
  if (output[_k] != null) {
    contents[_Ke] = expectString(output[_k]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_v] != null) {
    contents[_Va] = expectString(output[_v]);
  }
  return contents;
};
var de_TagDescriptionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TagDescription(entry, context);
  });
};
var de_TagList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Tag(entry, context);
  });
};
var de_TagSpecification = (output, context) => {
  const contents = {};
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output.Tag === "") {
    contents[_Ta] = [];
  } else if (output[_Tag] != null && output[_Tag][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_Tag][_i]), context);
  }
  return contents;
};
var de_TagSpecificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TagSpecification(entry, context);
  });
};
var de_TargetCapacitySpecification = (output, context) => {
  const contents = {};
  if (output[_tTC] != null) {
    contents[_TTC] = strictParseInt32(output[_tTC]);
  }
  if (output[_oDTC] != null) {
    contents[_ODTC] = strictParseInt32(output[_oDTC]);
  }
  if (output[_sTC] != null) {
    contents[_STC] = strictParseInt32(output[_sTC]);
  }
  if (output[_dTCT] != null) {
    contents[_DTCT] = expectString(output[_dTCT]);
  }
  if (output[_tCUT] != null) {
    contents[_TCUT] = expectString(output[_tCUT]);
  }
  return contents;
};
var de_TargetConfiguration = (output, context) => {
  const contents = {};
  if (output[_iC] != null) {
    contents[_IC] = strictParseInt32(output[_iC]);
  }
  if (output[_oIf] != null) {
    contents[_OI] = expectString(output[_oIf]);
  }
  return contents;
};
var de_TargetGroup = (output, context) => {
  const contents = {};
  if (output[_ar] != null) {
    contents[_Ar] = expectString(output[_ar]);
  }
  return contents;
};
var de_TargetGroups = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TargetGroup(entry, context);
  });
};
var de_TargetGroupsConfig = (output, context) => {
  const contents = {};
  if (output.targetGroups === "") {
    contents[_TG] = [];
  } else if (output[_tGa] != null && output[_tGa][_i] != null) {
    contents[_TG] = de_TargetGroups(getArrayIfSingleItem(output[_tGa][_i]), context);
  }
  return contents;
};
var de_TargetNetwork = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_tNI] != null) {
    contents[_TNI] = expectString(output[_tNI]);
  }
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  if (output.securityGroups === "") {
    contents[_SG] = [];
  } else if (output[_sGe] != null && output[_sGe][_i] != null) {
    contents[_SG] = de_ValueStringList(getArrayIfSingleItem(output[_sGe][_i]), context);
  }
  return contents;
};
var de_TargetNetworkSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TargetNetwork(entry, context);
  });
};
var de_TargetReservationValue = (output, context) => {
  const contents = {};
  if (output[_rVe] != null) {
    contents[_RVe] = de_ReservationValue(output[_rVe], context);
  }
  if (output[_tCa] != null) {
    contents[_TCar] = de_TargetConfiguration(output[_tCa], context);
  }
  return contents;
};
var de_TargetReservationValueSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TargetReservationValue(entry, context);
  });
};
var de_TerminateClientVpnConnectionsResult = (output, context) => {
  const contents = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = expectString(output[_cVEI]);
  }
  if (output[_us] != null) {
    contents[_Us] = expectString(output[_us]);
  }
  if (output.connectionStatuses === "") {
    contents[_CSon] = [];
  } else if (output[_cSon] != null && output[_cSon][_i] != null) {
    contents[_CSon] = de_TerminateConnectionStatusSet(getArrayIfSingleItem(output[_cSon][_i]), context);
  }
  return contents;
};
var de_TerminateConnectionStatus = (output, context) => {
  const contents = {};
  if (output[_cIon] != null) {
    contents[_CIo] = expectString(output[_cIon]);
  }
  if (output[_pSre] != null) {
    contents[_PSre] = de_ClientVpnConnectionStatus(output[_pSre], context);
  }
  if (output[_cSur] != null) {
    contents[_CSur] = de_ClientVpnConnectionStatus(output[_cSur], context);
  }
  return contents;
};
var de_TerminateConnectionStatusSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TerminateConnectionStatus(entry, context);
  });
};
var de_TerminateInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_TIer] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_TIer] = de_InstanceStateChangeList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_ThreadsPerCoreList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return strictParseInt32(entry);
  });
};
var de_ThroughResourcesStatement = (output, context) => {
  const contents = {};
  if (output[_rSeso] != null) {
    contents[_RSe] = de_ResourceStatement(output[_rSeso], context);
  }
  return contents;
};
var de_ThroughResourcesStatementList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ThroughResourcesStatement(entry, context);
  });
};
var de_TotalLocalStorageGB = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseFloat(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseFloat(output[_ma]);
  }
  return contents;
};
var de_TrafficMirrorFilter = (output, context) => {
  const contents = {};
  if (output[_tMFI] != null) {
    contents[_TMFI] = expectString(output[_tMFI]);
  }
  if (output.ingressFilterRuleSet === "") {
    contents[_IFRn] = [];
  } else if (output[_iFRS] != null && output[_iFRS][_i] != null) {
    contents[_IFRn] = de_TrafficMirrorFilterRuleList(getArrayIfSingleItem(output[_iFRS][_i]), context);
  }
  if (output.egressFilterRuleSet === "") {
    contents[_EFR] = [];
  } else if (output[_eFRS] != null && output[_eFRS][_i] != null) {
    contents[_EFR] = de_TrafficMirrorFilterRuleList(getArrayIfSingleItem(output[_eFRS][_i]), context);
  }
  if (output.networkServiceSet === "") {
    contents[_NSe] = [];
  } else if (output[_nSS] != null && output[_nSS][_i] != null) {
    contents[_NSe] = de_TrafficMirrorNetworkServiceList(getArrayIfSingleItem(output[_nSS][_i]), context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TrafficMirrorFilterRule = (output, context) => {
  const contents = {};
  if (output[_tMFRI] != null) {
    contents[_TMFRI] = expectString(output[_tMFRI]);
  }
  if (output[_tMFI] != null) {
    contents[_TMFI] = expectString(output[_tMFI]);
  }
  if (output[_tDr] != null) {
    contents[_TD] = expectString(output[_tDr]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = strictParseInt32(output[_rN]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = expectString(output[_rA]);
  }
  if (output[_pr] != null) {
    contents[_P] = strictParseInt32(output[_pr]);
  }
  if (output[_dPR] != null) {
    contents[_DPR] = de_TrafficMirrorPortRange(output[_dPR], context);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = de_TrafficMirrorPortRange(output[_sPR], context);
  }
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_sCB] != null) {
    contents[_SCB] = expectString(output[_sCB]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TrafficMirrorFilterRuleList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficMirrorFilterRule(entry, context);
  });
};
var de_TrafficMirrorFilterRuleSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficMirrorFilterRule(entry, context);
  });
};
var de_TrafficMirrorFilterSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficMirrorFilter(entry, context);
  });
};
var de_TrafficMirrorNetworkServiceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_TrafficMirrorPortRange = (output, context) => {
  const contents = {};
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  return contents;
};
var de_TrafficMirrorSession = (output, context) => {
  const contents = {};
  if (output[_tMSI] != null) {
    contents[_TMSI] = expectString(output[_tMSI]);
  }
  if (output[_tMTI] != null) {
    contents[_TMTI] = expectString(output[_tMTI]);
  }
  if (output[_tMFI] != null) {
    contents[_TMFI] = expectString(output[_tMFI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pLa] != null) {
    contents[_PL] = strictParseInt32(output[_pLa]);
  }
  if (output[_sNes] != null) {
    contents[_SN] = strictParseInt32(output[_sNes]);
  }
  if (output[_vNI] != null) {
    contents[_VNI] = strictParseInt32(output[_vNI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TrafficMirrorSessionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficMirrorSession(entry, context);
  });
};
var de_TrafficMirrorTarget = (output, context) => {
  const contents = {};
  if (output[_tMTI] != null) {
    contents[_TMTI] = expectString(output[_tMTI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_nLBA] != null) {
    contents[_NLBA] = expectString(output[_nLBA]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_gLBEI] != null) {
    contents[_GLBEI] = expectString(output[_gLBEI]);
  }
  return contents;
};
var de_TrafficMirrorTargetSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficMirrorTarget(entry, context);
  });
};
var de_TransitGateway = (output, context) => {
  const contents = {};
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_tGAra] != null) {
    contents[_TGAran] = expectString(output[_tGAra]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_opt] != null) {
    contents[_Op] = de_TransitGatewayOptions(output[_opt], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayAssociation = (output, context) => {
  const contents = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayAttachment = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_tGOI] != null) {
    contents[_TGOI] = expectString(output[_tGOI]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAttachmentAssociation(output[_ass], context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayAttachmentAssociation = (output, context) => {
  const contents = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayAttachmentBgpConfiguration = (output, context) => {
  const contents = {};
  if (output[_tGAran] != null) {
    contents[_TGArans] = strictParseLong(output[_tGAran]);
  }
  if (output[_pAee] != null) {
    contents[_PAee] = strictParseLong(output[_pAee]);
  }
  if (output[_tGArans] != null) {
    contents[_TGA] = expectString(output[_tGArans]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = expectString(output[_pAe]);
  }
  if (output[_bSg] != null) {
    contents[_BS] = expectString(output[_bSg]);
  }
  return contents;
};
var de_TransitGatewayAttachmentBgpConfigurationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayAttachmentBgpConfiguration(entry, context);
  });
};
var de_TransitGatewayAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayAttachment(entry, context);
  });
};
var de_TransitGatewayAttachmentPropagation = (output, context) => {
  const contents = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayAttachmentPropagationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayAttachmentPropagation(entry, context);
  });
};
var de_TransitGatewayConnect = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_tTGAI] != null) {
    contents[_TTGAI] = expectString(output[_tTGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_opt] != null) {
    contents[_Op] = de_TransitGatewayConnectOptions(output[_opt], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayConnectList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayConnect(entry, context);
  });
};
var de_TransitGatewayConnectOptions = (output, context) => {
  const contents = {};
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  return contents;
};
var de_TransitGatewayConnectPeer = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_tGCPI] != null) {
    contents[_TGCPI] = expectString(output[_tGCPI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_cPC] != null) {
    contents[_CPC] = de_TransitGatewayConnectPeerConfiguration(output[_cPC], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayConnectPeerConfiguration = (output, context) => {
  const contents = {};
  if (output[_tGArans] != null) {
    contents[_TGA] = expectString(output[_tGArans]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = expectString(output[_pAe]);
  }
  if (output.insideCidrBlocks === "") {
    contents[_ICBn] = [];
  } else if (output[_iCBn] != null && output[_iCBn][_i] != null) {
    contents[_ICBn] = de_InsideCidrBlocksStringList(getArrayIfSingleItem(output[_iCBn][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output.bgpConfigurations === "") {
    contents[_BCg] = [];
  } else if (output[_bCg] != null && output[_bCg][_i] != null) {
    contents[_BCg] = de_TransitGatewayAttachmentBgpConfigurationList(getArrayIfSingleItem(output[_bCg][_i]), context);
  }
  return contents;
};
var de_TransitGatewayConnectPeerList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayConnectPeer(entry, context);
  });
};
var de_TransitGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGateway(entry, context);
  });
};
var de_TransitGatewayMulticastDeregisteredGroupMembers = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents[_DNII] = [];
  } else if (output[_dNII] != null && output[_dNII][_i] != null) {
    contents[_DNII] = de_ValueStringList(getArrayIfSingleItem(output[_dNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = expectString(output[_gIA]);
  }
  return contents;
};
var de_TransitGatewayMulticastDeregisteredGroupSources = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents[_DNII] = [];
  } else if (output[_dNII] != null && output[_dNII][_i] != null) {
    contents[_DNII] = de_ValueStringList(getArrayIfSingleItem(output[_dNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = expectString(output[_gIA]);
  }
  return contents;
};
var de_TransitGatewayMulticastDomain = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_tGMDA] != null) {
    contents[_TGMDA] = expectString(output[_tGMDA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_opt] != null) {
    contents[_Op] = de_TransitGatewayMulticastDomainOptions(output[_opt], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayMulticastDomainAssociation = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_su] != null) {
    contents[_Su] = de_SubnetAssociation(output[_su], context);
  }
  return contents;
};
var de_TransitGatewayMulticastDomainAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayMulticastDomainAssociation(entry, context);
  });
};
var de_TransitGatewayMulticastDomainAssociations = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output.subnets === "") {
    contents[_Subn] = [];
  } else if (output[_sub] != null && output[_sub][_i] != null) {
    contents[_Subn] = de_SubnetAssociationList(getArrayIfSingleItem(output[_sub][_i]), context);
  }
  return contents;
};
var de_TransitGatewayMulticastDomainList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayMulticastDomain(entry, context);
  });
};
var de_TransitGatewayMulticastDomainOptions = (output, context) => {
  const contents = {};
  if (output[_iSg] != null) {
    contents[_ISg] = expectString(output[_iSg]);
  }
  if (output[_sSS] != null) {
    contents[_SSS] = expectString(output[_sSS]);
  }
  if (output[_aASA] != null) {
    contents[_AASA] = expectString(output[_aASA]);
  }
  return contents;
};
var de_TransitGatewayMulticastGroup = (output, context) => {
  const contents = {};
  if (output[_gIA] != null) {
    contents[_GIA] = expectString(output[_gIA]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = expectString(output[_sIu]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = expectString(output[_rOI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_gM] != null) {
    contents[_GM] = parseBoolean(output[_gM]);
  }
  if (output[_gSr] != null) {
    contents[_GS] = parseBoolean(output[_gSr]);
  }
  if (output[_mTe] != null) {
    contents[_MTe] = expectString(output[_mTe]);
  }
  if (output[_sTo] != null) {
    contents[_STo] = expectString(output[_sTo]);
  }
  return contents;
};
var de_TransitGatewayMulticastGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayMulticastGroup(entry, context);
  });
};
var de_TransitGatewayMulticastRegisteredGroupMembers = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents[_RNII] = [];
  } else if (output[_rNII] != null && output[_rNII][_i] != null) {
    contents[_RNII] = de_ValueStringList(getArrayIfSingleItem(output[_rNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = expectString(output[_gIA]);
  }
  return contents;
};
var de_TransitGatewayMulticastRegisteredGroupSources = (output, context) => {
  const contents = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = expectString(output[_tGMDI]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents[_RNII] = [];
  } else if (output[_rNII] != null && output[_rNII][_i] != null) {
    contents[_RNII] = de_ValueStringList(getArrayIfSingleItem(output[_rNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = expectString(output[_gIA]);
  }
  return contents;
};
var de_TransitGatewayOptions = (output, context) => {
  const contents = {};
  if (output[_aSA] != null) {
    contents[_ASA] = strictParseLong(output[_aSA]);
  }
  if (output.transitGatewayCidrBlocks === "") {
    contents[_TGCB] = [];
  } else if (output[_tGCB] != null && output[_tGCB][_i] != null) {
    contents[_TGCB] = de_ValueStringList(getArrayIfSingleItem(output[_tGCB][_i]), context);
  }
  if (output[_aASAu] != null) {
    contents[_AASAu] = expectString(output[_aASAu]);
  }
  if (output[_dRTA] != null) {
    contents[_DRTA] = expectString(output[_dRTA]);
  }
  if (output[_aDRTI] != null) {
    contents[_ADRTI] = expectString(output[_aDRTI]);
  }
  if (output[_dRTP] != null) {
    contents[_DRTP] = expectString(output[_dRTP]);
  }
  if (output[_pDRTI] != null) {
    contents[_PDRTI] = expectString(output[_pDRTI]);
  }
  if (output[_vESpn] != null) {
    contents[_VES] = expectString(output[_vESpn]);
  }
  if (output[_dSn] != null) {
    contents[_DSns] = expectString(output[_dSn]);
  }
  if (output[_sGRSec] != null) {
    contents[_SGRS] = expectString(output[_sGRSec]);
  }
  if (output[_mSu] != null) {
    contents[_MSu] = expectString(output[_mSu]);
  }
  return contents;
};
var de_TransitGatewayPeeringAttachment = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_aTGAI] != null) {
    contents[_ATGAI] = expectString(output[_aTGAI]);
  }
  if (output[_rTIe] != null) {
    contents[_RTIe] = de_PeeringTgwInfo(output[_rTIe], context);
  }
  if (output[_aTI] != null) {
    contents[_ATIc] = de_PeeringTgwInfo(output[_aTI], context);
  }
  if (output[_opt] != null) {
    contents[_Op] = de_TransitGatewayPeeringAttachmentOptions(output[_opt], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_PeeringAttachmentStatus(output[_sta], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayPeeringAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayPeeringAttachment(entry, context);
  });
};
var de_TransitGatewayPeeringAttachmentOptions = (output, context) => {
  const contents = {};
  if (output[_dRy] != null) {
    contents[_DRy] = expectString(output[_dRy]);
  }
  return contents;
};
var de_TransitGatewayPolicyRule = (output, context) => {
  const contents = {};
  if (output[_sCB] != null) {
    contents[_SCB] = expectString(output[_sCB]);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = expectString(output[_sPR]);
  }
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_dPR] != null) {
    contents[_DPR] = expectString(output[_dPR]);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_mDe] != null) {
    contents[_MDe] = de_TransitGatewayPolicyRuleMetaData(output[_mDe], context);
  }
  return contents;
};
var de_TransitGatewayPolicyRuleMetaData = (output, context) => {
  const contents = {};
  if (output[_mDK] != null) {
    contents[_MDK] = expectString(output[_mDK]);
  }
  if (output[_mDV] != null) {
    contents[_MDV] = expectString(output[_mDV]);
  }
  return contents;
};
var de_TransitGatewayPolicyTable = (output, context) => {
  const contents = {};
  if (output[_tGPTI] != null) {
    contents[_TGPTI] = expectString(output[_tGPTI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayPolicyTableAssociation = (output, context) => {
  const contents = {};
  if (output[_tGPTI] != null) {
    contents[_TGPTI] = expectString(output[_tGPTI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayPolicyTableAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayPolicyTableAssociation(entry, context);
  });
};
var de_TransitGatewayPolicyTableEntry = (output, context) => {
  const contents = {};
  if (output[_pRN] != null) {
    contents[_PRNo] = expectString(output[_pRN]);
  }
  if (output[_pRol] != null) {
    contents[_PRol] = de_TransitGatewayPolicyRule(output[_pRol], context);
  }
  if (output[_tRTI] != null) {
    contents[_TRTI] = expectString(output[_tRTI]);
  }
  return contents;
};
var de_TransitGatewayPolicyTableEntryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayPolicyTableEntry(entry, context);
  });
};
var de_TransitGatewayPolicyTableList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayPolicyTable(entry, context);
  });
};
var de_TransitGatewayPrefixListAttachment = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  return contents;
};
var de_TransitGatewayPrefixListReference = (output, context) => {
  const contents = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_pLOI] != null) {
    contents[_PLOI] = expectString(output[_pLOI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_bl] != null) {
    contents[_Bl] = parseBoolean(output[_bl]);
  }
  if (output[_tGAr] != null) {
    contents[_TGAra] = de_TransitGatewayPrefixListAttachment(output[_tGAr], context);
  }
  return contents;
};
var de_TransitGatewayPrefixListReferenceSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayPrefixListReference(entry, context);
  });
};
var de_TransitGatewayPropagation = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = expectString(output[_tGRTAI]);
  }
  return contents;
};
var de_TransitGatewayRoute = (output, context) => {
  const contents = {};
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = expectString(output[_tGRTAI]);
  }
  if (output.transitGatewayAttachments === "") {
    contents[_TGAr] = [];
  } else if (output[_tGA] != null && output[_tGA][_i] != null) {
    contents[_TGAr] = de_TransitGatewayRouteAttachmentList(getArrayIfSingleItem(output[_tGA][_i]), context);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayRouteAttachment = (output, context) => {
  const contents = {};
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  return contents;
};
var de_TransitGatewayRouteAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRouteAttachment(entry, context);
  });
};
var de_TransitGatewayRouteList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRoute(entry, context);
  });
};
var de_TransitGatewayRouteTable = (output, context) => {
  const contents = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_dART] != null) {
    contents[_DART] = parseBoolean(output[_dART]);
  }
  if (output[_dPRT] != null) {
    contents[_DPRT] = parseBoolean(output[_dPRT]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayRouteTableAnnouncement = (output, context) => {
  const contents = {};
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = expectString(output[_tGRTAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_cNIo] != null) {
    contents[_CNIor] = expectString(output[_cNIo]);
  }
  if (output[_pTGI] != null) {
    contents[_PTGI] = expectString(output[_pTGI]);
  }
  if (output[_pCNI] != null) {
    contents[_PCNI] = expectString(output[_pCNI]);
  }
  if (output[_pAI] != null) {
    contents[_PAIe] = expectString(output[_pAI]);
  }
  if (output[_aDn] != null) {
    contents[_ADn] = expectString(output[_aDn]);
  }
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayRouteTableAnnouncementList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRouteTableAnnouncement(entry, context);
  });
};
var de_TransitGatewayRouteTableAssociation = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_TransitGatewayRouteTableAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRouteTableAssociation(entry, context);
  });
};
var de_TransitGatewayRouteTableList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRouteTable(entry, context);
  });
};
var de_TransitGatewayRouteTablePropagation = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = expectString(output[_tGRTAI]);
  }
  return contents;
};
var de_TransitGatewayRouteTablePropagationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayRouteTablePropagation(entry, context);
  });
};
var de_TransitGatewayRouteTableRoute = (output, context) => {
  const contents = {};
  if (output[_dC] != null) {
    contents[_DCe] = expectString(output[_dC]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_rOo] != null) {
    contents[_ROo] = expectString(output[_rOo]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = expectString(output[_pLI]);
  }
  if (output[_aIt] != null) {
    contents[_AIt] = expectString(output[_aIt]);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = expectString(output[_rTe]);
  }
  return contents;
};
var de_TransitGatewayVpcAttachment = (output, context) => {
  const contents = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = expectString(output[_tGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_vOIp] != null) {
    contents[_VOIp] = expectString(output[_vOIp]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output.subnetIds === "") {
    contents[_SIu] = [];
  } else if (output[_sIub] != null && output[_sIub][_i] != null) {
    contents[_SIu] = de_ValueStringList(getArrayIfSingleItem(output[_sIub][_i]), context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_opt] != null) {
    contents[_Op] = de_TransitGatewayVpcAttachmentOptions(output[_opt], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TransitGatewayVpcAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TransitGatewayVpcAttachment(entry, context);
  });
};
var de_TransitGatewayVpcAttachmentOptions = (output, context) => {
  const contents = {};
  if (output[_dSn] != null) {
    contents[_DSns] = expectString(output[_dSn]);
  }
  if (output[_sGRSec] != null) {
    contents[_SGRS] = expectString(output[_sGRSec]);
  }
  if (output[_iSpvu] != null) {
    contents[_ISp] = expectString(output[_iSpvu]);
  }
  if (output[_aMSp] != null) {
    contents[_AMS] = expectString(output[_aMSp]);
  }
  return contents;
};
var de_TrunkInterfaceAssociation = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_bII] != null) {
    contents[_BII] = expectString(output[_bII]);
  }
  if (output[_tII] != null) {
    contents[_TII] = expectString(output[_tII]);
  }
  if (output[_iPnte] != null) {
    contents[_IPnte] = expectString(output[_iPnte]);
  }
  if (output[_vIl] != null) {
    contents[_VIl] = strictParseInt32(output[_vIl]);
  }
  if (output[_gK] != null) {
    contents[_GK] = strictParseInt32(output[_gK]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_TrunkInterfaceAssociationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrunkInterfaceAssociation(entry, context);
  });
};
var de_TunnelOption = (output, context) => {
  const contents = {};
  if (output[_oIA] != null) {
    contents[_OIA] = expectString(output[_oIA]);
  }
  if (output[_tICu] != null) {
    contents[_TIC] = expectString(output[_tICu]);
  }
  if (output[_tIIC] != null) {
    contents[_TIIC] = expectString(output[_tIIC]);
  }
  if (output[_pSK] != null) {
    contents[_PSK] = expectString(output[_pSK]);
  }
  if (output[_pLSh] != null) {
    contents[_PLS] = strictParseInt32(output[_pLSh]);
  }
  if (output[_pLSha] != null) {
    contents[_PLSh] = strictParseInt32(output[_pLSha]);
  }
  if (output[_rMTS] != null) {
    contents[_RMTS] = strictParseInt32(output[_rMTS]);
  }
  if (output[_rFP] != null) {
    contents[_RFP] = strictParseInt32(output[_rFP]);
  }
  if (output[_rWS] != null) {
    contents[_RWS] = strictParseInt32(output[_rWS]);
  }
  if (output[_dTS] != null) {
    contents[_DTS] = strictParseInt32(output[_dTS]);
  }
  if (output[_dTA] != null) {
    contents[_DTA] = expectString(output[_dTA]);
  }
  if (output.phase1EncryptionAlgorithmSet === "") {
    contents[_PEA] = [];
  } else if (output[_pEAS] != null && output[_pEAS][_i] != null) {
    contents[_PEA] = de_Phase1EncryptionAlgorithmsList(getArrayIfSingleItem(output[_pEAS][_i]), context);
  }
  if (output.phase2EncryptionAlgorithmSet === "") {
    contents[_PEAh] = [];
  } else if (output[_pEASh] != null && output[_pEASh][_i] != null) {
    contents[_PEAh] = de_Phase2EncryptionAlgorithmsList(getArrayIfSingleItem(output[_pEASh][_i]), context);
  }
  if (output.phase1IntegrityAlgorithmSet === "") {
    contents[_PIAh] = [];
  } else if (output[_pIASh] != null && output[_pIASh][_i] != null) {
    contents[_PIAh] = de_Phase1IntegrityAlgorithmsList(getArrayIfSingleItem(output[_pIASh][_i]), context);
  }
  if (output.phase2IntegrityAlgorithmSet === "") {
    contents[_PIAha] = [];
  } else if (output[_pIASha] != null && output[_pIASha][_i] != null) {
    contents[_PIAha] = de_Phase2IntegrityAlgorithmsList(getArrayIfSingleItem(output[_pIASha][_i]), context);
  }
  if (output.phase1DHGroupNumberSet === "") {
    contents[_PDHGN] = [];
  } else if (output[_pDHGNS] != null && output[_pDHGNS][_i] != null) {
    contents[_PDHGN] = de_Phase1DHGroupNumbersList(getArrayIfSingleItem(output[_pDHGNS][_i]), context);
  }
  if (output.phase2DHGroupNumberSet === "") {
    contents[_PDHGNh] = [];
  } else if (output[_pDHGNSh] != null && output[_pDHGNSh][_i] != null) {
    contents[_PDHGNh] = de_Phase2DHGroupNumbersList(getArrayIfSingleItem(output[_pDHGNSh][_i]), context);
  }
  if (output.ikeVersionSet === "") {
    contents[_IVk] = [];
  } else if (output[_iVS] != null && output[_iVS][_i] != null) {
    contents[_IVk] = de_IKEVersionsList(getArrayIfSingleItem(output[_iVS][_i]), context);
  }
  if (output[_sAt] != null) {
    contents[_SA] = expectString(output[_sAt]);
  }
  if (output[_lO] != null) {
    contents[_LO] = de_VpnTunnelLogOptions(output[_lO], context);
  }
  if (output[_eTLC] != null) {
    contents[_ETLC] = parseBoolean(output[_eTLC]);
  }
  return contents;
};
var de_TunnelOptionsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TunnelOption(entry, context);
  });
};
var de_UnassignIpv6AddressesResult = (output, context) => {
  const contents = {};
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output.unassignedIpv6Addresses === "") {
    contents[_UIAn] = [];
  } else if (output[_uIA] != null && output[_uIA][_i] != null) {
    contents[_UIAn] = de_Ipv6AddressList(getArrayIfSingleItem(output[_uIA][_i]), context);
  }
  if (output.unassignedIpv6PrefixSet === "") {
    contents[_UIPn] = [];
  } else if (output[_uIPSn] != null && output[_uIPSn][_i] != null) {
    contents[_UIPn] = de_IpPrefixList(getArrayIfSingleItem(output[_uIPSn][_i]), context);
  }
  return contents;
};
var de_UnassignPrivateNatGatewayAddressResult = (output, context) => {
  const contents = {};
  if (output[_nGI] != null) {
    contents[_NGI] = expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};
var de_UnlockSnapshotResult = (output, context) => {
  const contents = {};
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  return contents;
};
var de_UnmonitorInstancesResult = (output, context) => {
  const contents = {};
  if (output.instancesSet === "") {
    contents[_IMn] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_IMn] = de_InstanceMonitoringList(getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};
var de_UnsuccessfulInstanceCreditSpecificationItem = (output, context) => {
  const contents = {};
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_UnsuccessfulInstanceCreditSpecificationItemError(output[_er], context);
  }
  return contents;
};
var de_UnsuccessfulInstanceCreditSpecificationItemError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_UnsuccessfulInstanceCreditSpecificationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UnsuccessfulInstanceCreditSpecificationItem(entry, context);
  });
};
var de_UnsuccessfulItem = (output, context) => {
  const contents = {};
  if (output[_er] != null) {
    contents[_Er] = de_UnsuccessfulItemError(output[_er], context);
  }
  if (output[_rIes] != null) {
    contents[_RIeso] = expectString(output[_rIes]);
  }
  return contents;
};
var de_UnsuccessfulItemError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_UnsuccessfulItemList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UnsuccessfulItem(entry, context);
  });
};
var de_UnsuccessfulItemSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UnsuccessfulItem(entry, context);
  });
};
var de_UpdateSecurityGroupRuleDescriptionsEgressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_UpdateSecurityGroupRuleDescriptionsIngressResult = (output, context) => {
  const contents = {};
  if (output[_r] != null) {
    contents[_Ret] = parseBoolean(output[_r]);
  }
  return contents;
};
var de_UsageClassTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_UserBucketDetails = (output, context) => {
  const contents = {};
  if (output[_sB] != null) {
    contents[_SB] = expectString(output[_sB]);
  }
  if (output[_sK] != null) {
    contents[_SK] = expectString(output[_sK]);
  }
  return contents;
};
var de_UserIdGroupPair = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = expectString(output[_uI]);
  }
  if (output[_gN] != null) {
    contents[_GN] = expectString(output[_gN]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = expectString(output[_gIr]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  if (output[_pSee] != null) {
    contents[_PSe] = expectString(output[_pSee]);
  }
  return contents;
};
var de_UserIdGroupPairList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UserIdGroupPair(entry, context);
  });
};
var de_UserIdGroupPairSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_UserIdGroupPair(entry, context);
  });
};
var de_ValidationError = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_ValidationWarning = (output, context) => {
  const contents = {};
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_ErrorSet(getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  return contents;
};
var de_ValueStringList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_VCpuCountRange = (output, context) => {
  const contents = {};
  if (output[_m] != null) {
    contents[_M] = strictParseInt32(output[_m]);
  }
  if (output[_ma] != null) {
    contents[_Ma] = strictParseInt32(output[_ma]);
  }
  return contents;
};
var de_VCpuInfo = (output, context) => {
  const contents = {};
  if (output[_dVC] != null) {
    contents[_DVCef] = strictParseInt32(output[_dVC]);
  }
  if (output[_dCe] != null) {
    contents[_DCef] = strictParseInt32(output[_dCe]);
  }
  if (output[_dTPC] != null) {
    contents[_DTPC] = strictParseInt32(output[_dTPC]);
  }
  if (output.validCores === "") {
    contents[_VCa] = [];
  } else if (output[_vCa] != null && output[_vCa][_i] != null) {
    contents[_VCa] = de_CoreCountList(getArrayIfSingleItem(output[_vCa][_i]), context);
  }
  if (output.validThreadsPerCore === "") {
    contents[_VTPC] = [];
  } else if (output[_vTPC] != null && output[_vTPC][_i] != null) {
    contents[_VTPC] = de_ThreadsPerCoreList(getArrayIfSingleItem(output[_vTPC][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessEndpoint = (output, context) => {
  const contents = {};
  if (output[_vAII] != null) {
    contents[_VAII] = expectString(output[_vAII]);
  }
  if (output[_vAGI] != null) {
    contents[_VAGI] = expectString(output[_vAGI]);
  }
  if (output[_vAEI] != null) {
    contents[_VAEI] = expectString(output[_vAEI]);
  }
  if (output[_aDp] != null) {
    contents[_ADp] = expectString(output[_aDp]);
  }
  if (output[_eTnd] != null) {
    contents[_ET] = expectString(output[_eTnd]);
  }
  if (output[_aTtta] != null) {
    contents[_ATt] = expectString(output[_aTtta]);
  }
  if (output[_dCA] != null) {
    contents[_DCA] = expectString(output[_dCA]);
  }
  if (output[_eDnd] != null) {
    contents[_EDnd] = expectString(output[_eDnd]);
  }
  if (output[_dVD] != null) {
    contents[_DVD] = expectString(output[_dVD]);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_SecurityGroupIdList(getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output[_lBO] != null) {
    contents[_LBO] = de_VerifiedAccessEndpointLoadBalancerOptions(output[_lBO], context);
  }
  if (output[_nIO] != null) {
    contents[_NIO] = de_VerifiedAccessEndpointEniOptions(output[_nIO], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_VerifiedAccessEndpointStatus(output[_sta], context);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectString(output[_cTre]);
  }
  if (output[_lUTa] != null) {
    contents[_LUTa] = expectString(output[_lUTa]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = expectString(output[_dT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  if (output[_rOd] != null) {
    contents[_RO] = de_VerifiedAccessEndpointRdsOptions(output[_rOd], context);
  }
  if (output[_cOi] != null) {
    contents[_CO] = de_VerifiedAccessEndpointCidrOptions(output[_cOi], context);
  }
  return contents;
};
var de_VerifiedAccessEndpointCidrOptions = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  if (output.portRangeSet === "") {
    contents[_PRo] = [];
  } else if (output[_pRS] != null && output[_pRS][_i] != null) {
    contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(getArrayIfSingleItem(output[_pRS][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessEndpointEniOptions = (output, context) => {
  const contents = {};
  if (output[_nII] != null) {
    contents[_NII] = expectString(output[_nII]);
  }
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_po] != null) {
    contents[_Po] = strictParseInt32(output[_po]);
  }
  if (output.portRangeSet === "") {
    contents[_PRo] = [];
  } else if (output[_pRS] != null && output[_pRS][_i] != null) {
    contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(getArrayIfSingleItem(output[_pRS][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessEndpointList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessEndpoint(entry, context);
  });
};
var de_VerifiedAccessEndpointLoadBalancerOptions = (output, context) => {
  const contents = {};
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_po] != null) {
    contents[_Po] = strictParseInt32(output[_po]);
  }
  if (output[_lBA] != null) {
    contents[_LBA] = expectString(output[_lBA]);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  if (output.portRangeSet === "") {
    contents[_PRo] = [];
  } else if (output[_pRS] != null && output[_pRS][_i] != null) {
    contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(getArrayIfSingleItem(output[_pRS][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessEndpointPortRange = (output, context) => {
  const contents = {};
  if (output[_fP] != null) {
    contents[_FP] = strictParseInt32(output[_fP]);
  }
  if (output[_tPo] != null) {
    contents[_TP] = strictParseInt32(output[_tPo]);
  }
  return contents;
};
var de_VerifiedAccessEndpointPortRangeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessEndpointPortRange(entry, context);
  });
};
var de_VerifiedAccessEndpointRdsOptions = (output, context) => {
  const contents = {};
  if (output[_pr] != null) {
    contents[_P] = expectString(output[_pr]);
  }
  if (output[_po] != null) {
    contents[_Po] = strictParseInt32(output[_po]);
  }
  if (output[_rDIA] != null) {
    contents[_RDIA] = expectString(output[_rDIA]);
  }
  if (output[_rDCA] != null) {
    contents[_RDCA] = expectString(output[_rDCA]);
  }
  if (output[_rDPA] != null) {
    contents[_RDPA] = expectString(output[_rDPA]);
  }
  if (output[_rEd] != null) {
    contents[_RE] = expectString(output[_rEd]);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessEndpointStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_VerifiedAccessEndpointSubnetIdList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_VerifiedAccessEndpointTarget = (output, context) => {
  const contents = {};
  if (output[_vAEI] != null) {
    contents[_VAEI] = expectString(output[_vAEI]);
  }
  if (output[_vAETIA] != null) {
    contents[_VAETIA] = expectString(output[_vAETIA]);
  }
  if (output[_vAETD] != null) {
    contents[_VAETD] = expectString(output[_vAETD]);
  }
  return contents;
};
var de_VerifiedAccessEndpointTargetList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessEndpointTarget(entry, context);
  });
};
var de_VerifiedAccessGroup = (output, context) => {
  const contents = {};
  if (output[_vAGI] != null) {
    contents[_VAGI] = expectString(output[_vAGI]);
  }
  if (output[_vAII] != null) {
    contents[_VAII] = expectString(output[_vAII]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_ow] != null) {
    contents[_Own] = expectString(output[_ow]);
  }
  if (output[_vAGA] != null) {
    contents[_VAGA] = expectString(output[_vAGA]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectString(output[_cTre]);
  }
  if (output[_lUTa] != null) {
    contents[_LUTa] = expectString(output[_lUTa]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = expectString(output[_dT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};
var de_VerifiedAccessGroupList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessGroup(entry, context);
  });
};
var de_VerifiedAccessInstance = (output, context) => {
  const contents = {};
  if (output[_vAII] != null) {
    contents[_VAII] = expectString(output[_vAII]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output.verifiedAccessTrustProviderSet === "") {
    contents[_VATPe] = [];
  } else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
    contents[_VATPe] = de_VerifiedAccessTrustProviderCondensedList(getArrayIfSingleItem(output[_vATPS][_i]), context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectString(output[_cTre]);
  }
  if (output[_lUTa] != null) {
    contents[_LUTa] = expectString(output[_lUTa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_fE] != null) {
    contents[_FE] = parseBoolean(output[_fE]);
  }
  if (output[_cECSD] != null) {
    contents[_CECSD] = de_VerifiedAccessInstanceCustomSubDomain(output[_cECSD], context);
  }
  return contents;
};
var de_VerifiedAccessInstanceCustomSubDomain = (output, context) => {
  const contents = {};
  if (output[_sDu] != null) {
    contents[_SDu] = expectString(output[_sDu]);
  }
  if (output.nameserverSet === "") {
    contents[_Na] = [];
  } else if (output[_nSa] != null && output[_nSa][_i] != null) {
    contents[_Na] = de_ValueStringList(getArrayIfSingleItem(output[_nSa][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessInstanceList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessInstance(entry, context);
  });
};
var de_VerifiedAccessInstanceLoggingConfiguration = (output, context) => {
  const contents = {};
  if (output[_vAII] != null) {
    contents[_VAII] = expectString(output[_vAII]);
  }
  if (output[_aLc] != null) {
    contents[_AL] = de_VerifiedAccessLogs(output[_aLc], context);
  }
  return contents;
};
var de_VerifiedAccessInstanceLoggingConfigurationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessInstanceLoggingConfiguration(entry, context);
  });
};
var de_VerifiedAccessInstanceOpenVpnClientConfiguration = (output, context) => {
  const contents = {};
  if (output[_confi] != null) {
    contents[_Confi] = expectString(output[_confi]);
  }
  if (output.routeSet === "") {
    contents[_Rout] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rout] = de_VerifiedAccessInstanceOpenVpnClientConfigurationRouteList(getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  return contents;
};
var de_VerifiedAccessInstanceOpenVpnClientConfigurationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessInstanceOpenVpnClientConfiguration(entry, context);
  });
};
var de_VerifiedAccessInstanceOpenVpnClientConfigurationRoute = (output, context) => {
  const contents = {};
  if (output[_ci] != null) {
    contents[_C] = expectString(output[_ci]);
  }
  return contents;
};
var de_VerifiedAccessInstanceOpenVpnClientConfigurationRouteList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessInstanceOpenVpnClientConfigurationRoute(entry, context);
  });
};
var de_VerifiedAccessInstanceUserTrustProviderClientConfiguration = (output, context) => {
  const contents = {};
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_scop] != null) {
    contents[_Scop] = expectString(output[_scop]);
  }
  if (output[_is] != null) {
    contents[_I] = expectString(output[_is]);
  }
  if (output[_aE] != null) {
    contents[_AE] = expectString(output[_aE]);
  }
  if (output[_pSKE] != null) {
    contents[_PSKE] = expectString(output[_pSKE]);
  }
  if (output[_tEo] != null) {
    contents[_TEo] = expectString(output[_tEo]);
  }
  if (output[_uIE] != null) {
    contents[_UIE] = expectString(output[_uIE]);
  }
  if (output[_cIli] != null) {
    contents[_CIl] = expectString(output[_cIli]);
  }
  if (output[_cSl] != null) {
    contents[_CSl] = expectString(output[_cSl]);
  }
  if (output[_pEk] != null) {
    contents[_PEk] = parseBoolean(output[_pEk]);
  }
  return contents;
};
var de_VerifiedAccessLogCloudWatchLogsDestination = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_lGo] != null) {
    contents[_LGo] = expectString(output[_lGo]);
  }
  return contents;
};
var de_VerifiedAccessLogDeliveryStatus = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_VerifiedAccessLogKinesisDataFirehoseDestination = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_dSeli] != null) {
    contents[_DSel] = expectString(output[_dSeli]);
  }
  return contents;
};
var de_VerifiedAccessLogs = (output, context) => {
  const contents = {};
  if (output[_s_] != null) {
    contents[_S_] = de_VerifiedAccessLogS3Destination(output[_s_], context);
  }
  if (output[_cWL] != null) {
    contents[_CWL] = de_VerifiedAccessLogCloudWatchLogsDestination(output[_cWL], context);
  }
  if (output[_kDF] != null) {
    contents[_KDF] = de_VerifiedAccessLogKinesisDataFirehoseDestination(output[_kDF], context);
  }
  if (output[_lV] != null) {
    contents[_LV] = expectString(output[_lV]);
  }
  if (output[_iTCn] != null) {
    contents[_ITCn] = parseBoolean(output[_iTCn]);
  }
  return contents;
};
var de_VerifiedAccessLogS3Destination = (output, context) => {
  const contents = {};
  if (output[_en] != null) {
    contents[_En] = parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_bN] != null) {
    contents[_BN] = expectString(output[_bN]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = expectString(output[_pre]);
  }
  if (output[_bO] != null) {
    contents[_BOu] = expectString(output[_bO]);
  }
  return contents;
};
var de_VerifiedAccessSseSpecificationResponse = (output, context) => {
  const contents = {};
  if (output[_cMKE] != null) {
    contents[_CMKE] = parseBoolean(output[_cMKE]);
  }
  if (output[_kKA] != null) {
    contents[_KKA] = expectString(output[_kKA]);
  }
  return contents;
};
var de_VerifiedAccessTrustProvider = (output, context) => {
  const contents = {};
  if (output[_vATPI] != null) {
    contents[_VATPI] = expectString(output[_vATPI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_tPT] != null) {
    contents[_TPT] = expectString(output[_tPT]);
  }
  if (output[_uTPT] != null) {
    contents[_UTPT] = expectString(output[_uTPT]);
  }
  if (output[_dTPT] != null) {
    contents[_DTPT] = expectString(output[_dTPT]);
  }
  if (output[_oO] != null) {
    contents[_OO] = de_OidcOptions(output[_oO], context);
  }
  if (output[_dOev] != null) {
    contents[_DOe] = de_DeviceOptions(output[_dOev], context);
  }
  if (output[_pRNo] != null) {
    contents[_PRN] = expectString(output[_pRNo]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = expectString(output[_cTre]);
  }
  if (output[_lUTa] != null) {
    contents[_LUTa] = expectString(output[_lUTa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  if (output[_nAOO] != null) {
    contents[_NAOO] = de_NativeApplicationOidcOptions(output[_nAOO], context);
  }
  return contents;
};
var de_VerifiedAccessTrustProviderCondensed = (output, context) => {
  const contents = {};
  if (output[_vATPI] != null) {
    contents[_VATPI] = expectString(output[_vATPI]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_tPT] != null) {
    contents[_TPT] = expectString(output[_tPT]);
  }
  if (output[_uTPT] != null) {
    contents[_UTPT] = expectString(output[_uTPT]);
  }
  if (output[_dTPT] != null) {
    contents[_DTPT] = expectString(output[_dTPT]);
  }
  return contents;
};
var de_VerifiedAccessTrustProviderCondensedList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessTrustProviderCondensed(entry, context);
  });
};
var de_VerifiedAccessTrustProviderList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VerifiedAccessTrustProvider(entry, context);
  });
};
var de_VgwTelemetry = (output, context) => {
  const contents = {};
  if (output[_aRC] != null) {
    contents[_ARC] = strictParseInt32(output[_aRC]);
  }
  if (output[_lSC] != null) {
    contents[_LSC] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lSC]));
  }
  if (output[_oIA] != null) {
    contents[_OIA] = expectString(output[_oIA]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_cAe] != null) {
    contents[_CA] = expectString(output[_cAe]);
  }
  return contents;
};
var de_VgwTelemetryList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VgwTelemetry(entry, context);
  });
};
var de_VirtualizationTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_Volume = (output, context) => {
  const contents = {};
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output[_io] != null) {
    contents[_Io] = strictParseInt32(output[_io]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vT] != null) {
    contents[_VT] = expectString(output[_vT]);
  }
  if (output[_fRa] != null) {
    contents[_FRa] = parseBoolean(output[_fRa]);
  }
  if (output[_mAE] != null) {
    contents[_MAE] = parseBoolean(output[_mAE]);
  }
  if (output[_th] != null) {
    contents[_Th] = strictParseInt32(output[_th]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = expectString(output[_sTs]);
  }
  if (output[_op] != null) {
    contents[_O] = de_OperatorResponse(output[_op], context);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_si] != null) {
    contents[_Siz] = strictParseInt32(output[_si]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_sta] != null) {
    contents[_Stat] = expectString(output[_sta]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_VolumeAttachmentList(getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_enc] != null) {
    contents[_Enc] = parseBoolean(output[_enc]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = expectString(output[_kKI]);
  }
  return contents;
};
var de_VolumeAttachment = (output, context) => {
  const contents = {};
  if (output[_dOT] != null) {
    contents[_DOT] = parseBoolean(output[_dOT]);
  }
  if (output[_aRs] != null) {
    contents[_ARs] = expectString(output[_aRs]);
  }
  if (output[_iOS] != null) {
    contents[_IOS] = expectString(output[_iOS]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  if (output[_dev] != null) {
    contents[_Dev] = expectString(output[_dev]);
  }
  if (output[_sta] != null) {
    contents[_Stat] = expectString(output[_sta]);
  }
  if (output[_aTt] != null) {
    contents[_ATtt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  return contents;
};
var de_VolumeAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeAttachment(entry, context);
  });
};
var de_VolumeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Volume(entry, context);
  });
};
var de_VolumeModification = (output, context) => {
  const contents = {};
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_mSod] != null) {
    contents[_MSod] = expectString(output[_mSod]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  if (output[_tSar] != null) {
    contents[_TSar] = strictParseInt32(output[_tSar]);
  }
  if (output[_tIa] != null) {
    contents[_TIar] = strictParseInt32(output[_tIa]);
  }
  if (output[_tVT] != null) {
    contents[_TVT] = expectString(output[_tVT]);
  }
  if (output[_tTa] != null) {
    contents[_TTa] = strictParseInt32(output[_tTa]);
  }
  if (output[_tMAE] != null) {
    contents[_TMAE] = parseBoolean(output[_tMAE]);
  }
  if (output[_oSr] != null) {
    contents[_OSr] = strictParseInt32(output[_oSr]);
  }
  if (output[_oIr] != null) {
    contents[_OIr] = strictParseInt32(output[_oIr]);
  }
  if (output[_oVT] != null) {
    contents[_OVT] = expectString(output[_oVT]);
  }
  if (output[_oTr] != null) {
    contents[_OTr] = strictParseInt32(output[_oTr]);
  }
  if (output[_oMAE] != null) {
    contents[_OMAE] = parseBoolean(output[_oMAE]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = strictParseLong(output[_pro]);
  }
  if (output[_sT] != null) {
    contents[_STt] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_eTn] != null) {
    contents[_ETn] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  return contents;
};
var de_VolumeModificationList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeModification(entry, context);
  });
};
var de_VolumeStatusAction = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_eIve] != null) {
    contents[_EIve] = expectString(output[_eIve]);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = expectString(output[_eTv]);
  }
  return contents;
};
var de_VolumeStatusActionsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeStatusAction(entry, context);
  });
};
var de_VolumeStatusAttachmentStatus = (output, context) => {
  const contents = {};
  if (output[_iPo] != null) {
    contents[_IPo] = expectString(output[_iPo]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  return contents;
};
var de_VolumeStatusAttachmentStatusList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeStatusAttachmentStatus(entry, context);
  });
};
var de_VolumeStatusDetails = (output, context) => {
  const contents = {};
  if (output[_n] != null) {
    contents[_N] = expectString(output[_n]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_VolumeStatusDetailsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeStatusDetails(entry, context);
  });
};
var de_VolumeStatusEvent = (output, context) => {
  const contents = {};
  if (output[_de] != null) {
    contents[_De] = expectString(output[_de]);
  }
  if (output[_eIve] != null) {
    contents[_EIve] = expectString(output[_eIve]);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = expectString(output[_eTv]);
  }
  if (output[_nAo] != null) {
    contents[_NAo] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nAo]));
  }
  if (output[_nB] != null) {
    contents[_NB] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_nB]));
  }
  if (output[_iI] != null) {
    contents[_IIn] = expectString(output[_iI]);
  }
  return contents;
};
var de_VolumeStatusEventsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeStatusEvent(entry, context);
  });
};
var de_VolumeStatusInfo = (output, context) => {
  const contents = {};
  if (output.details === "") {
    contents[_Det] = [];
  } else if (output[_det] != null && output[_det][_i] != null) {
    contents[_Det] = de_VolumeStatusDetailsList(getArrayIfSingleItem(output[_det][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = expectString(output[_sta]);
  }
  return contents;
};
var de_VolumeStatusItem = (output, context) => {
  const contents = {};
  if (output.actionsSet === "") {
    contents[_Acti] = [];
  } else if (output[_aSct] != null && output[_aSct][_i] != null) {
    contents[_Acti] = de_VolumeStatusActionsList(getArrayIfSingleItem(output[_aSct][_i]), context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output[_oA] != null) {
    contents[_OA] = expectString(output[_oA]);
  }
  if (output.eventsSet === "") {
    contents[_Ev] = [];
  } else if (output[_eSv] != null && output[_eSv][_i] != null) {
    contents[_Ev] = de_VolumeStatusEventsList(getArrayIfSingleItem(output[_eSv][_i]), context);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = expectString(output[_vIo]);
  }
  if (output[_vSol] != null) {
    contents[_VSol] = de_VolumeStatusInfo(output[_vSol], context);
  }
  if (output.attachmentStatuses === "") {
    contents[_AStt] = [];
  } else if (output[_aStt] != null && output[_aStt][_i] != null) {
    contents[_AStt] = de_VolumeStatusAttachmentStatusList(getArrayIfSingleItem(output[_aStt][_i]), context);
  }
  return contents;
};
var de_VolumeStatusList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VolumeStatusItem(entry, context);
  });
};
var de_Vpc = (output, context) => {
  const contents = {};
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = expectString(output[_iTns]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents[_ICBAS] = [];
  } else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
    contents[_ICBAS] = de_VpcIpv6CidrBlockAssociationSet(getArrayIfSingleItem(output[_iCBAS][_i]), context);
  }
  if (output.cidrBlockAssociationSet === "") {
    contents[_CBAS] = [];
  } else if (output[_cBAS] != null && output[_cBAS][_i] != null) {
    contents[_CBAS] = de_VpcCidrBlockAssociationSet(getArrayIfSingleItem(output[_cBAS][_i]), context);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = parseBoolean(output[_iDs]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_bPAS] != null) {
    contents[_BPAS] = de_BlockPublicAccessStates(output[_bPAS], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  if (output[_dOI] != null) {
    contents[_DOI] = expectString(output[_dOI]);
  }
  return contents;
};
var de_VpcAttachment = (output, context) => {
  const contents = {};
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_VpcAttachmentList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcAttachment(entry, context);
  });
};
var de_VpcBlockPublicAccessExclusion = (output, context) => {
  const contents = {};
  if (output[_eIx] != null) {
    contents[_EIxc] = expectString(output[_eIx]);
  }
  if (output[_iGEM] != null) {
    contents[_IGEM] = expectString(output[_iGEM]);
  }
  if (output[_rAe] != null) {
    contents[_RAes] = expectString(output[_rAe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_rea] != null) {
    contents[_Rea] = expectString(output[_rea]);
  }
  if (output[_cTrea] != null) {
    contents[_CTrea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTrea]));
  }
  if (output[_lUTas] != null) {
    contents[_LUTas] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lUTas]));
  }
  if (output[_dTele] != null) {
    contents[_DTelet] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_dTele]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_VpcBlockPublicAccessExclusionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcBlockPublicAccessExclusion(entry, context);
  });
};
var de_VpcBlockPublicAccessOptions = (output, context) => {
  const contents = {};
  if (output[_aAI] != null) {
    contents[_AAI] = expectString(output[_aAI]);
  }
  if (output[_aRw] != null) {
    contents[_ARw] = expectString(output[_aRw]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_iGBM] != null) {
    contents[_IGBM] = expectString(output[_iGBM]);
  }
  if (output[_rea] != null) {
    contents[_Rea] = expectString(output[_rea]);
  }
  if (output[_lUTas] != null) {
    contents[_LUTas] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_lUTas]));
  }
  if (output[_mB] != null) {
    contents[_MB] = expectString(output[_mB]);
  }
  if (output[_eA] != null) {
    contents[_EAx] = expectString(output[_eA]);
  }
  return contents;
};
var de_VpcCidrBlockAssociation = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  if (output[_cBS] != null) {
    contents[_CBS] = de_VpcCidrBlockState(output[_cBS], context);
  }
  return contents;
};
var de_VpcCidrBlockAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcCidrBlockAssociation(entry, context);
  });
};
var de_VpcCidrBlockState = (output, context) => {
  const contents = {};
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = expectString(output[_sM]);
  }
  return contents;
};
var de_VpcClassicLink = (output, context) => {
  const contents = {};
  if (output[_cLE] != null) {
    contents[_CLE] = parseBoolean(output[_cLE]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  return contents;
};
var de_VpcClassicLinkList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcClassicLink(entry, context);
  });
};
var de_VpcEndpoint = (output, context) => {
  const contents = {};
  if (output[_vEI] != null) {
    contents[_VEIp] = expectString(output[_vEI]);
  }
  if (output[_vET] != null) {
    contents[_VET] = expectString(output[_vET]);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_sN] != null) {
    contents[_SNe] = expectString(output[_sN]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = expectString(output[_pDo]);
  }
  if (output.routeTableIdSet === "") {
    contents[_RTIo] = [];
  } else if (output[_rTIS] != null && output[_rTIS][_i] != null) {
    contents[_RTIo] = de_ValueStringList(getArrayIfSingleItem(output[_rTIS][_i]), context);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_ValueStringList(getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierSet(getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iAT] != null) {
    contents[_IAT] = expectString(output[_iAT]);
  }
  if (output[_dOn] != null) {
    contents[_DOn] = de_DnsOptions(output[_dOn], context);
  }
  if (output[_pDE] != null) {
    contents[_PDE] = parseBoolean(output[_pDE]);
  }
  if (output[_rM] != null) {
    contents[_RMe] = parseBoolean(output[_rM]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents[_NIIe] = [];
  } else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
    contents[_NIIe] = de_ValueStringList(getArrayIfSingleItem(output[_nIIS][_i]), context);
  }
  if (output.dnsEntrySet === "") {
    contents[_DE] = [];
  } else if (output[_dES] != null && output[_dES][_i] != null) {
    contents[_DE] = de_DnsEntrySet(getArrayIfSingleItem(output[_dES][_i]), context);
  }
  if (output[_cTrea] != null) {
    contents[_CTrea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTrea]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_lEa] != null) {
    contents[_LEa] = de_LastError(output[_lEa], context);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_SubnetIpPrefixesList(getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_SubnetIpPrefixesList(getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_fR] != null) {
    contents[_FR] = expectString(output[_fR]);
  }
  if (output[_sNA] != null) {
    contents[_SNA] = expectString(output[_sNA]);
  }
  if (output[_rCA] != null) {
    contents[_RCA] = expectString(output[_rCA]);
  }
  if (output[_sR] != null) {
    contents[_SRe] = expectString(output[_sR]);
  }
  return contents;
};
var de_VpcEndpointAssociation = (output, context) => {
  const contents = {};
  if (output[_id] != null) {
    contents[_Id] = expectString(output[_id]);
  }
  if (output[_vEI] != null) {
    contents[_VEIp] = expectString(output[_vEI]);
  }
  if (output[_sNA] != null) {
    contents[_SNA] = expectString(output[_sNA]);
  }
  if (output[_sNN] != null) {
    contents[_SNN] = expectString(output[_sNN]);
  }
  if (output[_aRAs] != null) {
    contents[_ARAs] = expectString(output[_aRAs]);
  }
  if (output[_fR] != null) {
    contents[_FR] = expectString(output[_fR]);
  }
  if (output[_fCa] != null) {
    contents[_FCa] = expectString(output[_fCa]);
  }
  if (output[_dE] != null) {
    contents[_DEn] = de_DnsEntry(output[_dE], context);
  }
  if (output[_pDEr] != null) {
    contents[_PDEr] = de_DnsEntry(output[_pDEr], context);
  }
  if (output[_aRAss] != null) {
    contents[_ARAss] = expectString(output[_aRAss]);
  }
  if (output[_rCGA] != null) {
    contents[_RCGA] = expectString(output[_rCGA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};
var de_VpcEndpointAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcEndpointAssociation(entry, context);
  });
};
var de_VpcEndpointConnection = (output, context) => {
  const contents = {};
  if (output[_sI] != null) {
    contents[_SIe] = expectString(output[_sI]);
  }
  if (output[_vEI] != null) {
    contents[_VEIp] = expectString(output[_vEI]);
  }
  if (output[_vEO] != null) {
    contents[_VEO] = expectString(output[_vEO]);
  }
  if (output[_vESpc] != null) {
    contents[_VESpc] = expectString(output[_vESpc]);
  }
  if (output[_cTrea] != null) {
    contents[_CTrea] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_cTrea]));
  }
  if (output.dnsEntrySet === "") {
    contents[_DE] = [];
  } else if (output[_dES] != null && output[_dES][_i] != null) {
    contents[_DE] = de_DnsEntrySet(getArrayIfSingleItem(output[_dES][_i]), context);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents[_NLBAe] = [];
  } else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
    contents[_NLBAe] = de_ValueStringList(getArrayIfSingleItem(output[_nLBAS][_i]), context);
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents[_GLBA] = [];
  } else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
    contents[_GLBA] = de_ValueStringList(getArrayIfSingleItem(output[_gLBAS][_i]), context);
  }
  if (output[_iAT] != null) {
    contents[_IAT] = expectString(output[_iAT]);
  }
  if (output[_vECI] != null) {
    contents[_VECI] = expectString(output[_vECI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vER] != null) {
    contents[_VER] = expectString(output[_vER]);
  }
  return contents;
};
var de_VpcEndpointConnectionSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcEndpointConnection(entry, context);
  });
};
var de_VpcEndpointSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcEndpoint(entry, context);
  });
};
var de_VpcIpv6CidrBlockAssociation = (output, context) => {
  const contents = {};
  if (output[_aIs] != null) {
    contents[_AIss] = expectString(output[_aIs]);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = expectString(output[_iCB]);
  }
  if (output[_iCBS] != null) {
    contents[_ICBS] = de_VpcCidrBlockState(output[_iCBS], context);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = expectString(output[_nBG]);
  }
  if (output[_iPpvo] != null) {
    contents[_IPpv] = expectString(output[_iPpvo]);
  }
  if (output[_iAA] != null) {
    contents[_IAA] = expectString(output[_iAA]);
  }
  if (output[_iSpo] != null) {
    contents[_ISpo] = expectString(output[_iSpo]);
  }
  return contents;
};
var de_VpcIpv6CidrBlockAssociationSet = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcIpv6CidrBlockAssociation(entry, context);
  });
};
var de_VpcList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Vpc(entry, context);
  });
};
var de_VpcPeeringConnection = (output, context) => {
  const contents = {};
  if (output[_aVI] != null) {
    contents[_AVI] = de_VpcPeeringConnectionVpcInfo(output[_aVI], context);
  }
  if (output[_eT] != null) {
    contents[_ETx] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_eT]));
  }
  if (output[_rVIe] != null) {
    contents[_RVIe] = de_VpcPeeringConnectionVpcInfo(output[_rVIe], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_VpcPeeringConnectionStateReason(output[_sta], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = expectString(output[_vPCI]);
  }
  return contents;
};
var de_VpcPeeringConnectionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpcPeeringConnection(entry, context);
  });
};
var de_VpcPeeringConnectionOptionsDescription = (output, context) => {
  const contents = {};
  if (output[_aDRFRV] != null) {
    contents[_ADRFRV] = parseBoolean(output[_aDRFRV]);
  }
  if (output[_aEFLCLTRV] != null) {
    contents[_AEFLCLTRV] = parseBoolean(output[_aEFLCLTRV]);
  }
  if (output[_aEFLVTRCL] != null) {
    contents[_AEFLVTRCL] = parseBoolean(output[_aEFLVTRCL]);
  }
  return contents;
};
var de_VpcPeeringConnectionStateReason = (output, context) => {
  const contents = {};
  if (output[_co] != null) {
    contents[_Cod] = expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = expectString(output[_me]);
  }
  return contents;
};
var de_VpcPeeringConnectionVpcInfo = (output, context) => {
  const contents = {};
  if (output[_cB] != null) {
    contents[_CB] = expectString(output[_cB]);
  }
  if (output.ipv6CidrBlockSet === "") {
    contents[_ICBSp] = [];
  } else if (output[_iCBSp] != null && output[_iCBSp][_i] != null) {
    contents[_ICBSp] = de_Ipv6CidrBlockSet(getArrayIfSingleItem(output[_iCBSp][_i]), context);
  }
  if (output.cidrBlockSet === "") {
    contents[_CBSi] = [];
  } else if (output[_cBSi] != null && output[_cBSi][_i] != null) {
    contents[_CBSi] = de_CidrBlockSet(getArrayIfSingleItem(output[_cBSi][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = expectString(output[_oI]);
  }
  if (output[_pOe] != null) {
    contents[_POe] = de_VpcPeeringConnectionOptionsDescription(output[_pOe], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = expectString(output[_vI]);
  }
  if (output[_re] != null) {
    contents[_Regi] = expectString(output[_re]);
  }
  return contents;
};
var de_VpnConnection = (output, context) => {
  const contents = {};
  if (output[_ca] != null) {
    contents[_Cat] = expectString(output[_ca]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = expectString(output[_tGI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = expectString(output[_cNA]);
  }
  if (output[_cNAA] != null) {
    contents[_CNAA] = expectString(output[_cNAA]);
  }
  if (output[_gAS] != null) {
    contents[_GAS] = expectString(output[_gAS]);
  }
  if (output[_opt] != null) {
    contents[_Op] = de_VpnConnectionOptions(output[_opt], context);
  }
  if (output.routes === "") {
    contents[_Rout] = [];
  } else if (output[_rou] != null && output[_rou][_i] != null) {
    contents[_Rout] = de_VpnStaticRouteList(getArrayIfSingleItem(output[_rou][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.vgwTelemetry === "") {
    contents[_VTg] = [];
  } else if (output[_vTg] != null && output[_vTg][_i] != null) {
    contents[_VTg] = de_VgwTelemetryList(getArrayIfSingleItem(output[_vTg][_i]), context);
  }
  if (output[_vCI] != null) {
    contents[_VCI] = expectString(output[_vCI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_cGC] != null) {
    contents[_CGC] = expectString(output[_cGC]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = expectString(output[_cGIu]);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = expectString(output[_vGI]);
  }
  return contents;
};
var de_VpnConnectionDeviceType = (output, context) => {
  const contents = {};
  if (output[_vCDTI] != null) {
    contents[_VCDTI] = expectString(output[_vCDTI]);
  }
  if (output[_ven] != null) {
    contents[_Ven] = expectString(output[_ven]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = expectString(output[_pl]);
  }
  if (output[_sof] != null) {
    contents[_Sof] = expectString(output[_sof]);
  }
  return contents;
};
var de_VpnConnectionDeviceTypeList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpnConnectionDeviceType(entry, context);
  });
};
var de_VpnConnectionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpnConnection(entry, context);
  });
};
var de_VpnConnectionOptions = (output, context) => {
  const contents = {};
  if (output[_eAn] != null) {
    contents[_EA] = parseBoolean(output[_eAn]);
  }
  if (output[_sRO] != null) {
    contents[_SRO] = parseBoolean(output[_sRO]);
  }
  if (output[_lINC] != null) {
    contents[_LINC] = expectString(output[_lINC]);
  }
  if (output[_rINC] != null) {
    contents[_RINC] = expectString(output[_rINC]);
  }
  if (output[_lINCo] != null) {
    contents[_LINCo] = expectString(output[_lINCo]);
  }
  if (output[_rINCe] != null) {
    contents[_RINCe] = expectString(output[_rINCe]);
  }
  if (output[_oIAT] != null) {
    contents[_OIAT] = expectString(output[_oIAT]);
  }
  if (output[_tTGAI] != null) {
    contents[_TTGAI] = expectString(output[_tTGAI]);
  }
  if (output[_tIIV] != null) {
    contents[_TIIV] = expectString(output[_tIIV]);
  }
  if (output.tunnelOptionSet === "") {
    contents[_TO] = [];
  } else if (output[_tOS] != null && output[_tOS][_i] != null) {
    contents[_TO] = de_TunnelOptionsList(getArrayIfSingleItem(output[_tOS][_i]), context);
  }
  return contents;
};
var de_VpnGateway = (output, context) => {
  const contents = {};
  if (output[_aSA] != null) {
    contents[_ASA] = strictParseLong(output[_aSA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = expectString(output[_vGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = expectString(output[_ty]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = expectString(output[_aZ]);
  }
  if (output.attachments === "") {
    contents[_VAp] = [];
  } else if (output[_att] != null && output[_att][_i] != null) {
    contents[_VAp] = de_VpcAttachmentList(getArrayIfSingleItem(output[_att][_i]), context);
  }
  return contents;
};
var de_VpnGatewayList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpnGateway(entry, context);
  });
};
var de_VpnStaticRoute = (output, context) => {
  const contents = {};
  if (output[_dCB] != null) {
    contents[_DCB] = expectString(output[_dCB]);
  }
  if (output[_s] != null) {
    contents[_S] = expectString(output[_s]);
  }
  if (output[_st] != null) {
    contents[_Stat] = expectString(output[_st]);
  }
  return contents;
};
var de_VpnStaticRouteList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VpnStaticRoute(entry, context);
  });
};
var de_VpnTunnelLogOptions = (output, context) => {
  const contents = {};
  if (output[_cWLO] != null) {
    contents[_CWLO] = de_CloudWatchLogOptions(output[_cWLO], context);
  }
  return contents;
};
var de_WithdrawByoipCidrResult = (output, context) => {
  const contents = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var throwDefaultError = withBaseException(EC2ServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2016-11-15";
var _A = "Action";
var _AA = "AllocateAddress";
var _AAC = "AsnAuthorizationContext";
var _AACv = "AvailableAddressCount";
var _AAG = "AuthorizeAllGroups";
var _AAI = "AwsAccountId";
var _AAId = "AddressAllocationId";
var _AAP = "AddAllowedPrincipals";
var _AART = "AddAllocationResourceTags";
var _AASA = "AutoAcceptSharedAssociations";
var _AASAu = "AutoAcceptSharedAttachments";
var _AAT = "AcceptAddressTransfer";
var _AAZ = "AllAvailabilityZones";
var _AAc = "AccessAll";
var _AAcc = "AccountAttributes";
var _AAd = "AdditionalAccounts";
var _AAs = "AssociateAddress";
var _AAsn = "AsnAssociation";
var _AAsns = "AsnAssociations";
var _ABC = "AdvertiseByoipCidr";
var _ABHP = "ActualBlockHourlyPrice";
var _AC = "AllowedCidrs";
var _ACIA = "AssociateCarrierIpAddress";
var _ACLV = "AttachClassicLinkVpc";
var _ACRBO = "AcceptCapacityReservationBillingOwnership";
var _ACRBOs = "AssociateCapacityReservationBillingOwner";
var _ACT = "ArchivalCompleteTime";
var _ACVI = "AuthorizeClientVpnIngress";
var _ACVTN = "AssociateClientVpnTargetNetwork";
var _ACc = "AcceleratorCount";
var _ACd = "AddressCount";
var _ACv = "AvailableCapacity";
var _AD = "ActiveDirectory";
var _ADNL = "AllocationDefaultNetmaskLength";
var _ADO = "AssociateDhcpOptions";
var _ADRFRV = "AllowDnsResolutionFromRemoteVpc";
var _ADRTI = "AssociationDefaultRouteTableId";
var _ADT = "AdditionalDetailType";
var _ADd = "AdditionalDetails";
var _ADn = "AnnouncementDirection";
var _ADp = "ApplicationDomain";
var _AE = "AuthorizationEndpoint";
var _AEC = "AnalyzedEniCount";
var _AECIR = "AssociateEnclaveCertificateIamRole";
var _AEFLCLTRV = "AllowEgressFromLocalClassicLinkToRemoteVpc";
var _AEFLVTRCL = "AllowEgressFromLocalVpcToRemoteClassicLink";
var _AEIO = "AutoEnableIO";
var _AES = "AttachedEbsStatus";
var _AET = "AnalysisEndTime";
var _AEd = "AddEntries";
var _AF = "AddressFamily";
var _AFn = "AnalysisFindings";
var _AGI = "AccessGroupId";
var _AGLBA = "AddGatewayLoadBalancerArns";
var _AH = "AllocateHosts";
var _AI = "AssetIds";
var _AIA = "AssignIpv6Addresses";
var _AIAC = "AvailableIpAddressCount";
var _AIAOC = "AssignIpv6AddressOnCreation";
var _AIAs = "AssignedIpv6Addresses";
var _AIB = "AssociateIpamByoasn";
var _AIC = "AvailableInstanceCapacity";
var _AICv = "AvailableInstanceCount";
var _AIEW = "AssociateInstanceEventWindow";
var _AIG = "AttachInternetGateway";
var _AIIP = "AssociateIamInstanceProfile";
var _AIP = "AssignedIpv6Prefixes";
var _AIPC = "AllocateIpamPoolCidr";
var _AIPs = "AssignedIpv4Prefixes";
var _AIRD = "AssociateIpamResourceDiscovery";
var _AISS = "AllowedImagesSettingsState";
var _AIT = "AllowedInstanceTypes";
var _AIc = "ActiveInstances";
var _AIcc = "AccountId";
var _AId = "AdditionalInfo";
var _AIl = "AllocationId";
var _AIll = "AllocationIds";
var _AIm = "AmiId";
var _AIs = "AssociationIds";
var _AIss = "AssociationId";
var _AIsse = "AssetId";
var _AIt = "AttachmentId";
var _AIth = "AthenaIntegrations";
var _AIu = "AutoImport";
var _AL = "AccessLogs";
var _ALI = "AmiLaunchIndex";
var _ALc = "AccountLevel";
var _AM = "AcceleratorManufacturers";
var _AMIT = "AllowsMultipleInstanceTypes";
var _AMNL = "AllocationMinNetmaskLength";
var _AMNLl = "AllocationMaxNetmaskLength";
var _AMS = "ApplianceModeSupport";
var _AN = "AttributeNames";
var _ANGA = "AssociateNatGatewayAddress";
var _ANI = "AttachNetworkInterface";
var _ANLBA = "AddNetworkLoadBalancerArns";
var _ANS = "AddNetworkServices";
var _ANc = "AcceleratorNames";
var _ANt = "AttributeName";
var _AO = "AuthenticationOptions";
var _AOI = "AddressOwnerId";
var _AOR = "AddOperatingRegions";
var _AOUE = "AddOrganizationalUnitExclusions";
var _AP = "AutoPlacement";
var _APCO = "AccepterPeeringConnectionOptions";
var _APH = "AlternatePathHints";
var _APIA = "AssignPrivateIpAddresses";
var _APIAs = "AssociatePublicIpAddress";
var _APIAss = "AssignedPrivateIpAddresses";
var _APICB = "AmazonProvidedIpv6CidrBlock";
var _APM = "ApplyPendingMaintenance";
var _APNGA = "AssignPrivateNatGatewayAddress";
var _APd = "AddedPrincipals";
var _APl = "AllowedPrincipals";
var _AR = "AllowReassignment";
var _ARA = "AssociatedRoleArn";
var _ARAd = "AdditionalRoutesAvailable";
var _ARAs = "AssociatedResourceAccessibility";
var _ARAss = "AssociatedResourceArn";
var _ARC = "AcceptedRouteCount";
var _ARIEQ = "AcceptReservedInstancesExchangeQuote";
var _ARS = "AutoRecoverySupported";
var _ART = "AssociateRouteTable";
var _ARTI = "AddRouteTableIds";
var _ARTl = "AllocationResourceTags";
var _ARc = "AcceptanceRequired";
var _ARcl = "AclRule";
var _ARd = "AddressRegion";
var _ARl = "AllowReassociation";
var _ARll = "AllRegions";
var _ARs = "AssociatedResource";
var _ARss = "AssociatedRoles";
var _ARu = "AutoRecovery";
var _ARut = "AuthorizationRules";
var _ARw = "AwsRegion";
var _AS = "AllocationStrategy";
var _ASA = "AmazonSideAsn";
var _ASCB = "AssociateSubnetCidrBlock";
var _ASGE = "AuthorizeSecurityGroupEgress";
var _ASGI = "AuthorizeSecurityGroupIngress";
var _ASGId = "AddSecurityGroupIds";
var _ASGTCVTN = "ApplySecurityGroupsToClientVpnTargetNetwork";
var _ASGV = "AssociateSecurityGroupVpc";
var _ASI = "AddSubnetIds";
var _ASIAT = "AddSupportedIpAddressTypes";
var _ASR = "AddSupportedRegions";
var _ASS = "AmdSevSnp";
var _AST = "AnalysisStartTime";
var _ASTB = "AnalysisStartTimeBegin";
var _ASTE = "AnalysisStartTimeEnd";
var _ASc = "ActivityStatus";
var _ASn = "AnalysisStatus";
var _ASs = "AssociationState";
var _ASss = "AssociationStatus";
var _ASt = "AttributeSummaries";
var _AStt = "AttachmentStatuses";
var _ASw = "AwsService";
var _AT = "AssociationTarget";
var _ATGAI = "AccepterTransitGatewayAttachmentId";
var _ATGCB = "AddTransitGatewayCidrBlocks";
var _ATGMD = "AssociateTransitGatewayMulticastDomain";
var _ATGMDA = "AcceptTransitGatewayMulticastDomainAssociations";
var _ATGPA = "AcceptTransitGatewayPeeringAttachment";
var _ATGPT = "AssociateTransitGatewayPolicyTable";
var _ATGRT = "AssociateTransitGatewayRouteTable";
var _ATGVA = "AcceptTransitGatewayVpcAttachment";
var _ATI = "AssociateTrunkInterface";
var _ATIc = "AccepterTgwInfo";
var _ATMMB = "AcceleratorTotalMemoryMiB";
var _ATN = "AssociatedTargetNetworks";
var _ATS = "AddressTransferStatus";
var _ATc = "AcceleratorTypes";
var _ATd = "AddressingType";
var _ATdd = "AddressTransfer";
var _ATddr = "AddressTransfers";
var _ATddre = "AddressType";
var _ATl = "AllocationType";
var _ATll = "AllocationTime";
var _ATr = "ArchitectureTypes";
var _ATt = "AttachmentType";
var _ATtt = "AttachTime";
var _ATtta = "AttachedTo";
var _AV = "AttachVolume";
var _AVATP = "AttachVerifiedAccessTrustProvider";
var _AVC = "AvailableVCpus";
var _AVCB = "AssociateVpcCidrBlock";
var _AVEC = "AcceptVpcEndpointConnections";
var _AVG = "AttachVpnGateway";
var _AVI = "AccepterVpcInfo";
var _AVPC = "AcceptVpcPeeringConnection";
var _AVt = "AttributeValues";
var _AVtt = "AttributeValue";
var _AWSAKI = "AWSAccessKeyId";
var _AZ = "AvailabilityZone";
var _AZG = "AvailabilityZoneGroup";
var _AZI = "AvailabilityZoneId";
var _AZv = "AvailabilityZones";
var _Ac = "Accept";
var _Acc = "Accelerators";
var _Acl = "Acl";
var _Act = "Active";
var _Acti = "Actions";
var _Ad = "Address";
var _Add = "Add";
var _Addr = "Addresses";
var _Af = "Affinity";
var _Am = "Amount";
var _Ar = "Arn";
var _Arc = "Architecture";
var _As = "Asn";
var _Ass = "Associations";
var _Asso = "Association";
var _At = "Attribute";
var _Att = "Attachment";
var _Atta = "Attachments";
var _B = "Bucket";
var _BA = "BgpAsn";
var _BAE = "BgpAsnExtended";
var _BBIG = "BaselineBandwidthInGbps";
var _BBIM = "BaselineBandwidthInMbps";
var _BC = "ByoipCidr";
var _BCg = "BgpConfigurations";
var _BCy = "ByoipCidrs";
var _BCyt = "BytesConverted";
var _BDM = "BlockDeviceMappings";
var _BDMl = "BlockDurationMinutes";
var _BEBM = "BaselineEbsBandwidthMbps";
var _BEDN = "BaseEndpointDnsNames";
var _BI = "BundleInstance";
var _BII = "BranchInterfaceId";
var _BIa = "BaselineIops";
var _BIu = "BundleId";
var _BIun = "BundleIds";
var _BM = "BootMode";
var _BMa = "BareMetal";
var _BN = "BucketName";
var _BO = "BgpOptions";
var _BOu = "BucketOwner";
var _BP = "BurstablePerformance";
var _BPAS = "BlockPublicAccessStates";
var _BPF = "BaselinePerformanceFactors";
var _BPS = "BurstablePerformanceSupported";
var _BPi = "BillingProducts";
var _BS = "BgpStatus";
var _BT = "BannerText";
var _BTE = "BundleTaskError";
var _BTIMB = "BaselineThroughputInMBps";
var _BTu = "BundleTask";
var _BTun = "BundleTasks";
var _BW = "BandwidthWeighting";
var _BWa = "BandwidthWeightings";
var _Bl = "Blackhole";
var _By = "Bytes";
var _Byo = "Byoasn";
var _Byoa = "Byoasns";
var _C = "Cidr";
var _CA = "CertificateArn";
var _CAC = "CidrAuthorizationContext";
var _CADNL = "ClearAllocationDefaultNetmaskLength";
var _CAU = "CoipAddressUsages";
var _CAa = "CapacityAllocations";
var _CAo = "ComponentArn";
var _CAom = "ComponentAccount";
var _CAr = "CreatedAt";
var _CB = "CidrBlock";
var _CBA = "CidrBlockAssociation";
var _CBAS = "CidrBlockAssociationSet";
var _CBDH = "CapacityBlockDurationHours";
var _CBDM = "CapacityBlockDurationMinutes";
var _CBE = "CapacityBlockExtensions";
var _CBEDH = "CapacityBlockExtensionDurationHours";
var _CBEED = "CapacityBlockExtensionEndDate";
var _CBEO = "CapacityBlockExtensionOfferings";
var _CBEOI = "CapacityBlockExtensionOfferingId";
var _CBEPD = "CapacityBlockExtensionPurchaseDate";
var _CBES = "CapacityBlockExtensionStatus";
var _CBESD = "CapacityBlockExtensionStartDate";
var _CBO = "CapacityBlockOfferings";
var _CBOI = "CapacityBlockOfferingId";
var _CBS = "CidrBlockState";
var _CBSi = "CidrBlockSet";
var _CBT = "CancelBundleTask";
var _CBr = "CreatedBy";
var _CC = "CoreCount";
var _CCB = "ClientCidrBlock";
var _CCC = "CreateCoipCidr";
var _CCG = "CreateCarrierGateway";
var _CCGr = "CreateCustomerGateway";
var _CCO = "ClientConnectOptions";
var _CCP = "CreateCoipPool";
var _CCR = "CancelCapacityReservation";
var _CCRBS = "CreateCapacityReservationBySplitting";
var _CCRF = "CancelCapacityReservationFleets";
var _CCRFE = "CancelCapacityReservationFleetError";
var _CCRFr = "CreateCapacityReservationFleet";
var _CCRr = "CreateCapacityReservation";
var _CCT = "CancelConversionTask";
var _CCVE = "CreateClientVpnEndpoint";
var _CCVR = "CreateClientVpnRoute";
var _CCl = "ClientConfiguration";
var _CCo = "CoipCidr";
var _CCp = "CpuCredits";
var _CCu = "CurrencyCode";
var _CD = "CommitmentDuration";
var _CDH = "CapacityDurationHours";
var _CDM = "CompletionDurationMinutes";
var _CDO = "CreateDhcpOptions";
var _CDPR = "CancelDeclarativePoliciesReport";
var _CDS = "CreateDefaultSubnet";
var _CDSDA = "ConfigDeliveryS3DestinationArn";
var _CDSu = "CustomDnsServers";
var _CDV = "CreateDefaultVpc";
var _CDl = "ClientData";
var _CDr = "CreateDate";
var _CDre = "CreationDate";
var _CDrea = "CreatedDate";
var _CE = "CronExpression";
var _CECSD = "CidrEndpointsCustomSubDomain";
var _CED = "CommitmentEndDate";
var _CEOIG = "CreateEgressOnlyInternetGateway";
var _CET = "CancelExportTask";
var _CETo = "ConnectionEstablishedTime";
var _CETon = "ConnectionEndTime";
var _CEo = "ConnectionEvents";
var _CF = "CreateFleet";
var _CFI = "CopyFpgaImage";
var _CFIr = "CreateFpgaImage";
var _CFL = "CreateFlowLogs";
var _CFS = "CurrentFleetState";
var _CFo = "ContainerFormat";
var _CG = "CarrierGateway";
var _CGC = "CustomerGatewayConfiguration";
var _CGI = "CarrierGatewayId";
var _CGIa = "CarrierGatewayIds";
var _CGIu = "CustomerGatewayId";
var _CGIus = "CustomerGatewayIds";
var _CGa = "CarrierGateways";
var _CGu = "CustomerGateway";
var _CGur = "CurrentGeneration";
var _CGus = "CustomerGateways";
var _CI = "CopyImage";
var _CIBM = "CurrentInstanceBootMode";
var _CIC = "CommittedInstanceCount";
var _CICE = "CreateInstanceConnectEndpoint";
var _CIERVT = "CreateIpamExternalResourceVerificationToken";
var _CIET = "CreateInstanceExportTask";
var _CIEW = "CreateInstanceEventWindow";
var _CIG = "CreateInternetGateway";
var _CILP = "CancelImageLaunchPermission";
var _CIP = "CreateIpamPool";
var _CIRD = "CreateIpamResourceDiscovery";
var _CIS = "CreateIpamScope";
var _CISI = "CurrentIpamScopeId";
var _CIT = "CancelImportTask";
var _CITo = "CopyImageTags";
var _CIa = "CarrierIp";
var _CIi = "CidrIp";
var _CIid = "CidrIpv6";
var _CIidr = "CidrIpv4";
var _CIl = "ClientId";
var _CIli = "ClientIp";
var _CIo = "ConnectionId";
var _CIom = "ComponentId";
var _CIomm = "CommitmentInfo";
var _CIop = "CoIp";
var _CIor = "CoreInfo";
var _CIr = "CreateImage";
var _CIre = "CreateIpam";
var _CKP = "CreateKeyPair";
var _CLB = "ClassicLoadBalancers";
var _CLBC = "ClassicLoadBalancersConfig";
var _CLBL = "ClassicLoadBalancerListener";
var _CLBO = "ClientLoginBannerOptions";
var _CLDS = "ClassicLinkDnsSupported";
var _CLE = "ClassicLinkEnabled";
var _CLG = "CloudwatchLogGroup";
var _CLGR = "CreateLocalGatewayRoute";
var _CLGRT = "CreateLocalGatewayRouteTable";
var _CLGRTVA = "CreateLocalGatewayRouteTableVpcAssociation";
var _CLGRTVIGA = "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
var _CLO = "ConnectionLogOptions";
var _CLS = "CloudwatchLogStream";
var _CLT = "CreateLaunchTemplate";
var _CLTV = "CreateLaunchTemplateVersion";
var _CM = "CpuManufacturers";
var _CMKE = "CustomerManagedKeyEnabled";
var _CMPL = "CreateManagedPrefixList";
var _CN = "CommonName";
var _CNA = "CreateNetworkAcl";
var _CNAA = "CoreNetworkAttachmentArn";
var _CNAE = "CreateNetworkAclEntry";
var _CNAo = "CoreNetworkArn";
var _CNAon = "ConnectionNotificationArn";
var _CNG = "CreateNatGateway";
var _CNI = "CreateNetworkInterface";
var _CNIAS = "CreateNetworkInsightsAccessScope";
var _CNIP = "CreateNetworkInsightsPath";
var _CNIPr = "CreateNetworkInterfacePermission";
var _CNIo = "ConnectionNotificationIds";
var _CNIon = "ConnectionNotificationId";
var _CNIor = "CoreNetworkId";
var _CNS = "ConnectionNotificationState";
var _CNSo = "ConnectionNotificationSet";
var _CNT = "ConnectionNotificationType";
var _CNo = "ConnectionNotification";
var _CO = "CidrOptions";
var _COI = "CustomerOwnedIp";
var _COIP = "CustomerOwnedIpv4Pool";
var _COP = "CoolOffPeriod";
var _COPEO = "CoolOffPeriodExpiresOn";
var _COp = "CpuOptions";
var _CP = "CoipPool";
var _CPC = "ConnectPeerConfiguration";
var _CPG = "CreatePlacementGroup";
var _CPI = "ConfirmProductInstance";
var _CPIP = "CreatePublicIpv4Pool";
var _CPIo = "CoipPoolId";
var _CPo = "CoipPools";
var _CR = "CreateRoute";
var _CRA = "CapacityReservationArn";
var _CRBR = "CapacityReservationBillingRequests";
var _CRCC = "ClientRootCertificateChain";
var _CRCCA = "ClientRootCertificateChainArn";
var _CRF = "CapacityReservationFleets";
var _CRFA = "CapacityReservationFleetArn";
var _CRFI = "CapacityReservationFleetIds";
var _CRFIa = "CapacityReservationFleetId";
var _CRG = "CapacityReservationGroups";
var _CRI = "CapacityReservationId";
var _CRIL = "CancelReservedInstancesListing";
var _CRILr = "CreateReservedInstancesListing";
var _CRIT = "CreateRestoreImageTask";
var _CRIa = "CapacityReservationIds";
var _CRIap = "CapacityReservationInfo";
var _CRL = "CertificateRevocationList";
var _CRO = "CapacityReservationOptions";
var _CRP = "CapacityReservationPreference";
var _CRRGA = "CapacityReservationResourceGroupArn";
var _CRRVT = "CreateReplaceRootVolumeTask";
var _CRS = "CapacityReservationSpecification";
var _CRT = "CreateRouteTable";
var _CRTa = "CapacityReservationTarget";
var _CRa = "CancelReason";
var _CRap = "CapacityRebalance";
var _CRapa = "CapacityReservation";
var _CRapac = "CapacityReservations";
var _CRo = "ComponentRegion";
var _CS = "CopySnapshot";
var _CSBN = "CertificateS3BucketName";
var _CSCR = "CreateSubnetCidrReservation";
var _CSDS = "CreateSpotDatafeedSubscription";
var _CSFR = "CancelSpotFleetRequests";
var _CSFRS = "CurrentSpotFleetRequestState";
var _CSG = "CreateSecurityGroup";
var _CSIR = "CancelSpotInstanceRequests";
var _CSIRa = "CancelledSpotInstanceRequests";
var _CSIT = "CreateStoreImageTask";
var _CSOK = "CertificateS3ObjectKey";
var _CSl = "ClientSecret";
var _CSo = "ComplianceStatus";
var _CSon = "ConnectionStatuses";
var _CSr = "CreateSnapshot";
var _CSre = "CreateSnapshots";
var _CSrea = "CreateSubnet";
var _CSred = "CreditSpecification";
var _CSu = "CurrentState";
var _CSur = "CurrentStatus";
var _CT = "CreateTags";
var _CTC = "ConnectionTrackingConfiguration";
var _CTFS = "CopyTagsFromSource";
var _CTG = "CreateTransitGateway";
var _CTGC = "CreateTransitGatewayConnect";
var _CTGCP = "CreateTransitGatewayConnectPeer";
var _CTGMD = "CreateTransitGatewayMulticastDomain";
var _CTGPA = "CreateTransitGatewayPeeringAttachment";
var _CTGPLR = "CreateTransitGatewayPrefixListReference";
var _CTGPT = "CreateTransitGatewayPolicyTable";
var _CTGR = "CreateTransitGatewayRoute";
var _CTGRT = "CreateTransitGatewayRouteTable";
var _CTGRTA = "CreateTransitGatewayRouteTableAnnouncement";
var _CTGVA = "CreateTransitGatewayVpcAttachment";
var _CTI = "ConversionTaskId";
var _CTIo = "ConversionTaskIds";
var _CTMF = "CreateTrafficMirrorFilter";
var _CTMFR = "CreateTrafficMirrorFilterRule";
var _CTMS = "CreateTrafficMirrorSession";
var _CTMT = "CreateTrafficMirrorTarget";
var _CTS = "ConnectionTrackingSpecification";
var _CTl = "ClientToken";
var _CTo = "ConnectivityType";
var _CTom = "CompleteTime";
var _CTomp = "CompletionTime";
var _CTon = "ConversionTasks";
var _CTonv = "ConversionTask";
var _CTr = "CreateTime";
var _CTre = "CreationTime";
var _CTrea = "CreationTimestamp";
var _CV = "CreateVolume";
var _CVAE = "CreateVerifiedAccessEndpoint";
var _CVAG = "CreateVerifiedAccessGroup";
var _CVAI = "CreateVerifiedAccessInstance";
var _CVATP = "CreateVerifiedAccessTrustProvider";
var _CVBPAE = "CreateVpcBlockPublicAccessExclusion";
var _CVC = "CreateVpnConnection";
var _CVCR = "CreateVpnConnectionRoute";
var _CVE = "CreateVpcEndpoint";
var _CVECN = "CreateVpcEndpointConnectionNotification";
var _CVEI = "ClientVpnEndpointId";
var _CVEIl = "ClientVpnEndpointIds";
var _CVESC = "CreateVpcEndpointServiceConfiguration";
var _CVEl = "ClientVpnEndpoints";
var _CVG = "CreateVpnGateway";
var _CVP = "CreateVolumePermission";
var _CVPC = "CreateVpcPeeringConnection";
var _CVPr = "CreateVolumePermissions";
var _CVTN = "ClientVpnTargetNetworks";
var _CVr = "CreateVpc";
var _CVu = "CurrentVersion";
var _CWL = "CloudWatchLogs";
var _CWLO = "CloudWatchLogOptions";
var _Ca = "Cascade";
var _Cat = "Category";
var _Ch = "Checksum";
var _Ci = "Cidrs";
var _Co = "Comment";
var _Cod = "Code";
var _Com = "Component";
var _Con = "Context";
var _Conf = "Configured";
var _Confi = "Config";
var _Conn = "Connections";
var _Cor = "Cores";
var _Cou = "Count";
var _Cp = "Cpu";
var _D = "Destination";
var _DA = "DescribeAddresses";
var _DAA = "DescribeAccountAttributes";
var _DAAI = "DelegatedAdminAccountId";
var _DAAe = "DescribeAddressesAttribute";
var _DAIF = "DescribeAggregateIdFormat";
var _DAIS = "DisableAllowedImagesSettings";
var _DAIT = "DenyAllIgwTraffic";
var _DANPMS = "DescribeAwsNetworkPerformanceMetricSubscriptions";
var _DANPMSi = "DisableAwsNetworkPerformanceMetricSubscription";
var _DART = "DefaultAssociationRouteTable";
var _DAS = "DisableApiStop";
var _DAT = "DescribeAddressTransfers";
var _DATi = "DisableAddressTransfer";
var _DATis = "DisableApiTermination";
var _DAZ = "DescribeAvailabilityZones";
var _DAe = "DeprecateAt";
var _DAep = "DeprovisionedAddresses";
var _DAes = "DestinationAddresses";
var _DAest = "DestinationAddress";
var _DAesti = "DestinationArn";
var _DAi = "DisassociateAddress";
var _DBC = "DeprovisionByoipCidr";
var _DBCe = "DescribeByoipCidrs";
var _DBT = "DescribeBundleTasks";
var _DC = "DisallowedCidrs";
var _DCA = "DomainCertificateArn";
var _DCAR = "DeliverCrossAccountRole";
var _DCB = "DestinationCidrBlock";
var _DCBEH = "DescribeCapacityBlockExtensionHistory";
var _DCBEO = "DescribeCapacityBlockExtensionOfferings";
var _DCBO = "DescribeCapacityBlockOfferings";
var _DCC = "DeleteCoipCidr";
var _DCG = "DeleteCarrierGateway";
var _DCGe = "DeleteCustomerGateway";
var _DCGes = "DescribeCarrierGateways";
var _DCGesc = "DescribeCustomerGateways";
var _DCLI = "DescribeClassicLinkInstances";
var _DCLV = "DetachClassicLinkVpc";
var _DCP = "DeleteCoipPool";
var _DCPe = "DescribeCoipPools";
var _DCR = "DescribeCapacityReservations";
var _DCRBO = "DisassociateCapacityReservationBillingOwner";
var _DCRBR = "DescribeCapacityReservationBillingRequests";
var _DCRF = "DescribeCapacityReservationFleets";
var _DCRI = "DestinationCapacityReservationId";
var _DCRe = "DestinationCapacityReservation";
var _DCT = "DescribeConversionTasks";
var _DCVAR = "DescribeClientVpnAuthorizationRules";
var _DCVC = "DescribeClientVpnConnections";
var _DCVE = "DeleteClientVpnEndpoint";
var _DCVEe = "DescribeClientVpnEndpoints";
var _DCVR = "DeleteClientVpnRoute";
var _DCVRe = "DescribeClientVpnRoutes";
var _DCVTN = "DescribeClientVpnTargetNetworks";
var _DCVTNi = "DisassociateClientVpnTargetNetwork";
var _DCe = "DestinationCidr";
var _DCef = "DefaultCores";
var _DCh = "DhcpConfigurations";
var _DCi = "DiskContainers";
var _DCis = "DiskContainer";
var _DDO = "DeleteDhcpOptions";
var _DDOe = "DescribeDhcpOptions";
var _DDPR = "DescribeDeclarativePoliciesReports";
var _DE = "DnsEntries";
var _DECIR = "DisassociateEnclaveCertificateIamRole";
var _DEEBD = "DisableEbsEncryptionByDefault";
var _DEG = "DescribeElasticGpus";
var _DEIT = "DescribeExportImageTasks";
var _DEKI = "DataEncryptionKeyId";
var _DEOIG = "DeleteEgressOnlyInternetGateway";
var _DEOIGe = "DescribeEgressOnlyInternetGateways";
var _DET = "DescribeExportTasks";
var _DEn = "DnsEntry";
var _DF = "DeleteFleets";
var _DFA = "DefaultForAz";
var _DFH = "DescribeFleetHistory";
var _DFI = "DeleteFpgaImage";
var _DFIA = "DescribeFpgaImageAttribute";
var _DFIe = "DescribeFleetInstances";
var _DFIes = "DescribeFpgaImages";
var _DFL = "DeleteFlowLogs";
var _DFLI = "DescribeFastLaunchImages";
var _DFLe = "DescribeFlowLogs";
var _DFLi = "DisableFastLaunch";
var _DFSR = "DescribeFastSnapshotRestores";
var _DFSRi = "DisableFastSnapshotRestores";
var _DFe = "DescribeFleets";
var _DH = "DescribeHosts";
var _DHI = "DedicatedHostIds";
var _DHR = "DescribeHostReservations";
var _DHRO = "DescribeHostReservationOfferings";
var _DHS = "DedicatedHostsSupported";
var _DI = "DeleteIpam";
var _DIA = "DescribeImageAttribute";
var _DIAe = "DescribeInstanceAttribute";
var _DIB = "DeprovisionIpamByoasn";
var _DIBPA = "DisableImageBlockPublicAccess";
var _DIBe = "DescribeIpamByoasn";
var _DIBi = "DisassociateIpamByoasn";
var _DICB = "DestinationIpv6CidrBlock";
var _DICE = "DeleteInstanceConnectEndpoint";
var _DICEe = "DescribeInstanceConnectEndpoints";
var _DICS = "DescribeInstanceCreditSpecifications";
var _DID = "DisableImageDeprecation";
var _DIDP = "DisableImageDeregistrationProtection";
var _DIENA = "DeregisterInstanceEventNotificationAttributes";
var _DIENAe = "DescribeInstanceEventNotificationAttributes";
var _DIERVT = "DeleteIpamExternalResourceVerificationToken";
var _DIERVTe = "DescribeIpamExternalResourceVerificationTokens";
var _DIEW = "DeleteInstanceEventWindow";
var _DIEWe = "DescribeInstanceEventWindows";
var _DIEWi = "DisassociateInstanceEventWindow";
var _DIF = "DescribeIdFormat";
var _DIFi = "DiskImageFormat";
var _DIG = "DeleteInternetGateway";
var _DIGe = "DescribeInternetGateways";
var _DIGet = "DetachInternetGateway";
var _DIIF = "DescribeIdentityIdFormat";
var _DIIM = "DescribeInstanceImageMetadata";
var _DIIP = "DisassociateIamInstanceProfile";
var _DIIPA = "DescribeIamInstanceProfileAssociations";
var _DIIT = "DescribeImportImageTasks";
var _DIOAA = "DisableIpamOrganizationAdminAccount";
var _DIP = "DeleteIpamPool";
var _DIPC = "DeprovisionIpamPoolCidr";
var _DIPe = "DescribeIpamPools";
var _DIPes = "DescribeIpv6Pools";
var _DIRD = "DeleteIpamResourceDiscovery";
var _DIRDA = "DescribeIpamResourceDiscoveryAssociations";
var _DIRDe = "DescribeIpamResourceDiscoveries";
var _DIRDi = "DisassociateIpamResourceDiscovery";
var _DIS = "DeleteIpamScope";
var _DISI = "DestinationIpamScopeId";
var _DIST = "DescribeImportSnapshotTasks";
var _DISe = "DescribeInstanceStatus";
var _DISes = "DescribeIpamScopes";
var _DISi = "DiskImageSize";
var _DIT = "DescribeInstanceTopology";
var _DITO = "DescribeInstanceTypeOfferings";
var _DITe = "DescribeInstanceTypes";
var _DIe = "DeregisterImage";
var _DIes = "DescribeImages";
var _DIesc = "DescribeInstances";
var _DIescr = "DescribeIpams";
var _DIest = "DestinationIp";
var _DIev = "DeviceIndex";
var _DIevi = "DeviceId";
var _DIi = "DisableImage";
var _DIir = "DirectoryId";
var _DIis = "DiskImages";
var _DKP = "DeleteKeyPair";
var _DKPe = "DescribeKeyPairs";
var _DLADI = "DisableLniAtDeviceIndex";
var _DLEM = "DeliverLogsErrorMessage";
var _DLG = "DescribeLocalGateways";
var _DLGR = "DeleteLocalGatewayRoute";
var _DLGRT = "DeleteLocalGatewayRouteTable";
var _DLGRTVA = "DeleteLocalGatewayRouteTableVpcAssociation";
var _DLGRTVAe = "DescribeLocalGatewayRouteTableVpcAssociations";
var _DLGRTVIGA = "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
var _DLGRTVIGAe = "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations";
var _DLGRTe = "DescribeLocalGatewayRouteTables";
var _DLGVI = "DescribeLocalGatewayVirtualInterfaces";
var _DLGVIG = "DescribeLocalGatewayVirtualInterfaceGroups";
var _DLPA = "DeliverLogsPermissionArn";
var _DLS = "DescribeLockedSnapshots";
var _DLSe = "DeliverLogsStatus";
var _DLT = "DeleteLaunchTemplate";
var _DLTV = "DeleteLaunchTemplateVersions";
var _DLTVe = "DescribeLaunchTemplateVersions";
var _DLTe = "DescribeLaunchTemplates";
var _DMA = "DescribeMovingAddresses";
var _DMGM = "DeregisteredMulticastGroupMembers";
var _DMGS = "DeregisteredMulticastGroupSources";
var _DMH = "DescribeMacHosts";
var _DMPL = "DeleteManagedPrefixList";
var _DMPLe = "DescribeManagedPrefixLists";
var _DN = "DeviceName";
var _DNA = "DeleteNetworkAcl";
var _DNAE = "DeleteNetworkAclEntry";
var _DNAe = "DescribeNetworkAcls";
var _DNCI = "DefaultNetworkCardIndex";
var _DNG = "DeleteNatGateway";
var _DNGA = "DisassociateNatGatewayAddress";
var _DNGe = "DescribeNatGateways";
var _DNI = "DeleteNetworkInterface";
var _DNIA = "DeleteNetworkInsightsAnalysis";
var _DNIAS = "DeleteNetworkInsightsAccessScope";
var _DNIASA = "DeleteNetworkInsightsAccessScopeAnalysis";
var _DNIASAe = "DescribeNetworkInsightsAccessScopeAnalyses";
var _DNIASe = "DescribeNetworkInsightsAccessScopes";
var _DNIAe = "DescribeNetworkInsightsAnalyses";
var _DNIAes = "DescribeNetworkInterfaceAttribute";
var _DNII = "DeregisteredNetworkInterfaceIds";
var _DNIP = "DeleteNetworkInsightsPath";
var _DNIPe = "DeleteNetworkInterfacePermission";
var _DNIPes = "DescribeNetworkInsightsPaths";
var _DNIPesc = "DescribeNetworkInterfacePermissions";
var _DNIe = "DescribeNetworkInterfaces";
var _DNIet = "DetachNetworkInterface";
var _DNn = "DnsName";
var _DNo = "DomainName";
var _DO = "DestinationOptions";
var _DOA = "DestinationOutpostArn";
var _DOI = "DhcpOptionsId";
var _DOIh = "DhcpOptionsIds";
var _DOST = "DisconnectOnSessionTimeout";
var _DOT = "DeleteOnTermination";
var _DOe = "DeviceOptions";
var _DOh = "DhcpOptions";
var _DOn = "DnsOptions";
var _DP = "DeliveryPreference";
var _DPDTA = "DPDTimeoutAction";
var _DPDTS = "DPDTimeoutSeconds";
var _DPG = "DeletePlacementGroup";
var _DPGe = "DescribePlacementGroups";
var _DPIF = "DescribePrincipalIdFormat";
var _DPIP = "DeletePublicIpv4Pool";
var _DPIPC = "DeprovisionPublicIpv4PoolCidr";
var _DPIPe = "DescribePublicIpv4Pools";
var _DPL = "DescribePrefixLists";
var _DPLI = "DestinationPrefixListId";
var _DPLe = "DestinationPrefixLists";
var _DPR = "DestinationPortRange";
var _DPRT = "DefaultPropagationRouteTable";
var _DPRe = "DestinationPortRanges";
var _DPe = "DestinationPort";
var _DPer = "DeregistrationProtection";
var _DPes = "DestinationPorts";
var _DQ = "DataQueries";
var _DQRI = "DeleteQueuedReservedInstances";
var _DR = "DeleteRoute";
var _DRDAI = "DefaultResourceDiscoveryAssociationId";
var _DRDI = "DefaultResourceDiscoveryId";
var _DRI = "DescribeReservedInstances";
var _DRIL = "DescribeReservedInstancesListings";
var _DRIM = "DescribeReservedInstancesModifications";
var _DRIO = "DescribeReservedInstancesOfferings";
var _DRIT = "DnsRecordIpType";
var _DRRV = "DeleteReplacedRootVolume";
var _DRRVT = "DescribeReplaceRootVolumeTasks";
var _DRS = "DataRetentionSupport";
var _DRT = "DeleteRouteTable";
var _DRTA = "DefaultRouteTableAssociation";
var _DRTP = "DefaultRouteTablePropagation";
var _DRTe = "DescribeRouteTables";
var _DRTi = "DisassociateRouteTable";
var _DRa = "DataResponses";
var _DRe = "DescribeRegions";
var _DRes = "DestinationRegion";
var _DRi = "DiscoveryRegion";
var _DRr = "DryRun";
var _DRy = "DynamicRouting";
var _DS = "DeleteSnapshot";
var _DSA = "DescribeSnapshotAttribute";
var _DSBPA = "DisableSnapshotBlockPublicAccess";
var _DSCA = "DisableSerialConsoleAccess";
var _DSCB = "DisassociateSubnetCidrBlock";
var _DSCR = "DeleteSubnetCidrReservation";
var _DSCRe = "DeletedSubnetCidrReservation";
var _DSDS = "DeleteSpotDatafeedSubscription";
var _DSDSe = "DescribeSpotDatafeedSubscription";
var _DSFI = "DescribeSpotFleetInstances";
var _DSFR = "DescribeSpotFleetRequests";
var _DSFRH = "DescribeSpotFleetRequestHistory";
var _DSG = "DeleteSecurityGroup";
var _DSGR = "DescribeSecurityGroupReferences";
var _DSGRe = "DescribeSecurityGroupRules";
var _DSGV = "DisassociateSecurityGroupVpc";
var _DSGVA = "DescribeSecurityGroupVpcAssociations";
var _DSGe = "DescribeSecurityGroups";
var _DSI = "DescribeScheduledInstances";
var _DSIA = "DescribeScheduledInstanceAvailability";
var _DSIR = "DescribeSpotInstanceRequests";
var _DSIT = "DescribeStoreImageTasks";
var _DSPH = "DescribeSpotPriceHistory";
var _DSSG = "DescribeStaleSecurityGroups";
var _DSTS = "DescribeSnapshotTierStatus";
var _DSe = "DeleteSubnet";
var _DSel = "DeliveryStream";
var _DSeli = "DeliveryStatus";
var _DSes = "DescribeSnapshots";
var _DSesc = "DescribeSubnets";
var _DSn = "DnsServers";
var _DSns = "DnsSupport";
var _DT = "DeleteTags";
var _DTA = "DpdTimeoutAction";
var _DTCT = "DefaultTargetCapacityType";
var _DTG = "DeleteTransitGateway";
var _DTGA = "DescribeTransitGatewayAttachments";
var _DTGC = "DeleteTransitGatewayConnect";
var _DTGCP = "DeleteTransitGatewayConnectPeer";
var _DTGCPe = "DescribeTransitGatewayConnectPeers";
var _DTGCe = "DescribeTransitGatewayConnects";
var _DTGMD = "DeleteTransitGatewayMulticastDomain";
var _DTGMDe = "DescribeTransitGatewayMulticastDomains";
var _DTGMDi = "DisassociateTransitGatewayMulticastDomain";
var _DTGMGM = "DeregisterTransitGatewayMulticastGroupMembers";
var _DTGMGS = "DeregisterTransitGatewayMulticastGroupSources";
var _DTGPA = "DeleteTransitGatewayPeeringAttachment";
var _DTGPAe = "DescribeTransitGatewayPeeringAttachments";
var _DTGPLR = "DeleteTransitGatewayPrefixListReference";
var _DTGPT = "DeleteTransitGatewayPolicyTable";
var _DTGPTe = "DescribeTransitGatewayPolicyTables";
var _DTGPTi = "DisassociateTransitGatewayPolicyTable";
var _DTGR = "DeleteTransitGatewayRoute";
var _DTGRT = "DeleteTransitGatewayRouteTable";
var _DTGRTA = "DeleteTransitGatewayRouteTableAnnouncement";
var _DTGRTAe = "DescribeTransitGatewayRouteTableAnnouncements";
var _DTGRTP = "DisableTransitGatewayRouteTablePropagation";
var _DTGRTe = "DescribeTransitGatewayRouteTables";
var _DTGRTi = "DisassociateTransitGatewayRouteTable";
var _DTGVA = "DeleteTransitGatewayVpcAttachment";
var _DTGVAe = "DescribeTransitGatewayVpcAttachments";
var _DTGe = "DescribeTransitGateways";
var _DTI = "DisassociateTrunkInterface";
var _DTIA = "DescribeTrunkInterfaceAssociations";
var _DTMF = "DeleteTrafficMirrorFilter";
var _DTMFR = "DeleteTrafficMirrorFilterRule";
var _DTMFRe = "DescribeTrafficMirrorFilterRules";
var _DTMFe = "DescribeTrafficMirrorFilters";
var _DTMS = "DeleteTrafficMirrorSession";
var _DTMSe = "DescribeTrafficMirrorSessions";
var _DTMT = "DeleteTrafficMirrorTarget";
var _DTMTe = "DescribeTrafficMirrorTargets";
var _DTP = "DeviceTrustProviders";
var _DTPC = "DefaultThreadsPerCore";
var _DTPT = "DeviceTrustProviderType";
var _DTS = "DpdTimeoutSeconds";
var _DTe = "DescribeTags";
var _DTel = "DeletionTime";
var _DTele = "DeleteTime";
var _DTelet = "DeletionTimestamp";
var _DTep = "DeprecationTime";
var _DTi = "DisablingTime";
var _DTis = "DisabledTime";
var _DV = "DeleteVolume";
var _DVA = "DescribeVolumeAttribute";
var _DVAE = "DeleteVerifiedAccessEndpoint";
var _DVAEe = "DescribeVerifiedAccessEndpoints";
var _DVAG = "DeleteVerifiedAccessGroup";
var _DVAGe = "DescribeVerifiedAccessGroups";
var _DVAI = "DeleteVerifiedAccessInstance";
var _DVAILC = "DescribeVerifiedAccessInstanceLoggingConfigurations";
var _DVAIe = "DescribeVerifiedAccessInstances";
var _DVATP = "DeleteVerifiedAccessTrustProvider";
var _DVATPe = "DescribeVerifiedAccessTrustProviders";
var _DVATPet = "DetachVerifiedAccessTrustProvider";
var _DVAe = "DescribeVpcAttribute";
var _DVBPAE = "DeleteVpcBlockPublicAccessExclusion";
var _DVBPAEe = "DescribeVpcBlockPublicAccessExclusions";
var _DVBPAO = "DescribeVpcBlockPublicAccessOptions";
var _DVC = "DeleteVpnConnection";
var _DVCB = "DisassociateVpcCidrBlock";
var _DVCL = "DescribeVpcClassicLink";
var _DVCLDS = "DescribeVpcClassicLinkDnsSupport";
var _DVCLDSi = "DisableVpcClassicLinkDnsSupport";
var _DVCLi = "DisableVpcClassicLink";
var _DVCR = "DeleteVpnConnectionRoute";
var _DVCe = "DescribeVpnConnections";
var _DVCef = "DefaultVCpus";
var _DVD = "DeviceValidationDomain";
var _DVE = "DeleteVpcEndpoints";
var _DVEA = "DescribeVpcEndpointAssociations";
var _DVEC = "DescribeVpcEndpointConnections";
var _DVECN = "DeleteVpcEndpointConnectionNotifications";
var _DVECNe = "DescribeVpcEndpointConnectionNotifications";
var _DVES = "DescribeVpcEndpointServices";
var _DVESC = "DeleteVpcEndpointServiceConfigurations";
var _DVESCe = "DescribeVpcEndpointServiceConfigurations";
var _DVESP = "DescribeVpcEndpointServicePermissions";
var _DVEe = "DescribeVpcEndpoints";
var _DVG = "DeleteVpnGateway";
var _DVGe = "DescribeVpnGateways";
var _DVGet = "DetachVpnGateway";
var _DVM = "DescribeVolumesModifications";
var _DVN = "DefaultVersionNumber";
var _DVPC = "DeleteVpcPeeringConnection";
var _DVPCe = "DescribeVpcPeeringConnections";
var _DVRP = "DisableVgwRoutePropagation";
var _DVS = "DescribeVolumeStatus";
var _DVe = "DeleteVpc";
var _DVef = "DefaultVersion";
var _DVes = "DescribeVolumes";
var _DVesc = "DescribeVpcs";
var _DVest = "DestinationVpc";
var _DVet = "DetachVolume";
var _Da = "Data";
var _De = "Description";
var _Dea = "Deadline";
var _Des = "Destinations";
var _Det = "Details";
var _Dev = "Device";
var _Di = "Direction";
var _Dis = "Disks";
var _Do = "Domain";
var _Du = "Duration";
var _E = "Ebs";
var _EA = "EnableAcceleration";
var _EAIS = "EnableAllowedImagesSettings";
var _EANPMS = "EnableAwsNetworkPerformanceMetricSubscription";
var _EAT = "EnableAddressTransfer";
var _EAx = "ExclusionsAllowed";
var _EB = "EgressBytes";
var _EBV = "ExcludeBootVolume";
var _EC = "ErrorCode";
var _ECTP = "ExcessCapacityTerminationPolicy";
var _ECVCC = "ExportClientVpnClientConfiguration";
var _ECVCCRL = "ExportClientVpnClientCertificateRevocationList";
var _ECx = "ExplanationCode";
var _ED = "EndDate";
var _EDH = "EnableDnsHostnames";
var _EDP = "EndpointDomainPrefix";
var _EDR = "EndDateRange";
var _EDS = "EnableDnsSupport";
var _EDT = "EndDateType";
var _EDVI = "ExcludeDataVolumeIds";
var _EDf = "EffectiveDate";
var _EDn = "EnableDns64";
var _EDnd = "EndpointDomain";
var _EDv = "EventDescription";
var _EDx = "ExpirationDate";
var _EEBD = "EbsEncryptionByDefault";
var _EEEBD = "EnableEbsEncryptionByDefault";
var _EFL = "EnableFastLaunch";
var _EFR = "EgressFilterRules";
var _EFSR = "EnableFastSnapshotRestores";
var _EGA = "ElasticGpuAssociations";
var _EGAI = "ElasticGpuAssociationId";
var _EGAS = "ElasticGpuAssociationState";
var _EGAT = "ElasticGpuAssociationTime";
var _EGH = "ElasticGpuHealth";
var _EGI = "ElasticGpuIds";
var _EGIl = "ElasticGpuId";
var _EGS = "ElasticGpuSpecifications";
var _EGSl = "ElasticGpuSpecification";
var _EGSla = "ElasticGpuSet";
var _EGSlas = "ElasticGpuState";
var _EGT = "ElasticGpuType";
var _EH = "EndHour";
var _EI = "EnableImage";
var _EIA = "ElasticInferenceAccelerators";
var _EIAA = "ElasticInferenceAcceleratorArn";
var _EIAAI = "ElasticInferenceAcceleratorAssociationId";
var _EIAAS = "ElasticInferenceAcceleratorAssociationState";
var _EIAAT = "ElasticInferenceAcceleratorAssociationTime";
var _EIAAl = "ElasticInferenceAcceleratorAssociations";
var _EIBPA = "EnableImageBlockPublicAccess";
var _EID = "EnableImageDeprecation";
var _EIDP = "EnableImageDeregistrationProtection";
var _EIOAA = "EnableIpamOrganizationAdminAccount";
var _EIT = "ExcludedInstanceTypes";
var _EITI = "ExportImageTaskIds";
var _EITIx = "ExportImageTaskId";
var _EITS = "EncryptionInTransitSupported";
var _EITx = "ExportImageTasks";
var _EIb = "EbsInfo";
var _EIf = "EfaInfo";
var _EIv = "EventInformation";
var _EIve = "EventId";
var _EIx = "ExportImage";
var _EIxc = "ExclusionId";
var _EIxch = "ExchangeId";
var _EIxcl = "ExclusionIds";
var _EKKI = "EncryptionKmsKeyId";
var _ELADI = "EnableLniAtDeviceIndex";
var _ELBL = "ElasticLoadBalancerListener";
var _EM = "ErrorMessage";
var _ENAUM = "EnableNetworkAddressUsageMetrics";
var _EO = "EbsOptimized";
var _EOI = "EbsOptimizedInfo";
var _EOIG = "EgressOnlyInternetGateway";
var _EOIGI = "EgressOnlyInternetGatewayId";
var _EOIGIg = "EgressOnlyInternetGatewayIds";
var _EOIGg = "EgressOnlyInternetGateways";
var _EOS = "EbsOptimizedSupport";
var _EOn = "EnclaveOptions";
var _EP = "ExcludePaths";
var _EPG = "EnablePrivateGua";
var _EPI = "EnablePrimaryIpv6";
var _EPg = "EgressPackets";
var _ERAOS = "EnableReachabilityAnalyzerOrganizationSharing";
var _ERNDAAAAR = "EnableResourceNameDnsAAAARecord";
var _ERNDAAAAROL = "EnableResourceNameDnsAAAARecordOnLaunch";
var _ERNDAR = "EnableResourceNameDnsARecord";
var _ERNDAROL = "EnableResourceNameDnsARecordOnLaunch";
var _ES = "EphemeralStorage";
var _ESBPA = "EnableSnapshotBlockPublicAccess";
var _ESCA = "EnableSerialConsoleAccess";
var _ESE = "EnaSrdEnabled";
var _ESS = "EnaSrdSpecification";
var _ESSn = "EnaSrdSupported";
var _EST = "EventSubType";
var _ESUE = "EnaSrdUdpEnabled";
var _ESUS = "EnaSrdUdpSpecification";
var _ESf = "EfaSupported";
var _ESn = "EnaSupport";
var _ESnc = "EncryptionSupport";
var _ET = "EndpointType";
var _ETGR = "ExportTransitGatewayRoutes";
var _ETGRTP = "EnableTransitGatewayRouteTablePropagation";
var _ETI = "ExportTaskId";
var _ETIx = "ExportTaskIds";
var _ETLC = "EnableTunnelLifecycleControl";
var _ETST = "ExportToS3Task";
var _ETa = "EarliestTime";
var _ETi = "EipTags";
var _ETn = "EndTime";
var _ETna = "EnablingTime";
var _ETnab = "EnabledTime";
var _ETv = "EventType";
var _ETx = "ExpirationTime";
var _ETxp = "ExportTask";
var _ETxpo = "ExportTasks";
var _EU = "ExecutableUsers";
var _EVAICC = "ExportVerifiedAccessInstanceClientConfiguration";
var _EVCL = "EnableVpcClassicLink";
var _EVCLDS = "EnableVpcClassicLinkDnsSupport";
var _EVIO = "EnableVolumeIO";
var _EVRP = "EnableVgwRoutePropagation";
var _EWD = "EndWeekDay";
var _Eg = "Egress";
var _En = "Enabled";
var _Enc = "Encrypted";
var _End = "End";
var _Endp = "Endpoint";
var _Ent = "Entries";
var _Er = "Error";
var _Err = "Errors";
var _Ev = "Events";
var _Eve = "Event";
var _Ex = "Explanations";
var _F = "Force";
var _FA = "FederatedAuthentication";
var _FAD = "FilterAtDestination";
var _FAS = "FilterAtSource";
var _FAi = "FirstAddress";
var _FC = "FulfilledCapacity";
var _FCR = "FleetCapacityReservations";
var _FCa = "FailureCode";
var _FCi = "FindingComponents";
var _FD = "ForceDelete";
var _FDN = "FipsDnsName";
var _FE = "FipsEnabled";
var _FF = "FileFormat";
var _FFC = "FailedFleetCancellations";
var _FFi = "FindingsFound";
var _FI = "FleetIds";
var _FIA = "FilterInArns";
var _FIAp = "FpgaImageAttribute";
var _FIGI = "FpgaImageGlobalId";
var _FII = "FpgaImageId";
var _FIIp = "FpgaImageIds";
var _FIPSE = "FIPSEnabled";
var _FIi = "FindingId";
var _FIl = "FleetId";
var _FIp = "FpgaImages";
var _FIpg = "FpgaInfo";
var _FL = "FlowLogs";
var _FLI = "FlowLogIds";
var _FLIa = "FastLaunchImages";
var _FLIl = "FlowLogId";
var _FLS = "FlowLogStatus";
var _FM = "FailureMessage";
var _FODC = "FulfilledOnDemandCapacity";
var _FP = "FromPort";
var _FPC = "ForwardPathComponents";
var _FPi = "FixedPrice";
var _FQPD = "FailedQueuedPurchaseDeletions";
var _FR = "FailureReason";
var _FRa = "FastRestored";
var _FS = "FleetState";
var _FSR = "FastSnapshotRestores";
var _FSRSE = "FastSnapshotRestoreStateErrors";
var _FSRi = "FirewallStatelessRule";
var _FSRir = "FirewallStatefulRule";
var _FSST = "FirstSlotStartTime";
var _FSSTR = "FirstSlotStartTimeRange";
var _FTE = "FreeTierEligible";
var _Fa = "Fault";
var _Fi = "Filters";
var _Fil = "Filter";
var _Fl = "Fleets";
var _Fo = "Format";
var _Fp = "Fpgas";
var _Fr = "From";
var _Fre = "Frequency";
var _G = "Groups";
var _GA = "GroupArn";
var _GAECIR = "GetAssociatedEnclaveCertificateIamRoles";
var _GAIPC = "GetAssociatedIpv6PoolCidrs";
var _GAIS = "GetAllowedImagesSettings";
var _GANPD = "GetAwsNetworkPerformanceData";
var _GAS = "GatewayAssociationState";
var _GCO = "GetConsoleOutput";
var _GCPU = "GetCoipPoolUsage";
var _GCRU = "GetCapacityReservationUsage";
var _GCS = "GetConsoleScreenshot";
var _GD = "GroupDescription";
var _GDCS = "GetDefaultCreditSpecification";
var _GDPRS = "GetDeclarativePoliciesReportSummary";
var _GEDKKI = "GetEbsDefaultKmsKeyId";
var _GEEBD = "GetEbsEncryptionByDefault";
var _GFLIT = "GetFlowLogsIntegrationTemplate";
var _GGFCR = "GetGroupsForCapacityReservation";
var _GHRPP = "GetHostReservationPurchasePreview";
var _GI = "GatewayId";
var _GIA = "GroupIpAddress";
var _GIAH = "GetIpamAddressHistory";
var _GIBPAS = "GetImageBlockPublicAccessState";
var _GIDA = "GetIpamDiscoveredAccounts";
var _GIDPA = "GetIpamDiscoveredPublicAddresses";
var _GIDRC = "GetIpamDiscoveredResourceCidrs";
var _GIMD = "GetInstanceMetadataDefaults";
var _GIPA = "GetIpamPoolAllocations";
var _GIPC = "GetIpamPoolCidrs";
var _GIRC = "GetIpamResourceCidrs";
var _GITEP = "GetInstanceTpmEkPub";
var _GITFIR = "GetInstanceTypesFromInstanceRequirements";
var _GIUD = "GetInstanceUefiData";
var _GIp = "GpuInfo";
var _GIr = "GroupId";
var _GIro = "GroupIds";
var _GK = "GreKey";
var _GLBA = "GatewayLoadBalancerArns";
var _GLBEI = "GatewayLoadBalancerEndpointId";
var _GLTD = "GetLaunchTemplateData";
var _GM = "GroupMember";
var _GMPLA = "GetManagedPrefixListAssociations";
var _GMPLE = "GetManagedPrefixListEntries";
var _GN = "GroupName";
var _GNIASAF = "GetNetworkInsightsAccessScopeAnalysisFindings";
var _GNIASC = "GetNetworkInsightsAccessScopeContent";
var _GNr = "GroupNames";
var _GOI = "GroupOwnerId";
var _GPD = "GetPasswordData";
var _GRIEQ = "GetReservedInstancesExchangeQuote";
var _GS = "GroupSource";
var _GSBPAS = "GetSnapshotBlockPublicAccessState";
var _GSCAS = "GetSerialConsoleAccessStatus";
var _GSCR = "GetSubnetCidrReservations";
var _GSGFV = "GetSecurityGroupsForVpc";
var _GSPS = "GetSpotPlacementScores";
var _GTGAP = "GetTransitGatewayAttachmentPropagations";
var _GTGMDA = "GetTransitGatewayMulticastDomainAssociations";
var _GTGPLR = "GetTransitGatewayPrefixListReferences";
var _GTGPTA = "GetTransitGatewayPolicyTableAssociations";
var _GTGPTE = "GetTransitGatewayPolicyTableEntries";
var _GTGRTA = "GetTransitGatewayRouteTableAssociations";
var _GTGRTP = "GetTransitGatewayRouteTablePropagations";
var _GVAEP = "GetVerifiedAccessEndpointPolicy";
var _GVAET = "GetVerifiedAccessEndpointTargets";
var _GVAGP = "GetVerifiedAccessGroupPolicy";
var _GVCDSC = "GetVpnConnectionDeviceSampleConfiguration";
var _GVCDT = "GetVpnConnectionDeviceTypes";
var _GVTRS = "GetVpnTunnelReplacementStatus";
var _Gp = "Gpus";
var _Gr = "Group";
var _H = "Hypervisor";
var _HCP = "HiveCompatiblePartitions";
var _HE = "HttpEndpoint";
var _HI = "HostIds";
var _HIS = "HostIdSet";
var _HIo = "HostId";
var _HM = "HostMaintenance";
var _HO = "HibernationOptions";
var _HP = "HostProperties";
var _HPI = "HttpProtocolIpv6";
var _HPRHL = "HttpPutResponseHopLimit";
var _HPo = "HourlyPrice";
var _HR = "HostRecovery";
var _HRGA = "HostResourceGroupArn";
var _HRI = "HostReservationId";
var _HRIS = "HostReservationIdSet";
var _HRS = "HostReservationSet";
var _HRi = "HistoryRecords";
var _HS = "HibernationSupported";
var _HT = "HttpTokens";
var _HTo = "HostnameType";
var _HZI = "HostedZoneId";
var _Hi = "Hibernate";
var _Ho = "Hosts";
var _I = "Issuer";
var _IA = "Ipv6Addresses";
var _IAA = "Ipv6AddressAttribute";
var _IAC = "Ipv6AddressCount";
var _IAI = "IncludeAllInstances";
var _IAIn = "InferenceAcceleratorInfo";
var _IAPI = "Ipv4AddressesPerInterface";
var _IAPIp = "Ipv6AddressesPerInterface";
var _IAT = "IpAddressType";
var _IATOI = "IncludeAllTagsOfInstance";
var _IAm = "ImageAllowed";
var _IAn = "InterfaceAssociation";
var _IAnt = "InterfaceAssociations";
var _IAp = "IpAddress";
var _IApa = "IpamArn";
var _IApv = "Ipv6Address";
var _IB = "IngressBytes";
var _IBPAS = "ImageBlockPublicAccessState";
var _IC = "InstanceCount";
var _ICA = "Ipv6CidrAssociations";
var _ICB = "Ipv6CidrBlock";
var _ICBA = "Ipv6CidrBlockAssociation";
var _ICBAS = "Ipv6CidrBlockAssociationSet";
var _ICBNBG = "Ipv6CidrBlockNetworkBorderGroup";
var _ICBS = "Ipv6CidrBlockState";
var _ICBSp = "Ipv6CidrBlockSet";
var _ICBn = "InsideCidrBlocks";
var _ICE = "InstanceConnectEndpoint";
var _ICEA = "InstanceConnectEndpointArn";
var _ICEI = "InstanceConnectEndpointId";
var _ICEIn = "InstanceConnectEndpointIds";
var _ICEn = "InstanceConnectEndpoints";
var _ICS = "InstanceCreditSpecifications";
var _ICVCCRL = "ImportClientVpnClientCertificateRevocationList";
var _ICm = "ImageCriteria";
var _ICn = "InstanceCounts";
var _ICp = "Ipv6Cidr";
var _ID = "IncludeDeprecated";
var _IDA = "IpamDiscoveredAccounts";
var _IDPA = "IpamDiscoveredPublicAddresses";
var _IDRC = "IpamDiscoveredResourceCidrs";
var _IDm = "ImageData";
var _IDn = "IncludeDisabled";
var _IDs = "IsDefault";
var _IE = "IsEgress";
var _IED = "InstanceExportDetails";
var _IEI = "InstanceEventId";
var _IERVT = "IpamExternalResourceVerificationToken";
var _IERVTA = "IpamExternalResourceVerificationTokenArn";
var _IERVTI = "IpamExternalResourceVerificationTokenId";
var _IERVTIp = "IpamExternalResourceVerificationTokenIds";
var _IERVTp = "IpamExternalResourceVerificationTokens";
var _IEW = "InstanceEventWindow";
var _IEWI = "InstanceEventWindowId";
var _IEWIn = "InstanceEventWindowIds";
var _IEWS = "InstanceEventWindowState";
var _IEWn = "InstanceEventWindows";
var _IF = "InstanceFamily";
var _IFCS = "InstanceFamilyCreditSpecification";
var _IFR = "IamFleetRole";
var _IFRn = "IngressFilterRules";
var _IG = "InstanceGenerations";
var _IGBM = "InternetGatewayBlockMode";
var _IGEM = "InternetGatewayExclusionMode";
var _IGI = "InternetGatewayId";
var _IGIn = "InternetGatewayIds";
var _IGn = "InternetGateway";
var _IGnt = "InternetGateways";
var _IH = "InstanceHealth";
var _IHn = "InboundHeader";
var _II = "ImportImage";
var _IIB = "InstanceInterruptionBehavior";
var _IIM = "InstanceImageMetadata";
var _IIP = "IamInstanceProfile";
var _IIPA = "IamInstanceProfileAssociation";
var _IIPAa = "IamInstanceProfileAssociations";
var _IIPI = "Ipv6IpamPoolId";
var _IIPIp = "Ipv4IpamPoolId";
var _IIS = "InstanceIdSet";
var _IISB = "InstanceInitiatedShutdownBehavior";
var _IIT = "ImportImageTasks";
var _IIm = "ImportInstance";
var _IIma = "ImageId";
var _IImag = "ImageIds";
var _IIn = "InstanceId";
var _IIns = "InstanceIds";
var _IIp = "IpamId";
var _IIpa = "IpamIds";
var _IKEV = "InternetKeyExchangeVersion";
var _IKEVe = "IKEVersions";
var _IKP = "ImportKeyPair";
var _IL = "ImageLocation";
var _ILn = "InstanceLifecycle";
var _IM = "IncludeMarketplace";
var _IMC = "InstanceMatchCriteria";
var _IMO = "InstanceMarketOptions";
var _IMOn = "InstanceMetadataOptions";
var _IMT = "InstanceMetadataTags";
var _IMU = "ImportManifestUrl";
var _IMm = "ImageMetadata";
var _IMn = "InstanceMonitorings";
var _IN = "Ipv6Native";
var _INL = "Ipv6NetmaskLength";
var _INLp = "Ipv4NetmaskLength";
var _IOA = "ImageOwnerAlias";
var _IOI = "IpOwnerId";
var _IOIn = "InstanceOwnerId";
var _IOS = "InstanceOwningService";
var _IP = "Ipv6Prefixes";
var _IPA = "IpamPoolAllocation";
var _IPAI = "IpamPoolAllocationId";
var _IPAp = "IpamPoolAllocations";
var _IPApa = "IpamPoolArn";
var _IPC = "Ipv6PrefixCount";
var _IPCI = "IpamPoolCidrId";
var _IPCp = "Ipv4PrefixCount";
var _IPCpa = "IpamPoolCidr";
var _IPCpam = "IpamPoolCidrs";
var _IPE = "IpPermissionsEgress";
var _IPI = "IpamPoolId";
var _IPIp = "IpamPoolIds";
var _IPIs = "IsPrimaryIpv6";
var _IPK = "IncludePublicKey";
var _IPO = "IpamPoolOwner";
var _IPR = "IsPermanentRestore";
var _IPTUC = "InstancePoolsToUseCount";
var _IPm = "ImageProviders";
var _IPn = "InstancePlatform";
var _IPng = "IngressPackets";
var _IPns = "InstancePort";
var _IPnt = "InterfacePermission";
var _IPnte = "InterfaceProtocol";
var _IPo = "IoPerformance";
var _IPp = "Ipv4Prefixes";
var _IPpa = "IpamPool";
var _IPpam = "IpamPools";
var _IPpe = "IpPermissions";
var _IPpr = "IpProtocol";
var _IPpre = "IpPrefixes";
var _IPpv = "Ipv6Pool";
var _IPpvo = "Ipv6Pools";
var _IPpvr = "Ipv4Prefix";
var _IPpvre = "Ipv6Prefix";
var _IPs = "IsPublic";
var _IPsr = "IsPrimary";
var _IR = "InstanceRequirements";
var _IRC = "IpamResourceCidrs";
var _IRCp = "IpamResourceCidr";
var _IRD = "IpamResourceDiscovery";
var _IRDA = "IpamResourceDiscoveryAssociation";
var _IRDAA = "IpamResourceDiscoveryAssociationArn";
var _IRDAI = "IpamResourceDiscoveryAssociationIds";
var _IRDAIp = "IpamResourceDiscoveryAssociationId";
var _IRDAp = "IpamResourceDiscoveryAssociations";
var _IRDApa = "IpamResourceDiscoveryArn";
var _IRDI = "IpamResourceDiscoveryId";
var _IRDIp = "IpamResourceDiscoveryIds";
var _IRDR = "IpamResourceDiscoveryRegion";
var _IRDp = "IpamResourceDiscoveries";
var _IRSDA = "IntegrationResultS3DestinationArn";
var _IRT = "IngressRouteTable";
var _IRWM = "InstanceRequirementsWithMetadata";
var _IRp = "IpRanges";
var _IRpa = "IpamRegion";
var _IRpv = "Ipv6Ranges";
var _IS = "ImportSnapshot";
var _ISA = "IpamScopeArn";
var _ISI = "IpamScopeId";
var _ISIn = "InstanceStorageInfo";
var _ISIp = "IpamScopeIds";
var _ISL = "InputStorageLocation";
var _ISS = "InstanceStorageSupported";
var _IST = "ImportSnapshotTasks";
var _ISTp = "IpamScopeType";
var _ISg = "Igmpv2Support";
var _ISm = "ImdsSupport";
var _ISmp = "ImpairedSince";
var _ISn = "InstanceSpecification";
var _ISns = "InstanceStatuses";
var _ISnst = "InstanceState";
var _ISnsta = "InstanceStatus";
var _ISnt = "IntegrateServices";
var _ISp = "Ipv6Support";
var _ISpa = "IpamScope";
var _ISpam = "IpamScopes";
var _ISpo = "IpSource";
var _ISpv = "Ipv6Supported";
var _IT = "InstanceType";
var _ITA = "InstanceTagAttribute";
var _ITC = "IcmpTypeCode";
var _ITCn = "IncludeTrustContext";
var _ITI = "ImportTaskId";
var _ITIm = "ImportTaskIds";
var _ITK = "InstanceTagKeys";
var _ITO = "InstanceTypeOfferings";
var _ITS = "InstanceTypeSpecifications";
var _ITm = "ImageType";
var _ITn = "InterfaceType";
var _ITns = "InstanceTenancy";
var _ITnst = "InstanceTypes";
var _ITnsta = "InstanceTags";
var _IU = "InstanceUsages";
var _IUp = "IpUsage";
var _IV = "ImportVolume";
var _IVE = "IsValidExchange";
var _IVk = "IkeVersions";
var _Id = "Id";
var _Im = "Image";
var _Ima = "Images";
var _In = "Instances";
var _Ins = "Instance";
var _Int = "Interval";
var _Io = "Iops";
var _Ip = "Ipv4";
var _Ipa = "Ipam";
var _Ipam = "Ipams";
var _Ipv = "Ipv6";
var _K = "Kernel";
var _KDF = "KinesisDataFirehose";
var _KF = "KeyFormat";
var _KFe = "KeyFingerprint";
var _KI = "KernelId";
var _KKA = "KmsKeyArn";
var _KKI = "KmsKeyId";
var _KM = "KeyMaterial";
var _KN = "KeyName";
var _KNe = "KeyNames";
var _KP = "KeyPairs";
var _KPI = "KeyPairId";
var _KPIe = "KeyPairIds";
var _KT = "KeyType";
var _KV = "KeyValue";
var _Ke = "Key";
var _Key = "Keyword";
var _L = "Locale";
var _LA = "LocalAddress";
var _LADT = "LastAttemptedDiscoveryTime";
var _LAZ = "LaunchedAvailabilityZone";
var _LAa = "LastAddress";
var _LB = "LoadBalancers";
var _LBA = "LoadBalancerArn";
var _LBAo = "LocalBgpAsn";
var _LBC = "LoadBalancersConfig";
var _LBLP = "LoadBalancerListenerPort";
var _LBO = "LoadBalancerOptions";
var _LBP = "LoadBalancerPort";
var _LBT = "LoadBalancerTarget";
var _LBTG = "LoadBalancerTargetGroup";
var _LBTGo = "LoadBalancerTargetGroups";
var _LBTP = "LoadBalancerTargetPort";
var _LC = "LoggingConfigurations";
var _LCA = "LicenseConfigurationArn";
var _LCO = "LockCreatedOn";
var _LCo = "LoggingConfiguration";
var _LD = "LogDestination";
var _LDST = "LockDurationStartTime";
var _LDT = "LogDestinationType";
var _LDo = "LockDuration";
var _LE = "LogEnabled";
var _LEO = "LockExpiresOn";
var _LET = "LastEvaluatedTime";
var _LEa = "LastError";
var _LF = "LogFormat";
var _LFA = "LambdaFunctionArn";
var _LG = "LaunchGroup";
var _LGA = "LogGroupArn";
var _LGI = "LocalGatewayId";
var _LGIo = "LocalGatewayIds";
var _LGN = "LogGroupName";
var _LGRT = "LocalGatewayRouteTable";
var _LGRTA = "LocalGatewayRouteTableArn";
var _LGRTI = "LocalGatewayRouteTableId";
var _LGRTIo = "LocalGatewayRouteTableIds";
var _LGRTVA = "LocalGatewayRouteTableVpcAssociation";
var _LGRTVAI = "LocalGatewayRouteTableVpcAssociationId";
var _LGRTVAIo = "LocalGatewayRouteTableVpcAssociationIds";
var _LGRTVAo = "LocalGatewayRouteTableVpcAssociations";
var _LGRTVIGA = "LocalGatewayRouteTableVirtualInterfaceGroupAssociation";
var _LGRTVIGAI = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId";
var _LGRTVIGAIo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds";
var _LGRTVIGAo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociations";
var _LGRTo = "LocalGatewayRouteTables";
var _LGVI = "LocalGatewayVirtualInterfaces";
var _LGVIG = "LocalGatewayVirtualInterfaceGroups";
var _LGVIGI = "LocalGatewayVirtualInterfaceGroupId";
var _LGVIGIo = "LocalGatewayVirtualInterfaceGroupIds";
var _LGVII = "LocalGatewayVirtualInterfaceIds";
var _LGVIIo = "LocalGatewayVirtualInterfaceId";
var _LGo = "LogGroup";
var _LGoc = "LocalGateways";
var _LIIRB = "ListImagesInRecycleBin";
var _LINC = "LocalIpv4NetworkCidr";
var _LINCo = "LocalIpv6NetworkCidr";
var _LLT = "LastLaunchedTime";
var _LM = "LockMode";
var _LMA = "LastMaintenanceApplied";
var _LO = "LogOptions";
var _LOF = "LogOutputFormat";
var _LP = "LoadPermission";
var _LPa = "LaunchPermission";
var _LPau = "LaunchPermissions";
var _LPi = "LimitPrice";
var _LPo = "LoadPermissions";
var _LS = "LockSnapshot";
var _LSC = "LastStatusChange";
var _LSDT = "LastSuccessfulDiscoveryTime";
var _LSIRB = "ListSnapshotsInRecycleBin";
var _LSL = "LogsStorageLocation";
var _LST = "LocalStorageTypes";
var _LSa = "LaunchSpecification";
var _LSau = "LaunchSpecifications";
var _LSi = "LicenseSpecifications";
var _LSo = "LocalStorage";
var _LSoc = "LockState";
var _LT = "LocationType";
var _LTAO = "LaunchTemplateAndOverrides";
var _LTC = "LaunchTemplateConfigs";
var _LTD = "LaunchTemplateData";
var _LTI = "LaunchTemplateId";
var _LTIa = "LaunchTemplateIds";
var _LTN = "LaunchTemplateName";
var _LTNa = "LaunchTemplateNames";
var _LTOS = "LastTieringOperationStatus";
var _LTOSD = "LastTieringOperationStatusDetail";
var _LTP = "LastTieringProgress";
var _LTS = "LaunchTemplateSpecification";
var _LTST = "LastTieringStartTime";
var _LTV = "LaunchTemplateVersion";
var _LTVa = "LaunchTemplateVersions";
var _LTa = "LaunchTemplate";
var _LTat = "LatestTime";
var _LTau = "LaunchTemplates";
var _LTaun = "LaunchTime";
var _LTi = "LicenseType";
var _LTo = "LocalTarget";
var _LUT = "LastUpdateTime";
var _LUTa = "LastUpdatedTime";
var _LUTas = "LastUpdateTimestamp";
var _LV = "LogVersion";
var _LVN = "LatestVersionNumber";
var _La = "Latest";
var _Li = "Lifecycle";
var _Lic = "Licenses";
var _Lo = "Location";
var _M = "Min";
var _MA = "MutualAuthentication";
var _MAA = "ModifyAddressAttribute";
var _MAAA = "MaintenanceAutoAppliedAfter";
var _MAE = "MultiAttachEnabled";
var _MAI = "MaxAggregationInterval";
var _MAIe = "MediaAcceleratorInfo";
var _MAS = "MovingAddressStatuses";
var _MATV = "MoveAddressToVpc";
var _MAZG = "ModifyAvailabilityZoneGroup";
var _MAa = "MacAddress";
var _MB = "ManagedBy";
var _MBCTI = "MoveByoipCidrToIpam";
var _MBIM = "MaximumBandwidthInMbps";
var _MC = "MaxCount";
var _MCOIOL = "MapCustomerOwnedIpOnLaunch";
var _MCR = "ModifyCapacityReservation";
var _MCRF = "ModifyCapacityReservationFleet";
var _MCRI = "MoveCapacityReservationInstances";
var _MCVE = "ModifyClientVpnEndpoint";
var _MCi = "MinCount";
var _MCis = "MissingComponent";
var _MD = "MaxDuration";
var _MDA = "MulticastDomainAssociations";
var _MDCS = "ModifyDefaultCreditSpecification";
var _MDDS = "MaxDrainDurationSeconds";
var _MDK = "MetaDataKey";
var _MDV = "MetaDataValue";
var _MDa = "MaintenanceDetails";
var _MDe = "MetaData";
var _MDi = "MinDuration";
var _ME = "MaxEntries";
var _MEDKKI = "ModifyEbsDefaultKmsKeyId";
var _MEI = "MaximumEfaInterfaces";
var _MEM = "ManagedExceptionMessage";
var _MF = "ModifyFleet";
var _MFIA = "ModifyFpgaImageAttribute";
var _MFV = "MostFrequentValue";
var _MG = "MulticastGroups";
var _MGBPVC = "MemoryGiBPerVCpu";
var _MH = "ModifyHosts";
var _MHa = "MacHosts";
var _MI = "ModifyIpam";
var _MIA = "ModifyImageAttribute";
var _MIAo = "ModifyInstanceAttribute";
var _MIC = "MaxInstanceCount";
var _MICO = "ModifyInstanceCpuOptions";
var _MICRA = "ModifyInstanceCapacityReservationAttributes";
var _MICS = "ModifyInstanceCreditSpecification";
var _MIEST = "ModifyInstanceEventStartTime";
var _MIEW = "ModifyInstanceEventWindow";
var _MIF = "ModifyIdFormat";
var _MIIF = "ModifyIdentityIdFormat";
var _MIMD = "ModifyInstanceMetadataDefaults";
var _MIMO = "ModifyInstanceMaintenanceOptions";
var _MIMOo = "ModifyInstanceMetadataOptions";
var _MINPO = "ModifyInstanceNetworkPerformanceOptions";
var _MIP = "ModifyInstancePlacement";
var _MIPo = "ModifyIpamPool";
var _MIRC = "ModifyIpamResourceCidr";
var _MIRD = "ModifyIpamResourceDiscovery";
var _MIS = "ModifyIpamScope";
var _MIa = "MaximumIops";
var _MIe = "MemoryInfo";
var _MIo = "MonitorInstances";
var _MLGR = "ModifyLocalGatewayRoute";
var _MLT = "ModifyLaunchTemplate";
var _MMB = "MemoryMiB";
var _MMPL = "ModifyManagedPrefixList";
var _MNC = "MaximumNetworkCards";
var _MNI = "MaximumNetworkInterfaces";
var _MNIA = "ModifyNetworkInterfaceAttribute";
var _MO = "MetadataOptions";
var _MOSLRG = "MemberOfServiceLinkedResourceGroup";
var _MOSLSV = "MacOSLatestSupportedVersions";
var _MOa = "MaintenanceOptions";
var _MP = "MatchPaths";
var _MPDNO = "ModifyPrivateDnsNameOptions";
var _MPIOL = "MapPublicIpOnLaunch";
var _MPL = "MaxParallelLaunches";
var _MPa = "MaxPrice";
var _MPe = "MetricPoints";
var _MR = "MaxResults";
var _MRI = "ModifyReservedInstances";
var _MRo = "ModificationResults";
var _MRu = "MultiRegion";
var _MS = "MaintenanceStrategies";
var _MSA = "ModifySnapshotAttribute";
var _MSAo = "ModifySubnetAttribute";
var _MSDIH = "MaxSlotDurationInHours";
var _MSDIHi = "MinSlotDurationInHours";
var _MSFR = "ModifySpotFleetRequest";
var _MSGR = "ModifySecurityGroupRules";
var _MSPAPOOODP = "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice";
var _MST = "ModifySnapshotTier";
var _MSa = "ManagementState";
var _MSo = "MoveStatus";
var _MSod = "ModificationState";
var _MSu = "MulticastSupport";
var _MT = "MarketType";
var _MTC = "MinTargetCapacity";
var _MTDID = "MaxTermDurationInDays";
var _MTDIDi = "MinTermDurationInDays";
var _MTG = "ModifyTransitGateway";
var _MTGPLR = "ModifyTransitGatewayPrefixListReference";
var _MTGVA = "ModifyTransitGatewayVpcAttachment";
var _MTIMB = "MaximumThroughputInMBps";
var _MTMFNS = "ModifyTrafficMirrorFilterNetworkServices";
var _MTMFR = "ModifyTrafficMirrorFilterRule";
var _MTMS = "ModifyTrafficMirrorSession";
var _MTP = "MaxTotalPrice";
var _MTe = "MemberType";
var _MV = "ModifyVolume";
var _MVA = "ModifyVolumeAttribute";
var _MVAE = "ModifyVerifiedAccessEndpoint";
var _MVAEP = "ModifyVerifiedAccessEndpointPolicy";
var _MVAG = "ModifyVerifiedAccessGroup";
var _MVAGP = "ModifyVerifiedAccessGroupPolicy";
var _MVAI = "ModifyVerifiedAccessInstance";
var _MVAILC = "ModifyVerifiedAccessInstanceLoggingConfiguration";
var _MVATP = "ModifyVerifiedAccessTrustProvider";
var _MVAo = "ModifyVpcAttribute";
var _MVBPAE = "ModifyVpcBlockPublicAccessExclusion";
var _MVBPAO = "ModifyVpcBlockPublicAccessOptions";
var _MVC = "ModifyVpnConnection";
var _MVCO = "ModifyVpnConnectionOptions";
var _MVE = "ModifyVpcEndpoint";
var _MVECN = "ModifyVpcEndpointConnectionNotification";
var _MVESC = "ModifyVpcEndpointServiceConfiguration";
var _MVESP = "ModifyVpcEndpointServicePermissions";
var _MVESPR = "ModifyVpcEndpointServicePayerResponsibility";
var _MVEa = "ManagesVpcEndpoints";
var _MVPCO = "ModifyVpcPeeringConnectionOptions";
var _MVT = "ModifyVpcTenancy";
var _MVTC = "ModifyVpnTunnelCertificate";
var _MVTO = "ModifyVpnTunnelOptions";
var _MVa = "MaxVersion";
var _MVi = "MinVersion";
var _Ma = "Max";
var _Mai = "Main";
var _Man = "Manufacturer";
var _Mana = "Managed";
var _Mar = "Marketplace";
var _Me = "Message";
var _Mes = "Messages";
var _Met = "Metric";
var _Mo = "Mode";
var _Mon = "Monitoring";
var _Moni = "Monitored";
var _N = "Name";
var _NA = "NetworkAcl";
var _NAAI = "NetworkAclAssociationId";
var _NAI = "NetworkAclId";
var _NAIe = "NetworkAclIds";
var _NAIew = "NewAssociationId";
var _NAOO = "NativeApplicationOidcOptions";
var _NAe = "NetworkAcls";
var _NAo = "NotAfter";
var _NB = "NotBefore";
var _NBD = "NotBeforeDeadline";
var _NBG = "NetworkBorderGroup";
var _NBGe = "NetworkBandwidthGbps";
var _NC = "NetworkCards";
var _NCI = "NetworkCardIndex";
var _ND = "NoDevice";
var _NDe = "NeuronDevices";
var _NES = "NitroEnclavesSupport";
var _NG = "NatGateway";
var _NGA = "NatGatewayAddresses";
var _NGI = "NatGatewayId";
var _NGIa = "NatGatewayIds";
var _NGa = "NatGateways";
var _NI = "NetworkInterfaces";
var _NIA = "NetworkInsightsAnalyses";
var _NIAA = "NetworkInsightsAnalysisArn";
var _NIAI = "NetworkInsightsAnalysisId";
var _NIAIe = "NetworkInsightsAnalysisIds";
var _NIAS = "NetworkInsightsAccessScope";
var _NIASA = "NetworkInsightsAccessScopeAnalyses";
var _NIASAA = "NetworkInsightsAccessScopeAnalysisArn";
var _NIASAI = "NetworkInsightsAccessScopeAnalysisId";
var _NIASAIe = "NetworkInsightsAccessScopeAnalysisIds";
var _NIASAe = "NetworkInsightsAccessScopeArn";
var _NIASAet = "NetworkInsightsAccessScopeAnalysis";
var _NIASC = "NetworkInsightsAccessScopeContent";
var _NIASI = "NetworkInsightsAccessScopeId";
var _NIASIe = "NetworkInsightsAccessScopeIds";
var _NIASe = "NetworkInsightsAccessScopes";
var _NIASet = "NetworkInterfaceAttachmentStatus";
var _NIAe = "NetworkInsightsAnalysis";
var _NIC = "NetworkInterfaceCount";
var _NID = "NetworkInterfaceDescription";
var _NII = "NetworkInterfaceId";
var _NIIe = "NetworkInterfaceIds";
var _NIO = "NetworkInterfaceOptions";
var _NIOI = "NetworkInterfaceOwnerId";
var _NIP = "NetworkInsightsPath";
var _NIPA = "NetworkInsightsPathArn";
var _NIPI = "NetworkInsightsPathId";
var _NIPIe = "NetworkInterfacePermissionId";
var _NIPIet = "NetworkInsightsPathIds";
var _NIPIetw = "NetworkInterfacePermissionIds";
var _NIPe = "NetworkInsightsPaths";
var _NIPet = "NetworkInterfacePermissions";
var _NIe = "NetworkId";
var _NIet = "NetworkInterface";
var _NIetw = "NetworkInfo";
var _NIeu = "NeuronInfo";
var _NL = "NetmaskLength";
var _NLBA = "NetworkLoadBalancerArn";
var _NLBAe = "NetworkLoadBalancerArns";
var _NN = "NetworkNodes";
var _NOA = "NumberOfAccounts";
var _NOFA = "NumberOfFailedAccounts";
var _NOMA = "NumberOfMatchedAccounts";
var _NOUA = "NumberOfUnmatchedAccounts";
var _NP = "NetworkPerformance";
var _NPF = "NetworkPathFound";
var _NPO = "NetworkPerformanceOptions";
var _NPe = "NetworkPlatform";
var _NR = "NoReboot";
var _NS = "NvmeSupport";
var _NSST = "NextSlotStartTime";
var _NSe = "NetworkServices";
var _NT = "NextToken";
var _NTI = "NitroTpmInfo";
var _NTS = "NitroTpmSupport";
var _NTe = "NetworkType";
var _Na = "Nameservers";
var _O = "Operator";
var _OA = "OutpostArn";
var _OAr = "OrganizationArn";
var _OArg = "OrganizationArns";
var _OAw = "OwnerAlias";
var _OC = "OfferingClass";
var _OD = "OccurrenceDays";
var _ODAS = "OnDemandAllocationStrategy";
var _ODFC = "OnDemandFulfilledCapacity";
var _ODMPPOLP = "OnDemandMaxPricePercentageOverLowestPrice";
var _ODMTP = "OnDemandMaxTotalPrice";
var _ODO = "OnDemandOptions";
var _ODS = "OccurrenceDaySet";
var _ODTC = "OnDemandTargetCapacity";
var _OEP = "OrganizationsEntityPath";
var _OH = "OutboundHeader";
var _OI = "OfferingId";
var _OIA = "OutsideIpAddress";
var _OIAT = "OutsideIpAddressType";
var _OIS = "OptInStatus";
var _OIr = "OriginalIops";
var _OIw = "OwnerIds";
var _OIwn = "OwnerId";
var _OK = "ObjectKey";
var _OMAE = "OriginalMultiAttachEnabled";
var _OO = "OidcOptions";
var _OR = "OperatingRegions";
var _ORIWEA = "OutputReservedInstancesWillExpireAt";
var _ORTE = "OccurrenceRelativeToEnd";
var _OS = "OfferingSet";
var _OST = "OldestSampleTime";
var _OSr = "OriginalSize";
var _OSv = "OverlapStatus";
var _OT = "OfferingType";
var _OTp = "OperationType";
var _OTpt = "OptimizingTime";
var _OTr = "OriginalThroughput";
var _OU = "OccurrenceUnit";
var _OUA = "OrganizationalUnitArn";
var _OUAr = "OrganizationalUnitArns";
var _OUE = "OrganizationalUnitExclusions";
var _OUI = "OrganizationalUnitId";
var _OVC = "OpenVpnConfigurations";
var _OVT = "OriginalVolumeType";
var _Op = "Options";
var _Or = "Origin";
var _Ou = "Output";
var _Ov = "Overrides";
var _Ow = "Owners";
var _Own = "Owner";
var _P = "Protocol";
var _PA = "PubliclyAdvertisable";
var _PAI = "PeerAccountId";
var _PAIe = "PeeringAttachmentId";
var _PAR = "PoolAddressRange";
var _PARo = "PoolAddressRanges";
var _PAe = "PeerAddress";
var _PAee = "PeerAsn";
var _PAo = "PoolArn";
var _PAr = "PrincipalArn";
var _PB = "ProvisionedBandwidth";
var _PBA = "PeerBgpAsn";
var _PBC = "ProvisionByoipCidr";
var _PBIG = "PeakBandwidthInGbps";
var _PC = "ProductCode";
var _PCB = "PurchaseCapacityBlock";
var _PCBE = "PurchaseCapacityBlockExtension";
var _PCBo = "PoolCidrBlocks";
var _PCI = "PreserveClientIp";
var _PCIr = "ProductCodeId";
var _PCNI = "PeerCoreNetworkId";
var _PCS = "PostureComplianceStatuses";
var _PCT = "ProductCodeType";
var _PCa = "PartitionCount";
var _PCo = "PoolCidrs";
var _PCoo = "PoolCount";
var _PCr = "ProductCodes";
var _PD = "PolicyDocument";
var _PDE = "PrivateDnsEnabled";
var _PDEr = "PrivateDnsEntry";
var _PDHGN = "Phase1DHGroupNumbers";
var _PDHGNh = "Phase2DHGroupNumbers";
var _PDHT = "PrivateDnsHostnameType";
var _PDHTOL = "PrivateDnsHostnameTypeOnLaunch";
var _PDN = "PrivateDnsName";
var _PDNC = "PrivateDnsNameConfiguration";
var _PDNO = "PrivateDnsNameOptions";
var _PDNOOL = "PrivateDnsNameOptionsOnLaunch";
var _PDNVS = "PrivateDnsNameVerificationState";
var _PDNr = "PrivateDnsNames";
var _PDNu = "PublicDnsName";
var _PDOFIRE = "PrivateDnsOnlyForInboundResolverEndpoint";
var _PDRTI = "PropagationDefaultRouteTableId";
var _PDSI = "PublicDefaultScopeId";
var _PDSIr = "PrivateDefaultScopeId";
var _PDa = "PasswordData";
var _PDay = "PaymentDue";
var _PDl = "PlatformDetails";
var _PDo = "PoolDepth";
var _PDr = "ProductDescription";
var _PDri = "PricingDetails";
var _PDro = "ProductDescriptions";
var _PE = "PolicyEnabled";
var _PEA = "Phase1EncryptionAlgorithms";
var _PEAh = "Phase2EncryptionAlgorithms";
var _PED = "PartitionEndDate";
var _PEk = "PkceEnabled";
var _PF = "PacketField";
var _PFS = "PreviousFleetState";
var _PG = "PlacementGroup";
var _PGA = "PlacementGroupArn";
var _PGI = "PlacementGroupInfo";
var _PGl = "PlacementGroups";
var _PHP = "PerHourPartition";
var _PHR = "PurchaseHostReservation";
var _PHS = "PacketHeaderStatement";
var _PI = "PublicIp";
var _PIA = "PrivateIpAddresses";
var _PIAC = "PrivateIpAddressCount";
var _PIACr = "PrivateIpAddressConfigs";
var _PIAh = "Phase1IntegrityAlgorithms";
var _PIAha = "Phase2IntegrityAlgorithms";
var _PIAr = "PrivateIpAddress";
var _PIAu = "PublicIpAddress";
var _PIB = "ProvisionIpamByoasn";
var _PIP = "PublicIpv4Pool";
var _PIPC = "ProvisionIpamPoolCidr";
var _PIPI = "PublicIpv4PoolId";
var _PIPu = "PublicIpv4Pools";
var _PIS = "PublicIpSource";
var _PIc = "PciId";
var _PIo = "PoolId";
var _PIoo = "PoolIds";
var _PIr = "PrimaryIpv6";
var _PIri = "PrivateIp";
var _PIro = "ProcessorInfo";
var _PIu = "PublicIps";
var _PK = "PublicKey";
var _PKM = "PublicKeyMaterial";
var _PL = "PacketLength";
var _PLA = "PrefixListAssociations";
var _PLAr = "PrefixListArn";
var _PLF = "PartitionLoadFrequency";
var _PLI = "PrefixListId";
var _PLIr = "PrefixListIds";
var _PLN = "PrefixListName";
var _PLOI = "PrefixListOwnerId";
var _PLS = "Phase1LifetimeSeconds";
var _PLSh = "Phase2LifetimeSeconds";
var _PLr = "PrefixList";
var _PLre = "PrefixLists";
var _PM = "PendingMaintenance";
var _PN = "PartitionNumber";
var _PNC = "PreviewNextCidr";
var _PO = "PaymentOption";
var _POI = "PeerOwnerId";
var _POe = "PeeringOptions";
var _PP = "ProgressPercentage";
var _PPIPC = "ProvisionPublicIpv4PoolCidr";
var _PR = "PortRange";
var _PRIO = "PurchaseReservedInstancesOffering";
var _PRN = "PolicyReferenceName";
var _PRNo = "PolicyRuleNumber";
var _PRU = "PtrRecordUpdate";
var _PRa = "PayerResponsibility";
var _PRe = "PeerRegion";
var _PRer = "PermanentRestore";
var _PRo = "PortRanges";
var _PRol = "PolicyRule";
var _PRt = "PtrRecord";
var _PRu = "PurchaseRequests";
var _PS = "PriceSchedules";
var _PSD = "PartitionStartDate";
var _PSET = "PreviousSlotEndTime";
var _PSFRS = "PreviousSpotFleetRequestState";
var _PSI = "PurchaseScheduledInstances";
var _PSK = "PreSharedKey";
var _PSKE = "PublicSigningKeyEndpoint";
var _PSKU = "PublicSigningKeyUrl";
var _PSe = "PeeringStatus";
var _PSer = "PermissionState";
var _PSh = "PhcSupport";
var _PSr = "PreviousState";
var _PSre = "PreviousStatus";
var _PT = "PurchaseToken";
var _PTGI = "PeerTransitGatewayId";
var _PTS = "PoolTagSpecifications";
var _PTr = "PrincipalType";
var _PTro = "ProvisionTime";
var _PTu = "PurchaseTime";
var _PU = "PresignedUrl";
var _PV = "PreviousVersion";
var _PVI = "PeerVpcId";
var _PVIr = "PrimaryVpcId";
var _PVr = "PropagatingVgws";
var _PZI = "ParentZoneId";
var _PZN = "ParentZoneName";
var _Pe = "Permission";
var _Per = "Period";
var _Pl = "Placement";
var _Pla = "Platform";
var _Po = "Port";
var _Pr = "Prefix";
var _Pri = "Priority";
var _Pric = "Price";
var _Prim = "Primary";
var _Prin = "Principal";
var _Princ = "Principals";
var _Pro = "Protocols";
var _Prog = "Progress";
var _Prop = "Propagation";
var _Prov = "Provisioned";
var _Pu = "Public";
var _Pur = "Purchase";
var _Q = "Quantity";
var _R = "References";
var _RA = "ReleaseAddress";
var _RAA = "ResetAddressAttribute";
var _RAE = "RemoteAccessEnabled";
var _RAG = "RevokeAllGroups";
var _RAP = "RemoveAllowedPrincipals";
var _RART = "RemoveAllocationResourceTags";
var _RATC = "RestoreAddressToClassic";
var _RAe = "ResolveAlias";
var _RAes = "ResourceArn";
var _RAo = "RoleArn";
var _RAu = "RuleAction";
var _RB = "RequestedBy";
var _RBET = "RecycleBinEnterTime";
var _RBETe = "RecycleBinExitTime";
var _RBUI = "RestorableByUserIds";
var _RC = "ResourceCidr";
var _RCA = "ResourceConfigurationArn";
var _RCGA = "ResourceConfigurationGroupArn";
var _RCRBO = "RejectCapacityReservationBillingOwnership";
var _RCS = "ResourceComplianceStatus";
var _RCVI = "RevokeClientVpnIngress";
var _RCe = "ReasonCodes";
var _RCec = "RecurringCharges";
var _RCet = "ReturnCode";
var _RD = "RestoreDuration";
var _RDAC = "ResourceDiscoveryAssociationCount";
var _RDCA = "RdsDbClusterArn";
var _RDI = "RamDiskId";
var _RDIA = "RdsDbInstanceArn";
var _RDN = "RootDeviceName";
var _RDPA = "RdsDbProxyArn";
var _RDS = "ResourceDiscoveryStatus";
var _RDT = "RootDeviceType";
var _RE = "RdsEndpoint";
var _RED = "RemoveEndDate";
var _REDKKI = "ResetEbsDefaultKmsKeyId";
var _RET = "RestoreExpiryTime";
var _REe = "RemoveEntries";
var _REes = "ResponseError";
var _RF = "RemoveFields";
var _RFIA = "ResetFpgaImageAttribute";
var _RFP = "RekeyFuzzPercentage";
var _RGA = "RuleGroupArn";
var _RGI = "ReferencedGroupId";
var _RGIe = "ReferencedGroupInfo";
var _RGLBA = "RemoveGatewayLoadBalancerArns";
var _RGROP = "RuleGroupRuleOptionsPairs";
var _RGT = "RuleGroupType";
var _RGTP = "RuleGroupTypePairs";
var _RH = "ReleaseHosts";
var _RHS = "RequireHibernateSupport";
var _RI = "RebootInstances";
var _RIA = "ResetImageAttribute";
var _RIAe = "ResetInstanceAttribute";
var _RICIAIS = "ReplaceImageCriteriaInAllowedImagesSettings";
var _RIENA = "RegisterInstanceEventNotificationAttributes";
var _RIFRB = "RestoreImageFromRecycleBin";
var _RII = "ReservedInstanceIds";
var _RIIPA = "ReplaceIamInstanceProfileAssociation";
var _RIIe = "ReservedInstancesId";
var _RIIes = "ReservedInstancesIds";
var _RIIese = "ReservedInstanceId";
var _RIL = "ReservedInstancesListings";
var _RILI = "ReservedInstancesListingId";
var _RIM = "ReservedInstancesModifications";
var _RIMI = "ReservedInstancesModificationIds";
var _RIMIe = "ReservedInstancesModificationId";
var _RINC = "RemoteIpv4NetworkCidr";
var _RINCe = "RemoteIpv6NetworkCidr";
var _RIO = "ReservedInstancesOfferings";
var _RIOI = "ReservedInstancesOfferingIds";
var _RIOIe = "ReservedInstancesOfferingId";
var _RIPA = "ReleaseIpamPoolAllocation";
var _RIS = "ReportInstanceStatus";
var _RIVR = "ReservedInstanceValueRollup";
var _RIVS = "ReservedInstanceValueSet";
var _RIa = "RamdiskId";
var _RIe = "RegisterImage";
var _RIep = "ReportId";
var _RIepo = "ReportIds";
var _RIeq = "RequesterId";
var _RIes = "ResourceIds";
var _RIese = "ReservedInstances";
var _RIeser = "ReservationId";
var _RIeso = "ResourceId";
var _RIu = "RunInstances";
var _RM = "ReasonMessage";
var _RMGM = "RegisteredMulticastGroupMembers";
var _RMGS = "RegisteredMulticastGroupSources";
var _RMPLV = "RestoreManagedPrefixListVersion";
var _RMTS = "RekeyMarginTimeSeconds";
var _RMe = "RequesterManaged";
var _RN = "RegionName";
var _RNAA = "ReplaceNetworkAclAssociation";
var _RNAE = "ReplaceNetworkAclEntry";
var _RNIA = "ResetNetworkInterfaceAttribute";
var _RNII = "RegisteredNetworkInterfaceIds";
var _RNLBA = "RemoveNetworkLoadBalancerArns";
var _RNS = "RemoveNetworkServices";
var _RNe = "RegionNames";
var _RNes = "ResourceName";
var _RNo = "RoleName";
var _RNu = "RuleNumber";
var _RO = "RdsOptions";
var _ROI = "ResourceOwnerId";
var _ROR = "RemoveOperatingRegions";
var _ROS = "ResourceOverlapStatus";
var _ROUE = "RemoveOrganizationalUnitExclusions";
var _ROe = "ResourceOwner";
var _ROo = "RouteOrigin";
var _ROu = "RuleOptions";
var _RP = "ResetPolicy";
var _RPC = "ReturnPathComponents";
var _RPCO = "RequesterPeeringConnectionOptions";
var _RPDN = "RemovePrivateDnsName";
var _RR = "ReplaceRoute";
var _RRTA = "ReplaceRouteTableAssociation";
var _RRTI = "RemoveRouteTableIds";
var _RRVT = "ReplaceRootVolumeTask";
var _RRVTI = "ReplaceRootVolumeTaskIds";
var _RRVTIe = "ReplaceRootVolumeTaskId";
var _RRVTe = "ReplaceRootVolumeTasks";
var _RRe = "ResourceRegion";
var _RS = "ReplacementStrategy";
var _RSA = "ResetSnapshotAttribute";
var _RSF = "RequestSpotFleet";
var _RSFRB = "RestoreSnapshotFromRecycleBin";
var _RSGE = "RevokeSecurityGroupEgress";
var _RSGI = "RevokeSecurityGroupIngress";
var _RSGIe = "RemoveSecurityGroupIds";
var _RSGR = "RevokedSecurityGroupRules";
var _RSI = "RequestSpotInstances";
var _RSIAT = "RemoveSupportedIpAddressTypes";
var _RSIe = "RemoveSubnetIds";
var _RSIu = "RunScheduledInstances";
var _RSR = "RemoveSupportedRegions";
var _RST = "RestoreSnapshotTier";
var _RSTe = "RestoreStartTime";
var _RSe = "ResourceStatement";
var _RSeg = "RegionalSummaries";
var _RT = "ResourceType";
var _RTAI = "RouteTableAssociationId";
var _RTGCB = "RemoveTransitGatewayCidrBlocks";
var _RTGMDA = "RejectTransitGatewayMulticastDomainAssociations";
var _RTGMGM = "RegisterTransitGatewayMulticastGroupMembers";
var _RTGMGS = "RegisterTransitGatewayMulticastGroupSources";
var _RTGPA = "RejectTransitGatewayPeeringAttachment";
var _RTGR = "ReplaceTransitGatewayRoute";
var _RTGVA = "RejectTransitGatewayVpcAttachment";
var _RTI = "RouteTableId";
var _RTIe = "RequesterTgwInfo";
var _RTIo = "RouteTableIds";
var _RTR = "RouteTableRoute";
var _RTV = "RemainingTotalValue";
var _RTe = "ReservationType";
var _RTel = "ReleaseTime";
var _RTeq = "RequestTime";
var _RTes = "ResourceTag";
var _RTeso = "ResourceTypes";
var _RTesou = "ResourceTags";
var _RTo = "RouteTable";
var _RTou = "RouteTables";
var _RUI = "ReplaceUnhealthyInstances";
var _RUV = "RemainingUpfrontValue";
var _RV = "ReturnValue";
var _RVEC = "RejectVpcEndpointConnections";
var _RVI = "ReferencingVpcId";
var _RVIe = "RequesterVpcInfo";
var _RVPC = "RejectVpcPeeringConnection";
var _RVT = "ReplaceVpnTunnel";
var _RVe = "ReservationValue";
var _RWS = "ReplayWindowSize";
var _Ra = "Ramdisk";
var _Re = "Resources";
var _Rea = "Reason";
var _Rec = "Recurrence";
var _Reg = "Regions";
var _Regi = "Region";
var _Rem = "Remove";
var _Rep = "Reports";
var _Req = "Requested";
var _Res = "Resource";
var _Rese = "Reservations";
var _Resu = "Result";
var _Ret = "Return";
var _Ro = "Role";
var _Rou = "Route";
var _Rout = "Routes";
var _S = "Source";
var _SA = "StartupAction";
var _SAI = "SecondaryAllocationIds";
var _SAMLPA = "SAMLProviderArn";
var _SAZ = "SingleAvailabilityZone";
var _SAo = "SourceAddresses";
var _SAou = "SourceAddress";
var _SAour = "SourceArn";
var _SAu = "SuggestedAccounts";
var _SAub = "SubnetArn";
var _SAup = "SupportedArchitectures";
var _SB = "S3Bucket";
var _SBM = "SupportedBootModes";
var _SC = "SubnetConfigurations";
var _SCA = "ServerCertificateArn";
var _SCAE = "SerialConsoleAccessEnabled";
var _SCB = "SourceCidrBlock";
var _SCR = "SourceCapacityReservation";
var _SCRI = "SourceCapacityReservationId";
var _SCRIu = "SubnetCidrReservationId";
var _SCRu = "SubnetCidrReservation";
var _SCSIG = "SustainedClockSpeedInGhz";
var _SCc = "ScopeCount";
var _SCe = "ServiceConfiguration";
var _SCer = "ServiceConfigurations";
var _SCn = "SnapshotConfiguration";
var _SD = "StartDate";
var _SDC = "SourceDestCheck";
var _SDI = "SendDiagnosticInterrupt";
var _SDIH = "SlotDurationInHours";
var _SDLTV = "SuccessfullyDeletedLaunchTemplateVersions";
var _SDPR = "StartDeclarativePoliciesReport";
var _SDR = "StartDateRange";
var _SDS = "SpotDatafeedSubscription";
var _SDV = "SetDefaultVersion";
var _SDe = "ServiceDetails";
var _SDn = "SnapshotDetails";
var _SDp = "SpreadDomain";
var _SDu = "SubDomain";
var _SEL = "S3ExportLocation";
var _SET = "SampledEndTime";
var _SF = "SupportedFeatures";
var _SFC = "SuccessfulFleetCancellations";
var _SFD = "SuccessfulFleetDeletions";
var _SFII = "SourceFpgaImageId";
var _SFR = "SuccessfulFleetRequests";
var _SFRC = "SpotFleetRequestConfig";
var _SFRCp = "SpotFleetRequestConfigs";
var _SFRI = "SpotFleetRequestIds";
var _SFRIp = "SpotFleetRequestId";
var _SFRS = "SpotFleetRequestState";
var _SG = "SecurityGroups";
var _SGA = "SecurityGroupArn";
var _SGFV = "SecurityGroupForVpcs";
var _SGI = "SecurityGroupIds";
var _SGIe = "SecurityGroupId";
var _SGR = "SecurityGroupRules";
var _SGRA = "SecurityGroupRuleArn";
var _SGRD = "SecurityGroupRuleDescriptions";
var _SGRI = "SecurityGroupRuleIds";
var _SGRIe = "SecurityGroupRuleId";
var _SGRS = "SecurityGroupReferencingSupport";
var _SGRSe = "SecurityGroupReferenceSet";
var _SGRe = "SecurityGroupRule";
var _SGVA = "SecurityGroupVpcAssociations";
var _SGe = "SecurityGroup";
var _SH = "StartHour";
var _SI = "StartInstances";
var _SIAS = "ScheduledInstanceAvailabilitySet";
var _SIAT = "SupportedIpAddressTypes";
var _SICR = "SubnetIpv4CidrReservations";
var _SICRu = "SubnetIpv6CidrReservations";
var _SICS = "SuccessfulInstanceCreditSpecifications";
var _SIGB = "SizeInGB";
var _SII = "SourceImageId";
var _SIIc = "ScheduledInstanceIds";
var _SIIch = "ScheduledInstanceId";
var _SIIo = "SourceInstanceId";
var _SIMB = "SizeInMiB";
var _SIP = "StaleIpPermissions";
var _SIPE = "StaleIpPermissionsEgress";
var _SIPI = "SourceIpamPoolId";
var _SIR = "SpotInstanceRequests";
var _SIRI = "SpotInstanceRequestIds";
var _SIRIp = "SpotInstanceRequestId";
var _SIRo = "SourceImageRegion";
var _SIS = "ScheduledInstanceSet";
var _SIT = "SpotInstanceType";
var _SITR = "StoreImageTaskResults";
var _SITi = "SingleInstanceType";
var _SIe = "ServiceId";
var _SIer = "ServiceIds";
var _SIn = "SnapshotId";
var _SIna = "SnapshotIds";
var _SIo = "SourceIp";
var _SIt = "StopInstances";
var _SIta = "StartingInstances";
var _SIto = "StoppingInstances";
var _SIu = "SubnetIds";
var _SIub = "SubnetId";
var _SIubs = "SubsystemId";
var _SK = "S3Key";
var _SKo = "S3objectKey";
var _SL = "SpreadLevel";
var _SLGR = "SearchLocalGatewayRoutes";
var _SLo = "S3Location";
var _SM = "StatusMessage";
var _SMPPOLP = "SpotMaxPricePercentageOverLowestPrice";
var _SMS = "SpotMaintenanceStrategies";
var _SMTP = "SpotMaxTotalPrice";
var _SMt = "StateMessage";
var _SN = "SessionNumber";
var _SNA = "ServiceNetworkArn";
var _SNIA = "StartNetworkInsightsAnalysis";
var _SNIASA = "StartNetworkInsightsAccessScopeAnalysis";
var _SNN = "ServiceNetworkName";
var _SNS = "SriovNetSupport";
var _SNe = "ServiceName";
var _SNeq = "SequenceNumber";
var _SNer = "ServiceNames";
var _SO = "SpotOptions";
var _SOT = "S3ObjectTags";
var _SP = "S3Prefix";
var _SPA = "SamlProviderArn";
var _SPH = "SpotPriceHistory";
var _SPI = "ServicePermissionId";
var _SPIA = "SecondaryPrivateIpAddresses";
var _SPIAC = "SecondaryPrivateIpAddressCount";
var _SPL = "SourcePrefixLists";
var _SPR = "SourcePortRange";
var _SPRo = "SourcePortRanges";
var _SPS = "SpotPlacementScores";
var _SPo = "SourcePorts";
var _SPp = "SpotPrice";
var _SQPD = "SuccessfulQueuedPurchaseDeletions";
var _SR = "SourceRegion";
var _SRDT = "SupportedRootDeviceTypes";
var _SRO = "StaticRoutesOnly";
var _SRT = "SubnetRouteTable";
var _SRe = "ServiceRegion";
var _SRer = "ServiceRegions";
var _SRerv = "ServiceResource";
var _SRo = "SourceResource";
var _SRt = "StateReason";
var _SRu = "SupportedRegions";
var _SS = "SseSpecification";
var _SSGN = "SourceSecurityGroupName";
var _SSGOI = "SourceSecurityGroupOwnerId";
var _SSGS = "StaleSecurityGroupSet";
var _SSI = "SourceSnapshotId";
var _SSIo = "SourceSnapshotIds";
var _SSP = "SelfServicePortal";
var _SSPU = "SelfServicePortalUrl";
var _SSS = "StaticSourcesSupport";
var _SSSAMLPA = "SelfServiceSAMLProviderArn";
var _SSSPA = "SelfServiceSamlProviderArn";
var _SST = "SampledStartTime";
var _SSTR = "SlotStartTimeRange";
var _SSe = "ServiceState";
var _SSu = "SupportedStrategies";
var _SSy = "SystemStatus";
var _ST = "SplitTunnel";
var _STC = "SpotTargetCapacity";
var _STD = "SnapshotTaskDetail";
var _STFR = "StoreTaskFailureReason";
var _STGMG = "SearchTransitGatewayMulticastGroups";
var _STGR = "SearchTransitGatewayRoutes";
var _STH = "SessionTimeoutHours";
var _STR = "SkipTunnelReplacement";
var _STRt = "StateTransitionReason";
var _STS = "SnapshotTierStatuses";
var _STSt = "StoreTaskState";
var _STT = "StateTransitionTime";
var _STa = "SampleTime";
var _STe = "ServiceType";
var _STo = "SourceType";
var _STs = "SseType";
var _STt = "StartTime";
var _STto = "StorageTier";
var _SUC = "SupportedUsageClasses";
var _SV = "SourceVersion";
var _SVESPDV = "StartVpcEndpointServicePrivateDnsVerification";
var _SVI = "SubsystemVendorId";
var _SVT = "SupportedVirtualizationTypes";
var _SVh = "ShellVersion";
var _SVo = "SourceVpc";
var _SVu = "SupportedVersions";
var _SWD = "StartWeekDay";
var _S_ = "S3";
var _Sc = "Scope";
var _Sco = "Score";
var _Scop = "Scopes";
var _Se = "Service";
var _Set = "Settings";
var _Si = "Signature";
var _Siz = "Size";
var _Sn = "Snapshots";
var _So = "Sources";
var _Soc = "Sockets";
var _Sof = "Software";
var _St = "Storage";
var _Sta = "Statistic";
var _Star = "Start";
var _Stat = "State";
var _Statu = "Status";
var _Status = "Statuses";
var _Str = "Strategy";
var _Su = "Subnet";
var _Sub = "Subscriptions";
var _Subn = "Subnets";
var _Suc = "Successful";
var _Succ = "Success";
var _T = "Type";
var _TAAC = "TotalAvailableAddressCount";
var _TAC = "TotalAddressCount";
var _TAI = "TransferAccountId";
var _TC = "TargetConfigurations";
var _TCS = "TargetCapacitySpecification";
var _TCUT = "TargetCapacityUnitType";
var _TCVC = "TerminateClientVpnConnections";
var _TCVR = "TargetConfigurationValueRollup";
var _TCVS = "TargetConfigurationValueSet";
var _TCa = "TargetCapacity";
var _TCar = "TargetConfiguration";
var _TCo = "TotalCapacity";
var _TD = "TrafficDirection";
var _TDe = "TerminationDelay";
var _TE = "TargetEnvironment";
var _TED = "TermEndDate";
var _TET = "TcpEstablishedTimeout";
var _TEo = "TokenEndpoint";
var _TFC = "TotalFulfilledCapacity";
var _TFMIMB = "TotalFpgaMemoryInMiB";
var _TG = "TargetGroups";
var _TGA = "TransitGatewayAddress";
var _TGAI = "TransitGatewayAttachmentId";
var _TGAIr = "TransitGatewayAttachmentIds";
var _TGAP = "TransitGatewayAttachmentPropagations";
var _TGAr = "TransitGatewayAttachments";
var _TGAra = "TransitGatewayAttachment";
var _TGAran = "TransitGatewayArn";
var _TGArans = "TransitGatewayAsn";
var _TGC = "TargetGroupsConfig";
var _TGCB = "TransitGatewayCidrBlocks";
var _TGCP = "TransitGatewayConnectPeer";
var _TGCPI = "TransitGatewayConnectPeerId";
var _TGCPIr = "TransitGatewayConnectPeerIds";
var _TGCPr = "TransitGatewayConnectPeers";
var _TGCr = "TransitGatewayConnect";
var _TGCra = "TransitGatewayConnects";
var _TGI = "TransitGatewayId";
var _TGIr = "TransitGatewayIds";
var _TGMD = "TransitGatewayMulticastDomain";
var _TGMDA = "TransitGatewayMulticastDomainArn";
var _TGMDI = "TransitGatewayMulticastDomainId";
var _TGMDIr = "TransitGatewayMulticastDomainIds";
var _TGMDr = "TransitGatewayMulticastDomains";
var _TGMIMB = "TotalGpuMemoryInMiB";
var _TGOI = "TransitGatewayOwnerId";
var _TGPA = "TransitGatewayPeeringAttachment";
var _TGPAr = "TransitGatewayPeeringAttachments";
var _TGPLR = "TransitGatewayPrefixListReference";
var _TGPLRr = "TransitGatewayPrefixListReferences";
var _TGPT = "TransitGatewayPolicyTable";
var _TGPTE = "TransitGatewayPolicyTableEntries";
var _TGPTI = "TransitGatewayPolicyTableId";
var _TGPTIr = "TransitGatewayPolicyTableIds";
var _TGPTr = "TransitGatewayPolicyTables";
var _TGRT = "TransitGatewayRouteTable";
var _TGRTA = "TransitGatewayRouteTableAnnouncement";
var _TGRTAI = "TransitGatewayRouteTableAnnouncementId";
var _TGRTAIr = "TransitGatewayRouteTableAnnouncementIds";
var _TGRTAr = "TransitGatewayRouteTableAnnouncements";
var _TGRTI = "TransitGatewayRouteTableId";
var _TGRTIr = "TransitGatewayRouteTableIds";
var _TGRTP = "TransitGatewayRouteTablePropagations";
var _TGRTR = "TransitGatewayRouteTableRoute";
var _TGRTr = "TransitGatewayRouteTables";
var _TGVA = "TransitGatewayVpcAttachment";
var _TGVAr = "TransitGatewayVpcAttachments";
var _TGr = "TransitGateway";
var _TGra = "TransitGateways";
var _THP = "TotalHourlyPrice";
var _TI = "TerminateInstances";
var _TIC = "TunnelInsideCidr";
var _TICo = "TotalInstanceCount";
var _TII = "TrunkInterfaceId";
var _TIIC = "TunnelInsideIpv6Cidr";
var _TIIV = "TunnelInsideIpVersion";
var _TIMIMB = "TotalInferenceMemoryInMiB";
var _TIWE = "TerminateInstancesWithExpiration";
var _TIa = "TargetId";
var _TIar = "TargetIops";
var _TIe = "TenantId";
var _TIer = "TerminatingInstances";
var _TLSGB = "TotalLocalStorageGB";
var _TMAE = "TargetMultiAttachEnabled";
var _TMF = "TrafficMirrorFilter";
var _TMFI = "TrafficMirrorFilterId";
var _TMFIr = "TrafficMirrorFilterIds";
var _TMFR = "TrafficMirrorFilterRule";
var _TMFRI = "TrafficMirrorFilterRuleId";
var _TMFRIr = "TrafficMirrorFilterRuleIds";
var _TMFRr = "TrafficMirrorFilterRules";
var _TMFr = "TrafficMirrorFilters";
var _TMMIMB = "TotalMediaMemoryInMiB";
var _TMS = "TrafficMirrorSession";
var _TMSI = "TrafficMirrorSessionId";
var _TMSIr = "TrafficMirrorSessionIds";
var _TMSr = "TrafficMirrorSessions";
var _TMT = "TrafficMirrorTarget";
var _TMTI = "TrafficMirrorTargetId";
var _TMTIr = "TrafficMirrorTargetIds";
var _TMTr = "TrafficMirrorTargets";
var _TN = "TokenName";
var _TNC = "TargetNetworkCidr";
var _TNDMIMB = "TotalNeuronDeviceMemoryInMiB";
var _TNI = "TargetNetworkId";
var _TO = "TunnelOptions";
var _TOAT = "TransferOfferAcceptedTimestamp";
var _TOET = "TransferOfferExpirationTimestamp";
var _TP = "ToPort";
var _TPC = "ThreadsPerCore";
var _TPT = "TrustProviderType";
var _TPr = "TransportProtocol";
var _TR = "ThroughResources";
var _TRC = "TargetResourceCount";
var _TRD = "TemporaryRestoreDays";
var _TRTI = "TargetRouteTableId";
var _TRi = "TimeRanges";
var _TS = "TagSpecifications";
var _TSD = "TermStartDate";
var _TSIGB = "TotalSizeInGB";
var _TSIH = "TotalScheduledInstanceHours";
var _TST = "TieringStartTime";
var _TSTa = "TaskStartTime";
var _TSa = "TargetSubnet";
var _TSag = "TagSet";
var _TSagp = "TagSpecification";
var _TSar = "TargetSize";
var _TSas = "TaskState";
var _TSp = "TpmSupport";
var _TT = "TrafficType";
var _TTC = "TotalTargetCapacity";
var _TTGAI = "TransportTransitGatewayAttachmentId";
var _TTa = "TargetThroughput";
var _TTr = "TransferType";
var _TUP = "TotalUpfrontPrice";
var _TV = "TargetVersion";
var _TVC = "TotalVCpus";
var _TVSI = "TargetVpcSubnetId";
var _TVT = "TargetVolumeType";
var _TVo = "TokenValue";
var _Ta = "Tags";
var _Tag = "Tag";
var _Te = "Tenancy";
var _Ter = "Term";
var _Th = "Throughput";
var _Ti = "Tier";
var _Tim = "Timestamp";
var _To = "To";
var _U = "Url";
var _UB = "UserBucket";
var _UD = "UserData";
var _UDLTV = "UnsuccessfullyDeletedLaunchTemplateVersions";
var _UDe = "UefiData";
var _UDp = "UpdatedDate";
var _UDpd = "UpdateDate";
var _UE = "UploadEnd";
var _UF = "UpfrontFee";
var _UFD = "UnsuccessfulFleetDeletions";
var _UFR = "UnsuccessfulFleetRequests";
var _UG = "UserGroups";
var _UI = "UnmonitorInstances";
var _UIA = "UnassignIpv6Addresses";
var _UIAn = "UnassignedIpv6Addresses";
var _UIC = "UsedInstanceCount";
var _UICS = "UnsuccessfulInstanceCreditSpecifications";
var _UIE = "UserInfoEndpoint";
var _UIGP = "UserIdGroupPairs";
var _UIP = "UnknownIpPermissions";
var _UIPn = "UnassignedIpv6Prefixes";
var _UIs = "UserId";
var _UIse = "UserIds";
var _ULI = "UseLongIds";
var _ULIA = "UseLongIdsAggregated";
var _UO = "UsageOperation";
var _UOUT = "UsageOperationUpdateTime";
var _UP = "UploadPolicy";
var _UPIA = "UnassignPrivateIpAddresses";
var _UPNGA = "UnassignPrivateNatGatewayAddress";
var _UPS = "UploadPolicySignature";
var _UPp = "UpfrontPrice";
var _UPs = "UsagePrice";
var _URBOI = "UnusedReservationBillingOwnerId";
var _US = "UnlockSnapshot";
var _USGRDE = "UpdateSecurityGroupRuleDescriptionsEgress";
var _USGRDI = "UpdateSecurityGroupRuleDescriptionsIngress";
var _UST = "UdpStreamTimeout";
var _USp = "UploadSize";
var _USpl = "UploadStart";
var _USs = "UsageStrategy";
var _UT = "UdpTimeout";
var _UTP = "UserTrustProvider";
var _UTPT = "UserTrustProviderType";
var _UTp = "UpdateTime";
var _Un = "Unsuccessful";
var _Us = "Username";
var _V = "Version";
var _VA = "VpcAttachment";
var _VAE = "VerifiedAccessEndpoint";
var _VAEI = "VerifiedAccessEndpointId";
var _VAEIe = "VerifiedAccessEndpointIds";
var _VAET = "VerifiedAccessEndpointTargets";
var _VAETD = "VerifiedAccessEndpointTargetDns";
var _VAETIA = "VerifiedAccessEndpointTargetIpAddress";
var _VAEe = "VerifiedAccessEndpoints";
var _VAG = "VerifiedAccessGroup";
var _VAGA = "VerifiedAccessGroupArn";
var _VAGI = "VerifiedAccessGroupId";
var _VAGIe = "VerifiedAccessGroupIds";
var _VAGe = "VerifiedAccessGroups";
var _VAI = "VerifiedAccessInstance";
var _VAII = "VerifiedAccessInstanceId";
var _VAIIe = "VerifiedAccessInstanceIds";
var _VAIe = "VerifiedAccessInstances";
var _VATP = "VerifiedAccessTrustProvider";
var _VATPI = "VerifiedAccessTrustProviderId";
var _VATPIe = "VerifiedAccessTrustProviderIds";
var _VATPe = "VerifiedAccessTrustProviders";
var _VAp = "VpcAttachments";
var _VBPAE = "VpcBlockPublicAccessExclusion";
var _VBPAEp = "VpcBlockPublicAccessExclusions";
var _VBPAO = "VpcBlockPublicAccessOptions";
var _VC = "VpnConnection";
var _VCC = "VCpuCount";
var _VCDSC = "VpnConnectionDeviceSampleConfiguration";
var _VCDT = "VpnConnectionDeviceTypes";
var _VCDTI = "VpnConnectionDeviceTypeId";
var _VCI = "VpnConnectionId";
var _VCIp = "VpnConnectionIds";
var _VCIpu = "VCpuInfo";
var _VCa = "ValidCores";
var _VCp = "VpnConnections";
var _VD = "VersionDescription";
var _VE = "VpcEndpoint";
var _VEA = "VpcEndpointAssociations";
var _VEC = "VpcEndpointConnections";
var _VECI = "VpcEndpointConnectionId";
var _VEI = "VpcEndpointIds";
var _VEIp = "VpcEndpointId";
var _VEO = "VpcEndpointOwner";
var _VEPS = "VpcEndpointPolicySupported";
var _VER = "VpcEndpointRegion";
var _VES = "VpnEcmpSupport";
var _VESp = "VpcEndpointService";
var _VESpc = "VpcEndpointState";
var _VET = "VpcEndpointType";
var _VEp = "VpcEndpoints";
var _VF = "ValidFrom";
var _VFR = "ValidationFailureReason";
var _VG = "VpnGateway";
var _VGI = "VpnGatewayId";
var _VGIp = "VpnGatewayIds";
var _VGp = "VpnGateways";
var _VI = "VpcId";
var _VIe = "VendorId";
var _VIl = "VlanId";
var _VIo = "VolumeId";
var _VIol = "VolumeIds";
var _VIp = "VpcIds";
var _VM = "VerificationMethod";
var _VMo = "VolumesModifications";
var _VMol = "VolumeModification";
var _VN = "VirtualName";
var _VNI = "VirtualNetworkId";
var _VNe = "VersionNumber";
var _VOI = "VolumeOwnerId";
var _VOIp = "VpcOwnerId";
var _VP = "VpnPort";
var _VPC = "VpcPeeringConnection";
var _VPCI = "VpcPeeringConnectionId";
var _VPCIp = "VpcPeeringConnectionIds";
var _VPCp = "VpcPeeringConnections";
var _VPp = "VpnProtocol";
var _VS = "VolumeSize";
var _VSo = "VolumeStatuses";
var _VSol = "VolumeStatus";
var _VT = "VolumeType";
var _VTOIA = "VpnTunnelOutsideIpAddress";
var _VTPC = "ValidThreadsPerCore";
var _VTg = "VgwTelemetry";
var _VTi = "VirtualizationTypes";
var _VTir = "VirtualizationType";
var _VU = "ValidUntil";
var _Va = "Value";
var _Val = "Values";
var _Ve = "Versions";
var _Ven = "Vendor";
var _Vl = "Vlan";
var _Vo = "Volume";
var _Vol = "Volumes";
var _Vp = "Vpc";
var _Vpc = "Vpcs";
var _W = "Weight";
var _WBC = "WithdrawByoipCidr";
var _WC = "WithCooldown";
var _WCe = "WeightedCapacity";
var _WM = "WarningMessage";
var _WU = "WakeUp";
var _Wa = "Warning";
var _ZI = "ZoneIds";
var _ZIo = "ZoneId";
var _ZN = "ZoneNames";
var _ZNo = "ZoneName";
var _ZT = "ZoneType";
var _a = "associations";
var _aA = "asnAssociation";
var _aAC = "availableAddressCount";
var _aAI = "awsAccountId";
var _aAId = "addressAllocationId";
var _aAS = "asnAssociationSet";
var _aASA = "autoAcceptSharedAssociations";
var _aASAu = "autoAcceptSharedAttachments";
var _aASc = "accountAttributeSet";
var _aASd = "additionalAccountSet";
var _aAc = "accessAll";
var _aBHP = "actualBlockHourlyPrice";
var _aC = "availableCapacity";
var _aCIA = "associateCarrierIpAddress";
var _aCT = "archivalCompleteTime";
var _aCc = "acceleratorCount";
var _aCd = "addressCount";
var _aD = "activeDirectory";
var _aDNL = "allocationDefaultNetmaskLength";
var _aDRFRV = "allowDnsResolutionFromRemoteVpc";
var _aDRTI = "associationDefaultRouteTableId";
var _aDS = "additionalDetailSet";
var _aDT = "additionalDetailType";
var _aDn = "announcementDirection";
var _aDp = "applicationDomain";
var _aE = "authorizationEndpoint";
var _aEC = "analyzedEniCount";
var _aEFLCLTRV = "allowEgressFromLocalClassicLinkToRemoteVpc";
var _aEFLVTRCL = "allowEgressFromLocalVpcToRemoteClassicLink";
var _aEIO = "autoEnableIO";
var _aES = "attachedEbsStatus";
var _aF = "addressFamily";
var _aFS = "analysisFindingSet";
var _aI = "allocationId";
var _aIA = "assignedIpv6Addresses";
var _aIAC = "availableIpAddressCount";
var _aIAOC = "assignIpv6AddressOnCreation";
var _aIC = "availableInstanceCapacity";
var _aICv = "availableInstanceCount";
var _aIPS = "assignedIpv6PrefixSet";
var _aIPSs = "assignedIpv4PrefixSet";
var _aIS = "activeInstanceSet";
var _aISS = "allowedImagesSettingsState";
var _aITS = "allowedInstanceTypeSet";
var _aIc = "accountId";
var _aIm = "amiId";
var _aIs = "associationId";
var _aIss = "assetId";
var _aIt = "attachmentId";
var _aIu = "autoImport";
var _aL = "accountLevel";
var _aLI = "amiLaunchIndex";
var _aLc = "accessLogs";
var _aMIT = "allowsMultipleInstanceTypes";
var _aMNL = "allocationMinNetmaskLength";
var _aMNLl = "allocationMaxNetmaskLength";
var _aMS = "acceleratorManufacturerSet";
var _aMSp = "applianceModeSupport";
var _aN = "attributeName";
var _aNS = "acceleratorNameSet";
var _aO = "authenticationOptions";
var _aOI = "addressOwnerId";
var _aP = "allowedPrincipals";
var _aPCO = "accepterPeeringConnectionOptions";
var _aPHS = "alternatePathHintSet";
var _aPIA = "associatePublicIpAddress";
var _aPIAS = "assignedPrivateIpAddressesSet";
var _aPS = "addedPrincipalSet";
var _aPu = "autoPlacement";
var _aR = "authorizationRule";
var _aRA = "associatedRoleArn";
var _aRAd = "additionalRoutesAvailable";
var _aRAs = "associatedResourceAccessibility";
var _aRAss = "associatedResourceArn";
var _aRC = "acceptedRouteCount";
var _aRS = "associatedRoleSet";
var _aRSu = "autoRecoverySupported";
var _aRTS = "allocationResourceTagSet";
var _aRc = "aclRule";
var _aRcc = "acceptanceRequired";
var _aRd = "addressRegion";
var _aRs = "associatedResource";
var _aRu = "autoRecovery";
var _aRw = "awsRegion";
var _aS = "associationState";
var _aSA = "amazonSideAsn";
var _aSS = "amdSevSnp";
var _aSSt = "attributeSummarySet";
var _aSc = "activityStatus";
var _aSct = "actionsSet";
var _aSd = "addressSet";
var _aSdd = "addressesSet";
var _aSl = "allocationStrategy";
var _aSn = "analysisStatus";
var _aSs = "associationStatus";
var _aSss = "associationSet";
var _aSt = "attachmentSet";
var _aStt = "attachmentStatuses";
var _aSw = "awsService";
var _aT = "addressTransfer";
var _aTGAI = "accepterTransitGatewayAttachmentId";
var _aTI = "accepterTgwInfo";
var _aTMMB = "acceleratorTotalMemoryMiB";
var _aTN = "associatedTargetNetwork";
var _aTS = "addressTransferStatus";
var _aTSc = "acceleratorTypeSet";
var _aTSd = "addressTransferSet";
var _aTd = "addressType";
var _aTdd = "addressingType";
var _aTl = "allocationType";
var _aTll = "allocationTime";
var _aTs = "associationTarget";
var _aTt = "attachTime";
var _aTtt = "attachedTo";
var _aTtta = "attachmentType";
var _aV = "attributeValue";
var _aVC = "availableVCpus";
var _aVI = "accepterVpcInfo";
var _aVS = "attributeValueSet";
var _aZ = "availabilityZone";
var _aZG = "availabilityZoneGroup";
var _aZI = "availabilityZoneId";
var _aZIv = "availabilityZoneInfo";
var _aZS = "availabilityZoneSet";
var _ac = "acl";
var _acc = "accelerators";
var _act = "active";
var _ad = "address";
var _af = "affinity";
var _am = "amount";
var _ar = "arn";
var _arc = "architecture";
var _as = "asn";
var _ass = "association";
var _at = "attachment";
var _att = "attachments";
var _b = "byoasn";
var _bA = "bgpAsn";
var _bAE = "bgpAsnExtended";
var _bBIG = "baselineBandwidthInGbps";
var _bBIM = "baselineBandwidthInMbps";
var _bC = "byoipCidr";
var _bCS = "byoipCidrSet";
var _bCg = "bgpConfigurations";
var _bCy = "bytesConverted";
var _bDM = "blockDeviceMapping";
var _bDMS = "blockDeviceMappingSet";
var _bDMl = "blockDurationMinutes";
var _bEBM = "baselineEbsBandwidthMbps";
var _bEDNS = "baseEndpointDnsNameSet";
var _bI = "bundleId";
var _bII = "branchInterfaceId";
var _bIT = "bundleInstanceTask";
var _bITS = "bundleInstanceTasksSet";
var _bIa = "baselineIops";
var _bM = "bootMode";
var _bMa = "bareMetal";
var _bN = "bucketName";
var _bO = "bucketOwner";
var _bP = "burstablePerformance";
var _bPAS = "blockPublicAccessStates";
var _bPF = "baselinePerformanceFactors";
var _bPS = "burstablePerformanceSupported";
var _bS = "byoasnSet";
var _bSg = "bgpStatus";
var _bT = "bannerText";
var _bTIMB = "baselineThroughputInMBps";
var _bW = "bandwidthWeighting";
var _bWa = "bandwidthWeightings";
var _bl = "blackhole";
var _bu = "bucket";
var _c = "component";
var _cA = "componentArn";
var _cAS = "capacityAllocationSet";
var _cAUS = "coipAddressUsageSet";
var _cAe = "certificateArn";
var _cAo = "componentAccount";
var _cAr = "createdAt";
var _cB = "cidrBlock";
var _cBA = "cidrBlockAssociation";
var _cBAS = "cidrBlockAssociationSet";
var _cBDH = "capacityBlockDurationHours";
var _cBDM = "capacityBlockDurationMinutes";
var _cBEDH = "capacityBlockExtensionDurationHours";
var _cBEED = "capacityBlockExtensionEndDate";
var _cBEOI = "capacityBlockExtensionOfferingId";
var _cBEOS = "capacityBlockExtensionOfferingSet";
var _cBEPD = "capacityBlockExtensionPurchaseDate";
var _cBES = "capacityBlockExtensionStatus";
var _cBESD = "capacityBlockExtensionStartDate";
var _cBESa = "capacityBlockExtensionSet";
var _cBOI = "capacityBlockOfferingId";
var _cBOS = "capacityBlockOfferingSet";
var _cBS = "cidrBlockState";
var _cBSi = "cidrBlockSet";
var _cBr = "createdBy";
var _cC = "currencyCode";
var _cCB = "clientCidrBlock";
var _cCO = "clientConnectOptions";
var _cCRFE = "cancelCapacityReservationFleetError";
var _cCl = "clientConfiguration";
var _cCo = "coreCount";
var _cCoi = "coipCidr";
var _cCp = "cpuCredits";
var _cD = "createDate";
var _cDM = "completionDurationMinutes";
var _cDr = "creationDate";
var _cDre = "createdDate";
var _cE = "connectionEvents";
var _cECSD = "cidrEndpointsCustomSubDomain";
var _cED = "commitmentEndDate";
var _cET = "connectionEstablishedTime";
var _cETo = "connectionEndTime";
var _cEr = "cronExpression";
var _cF = "containerFormat";
var _cFS = "currentFleetState";
var _cG = "carrierGateway";
var _cGC = "customerGatewayConfiguration";
var _cGI = "carrierGatewayId";
var _cGIu = "customerGatewayId";
var _cGS = "carrierGatewaySet";
var _cGSu = "customerGatewaySet";
var _cGu = "customerGateway";
var _cGur = "currentGeneration";
var _cI = "carrierIp";
var _cIBM = "currentInstanceBootMode";
var _cIC = "committedInstanceCount";
var _cIi = "cidrIp";
var _cIid = "cidrIpv6";
var _cIidr = "cidrIpv4";
var _cIl = "clientIp";
var _cIli = "clientId";
var _cIo = "componentId";
var _cIom = "commitmentInfo";
var _cIon = "connectionId";
var _cIop = "coIp";
var _cIor = "coreInfo";
var _cLB = "classicLoadBalancers";
var _cLBC = "classicLoadBalancersConfig";
var _cLBL = "classicLoadBalancerListener";
var _cLBO = "clientLoginBannerOptions";
var _cLDS = "classicLinkDnsSupported";
var _cLE = "classicLinkEnabled";
var _cLO = "connectionLogOptions";
var _cMKE = "customerManagedKeyEnabled";
var _cMS = "cpuManufacturerSet";
var _cN = "commonName";
var _cNA = "coreNetworkArn";
var _cNAA = "coreNetworkAttachmentArn";
var _cNAo = "connectionNotificationArn";
var _cNI = "connectionNotificationId";
var _cNIo = "coreNetworkId";
var _cNS = "connectionNotificationState";
var _cNSo = "connectionNotificationSet";
var _cNT = "connectionNotificationType";
var _cNo = "connectionNotification";
var _cO = "cpuOptions";
var _cOI = "customerOwnedIp";
var _cOIP = "customerOwnedIpv4Pool";
var _cOP = "coolOffPeriod";
var _cOPEO = "coolOffPeriodExpiresOn";
var _cOi = "cidrOptions";
var _cP = "coipPool";
var _cPC = "connectPeerConfiguration";
var _cPI = "coipPoolId";
var _cPS = "coipPoolSet";
var _cR = "capacityReservation";
var _cRA = "capacityReservationArn";
var _cRBRS = "capacityReservationBillingRequestSet";
var _cRCC = "clientRootCertificateChain";
var _cRFA = "capacityReservationFleetArn";
var _cRFI = "capacityReservationFleetId";
var _cRFS = "capacityReservationFleetSet";
var _cRGS = "capacityReservationGroupSet";
var _cRI = "capacityReservationId";
var _cRIa = "capacityReservationInfo";
var _cRL = "certificateRevocationList";
var _cRO = "capacityReservationOptions";
var _cRP = "capacityReservationPreference";
var _cRRGA = "capacityReservationResourceGroupArn";
var _cRS = "capacityReservationSet";
var _cRSa = "capacityReservationSpecification";
var _cRT = "capacityReservationTarget";
var _cRa = "capacityRebalance";
var _cRo = "componentRegion";
var _cS = "cidrSet";
var _cSBN = "certificateS3BucketName";
var _cSFRS = "currentSpotFleetRequestState";
var _cSOK = "certificateS3ObjectKey";
var _cSl = "clientSecret";
var _cSo = "complianceStatus";
var _cSon = "connectionStatuses";
var _cSr = "creditSpecification";
var _cSu = "currentState";
var _cSur = "currentStatus";
var _cT = "clientToken";
var _cTC = "connectionTrackingConfiguration";
var _cTI = "conversionTaskId";
var _cTS = "connectionTrackingSpecification";
var _cTo = "conversionTasks";
var _cTom = "completeTime";
var _cTomp = "completionTime";
var _cTon = "conversionTask";
var _cTonn = "connectivityType";
var _cTr = "createTime";
var _cTre = "creationTime";
var _cTrea = "creationTimestamp";
var _cVE = "clientVpnEndpoint";
var _cVEI = "clientVpnEndpointId";
var _cVP = "createVolumePermission";
var _cVTN = "clientVpnTargetNetworks";
var _cWL = "cloudWatchLogs";
var _cWLO = "cloudWatchLogOptions";
var _ca = "category";
var _ch = "checksum";
var _ci = "cidr";
var _co = "code";
var _con = "connections";
var _conf = "configured";
var _confi = "config";
var _cont = "context";
var _cor = "cores";
var _cou = "count";
var _cp = "cpu";
var _d = "destination";
var _dA = "destinationArn";
var _dAIT = "denyAllIgwTraffic";
var _dART = "defaultAssociationRouteTable";
var _dAS = "destinationAddressSet";
var _dASe = "deprovisionedAddressSet";
var _dASi = "disableApiStop";
var _dAT = "disableApiTermination";
var _dAe = "destinationAddress";
var _dC = "destinationCidr";
var _dCA = "domainCertificateArn";
var _dCAR = "deliverCrossAccountRole";
var _dCB = "destinationCidrBlock";
var _dCR = "destinationCapacityReservation";
var _dCS = "dhcpConfigurationSet";
var _dCe = "defaultCores";
var _dE = "dnsEntry";
var _dEKI = "dataEncryptionKeyId";
var _dES = "dnsEntrySet";
var _dFA = "defaultForAz";
var _dHIS = "dedicatedHostIdSet";
var _dHS = "dedicatedHostsSupported";
var _dI = "directoryId";
var _dICB = "destinationIpv6CidrBlock";
var _dIF = "diskImageFormat";
var _dIS = "diskImageSize";
var _dIe = "deviceIndex";
var _dIes = "destinationIp";
var _dLEM = "deliverLogsErrorMessage";
var _dLPA = "deliverLogsPermissionArn";
var _dLS = "deliverLogsStatus";
var _dMGM = "deregisteredMulticastGroupMembers";
var _dMGS = "deregisteredMulticastGroupSources";
var _dN = "deviceName";
var _dNCI = "defaultNetworkCardIndex";
var _dNII = "deregisteredNetworkInterfaceIds";
var _dNn = "dnsName";
var _dO = "dhcpOptions";
var _dOI = "dhcpOptionsId";
var _dOS = "dhcpOptionsSet";
var _dOST = "disconnectOnSessionTimeout";
var _dOT = "deleteOnTermination";
var _dOe = "destinationOptions";
var _dOev = "deviceOptions";
var _dOn = "dnsOptions";
var _dP = "deliveryPreference";
var _dPLI = "destinationPrefixListId";
var _dPLS = "destinationPrefixListSet";
var _dPR = "destinationPortRange";
var _dPRS = "destinationPortRangeSet";
var _dPRT = "defaultPropagationRouteTable";
var _dPS = "destinationPortSet";
var _dPe = "deregistrationProtection";
var _dPes = "destinationPort";
var _dR = "discoveryRegion";
var _dRDAI = "defaultResourceDiscoveryAssociationId";
var _dRDI = "defaultResourceDiscoveryId";
var _dRIT = "dnsRecordIpType";
var _dRRV = "deleteReplacedRootVolume";
var _dRS = "dataRetentionSupport";
var _dRSa = "dataResponseSet";
var _dRTA = "defaultRouteTableAssociation";
var _dRTP = "defaultRouteTablePropagation";
var _dRy = "dynamicRouting";
var _dS = "dnsServer";
var _dSCR = "deletedSubnetCidrReservation";
var _dSe = "destinationSet";
var _dSel = "deliveryStatus";
var _dSeli = "deliveryStream";
var _dSn = "dnsSupport";
var _dT = "deletionTime";
var _dTA = "dpdTimeoutAction";
var _dTCT = "defaultTargetCapacityType";
var _dTPC = "defaultThreadsPerCore";
var _dTPS = "deviceTrustProviderSet";
var _dTPT = "deviceTrustProviderType";
var _dTS = "dpdTimeoutSeconds";
var _dTe = "deprecationTime";
var _dTel = "deleteTime";
var _dTele = "deletionTimestamp";
var _dTi = "disablingTime";
var _dTis = "disabledTime";
var _dV = "destinationVpc";
var _dVC = "defaultVCpus";
var _dVD = "deviceValidationDomain";
var _dVN = "defaultVersionNumber";
var _dVe = "defaultVersion";
var _de = "description";
var _dea = "deadline";
var _def = "default";
var _det = "details";
var _dev = "device";
var _di = "direction";
var _dis = "disks";
var _do = "domain";
var _du = "duration";
var _e = "egress";
var _eA = "exclusionsAllowed";
var _eAn = "enableAcceleration";
var _eB = "egressBytes";
var _eC = "errorCode";
var _eCTP = "excessCapacityTerminationPolicy";
var _eCx = "explanationCode";
var _eD = "endDate";
var _eDH = "enableDnsHostnames";
var _eDS = "enableDnsSupport";
var _eDT = "endDateType";
var _eDf = "effectiveDate";
var _eDn = "enableDns64";
var _eDnd = "endpointDomain";
var _eDv = "eventDescription";
var _eEBD = "ebsEncryptionByDefault";
var _eFRS = "egressFilterRuleSet";
var _eGAI = "elasticGpuAssociationId";
var _eGAS = "elasticGpuAssociationState";
var _eGASl = "elasticGpuAssociationSet";
var _eGAT = "elasticGpuAssociationTime";
var _eGH = "elasticGpuHealth";
var _eGI = "elasticGpuId";
var _eGS = "elasticGpuSet";
var _eGSS = "elasticGpuSpecificationSet";
var _eGSl = "elasticGpuState";
var _eGT = "elasticGpuType";
var _eH = "endHour";
var _eI = "exchangeId";
var _eIAA = "elasticInferenceAcceleratorArn";
var _eIAAI = "elasticInferenceAcceleratorAssociationId";
var _eIAAS = "elasticInferenceAcceleratorAssociationState";
var _eIAASl = "elasticInferenceAcceleratorAssociationSet";
var _eIAAT = "elasticInferenceAcceleratorAssociationTime";
var _eIAS = "elasticInferenceAcceleratorSet";
var _eITI = "exportImageTaskId";
var _eITS = "exportImageTaskSet";
var _eITSn = "encryptionInTransitSupported";
var _eITSx = "excludedInstanceTypeSet";
var _eIb = "ebsInfo";
var _eIf = "efaInfo";
var _eIv = "eventInformation";
var _eIve = "eventId";
var _eIx = "exclusionId";
var _eKKI = "encryptionKmsKeyId";
var _eLADI = "enableLniAtDeviceIndex";
var _eLBL = "elasticLoadBalancerListener";
var _eM = "errorMessage";
var _eNAUM = "enableNetworkAddressUsageMetrics";
var _eO = "ebsOptimized";
var _eOI = "ebsOptimizedInfo";
var _eOIG = "egressOnlyInternetGateway";
var _eOIGI = "egressOnlyInternetGatewayId";
var _eOIGS = "egressOnlyInternetGatewaySet";
var _eOS = "ebsOptimizedSupport";
var _eOn = "enclaveOptions";
var _eP = "egressPackets";
var _ePG = "enablePrivateGua";
var _ePS = "excludePathSet";
var _eRNDAAAAR = "enableResourceNameDnsAAAARecord";
var _eRNDAR = "enableResourceNameDnsARecord";
var _eS = "ephemeralStorage";
var _eSE = "enaSrdEnabled";
var _eSS = "enaSrdSpecification";
var _eSSn = "enaSrdSupported";
var _eST = "eventSubType";
var _eSUE = "enaSrdUdpEnabled";
var _eSUS = "enaSrdUdpSpecification";
var _eSf = "efaSupported";
var _eSn = "encryptionSupport";
var _eSna = "enaSupport";
var _eSnt = "entrySet";
var _eSr = "errorSet";
var _eSv = "eventsSet";
var _eSx = "explanationSet";
var _eT = "expirationTime";
var _eTI = "exportTaskId";
var _eTLC = "enableTunnelLifecycleControl";
var _eTS = "exportTaskSet";
var _eTSi = "eipTagSet";
var _eTSx = "exportToS3";
var _eTn = "endTime";
var _eTna = "enablingTime";
var _eTnab = "enabledTime";
var _eTnd = "endpointType";
var _eTv = "eventType";
var _eTx = "exportTask";
var _eWD = "endWeekDay";
var _eb = "ebs";
var _en = "enabled";
var _enc = "encrypted";
var _end = "end";
var _er = "error";
var _ev = "event";
var _f = "format";
var _fA = "federatedAuthentication";
var _fAD = "filterAtDestination";
var _fAS = "filterAtSource";
var _fAi = "firstAddress";
var _fC = "fulfilledCapacity";
var _fCRS = "fleetCapacityReservationSet";
var _fCS = "findingComponentSet";
var _fCa = "failureCode";
var _fDN = "fipsDnsName";
var _fE = "fipsEnabled";
var _fF = "fileFormat";
var _fFCS = "failedFleetCancellationSet";
var _fFi = "findingsFound";
var _fI = "findingId";
var _fIA = "fpgaImageAttribute";
var _fIAS = "filterInArnSet";
var _fIGI = "fpgaImageGlobalId";
var _fII = "fpgaImageId";
var _fIS = "fleetInstanceSet";
var _fISp = "fpgaImageSet";
var _fIl = "fleetId";
var _fIp = "fpgaInfo";
var _fLI = "flowLogId";
var _fLIS = "flowLogIdSet";
var _fLISa = "fastLaunchImageSet";
var _fLS = "flowLogSet";
var _fLSl = "flowLogStatus";
var _fM = "failureMessage";
var _fODC = "fulfilledOnDemandCapacity";
var _fP = "fromPort";
var _fPCS = "forwardPathComponentSet";
var _fPi = "fixedPrice";
var _fQPDS = "failedQueuedPurchaseDeletionSet";
var _fR = "failureReason";
var _fRa = "fastRestored";
var _fS = "fleetSet";
var _fSR = "firewallStatelessRule";
var _fSRS = "fastSnapshotRestoreSet";
var _fSRSES = "fastSnapshotRestoreStateErrorSet";
var _fSRi = "firewallStatefulRule";
var _fSST = "firstSlotStartTime";
var _fSl = "fleetState";
var _fTE = "freeTierEligible";
var _fa = "fault";
var _fp = "fpgas";
var _fr = "from";
var _fre = "frequency";
var _g = "group";
var _gA = "groupArn";
var _gAS = "gatewayAssociationState";
var _gD = "groupDescription";
var _gI = "gatewayId";
var _gIA = "groupIpAddress";
var _gIp = "gpuInfo";
var _gIr = "groupId";
var _gK = "greKey";
var _gLBAS = "gatewayLoadBalancerArnSet";
var _gLBEI = "gatewayLoadBalancerEndpointId";
var _gM = "groupMember";
var _gN = "groupName";
var _gOI = "groupOwnerId";
var _gS = "groupSet";
var _gSr = "groupSource";
var _gp = "gpus";
var _gr = "groups";
var _h = "hypervisor";
var _hCP = "hiveCompatiblePartitions";
var _hE = "httpEndpoint";
var _hI = "hostId";
var _hIS = "hostIdSet";
var _hM = "hostMaintenance";
var _hO = "hibernationOptions";
var _hP = "hostProperties";
var _hPI = "httpProtocolIpv6";
var _hPRHL = "httpPutResponseHopLimit";
var _hPo = "hourlyPrice";
var _hR = "hostRecovery";
var _hRGA = "hostResourceGroupArn";
var _hRI = "hostReservationId";
var _hRS = "historyRecordSet";
var _hRSo = "hostReservationSet";
var _hS = "hostSet";
var _hSi = "hibernationSupported";
var _hT = "httpTokens";
var _hTo = "hostnameType";
var _hZI = "hostedZoneId";
var _i = "item";
var _iA = "interfaceAssociation";
var _iAA = "ipv6AddressAttribute";
var _iAC = "ipv6AddressCount";
var _iAI = "inferenceAcceleratorInfo";
var _iAPI = "ipv4AddressesPerInterface";
var _iAPIp = "ipv6AddressesPerInterface";
var _iAS = "interfaceAssociationSet";
var _iASp = "ipv6AddressesSet";
var _iAT = "ipAddressType";
var _iATOI = "includeAllTagsOfInstance";
var _iAm = "imageAllowed";
var _iAp = "ipAddress";
var _iApa = "ipamArn";
var _iApv = "ipv6Address";
var _iB = "ingressBytes";
var _iBPAS = "imageBlockPublicAccessState";
var _iC = "instanceCount";
var _iCAS = "ipv6CidrAssociationSet";
var _iCB = "ipv6CidrBlock";
var _iCBA = "ipv6CidrBlockAssociation";
var _iCBAS = "ipv6CidrBlockAssociationSet";
var _iCBS = "ipv6CidrBlockState";
var _iCBSp = "ipv6CidrBlockSet";
var _iCBn = "insideCidrBlocks";
var _iCE = "instanceConnectEndpoint";
var _iCEA = "instanceConnectEndpointArn";
var _iCEI = "instanceConnectEndpointId";
var _iCES = "instanceConnectEndpointSet";
var _iCS = "imageCriterionSet";
var _iCSS = "instanceCreditSpecificationSet";
var _iCn = "instanceCounts";
var _iCp = "ipv6Cidr";
var _iD = "imageData";
var _iDAS = "ipamDiscoveredAccountSet";
var _iDPAS = "ipamDiscoveredPublicAddressSet";
var _iDRCS = "ipamDiscoveredResourceCidrSet";
var _iDs = "isDefault";
var _iE = "instanceExport";
var _iEI = "instanceEventId";
var _iERVT = "ipamExternalResourceVerificationToken";
var _iERVTA = "ipamExternalResourceVerificationTokenArn";
var _iERVTI = "ipamExternalResourceVerificationTokenId";
var _iERVTS = "ipamExternalResourceVerificationTokenSet";
var _iEW = "instanceEventWindow";
var _iEWI = "instanceEventWindowId";
var _iEWS = "instanceEventWindowState";
var _iEWSn = "instanceEventWindowSet";
var _iEs = "isEgress";
var _iF = "instanceFamily";
var _iFCS = "instanceFamilyCreditSpecification";
var _iFR = "iamFleetRole";
var _iFRS = "ingressFilterRuleSet";
var _iG = "internetGateway";
var _iGBM = "internetGatewayBlockMode";
var _iGEM = "internetGatewayExclusionMode";
var _iGI = "internetGatewayId";
var _iGS = "internetGatewaySet";
var _iGSn = "instanceGenerationSet";
var _iH = "instanceHealth";
var _iHn = "inboundHeader";
var _iI = "instanceId";
var _iIB = "instanceInterruptionBehavior";
var _iIMS = "instanceImageMetadataSet";
var _iIP = "iamInstanceProfile";
var _iIPA = "iamInstanceProfileAssociation";
var _iIPAS = "iamInstanceProfileAssociationSet";
var _iIS = "instanceIdSet";
var _iISB = "instanceInitiatedShutdownBehavior";
var _iITS = "importImageTaskSet";
var _iIm = "importInstance";
var _iIma = "imageId";
var _iIn = "instanceIds";
var _iIp = "ipamId";
var _iL = "imageLocation";
var _iLn = "instanceLifecycle";
var _iM = "imageMetadata";
var _iMC = "instanceMatchCriteria";
var _iMO = "instanceMetadataOptions";
var _iMOn = "instanceMarketOptions";
var _iMT = "instanceMetadataTags";
var _iMU = "importManifestUrl";
var _iN = "ipv6Native";
var _iOA = "imageOwnerAlias";
var _iOI = "imageOwnerId";
var _iOIn = "instanceOwnerId";
var _iOIp = "ipOwnerId";
var _iOS = "instanceOwningService";
var _iP = "instancePort";
var _iPA = "ipamPoolAllocation";
var _iPAI = "ipamPoolAllocationId";
var _iPAS = "ipamPoolAllocationSet";
var _iPAp = "ipamPoolArn";
var _iPC = "ipamPoolCidr";
var _iPCI = "ipamPoolCidrId";
var _iPCS = "ipamPoolCidrSet";
var _iPCp = "ipv4PrefixCount";
var _iPCpv = "ipv6PrefixCount";
var _iPE = "ipPermissionsEgress";
var _iPI = "isPrimaryIpv6";
var _iPIp = "ipamPoolId";
var _iPR = "isPermanentRestore";
var _iPS = "ipamPoolSet";
var _iPSm = "imageProviderSet";
var _iPSp = "ipv6PoolSet";
var _iPSpr = "ipPrefixSet";
var _iPSpv = "ipv4PrefixSet";
var _iPSpvr = "ipv6PrefixSet";
var _iPTUC = "instancePoolsToUseCount";
var _iPn = "instancePlatform";
var _iPng = "ingressPackets";
var _iPnt = "interfacePermission";
var _iPnte = "interfaceProtocol";
var _iPo = "ioPerformance";
var _iPp = "ipamPool";
var _iPpe = "ipPermissions";
var _iPpr = "ipProtocol";
var _iPpv = "ipv4Prefix";
var _iPpvo = "ipv6Pool";
var _iPpvr = "ipv6Prefix";
var _iPs = "isPublic";
var _iPsr = "isPrimary";
var _iR = "instanceRequirements";
var _iRC = "ipamResourceCidr";
var _iRCS = "ipamResourceCidrSet";
var _iRD = "ipamResourceDiscovery";
var _iRDA = "ipamResourceDiscoveryAssociation";
var _iRDAA = "ipamResourceDiscoveryAssociationArn";
var _iRDAI = "ipamResourceDiscoveryAssociationId";
var _iRDAS = "ipamResourceDiscoveryAssociationSet";
var _iRDAp = "ipamResourceDiscoveryArn";
var _iRDI = "ipamResourceDiscoveryId";
var _iRDR = "ipamResourceDiscoveryRegion";
var _iRDS = "ipamResourceDiscoverySet";
var _iRT = "ingressRouteTable";
var _iRp = "ipamRegion";
var _iRpa = "ipRanges";
var _iRpv = "ipv6Ranges";
var _iS = "ipamScope";
var _iSA = "ipamScopeArn";
var _iSI = "instanceStorageInfo";
var _iSIp = "ipamScopeId";
var _iSS = "instanceStatusSet";
var _iSSn = "instanceStorageSupported";
var _iSSp = "ipamScopeSet";
var _iST = "ipamScopeType";
var _iSTS = "importSnapshotTaskSet";
var _iSg = "igmpv2Support";
var _iSm = "imagesSet";
var _iSma = "imageState";
var _iSmag = "imageSet";
var _iSmd = "imdsSupport";
var _iSmp = "impairedSince";
var _iSn = "instancesSet";
var _iSns = "instanceSet";
var _iSnst = "instanceState";
var _iSnsta = "instanceStatus";
var _iSp = "ipamSet";
var _iSpo = "ipSource";
var _iSpv = "ipv6Supported";
var _iSpvu = "ipv6Support";
var _iT = "instanceType";
var _iTA = "instanceTagAttribute";
var _iTC = "icmpTypeCode";
var _iTCn = "includeTrustContext";
var _iTI = "importTaskId";
var _iTKS = "instanceTagKeySet";
var _iTOS = "instanceTypeOfferingSet";
var _iTS = "instanceTypeSet";
var _iTSS = "instanceTypeSpecificationSet";
var _iTm = "imageType";
var _iTn = "instanceTypes";
var _iTns = "instanceTenancy";
var _iTnt = "interfaceType";
var _iU = "ipUsage";
var _iUS = "instanceUsageSet";
var _iV = "importVolume";
var _iVE = "isValidExchange";
var _iVS = "ikeVersionSet";
var _id = "id";
var _im = "image";
var _in = "instance";
var _ins = "instances";
var _int = "interval";
var _io = "iops";
var _ip = "ipam";
var _is = "issuer";
var _k = "key";
var _kDF = "kinesisDataFirehose";
var _kF = "keyFormat";
var _kFe = "keyFingerprint";
var _kI = "kernelId";
var _kKA = "kmsKeyArn";
var _kKI = "kmsKeyId";
var _kM = "keyMaterial";
var _kN = "keyName";
var _kPI = "keyPairId";
var _kS = "keySet";
var _kT = "keyType";
var _kV = "keyValue";
var _ke = "kernel";
var _key = "keyword";
var _l = "lifecycle";
var _lA = "localAddress";
var _lADT = "lastAttemptedDiscoveryTime";
var _lAZ = "launchedAvailabilityZone";
var _lAa = "lastAddress";
var _lBA = "loadBalancerArn";
var _lBAo = "localBgpAsn";
var _lBC = "loadBalancersConfig";
var _lBLP = "loadBalancerListenerPort";
var _lBO = "loadBalancerOptions";
var _lBP = "loadBalancerPort";
var _lBS = "loadBalancerSet";
var _lBT = "loadBalancerTarget";
var _lBTG = "loadBalancerTargetGroup";
var _lBTGS = "loadBalancerTargetGroupSet";
var _lBTP = "loadBalancerTargetPort";
var _lC = "loggingConfiguration";
var _lCA = "licenseConfigurationArn";
var _lCO = "lockCreatedOn";
var _lCS = "loggingConfigurationSet";
var _lD = "logDestination";
var _lDST = "lockDurationStartTime";
var _lDT = "logDestinationType";
var _lDo = "lockDuration";
var _lE = "logEnabled";
var _lEO = "lockExpiresOn";
var _lET = "lastEvaluatedTime";
var _lEa = "lastError";
var _lF = "logFormat";
var _lFA = "lambdaFunctionArn";
var _lG = "launchGroup";
var _lGA = "logGroupArn";
var _lGI = "localGatewayId";
var _lGN = "logGroupName";
var _lGRT = "localGatewayRouteTable";
var _lGRTA = "localGatewayRouteTableArn";
var _lGRTI = "localGatewayRouteTableId";
var _lGRTS = "localGatewayRouteTableSet";
var _lGRTVA = "localGatewayRouteTableVpcAssociation";
var _lGRTVAI = "localGatewayRouteTableVpcAssociationId";
var _lGRTVAS = "localGatewayRouteTableVpcAssociationSet";
var _lGRTVIGA = "localGatewayRouteTableVirtualInterfaceGroupAssociation";
var _lGRTVIGAI = "localGatewayRouteTableVirtualInterfaceGroupAssociationId";
var _lGRTVIGAS = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet";
var _lGS = "localGatewaySet";
var _lGVIGI = "localGatewayVirtualInterfaceGroupId";
var _lGVIGS = "localGatewayVirtualInterfaceGroupSet";
var _lGVII = "localGatewayVirtualInterfaceId";
var _lGVIIS = "localGatewayVirtualInterfaceIdSet";
var _lGVIS = "localGatewayVirtualInterfaceSet";
var _lGo = "logGroup";
var _lINC = "localIpv4NetworkCidr";
var _lINCo = "localIpv6NetworkCidr";
var _lLT = "lastLaunchedTime";
var _lMA = "lastMaintenanceApplied";
var _lO = "logOptions";
var _lOF = "logOutputFormat";
var _lP = "loadPermissions";
var _lPa = "launchPermission";
var _lS = "licenseSpecifications";
var _lSC = "lastStatusChange";
var _lSDT = "lastSuccessfulDiscoveryTime";
var _lSTS = "localStorageTypeSet";
var _lSa = "launchSpecifications";
var _lSau = "launchSpecification";
var _lSi = "licenseSet";
var _lSo = "localStorage";
var _lSoc = "lockState";
var _lT = "launchTemplate";
var _lTAO = "launchTemplateAndOverrides";
var _lTC = "launchTemplateConfigs";
var _lTD = "launchTemplateData";
var _lTI = "launchTemplateId";
var _lTN = "launchTemplateName";
var _lTOS = "lastTieringOperationStatus";
var _lTOSD = "lastTieringOperationStatusDetail";
var _lTP = "lastTieringProgress";
var _lTS = "launchTemplateSpecification";
var _lTST = "lastTieringStartTime";
var _lTV = "launchTemplateVersion";
var _lTVS = "launchTemplateVersionSet";
var _lTa = "launchTemplates";
var _lTau = "launchTime";
var _lTi = "licenseType";
var _lTo = "locationType";
var _lUT = "lastUpdateTime";
var _lUTa = "lastUpdatedTime";
var _lUTas = "lastUpdateTimestamp";
var _lV = "logVersion";
var _lVN = "latestVersionNumber";
var _lo = "location";
var _loc = "locale";
var _m = "min";
var _mA = "mutualAuthentication";
var _mAAA = "maintenanceAutoAppliedAfter";
var _mAE = "multiAttachEnabled";
var _mAI = "maxAggregationInterval";
var _mAIe = "mediaAcceleratorInfo";
var _mASS = "movingAddressStatusSet";
var _mAa = "macAddress";
var _mB = "managedBy";
var _mBIM = "maximumBandwidthInMbps";
var _mC = "missingComponent";
var _mCOIOL = "mapCustomerOwnedIpOnLaunch";
var _mD = "maintenanceDetails";
var _mDA = "multicastDomainAssociations";
var _mDK = "metaDataKey";
var _mDV = "metaDataValue";
var _mDe = "metaData";
var _mE = "maxEntries";
var _mEI = "maximumEfaInterfaces";
var _mEM = "managedExceptionMessage";
var _mFV = "mostFrequentValue";
var _mG = "multicastGroups";
var _mGBPVC = "memoryGiBPerVCpu";
var _mHS = "macHostSet";
var _mI = "maximumIops";
var _mIe = "memoryInfo";
var _mMB = "memoryMiB";
var _mNC = "maximumNetworkCards";
var _mNI = "maximumNetworkInterfaces";
var _mO = "metadataOptions";
var _mOSLRG = "memberOfServiceLinkedResourceGroup";
var _mOSLSVS = "macOSLatestSupportedVersionSet";
var _mOa = "maintenanceOptions";
var _mP = "maxPrice";
var _mPIOL = "mapPublicIpOnLaunch";
var _mPL = "maxParallelLaunches";
var _mPS = "metricPointSet";
var _mPSa = "matchPathSet";
var _mR = "maxResults";
var _mRS = "modificationResultSet";
var _mS = "messageSet";
var _mSPAPOOODP = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice";
var _mSa = "managementState";
var _mSai = "maintenanceStrategies";
var _mSo = "moveStatus";
var _mSod = "modificationState";
var _mSu = "multicastSupport";
var _mT = "marketType";
var _mTC = "minTargetCapacity";
var _mTDID = "maxTermDurationInDays";
var _mTDIDi = "minTermDurationInDays";
var _mTIMB = "maximumThroughputInMBps";
var _mTP = "maxTotalPrice";
var _mTe = "memberType";
var _mVE = "managesVpcEndpoints";
var _ma = "max";
var _mai = "main";
var _man = "manufacturer";
var _mana = "managed";
var _mar = "marketplace";
var _me = "message";
var _mem = "member";
var _met = "metric";
var _mo = "monitoring";
var _mod = "mode";
var _n = "name";
var _nA = "networkAcl";
var _nAAI = "networkAclAssociationId";
var _nAI = "networkAclId";
var _nAIe = "newAssociationId";
var _nAOO = "nativeApplicationOidcOptions";
var _nAS = "networkAclSet";
var _nAo = "notAfter";
var _nB = "notBefore";
var _nBD = "notBeforeDeadline";
var _nBG = "networkBorderGroup";
var _nBGe = "networkBandwidthGbps";
var _nC = "networkCards";
var _nCI = "networkCardIndex";
var _nD = "noDevice";
var _nDe = "neuronDevices";
var _nES = "nitroEnclavesSupport";
var _nG = "natGateway";
var _nGAS = "natGatewayAddressSet";
var _nGI = "natGatewayId";
var _nGS = "natGatewaySet";
var _nI = "networkId";
var _nIA = "networkInsightsAnalysis";
var _nIAA = "networkInsightsAnalysisArn";
var _nIAI = "networkInsightsAnalysisId";
var _nIAS = "networkInsightsAccessScope";
var _nIASA = "networkInsightsAccessScopeArn";
var _nIASAA = "networkInsightsAccessScopeAnalysisArn";
var _nIASAI = "networkInsightsAccessScopeAnalysisId";
var _nIASAS = "networkInsightsAccessScopeAnalysisSet";
var _nIASAe = "networkInsightsAccessScopeAnalysis";
var _nIASC = "networkInsightsAccessScopeContent";
var _nIASI = "networkInsightsAccessScopeId";
var _nIASS = "networkInsightsAccessScopeSet";
var _nIASe = "networkInsightsAnalysisSet";
var _nIASet = "networkInterfaceAttachmentStatus";
var _nIC = "networkInterfaceCount";
var _nID = "networkInterfaceDescription";
var _nII = "networkInterfaceId";
var _nIIS = "networkInterfaceIdSet";
var _nIO = "networkInterfaceOptions";
var _nIOI = "networkInterfaceOwnerId";
var _nIP = "networkInsightsPath";
var _nIPA = "networkInsightsPathArn";
var _nIPI = "networkInsightsPathId";
var _nIPIe = "networkInterfacePermissionId";
var _nIPS = "networkInsightsPathSet";
var _nIPe = "networkInterfacePermissions";
var _nIS = "networkInterfaceSet";
var _nIe = "networkInterface";
var _nIet = "networkInfo";
var _nIeu = "neuronInfo";
var _nL = "netmaskLength";
var _nLBA = "networkLoadBalancerArn";
var _nLBAS = "networkLoadBalancerArnSet";
var _nNS = "networkNodeSet";
var _nOA = "numberOfAccounts";
var _nOFA = "numberOfFailedAccounts";
var _nOMA = "numberOfMatchedAccounts";
var _nOUA = "numberOfUnmatchedAccounts";
var _nP = "networkPerformance";
var _nPF = "networkPathFound";
var _nPO = "networkPerformanceOptions";
var _nPe = "networkPlatform";
var _nS = "nvmeSupport";
var _nSS = "networkServiceSet";
var _nSST = "nextSlotStartTime";
var _nSa = "nameserverSet";
var _nT = "networkType";
var _nTI = "nitroTpmInfo";
var _nTS = "nitroTpmSupport";
var _nTe = "nextToken";
var _o = "origin";
var _oA = "outpostArn";
var _oAr = "organizationArn";
var _oAw = "ownerAlias";
var _oC = "offeringClass";
var _oDAS = "onDemandAllocationStrategy";
var _oDFC = "onDemandFulfilledCapacity";
var _oDMPPOLP = "onDemandMaxPricePercentageOverLowestPrice";
var _oDMTP = "onDemandMaxTotalPrice";
var _oDO = "onDemandOptions";
var _oDS = "occurrenceDaySet";
var _oDTC = "onDemandTargetCapacity";
var _oEP = "organizationsEntityPath";
var _oH = "outboundHeader";
var _oI = "ownerId";
var _oIA = "outsideIpAddress";
var _oIAT = "outsideIpAddressType";
var _oIS = "optInStatus";
var _oIf = "offeringId";
var _oIr = "originalIops";
var _oK = "objectKey";
var _oMAE = "originalMultiAttachEnabled";
var _oO = "oidcOptions";
var _oRIWEA = "outputReservedInstancesWillExpireAt";
var _oRS = "operatingRegionSet";
var _oRTE = "occurrenceRelativeToEnd";
var _oS = "offeringSet";
var _oST = "oldestSampleTime";
var _oSr = "originalSize";
var _oSv = "overlapStatus";
var _oT = "optimizingTime";
var _oTf = "offeringType";
var _oTr = "originalThroughput";
var _oU = "occurrenceUnit";
var _oUA = "organizationalUnitArn";
var _oUES = "organizationalUnitExclusionSet";
var _oUI = "organizationalUnitId";
var _oVCS = "openVpnConfigurationSet";
var _oVT = "originalVolumeType";
var _op = "operator";
var _opt = "options";
var _ou = "output";
var _ov = "overrides";
var _ow = "owner";
var _p = "principal";
var _pA = "poolArn";
var _pAI = "peeringAttachmentId";
var _pAR = "poolAddressRange";
var _pARS = "poolAddressRangeSet";
var _pAe = "peerAddress";
var _pAee = "peerAsn";
var _pAu = "publiclyAdvertisable";
var _pB = "provisionedBandwidth";
var _pBA = "peerBgpAsn";
var _pBIG = "peakBandwidthInGbps";
var _pC = "productCodes";
var _pCB = "poolCidrBlock";
var _pCBS = "poolCidrBlockSet";
var _pCI = "preserveClientIp";
var _pCNI = "peerCoreNetworkId";
var _pCS = "poolCidrSet";
var _pCSS = "postureComplianceStatusSet";
var _pCa = "partitionCount";
var _pCo = "poolCount";
var _pCr = "productCode";
var _pD = "passwordData";
var _pDE = "privateDnsEnabled";
var _pDEr = "privateDnsEntry";
var _pDHGNS = "phase1DHGroupNumberSet";
var _pDHGNSh = "phase2DHGroupNumberSet";
var _pDN = "privateDnsName";
var _pDNC = "privateDnsNameConfiguration";
var _pDNO = "privateDnsNameOptions";
var _pDNOOL = "privateDnsNameOptionsOnLaunch";
var _pDNS = "privateDnsNameSet";
var _pDNVS = "privateDnsNameVerificationState";
var _pDNu = "publicDnsName";
var _pDOFIRE = "privateDnsOnlyForInboundResolverEndpoint";
var _pDRTI = "propagationDefaultRouteTableId";
var _pDS = "pricingDetailsSet";
var _pDSI = "publicDefaultScopeId";
var _pDSIr = "privateDefaultScopeId";
var _pDa = "paymentDue";
var _pDl = "platformDetails";
var _pDo = "policyDocument";
var _pDoo = "poolDepth";
var _pDr = "productDescription";
var _pE = "policyEnabled";
var _pEAS = "phase1EncryptionAlgorithmSet";
var _pEASh = "phase2EncryptionAlgorithmSet";
var _pEk = "pkceEnabled";
var _pF = "packetField";
var _pFS = "previousFleetState";
var _pG = "placementGroup";
var _pGA = "placementGroupArn";
var _pGI = "placementGroupInfo";
var _pGS = "placementGroupSet";
var _pHP = "perHourPartition";
var _pHS = "packetHeaderStatement";
var _pI = "publicIp";
var _pIA = "privateIpAddress";
var _pIAS = "privateIpAddressesSet";
var _pIASh = "phase1IntegrityAlgorithmSet";
var _pIASha = "phase2IntegrityAlgorithmSet";
var _pIP = "publicIpv4Pool";
var _pIPI = "publicIpv4PoolId";
var _pIPS = "publicIpv4PoolSet";
var _pIS = "publicIpSource";
var _pIc = "pciId";
var _pIo = "poolId";
var _pIr = "processorInfo";
var _pIri = "primaryIpv6";
var _pIriv = "privateIp";
var _pK = "publicKey";
var _pL = "prefixList";
var _pLA = "prefixListArn";
var _pLAS = "prefixListAssociationSet";
var _pLI = "prefixListId";
var _pLIr = "prefixListIds";
var _pLN = "prefixListName";
var _pLOI = "prefixListOwnerId";
var _pLS = "prefixListSet";
var _pLSh = "phase1LifetimeSeconds";
var _pLSha = "phase2LifetimeSeconds";
var _pLa = "packetLength";
var _pM = "pendingMaintenance";
var _pN = "partitionNumber";
var _pO = "paymentOption";
var _pOe = "peeringOptions";
var _pP = "progressPercentage";
var _pR = "ptrRecord";
var _pRN = "policyRuleNumber";
var _pRNo = "policyReferenceName";
var _pRS = "portRangeSet";
var _pRU = "ptrRecordUpdate";
var _pRa = "payerResponsibility";
var _pRo = "portRange";
var _pRol = "policyRule";
var _pS = "previousState";
var _pSET = "previousSlotEndTime";
var _pSFRS = "previousSpotFleetRequestState";
var _pSK = "preSharedKey";
var _pSKE = "publicSigningKeyEndpoint";
var _pSKU = "publicSigningKeyUrl";
var _pSe = "permissionState";
var _pSee = "peeringStatus";
var _pSh = "phcSupport";
var _pSr = "principalSet";
var _pSre = "previousStatus";
var _pSri = "priceSchedules";
var _pSro = "protocolSet";
var _pT = "principalType";
var _pTGI = "peerTransitGatewayId";
var _pTr = "provisionTime";
var _pTu = "purchaseToken";
var _pVI = "primaryVpcId";
var _pVS = "propagatingVgwSet";
var _pZI = "parentZoneId";
var _pZN = "parentZoneName";
var _pe = "period";
var _per = "permission";
var _pl = "platform";
var _pla = "placement";
var _po = "port";
var _pr = "protocol";
var _pre = "prefix";
var _pri = "priority";
var _pric = "price";
var _prim = "primary";
var _pro = "progress";
var _prop = "propagation";
var _prov = "provisioned";
var _pu = "public";
var _pur = "purchase";
var _r = "return";
var _rA = "ruleAction";
var _rAE = "remoteAccessEnabled";
var _rAe = "resourceArn";
var _rB = "requestedBy";
var _rBET = "recycleBinEnterTime";
var _rBETe = "recycleBinExitTime";
var _rC = "returnCode";
var _rCA = "resourceConfigurationArn";
var _rCGA = "resourceConfigurationGroupArn";
var _rCS = "resourceComplianceStatus";
var _rCe = "resourceCidr";
var _rCec = "recurringCharges";
var _rD = "restoreDuration";
var _rDAC = "resourceDiscoveryAssociationCount";
var _rDCA = "rdsDbClusterArn";
var _rDI = "ramDiskId";
var _rDIA = "rdsDbInstanceArn";
var _rDN = "rootDeviceName";
var _rDPA = "rdsDbProxyArn";
var _rDS = "resourceDiscoveryStatus";
var _rDT = "rootDeviceType";
var _rE = "responseError";
var _rET = "restoreExpiryTime";
var _rEd = "rdsEndpoint";
var _rEe = "regionEndpoint";
var _rFP = "rekeyFuzzPercentage";
var _rGA = "ruleGroupArn";
var _rGI = "referencedGroupId";
var _rGIe = "referencedGroupInfo";
var _rGROPS = "ruleGroupRuleOptionsPairSet";
var _rGT = "ruleGroupType";
var _rGTPS = "ruleGroupTypePairSet";
var _rHS = "requireHibernateSupport";
var _rI = "reportId";
var _rII = "reservedInstancesId";
var _rIIe = "reservedInstanceId";
var _rILI = "reservedInstancesListingId";
var _rILS = "reservedInstancesListingsSet";
var _rIMI = "reservedInstancesModificationId";
var _rIMS = "reservedInstancesModificationsSet";
var _rINC = "remoteIpv4NetworkCidr";
var _rINCe = "remoteIpv6NetworkCidr";
var _rIOI = "reservedInstancesOfferingId";
var _rIOS = "reservedInstancesOfferingsSet";
var _rIS = "reservedInstancesSet";
var _rIVR = "reservedInstanceValueRollup";
var _rIVS = "reservedInstanceValueSet";
var _rIa = "ramdiskId";
var _rIe = "regionInfo";
var _rIeq = "requesterId";
var _rIes = "resourceId";
var _rIese = "reservationId";
var _rM = "requesterManaged";
var _rMGM = "registeredMulticastGroupMembers";
var _rMGS = "registeredMulticastGroupSources";
var _rMTS = "rekeyMarginTimeSeconds";
var _rN = "ruleNumber";
var _rNII = "registeredNetworkInterfaceIds";
var _rNe = "regionName";
var _rNes = "resourceName";
var _rNo = "roleName";
var _rO = "resourceOwner";
var _rOI = "resourceOwnerId";
var _rOS = "ruleOptionSet";
var _rOSe = "resourceOverlapStatus";
var _rOd = "rdsOptions";
var _rOo = "routeOrigin";
var _rPCO = "requesterPeeringConnectionOptions";
var _rPCS = "returnPathComponentSet";
var _rR = "resourceRegion";
var _rRVT = "replaceRootVolumeTask";
var _rRVTI = "replaceRootVolumeTaskId";
var _rRVTS = "replaceRootVolumeTaskSet";
var _rS = "referenceSet";
var _rSGRS = "revokedSecurityGroupRuleSet";
var _rSS = "regionalSummarySet";
var _rST = "restoreStartTime";
var _rSe = "reportSet";
var _rSep = "replacementStrategy";
var _rSes = "reservationSet";
var _rSeso = "resourceStatement";
var _rSesou = "resourceSet";
var _rSo = "routeSet";
var _rT = "reservationType";
var _rTAI = "routeTableAssociationId";
var _rTI = "routeTableId";
var _rTIS = "routeTableIdSet";
var _rTIe = "requesterTgwInfo";
var _rTR = "routeTableRoute";
var _rTS = "routeTableSet";
var _rTSe = "resourceTagSet";
var _rTSes = "resourceTypeSet";
var _rTV = "remainingTotalValue";
var _rTe = "resourceType";
var _rTel = "releaseTime";
var _rTeq = "requestTime";
var _rTo = "routeTable";
var _rUI = "replaceUnhealthyInstances";
var _rUV = "remainingUpfrontValue";
var _rV = "returnValue";
var _rVI = "referencingVpcId";
var _rVIe = "requesterVpcInfo";
var _rVe = "reservationValue";
var _rWS = "replayWindowSize";
var _ra = "ramdisk";
var _re = "region";
var _rea = "reason";
var _rec = "recurrence";
var _req = "requested";
var _res = "result";
var _reso = "resource";
var _ro = "route";
var _rou = "routes";
var _s = "source";
var _sA = "sourceArn";
var _sAS = "sourceAddressSet";
var _sASu = "suggestedAccountSet";
var _sAZ = "singleAvailabilityZone";
var _sAo = "sourceAddress";
var _sAt = "startupAction";
var _sAu = "supportedArchitectures";
var _sAub = "subnetArn";
var _sB = "s3Bucket";
var _sBM = "supportedBootModes";
var _sC = "serviceConfiguration";
var _sCA = "serverCertificateArn";
var _sCAE = "serialConsoleAccessEnabled";
var _sCB = "sourceCidrBlock";
var _sCR = "sourceCapacityReservation";
var _sCRI = "subnetCidrReservationId";
var _sCRu = "subnetCidrReservation";
var _sCS = "serviceConfigurationSet";
var _sCSIG = "sustainedClockSpeedInGhz";
var _sCc = "scopeCount";
var _sCn = "snapshotConfiguration";
var _sD = "startDate";
var _sDC = "sourceDestCheck";
var _sDIH = "slotDurationInHours";
var _sDLTVS = "successfullyDeletedLaunchTemplateVersionSet";
var _sDS = "spotDatafeedSubscription";
var _sDSe = "serviceDetailSet";
var _sDSn = "snapshotDetailSet";
var _sDp = "spreadDomain";
var _sDu = "subDomain";
var _sEL = "s3ExportLocation";
var _sET = "sampledEndTime";
var _sF = "supportedFeatures";
var _sFCS = "successfulFleetCancellationSet";
var _sFDS = "successfulFleetDeletionSet";
var _sFRC = "spotFleetRequestConfig";
var _sFRCS = "spotFleetRequestConfigSet";
var _sFRI = "spotFleetRequestId";
var _sFRS = "successfulFleetRequestSet";
var _sFRSp = "spotFleetRequestState";
var _sG = "securityGroup";
var _sGA = "securityGroupArn";
var _sGFVS = "securityGroupForVpcSet";
var _sGI = "securityGroupId";
var _sGIS = "securityGroupIdSet";
var _sGIe = "securityGroupIds";
var _sGIec = "securityGroupInfo";
var _sGR = "securityGroupRule";
var _sGRA = "securityGroupRuleArn";
var _sGRI = "securityGroupRuleId";
var _sGRS = "securityGroupRuleSet";
var _sGRSe = "securityGroupReferenceSet";
var _sGRSec = "securityGroupReferencingSupport";
var _sGS = "securityGroupSet";
var _sGVAS = "securityGroupVpcAssociationSet";
var _sGe = "securityGroups";
var _sH = "startHour";
var _sI = "serviceId";
var _sIAS = "scheduledInstanceAvailabilitySet";
var _sIATS = "supportedIpAddressTypeSet";
var _sICRS = "subnetIpv4CidrReservationSet";
var _sICRSu = "subnetIpv6CidrReservationSet";
var _sICSS = "successfulInstanceCreditSpecificationSet";
var _sIGB = "sizeInGB";
var _sII = "sourceInstanceId";
var _sIIc = "scheduledInstanceId";
var _sIIo = "sourceImageId";
var _sIMB = "sizeInMiB";
var _sIP = "staleIpPermissions";
var _sIPE = "staleIpPermissionsEgress";
var _sIPI = "sourceIpamPoolId";
var _sIR = "sourceImageRegion";
var _sIRI = "spotInstanceRequestId";
var _sIRS = "spotInstanceRequestSet";
var _sIS = "scheduledInstanceSet";
var _sISu = "subnetIdSet";
var _sIT = "spotInstanceType";
var _sITRS = "storeImageTaskResultSet";
var _sITi = "singleInstanceType";
var _sIn = "snapshotId";
var _sIo = "sourceIp";
var _sIu = "subnetId";
var _sIub = "subnetIds";
var _sK = "s3Key";
var _sKo = "s3objectKey";
var _sL = "s3Location";
var _sLp = "spreadLevel";
var _sM = "statusMessage";
var _sMPPOLP = "spotMaxPricePercentageOverLowestPrice";
var _sMS = "spotMaintenanceStrategies";
var _sMTP = "spotMaxTotalPrice";
var _sMt = "stateMessage";
var _sN = "serviceName";
var _sNA = "serviceNetworkArn";
var _sNN = "serviceNetworkName";
var _sNS = "serviceNameSet";
var _sNSr = "sriovNetSupport";
var _sNe = "sequenceNumber";
var _sNes = "sessionNumber";
var _sO = "spotOptions";
var _sP = "s3Prefix";
var _sPA = "samlProviderArn";
var _sPHS = "spotPriceHistorySet";
var _sPI = "servicePermissionId";
var _sPIAC = "secondaryPrivateIpAddressCount";
var _sPLS = "sourcePrefixListSet";
var _sPR = "sourcePortRange";
var _sPRS = "sourcePortRangeSet";
var _sPS = "sourcePortSet";
var _sPSS = "spotPlacementScoreSet";
var _sPp = "spotPrice";
var _sQPDS = "successfulQueuedPurchaseDeletionSet";
var _sR = "serviceRegion";
var _sRDT = "supportedRootDeviceTypes";
var _sRO = "staticRoutesOnly";
var _sRS = "supportedRegionSet";
var _sRT = "subnetRouteTable";
var _sRe = "serviceResource";
var _sRo = "sourceResource";
var _sRt = "stateReason";
var _sS = "snapshotSet";
var _sSGS = "staleSecurityGroupSet";
var _sSPU = "selfServicePortalUrl";
var _sSS = "staticSourcesSupport";
var _sSSPA = "selfServiceSamlProviderArn";
var _sST = "sampledStartTime";
var _sSe = "settingSet";
var _sSer = "serviceState";
var _sSo = "sourceSet";
var _sSs = "sseSpecification";
var _sSt = "statusSet";
var _sSu = "subscriptionSet";
var _sSub = "subnetSet";
var _sSup = "supportedStrategies";
var _sSy = "systemStatus";
var _sT = "startTime";
var _sTC = "spotTargetCapacity";
var _sTD = "snapshotTaskDetail";
var _sTFR = "storeTaskFailureReason";
var _sTH = "sessionTimeoutHours";
var _sTR = "stateTransitionReason";
var _sTS = "storeTaskState";
var _sTSS = "snapshotTierStatusSet";
var _sTT = "stateTransitionTime";
var _sTa = "sampleTime";
var _sTe = "serviceType";
var _sTo = "sourceType";
var _sTp = "splitTunnel";
var _sTs = "sseType";
var _sTt = "storageTier";
var _sUC = "supportedUsageClasses";
var _sV = "sourceVpc";
var _sVT = "supportedVirtualizationTypes";
var _sVh = "shellVersion";
var _sVu = "supportedVersions";
var _sWD = "startWeekDay";
var _s_ = "s3";
var _sc = "scope";
var _sco = "score";
var _scop = "scopes";
var _se = "service";
var _si = "size";
var _so = "sockets";
var _sof = "software";
var _st = "state";
var _sta = "status";
var _star = "start";
var _stat = "statistic";
var _sto = "storage";
var _str = "strategy";
var _su = "subnet";
var _sub = "subnets";
var _suc = "successful";
var _succ = "success";
var _t = "tenancy";
var _tAAC = "totalAvailableAddressCount";
var _tAC = "totalAddressCount";
var _tAI = "transferAccountId";
var _tC = "totalCapacity";
var _tCS = "targetCapacitySpecification";
var _tCUT = "targetCapacityUnitType";
var _tCVR = "targetConfigurationValueRollup";
var _tCVS = "targetConfigurationValueSet";
var _tCa = "targetConfiguration";
var _tCar = "targetCapacity";
var _tD = "terminationDelay";
var _tDr = "trafficDirection";
var _tE = "targetEnvironment";
var _tED = "termEndDate";
var _tET = "tcpEstablishedTimeout";
var _tEo = "tokenEndpoint";
var _tFC = "totalFulfilledCapacity";
var _tFMIMB = "totalFpgaMemoryInMiB";
var _tG = "transitGateway";
var _tGA = "transitGatewayAttachments";
var _tGAI = "transitGatewayAttachmentId";
var _tGAP = "transitGatewayAttachmentPropagations";
var _tGAr = "transitGatewayAttachment";
var _tGAra = "transitGatewayArn";
var _tGAran = "transitGatewayAsn";
var _tGArans = "transitGatewayAddress";
var _tGC = "transitGatewayConnect";
var _tGCB = "transitGatewayCidrBlocks";
var _tGCP = "transitGatewayConnectPeer";
var _tGCPI = "transitGatewayConnectPeerId";
var _tGCPS = "transitGatewayConnectPeerSet";
var _tGCS = "transitGatewayConnectSet";
var _tGCa = "targetGroupsConfig";
var _tGI = "transitGatewayId";
var _tGMD = "transitGatewayMulticastDomain";
var _tGMDA = "transitGatewayMulticastDomainArn";
var _tGMDI = "transitGatewayMulticastDomainId";
var _tGMDr = "transitGatewayMulticastDomains";
var _tGMIMB = "totalGpuMemoryInMiB";
var _tGOI = "transitGatewayOwnerId";
var _tGPA = "transitGatewayPeeringAttachment";
var _tGPAr = "transitGatewayPeeringAttachments";
var _tGPLR = "transitGatewayPrefixListReference";
var _tGPLRS = "transitGatewayPrefixListReferenceSet";
var _tGPT = "transitGatewayPolicyTable";
var _tGPTE = "transitGatewayPolicyTableEntries";
var _tGPTI = "transitGatewayPolicyTableId";
var _tGPTr = "transitGatewayPolicyTables";
var _tGRT = "transitGatewayRouteTable";
var _tGRTA = "transitGatewayRouteTableAnnouncement";
var _tGRTAI = "transitGatewayRouteTableAnnouncementId";
var _tGRTAr = "transitGatewayRouteTableAnnouncements";
var _tGRTI = "transitGatewayRouteTableId";
var _tGRTP = "transitGatewayRouteTablePropagations";
var _tGRTR = "transitGatewayRouteTableRoute";
var _tGRTr = "transitGatewayRouteTables";
var _tGS = "transitGatewaySet";
var _tGVA = "transitGatewayVpcAttachment";
var _tGVAr = "transitGatewayVpcAttachments";
var _tGa = "targetGroups";
var _tHP = "totalHourlyPrice";
var _tI = "targetId";
var _tIC = "totalInstanceCount";
var _tICu = "tunnelInsideCidr";
var _tII = "trunkInterfaceId";
var _tIIC = "tunnelInsideIpv6Cidr";
var _tIIV = "tunnelInsideIpVersion";
var _tIMIMB = "totalInferenceMemoryInMiB";
var _tIWE = "terminateInstancesWithExpiration";
var _tIa = "targetIops";
var _tIe = "tenantId";
var _tLSGB = "totalLocalStorageGB";
var _tMAE = "targetMultiAttachEnabled";
var _tMF = "trafficMirrorFilter";
var _tMFI = "trafficMirrorFilterId";
var _tMFR = "trafficMirrorFilterRule";
var _tMFRI = "trafficMirrorFilterRuleId";
var _tMFRS = "trafficMirrorFilterRuleSet";
var _tMFS = "trafficMirrorFilterSet";
var _tMMIMB = "totalMediaMemoryInMiB";
var _tMS = "trafficMirrorSession";
var _tMSI = "trafficMirrorSessionId";
var _tMSS = "trafficMirrorSessionSet";
var _tMT = "trafficMirrorTarget";
var _tMTI = "trafficMirrorTargetId";
var _tMTS = "trafficMirrorTargetSet";
var _tN = "tokenName";
var _tNDMIMB = "totalNeuronDeviceMemoryInMiB";
var _tNI = "targetNetworkId";
var _tOAT = "transferOfferAcceptedTimestamp";
var _tOET = "transferOfferExpirationTimestamp";
var _tOS = "tunnelOptionSet";
var _tP = "transportProtocol";
var _tPC = "threadsPerCore";
var _tPT = "trustProviderType";
var _tPo = "toPort";
var _tRC = "targetResourceCount";
var _tRS = "throughResourceSet";
var _tRSi = "timeRangeSet";
var _tRTI = "targetRouteTableId";
var _tS = "tagSet";
var _tSD = "termStartDate";
var _tSIGB = "totalSizeInGB";
var _tSIH = "totalScheduledInstanceHours";
var _tSS = "tagSpecificationSet";
var _tST = "tieringStartTime";
var _tSTa = "taskStartTime";
var _tSa = "targetSubnet";
var _tSar = "targetSize";
var _tSas = "taskState";
var _tSp = "tpmSupport";
var _tT = "trafficType";
var _tTC = "totalTargetCapacity";
var _tTGAI = "transportTransitGatewayAttachmentId";
var _tTa = "targetThroughput";
var _tTr = "transferType";
var _tUP = "totalUpfrontPrice";
var _tV = "tokenValue";
var _tVC = "totalVCpus";
var _tVT = "targetVolumeType";
var _ta = "tags";
var _tag = "tag";
var _te = "term";
var _th = "throughput";
var _ti = "timestamp";
var _tie = "tier";
var _to = "to";
var _ty = "type";
var _u = "unsuccessful";
var _uB = "userBucket";
var _uD = "uefiData";
var _uDLTVS = "unsuccessfullyDeletedLaunchTemplateVersionSet";
var _uDp = "updatedDate";
var _uDpd = "updateDate";
var _uDs = "userData";
var _uF = "upfrontFee";
var _uFDS = "unsuccessfulFleetDeletionSet";
var _uFRS = "unsuccessfulFleetRequestSet";
var _uI = "userId";
var _uIA = "unassignedIpv6Addresses";
var _uIC = "usedInstanceCount";
var _uICSS = "unsuccessfulInstanceCreditSpecificationSet";
var _uIE = "userInfoEndpoint";
var _uIPS = "unknownIpPermissionSet";
var _uIPSn = "unassignedIpv6PrefixSet";
var _uLI = "useLongIds";
var _uLIA = "useLongIdsAggregated";
var _uO = "usageOperation";
var _uOUT = "usageOperationUpdateTime";
var _uP = "upfrontPrice";
var _uPS = "uploadPolicySignature";
var _uPp = "uploadPolicy";
var _uPs = "usagePrice";
var _uRBOI = "unusedReservationBillingOwnerId";
var _uS = "usageStrategy";
var _uST = "udpStreamTimeout";
var _uT = "updateTime";
var _uTP = "userTrustProvider";
var _uTPT = "userTrustProviderType";
var _uTd = "udpTimeout";
var _ur = "url";
var _us = "username";
var _v = "value";
var _vAE = "verifiedAccessEndpoint";
var _vAEI = "verifiedAccessEndpointId";
var _vAES = "verifiedAccessEndpointSet";
var _vAETD = "verifiedAccessEndpointTargetDns";
var _vAETIA = "verifiedAccessEndpointTargetIpAddress";
var _vAETS = "verifiedAccessEndpointTargetSet";
var _vAG = "verifiedAccessGroup";
var _vAGA = "verifiedAccessGroupArn";
var _vAGI = "verifiedAccessGroupId";
var _vAGS = "verifiedAccessGroupSet";
var _vAI = "verifiedAccessInstance";
var _vAII = "verifiedAccessInstanceId";
var _vAIS = "verifiedAccessInstanceSet";
var _vATP = "verifiedAccessTrustProvider";
var _vATPI = "verifiedAccessTrustProviderId";
var _vATPS = "verifiedAccessTrustProviderSet";
var _vBPAE = "vpcBlockPublicAccessExclusion";
var _vBPAES = "vpcBlockPublicAccessExclusionSet";
var _vBPAO = "vpcBlockPublicAccessOptions";
var _vC = "vpnConnection";
var _vCC = "vCpuCount";
var _vCDSC = "vpnConnectionDeviceSampleConfiguration";
var _vCDTI = "vpnConnectionDeviceTypeId";
var _vCDTS = "vpnConnectionDeviceTypeSet";
var _vCI = "vpnConnectionId";
var _vCIp = "vCpuInfo";
var _vCS = "vpnConnectionSet";
var _vCa = "validCores";
var _vD = "versionDescription";
var _vE = "vpcEndpoint";
var _vEAS = "vpcEndpointAssociationSet";
var _vECI = "vpcEndpointConnectionId";
var _vECS = "vpcEndpointConnectionSet";
var _vEI = "vpcEndpointId";
var _vEO = "vpcEndpointOwner";
var _vEPS = "vpcEndpointPolicySupported";
var _vER = "vpcEndpointRegion";
var _vES = "vpcEndpointService";
var _vESp = "vpcEndpointSet";
var _vESpc = "vpcEndpointState";
var _vESpn = "vpnEcmpSupport";
var _vET = "vpcEndpointType";
var _vF = "validFrom";
var _vFR = "validationFailureReason";
var _vG = "vpnGateway";
var _vGI = "vpnGatewayId";
var _vGS = "vpnGatewaySet";
var _vI = "vpcId";
var _vIl = "vlanId";
var _vIo = "volumeId";
var _vM = "volumeModification";
var _vMS = "volumeModificationSet";
var _vN = "virtualName";
var _vNI = "virtualNetworkId";
var _vNe = "versionNumber";
var _vOI = "volumeOwnerId";
var _vOIp = "vpcOwnerId";
var _vP = "vpnProtocol";
var _vPC = "vpcPeeringConnection";
var _vPCI = "vpcPeeringConnectionId";
var _vPCS = "vpcPeeringConnectionSet";
var _vPp = "vpnPort";
var _vS = "volumeSet";
var _vSS = "volumeStatusSet";
var _vSa = "valueSet";
var _vSo = "volumeSize";
var _vSol = "volumeStatus";
var _vSp = "vpcSet";
var _vT = "volumeType";
var _vTOIA = "vpnTunnelOutsideIpAddress";
var _vTPC = "validThreadsPerCore";
var _vTg = "vgwTelemetry";
var _vTi = "virtualizationType";
var _vU = "validUntil";
var _ve = "version";
var _ven = "vendor";
var _vl = "vlan";
var _vo = "volumes";
var _vol = "volume";
var _vp = "vpc";
var _vpc = "vpcs";
var _w = "warning";
var _wC = "weightedCapacity";
var _wM = "warningMessage";
var _we = "weight";
var _zI = "zoneId";
var _zN = "zoneName";
var _zS = "zoneState";
var _zT = "zoneType";
var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
var loadEc2ErrorCode = (output, data) => {
  var _a2;
  if (((_a2 = data.Errors.Error) == null ? void 0 : _a2.Code) !== void 0) {
    return data.Errors.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptAddressTransferCommand.js
var AcceptAddressTransferCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptAddressTransfer", {}).n("EC2Client", "AcceptAddressTransferCommand").f(void 0, void 0).ser(se_AcceptAddressTransferCommand).de(de_AcceptAddressTransferCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptCapacityReservationBillingOwnershipCommand.js
var AcceptCapacityReservationBillingOwnershipCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptCapacityReservationBillingOwnership", {}).n("EC2Client", "AcceptCapacityReservationBillingOwnershipCommand").f(void 0, void 0).ser(se_AcceptCapacityReservationBillingOwnershipCommand).de(de_AcceptCapacityReservationBillingOwnershipCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptReservedInstancesExchangeQuoteCommand.js
var AcceptReservedInstancesExchangeQuoteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptReservedInstancesExchangeQuote", {}).n("EC2Client", "AcceptReservedInstancesExchangeQuoteCommand").f(void 0, void 0).ser(se_AcceptReservedInstancesExchangeQuoteCommand).de(de_AcceptReservedInstancesExchangeQuoteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptTransitGatewayMulticastDomainAssociationsCommand.js
var AcceptTransitGatewayMulticastDomainAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptTransitGatewayMulticastDomainAssociations", {}).n("EC2Client", "AcceptTransitGatewayMulticastDomainAssociationsCommand").f(void 0, void 0).ser(se_AcceptTransitGatewayMulticastDomainAssociationsCommand).de(de_AcceptTransitGatewayMulticastDomainAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptTransitGatewayPeeringAttachmentCommand.js
var AcceptTransitGatewayPeeringAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptTransitGatewayPeeringAttachment", {}).n("EC2Client", "AcceptTransitGatewayPeeringAttachmentCommand").f(void 0, void 0).ser(se_AcceptTransitGatewayPeeringAttachmentCommand).de(de_AcceptTransitGatewayPeeringAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptTransitGatewayVpcAttachmentCommand.js
var AcceptTransitGatewayVpcAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptTransitGatewayVpcAttachment", {}).n("EC2Client", "AcceptTransitGatewayVpcAttachmentCommand").f(void 0, void 0).ser(se_AcceptTransitGatewayVpcAttachmentCommand).de(de_AcceptTransitGatewayVpcAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptVpcEndpointConnectionsCommand.js
var AcceptVpcEndpointConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptVpcEndpointConnections", {}).n("EC2Client", "AcceptVpcEndpointConnectionsCommand").f(void 0, void 0).ser(se_AcceptVpcEndpointConnectionsCommand).de(de_AcceptVpcEndpointConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AcceptVpcPeeringConnectionCommand.js
var AcceptVpcPeeringConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AcceptVpcPeeringConnection", {}).n("EC2Client", "AcceptVpcPeeringConnectionCommand").f(void 0, void 0).ser(se_AcceptVpcPeeringConnectionCommand).de(de_AcceptVpcPeeringConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AdvertiseByoipCidrCommand.js
var AdvertiseByoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AdvertiseByoipCidr", {}).n("EC2Client", "AdvertiseByoipCidrCommand").f(void 0, void 0).ser(se_AdvertiseByoipCidrCommand).de(de_AdvertiseByoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AllocateAddressCommand.js
var AllocateAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AllocateAddress", {}).n("EC2Client", "AllocateAddressCommand").f(void 0, void 0).ser(se_AllocateAddressCommand).de(de_AllocateAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AllocateHostsCommand.js
var AllocateHostsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AllocateHosts", {}).n("EC2Client", "AllocateHostsCommand").f(void 0, void 0).ser(se_AllocateHostsCommand).de(de_AllocateHostsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AllocateIpamPoolCidrCommand.js
var AllocateIpamPoolCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AllocateIpamPoolCidr", {}).n("EC2Client", "AllocateIpamPoolCidrCommand").f(void 0, void 0).ser(se_AllocateIpamPoolCidrCommand).de(de_AllocateIpamPoolCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ApplySecurityGroupsToClientVpnTargetNetworkCommand.js
var ApplySecurityGroupsToClientVpnTargetNetworkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ApplySecurityGroupsToClientVpnTargetNetwork", {}).n("EC2Client", "ApplySecurityGroupsToClientVpnTargetNetworkCommand").f(void 0, void 0).ser(se_ApplySecurityGroupsToClientVpnTargetNetworkCommand).de(de_ApplySecurityGroupsToClientVpnTargetNetworkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssignIpv6AddressesCommand.js
var AssignIpv6AddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssignIpv6Addresses", {}).n("EC2Client", "AssignIpv6AddressesCommand").f(void 0, void 0).ser(se_AssignIpv6AddressesCommand).de(de_AssignIpv6AddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssignPrivateIpAddressesCommand.js
var AssignPrivateIpAddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssignPrivateIpAddresses", {}).n("EC2Client", "AssignPrivateIpAddressesCommand").f(void 0, void 0).ser(se_AssignPrivateIpAddressesCommand).de(de_AssignPrivateIpAddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssignPrivateNatGatewayAddressCommand.js
var AssignPrivateNatGatewayAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssignPrivateNatGatewayAddress", {}).n("EC2Client", "AssignPrivateNatGatewayAddressCommand").f(void 0, void 0).ser(se_AssignPrivateNatGatewayAddressCommand).de(de_AssignPrivateNatGatewayAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateAddressCommand.js
var AssociateAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateAddress", {}).n("EC2Client", "AssociateAddressCommand").f(void 0, void 0).ser(se_AssociateAddressCommand).de(de_AssociateAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateCapacityReservationBillingOwnerCommand.js
var AssociateCapacityReservationBillingOwnerCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateCapacityReservationBillingOwner", {}).n("EC2Client", "AssociateCapacityReservationBillingOwnerCommand").f(void 0, void 0).ser(se_AssociateCapacityReservationBillingOwnerCommand).de(de_AssociateCapacityReservationBillingOwnerCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateClientVpnTargetNetworkCommand.js
var AssociateClientVpnTargetNetworkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateClientVpnTargetNetwork", {}).n("EC2Client", "AssociateClientVpnTargetNetworkCommand").f(void 0, void 0).ser(se_AssociateClientVpnTargetNetworkCommand).de(de_AssociateClientVpnTargetNetworkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateDhcpOptionsCommand.js
var AssociateDhcpOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateDhcpOptions", {}).n("EC2Client", "AssociateDhcpOptionsCommand").f(void 0, void 0).ser(se_AssociateDhcpOptionsCommand).de(de_AssociateDhcpOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateEnclaveCertificateIamRoleCommand.js
var AssociateEnclaveCertificateIamRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateEnclaveCertificateIamRole", {}).n("EC2Client", "AssociateEnclaveCertificateIamRoleCommand").f(void 0, void 0).ser(se_AssociateEnclaveCertificateIamRoleCommand).de(de_AssociateEnclaveCertificateIamRoleCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateIamInstanceProfileCommand.js
var AssociateIamInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateIamInstanceProfile", {}).n("EC2Client", "AssociateIamInstanceProfileCommand").f(void 0, void 0).ser(se_AssociateIamInstanceProfileCommand).de(de_AssociateIamInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateInstanceEventWindowCommand.js
var AssociateInstanceEventWindowCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateInstanceEventWindow", {}).n("EC2Client", "AssociateInstanceEventWindowCommand").f(void 0, void 0).ser(se_AssociateInstanceEventWindowCommand).de(de_AssociateInstanceEventWindowCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateIpamByoasnCommand.js
var AssociateIpamByoasnCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateIpamByoasn", {}).n("EC2Client", "AssociateIpamByoasnCommand").f(void 0, void 0).ser(se_AssociateIpamByoasnCommand).de(de_AssociateIpamByoasnCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateIpamResourceDiscoveryCommand.js
var AssociateIpamResourceDiscoveryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateIpamResourceDiscovery", {}).n("EC2Client", "AssociateIpamResourceDiscoveryCommand").f(void 0, void 0).ser(se_AssociateIpamResourceDiscoveryCommand).de(de_AssociateIpamResourceDiscoveryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateNatGatewayAddressCommand.js
var AssociateNatGatewayAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateNatGatewayAddress", {}).n("EC2Client", "AssociateNatGatewayAddressCommand").f(void 0, void 0).ser(se_AssociateNatGatewayAddressCommand).de(de_AssociateNatGatewayAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateRouteTableCommand.js
var AssociateRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateRouteTable", {}).n("EC2Client", "AssociateRouteTableCommand").f(void 0, void 0).ser(se_AssociateRouteTableCommand).de(de_AssociateRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateSecurityGroupVpcCommand.js
var AssociateSecurityGroupVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateSecurityGroupVpc", {}).n("EC2Client", "AssociateSecurityGroupVpcCommand").f(void 0, void 0).ser(se_AssociateSecurityGroupVpcCommand).de(de_AssociateSecurityGroupVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateSubnetCidrBlockCommand.js
var AssociateSubnetCidrBlockCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateSubnetCidrBlock", {}).n("EC2Client", "AssociateSubnetCidrBlockCommand").f(void 0, void 0).ser(se_AssociateSubnetCidrBlockCommand).de(de_AssociateSubnetCidrBlockCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateTransitGatewayMulticastDomainCommand.js
var AssociateTransitGatewayMulticastDomainCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateTransitGatewayMulticastDomain", {}).n("EC2Client", "AssociateTransitGatewayMulticastDomainCommand").f(void 0, void 0).ser(se_AssociateTransitGatewayMulticastDomainCommand).de(de_AssociateTransitGatewayMulticastDomainCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateTransitGatewayPolicyTableCommand.js
var AssociateTransitGatewayPolicyTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateTransitGatewayPolicyTable", {}).n("EC2Client", "AssociateTransitGatewayPolicyTableCommand").f(void 0, void 0).ser(se_AssociateTransitGatewayPolicyTableCommand).de(de_AssociateTransitGatewayPolicyTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateTransitGatewayRouteTableCommand.js
var AssociateTransitGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateTransitGatewayRouteTable", {}).n("EC2Client", "AssociateTransitGatewayRouteTableCommand").f(void 0, void 0).ser(se_AssociateTransitGatewayRouteTableCommand).de(de_AssociateTransitGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateTrunkInterfaceCommand.js
var AssociateTrunkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateTrunkInterface", {}).n("EC2Client", "AssociateTrunkInterfaceCommand").f(void 0, void 0).ser(se_AssociateTrunkInterfaceCommand).de(de_AssociateTrunkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AssociateVpcCidrBlockCommand.js
var AssociateVpcCidrBlockCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AssociateVpcCidrBlock", {}).n("EC2Client", "AssociateVpcCidrBlockCommand").f(void 0, void 0).ser(se_AssociateVpcCidrBlockCommand).de(de_AssociateVpcCidrBlockCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachClassicLinkVpcCommand.js
var AttachClassicLinkVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachClassicLinkVpc", {}).n("EC2Client", "AttachClassicLinkVpcCommand").f(void 0, void 0).ser(se_AttachClassicLinkVpcCommand).de(de_AttachClassicLinkVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachInternetGatewayCommand.js
var AttachInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachInternetGateway", {}).n("EC2Client", "AttachInternetGatewayCommand").f(void 0, void 0).ser(se_AttachInternetGatewayCommand).de(de_AttachInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachNetworkInterfaceCommand.js
var AttachNetworkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachNetworkInterface", {}).n("EC2Client", "AttachNetworkInterfaceCommand").f(void 0, void 0).ser(se_AttachNetworkInterfaceCommand).de(de_AttachNetworkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_0.js
var AcceleratorManufacturer = {
  AMAZON_WEB_SERVICES: "amazon-web-services",
  AMD: "amd",
  HABANA: "habana",
  NVIDIA: "nvidia",
  XILINX: "xilinx"
};
var AcceleratorName = {
  A100: "a100",
  A10G: "a10g",
  H100: "h100",
  INFERENTIA: "inferentia",
  K520: "k520",
  K80: "k80",
  M60: "m60",
  RADEON_PRO_V520: "radeon-pro-v520",
  T4: "t4",
  T4G: "t4g",
  V100: "v100",
  VU9P: "vu9p"
};
var AcceleratorType = {
  FPGA: "fpga",
  GPU: "gpu",
  INFERENCE: "inference"
};
var ResourceType = {
  capacity_reservation: "capacity-reservation",
  capacity_reservation_fleet: "capacity-reservation-fleet",
  carrier_gateway: "carrier-gateway",
  client_vpn_endpoint: "client-vpn-endpoint",
  coip_pool: "coip-pool",
  customer_gateway: "customer-gateway",
  declarative_policies_report: "declarative-policies-report",
  dedicated_host: "dedicated-host",
  dhcp_options: "dhcp-options",
  egress_only_internet_gateway: "egress-only-internet-gateway",
  elastic_gpu: "elastic-gpu",
  elastic_ip: "elastic-ip",
  export_image_task: "export-image-task",
  export_instance_task: "export-instance-task",
  fleet: "fleet",
  fpga_image: "fpga-image",
  host_reservation: "host-reservation",
  image: "image",
  import_image_task: "import-image-task",
  import_snapshot_task: "import-snapshot-task",
  instance: "instance",
  instance_connect_endpoint: "instance-connect-endpoint",
  instance_event_window: "instance-event-window",
  internet_gateway: "internet-gateway",
  ipam: "ipam",
  ipam_external_resource_verification_token: "ipam-external-resource-verification-token",
  ipam_pool: "ipam-pool",
  ipam_resource_discovery: "ipam-resource-discovery",
  ipam_resource_discovery_association: "ipam-resource-discovery-association",
  ipam_scope: "ipam-scope",
  ipv4pool_ec2: "ipv4pool-ec2",
  ipv6pool_ec2: "ipv6pool-ec2",
  key_pair: "key-pair",
  launch_template: "launch-template",
  local_gateway: "local-gateway",
  local_gateway_route_table: "local-gateway-route-table",
  local_gateway_route_table_virtual_interface_group_association: "local-gateway-route-table-virtual-interface-group-association",
  local_gateway_route_table_vpc_association: "local-gateway-route-table-vpc-association",
  local_gateway_virtual_interface: "local-gateway-virtual-interface",
  local_gateway_virtual_interface_group: "local-gateway-virtual-interface-group",
  natgateway: "natgateway",
  network_acl: "network-acl",
  network_insights_access_scope: "network-insights-access-scope",
  network_insights_access_scope_analysis: "network-insights-access-scope-analysis",
  network_insights_analysis: "network-insights-analysis",
  network_insights_path: "network-insights-path",
  network_interface: "network-interface",
  placement_group: "placement-group",
  prefix_list: "prefix-list",
  replace_root_volume_task: "replace-root-volume-task",
  reserved_instances: "reserved-instances",
  route_table: "route-table",
  security_group: "security-group",
  security_group_rule: "security-group-rule",
  snapshot: "snapshot",
  spot_fleet_request: "spot-fleet-request",
  spot_instances_request: "spot-instances-request",
  subnet: "subnet",
  subnet_cidr_reservation: "subnet-cidr-reservation",
  traffic_mirror_filter: "traffic-mirror-filter",
  traffic_mirror_filter_rule: "traffic-mirror-filter-rule",
  traffic_mirror_session: "traffic-mirror-session",
  traffic_mirror_target: "traffic-mirror-target",
  transit_gateway: "transit-gateway",
  transit_gateway_attachment: "transit-gateway-attachment",
  transit_gateway_connect_peer: "transit-gateway-connect-peer",
  transit_gateway_multicast_domain: "transit-gateway-multicast-domain",
  transit_gateway_policy_table: "transit-gateway-policy-table",
  transit_gateway_route_table: "transit-gateway-route-table",
  transit_gateway_route_table_announcement: "transit-gateway-route-table-announcement",
  verified_access_endpoint: "verified-access-endpoint",
  verified_access_endpoint_target: "verified-access-endpoint-target",
  verified_access_group: "verified-access-group",
  verified_access_instance: "verified-access-instance",
  verified_access_policy: "verified-access-policy",
  verified_access_trust_provider: "verified-access-trust-provider",
  volume: "volume",
  vpc: "vpc",
  vpc_block_public_access_exclusion: "vpc-block-public-access-exclusion",
  vpc_endpoint: "vpc-endpoint",
  vpc_endpoint_connection: "vpc-endpoint-connection",
  vpc_endpoint_connection_device_type: "vpc-endpoint-connection-device-type",
  vpc_endpoint_service: "vpc-endpoint-service",
  vpc_endpoint_service_permission: "vpc-endpoint-service-permission",
  vpc_flow_log: "vpc-flow-log",
  vpc_peering_connection: "vpc-peering-connection",
  vpn_connection: "vpn-connection",
  vpn_connection_device_type: "vpn-connection-device-type",
  vpn_gateway: "vpn-gateway"
};
var AddressTransferStatus = {
  accepted: "accepted",
  disabled: "disabled",
  pending: "pending"
};
var TransitGatewayAttachmentResourceType = {
  connect: "connect",
  direct_connect_gateway: "direct-connect-gateway",
  peering: "peering",
  tgw_peering: "tgw-peering",
  vpc: "vpc",
  vpn: "vpn"
};
var TransitGatewayMulitcastDomainAssociationState = {
  associated: "associated",
  associating: "associating",
  disassociated: "disassociated",
  disassociating: "disassociating",
  failed: "failed",
  pendingAcceptance: "pendingAcceptance",
  rejected: "rejected"
};
var DynamicRoutingValue = {
  disable: "disable",
  enable: "enable"
};
var TransitGatewayAttachmentState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  failed: "failed",
  failing: "failing",
  initiating: "initiating",
  initiatingRequest: "initiatingRequest",
  modifying: "modifying",
  pending: "pending",
  pendingAcceptance: "pendingAcceptance",
  rejected: "rejected",
  rejecting: "rejecting",
  rollingBack: "rollingBack"
};
var ApplianceModeSupportValue = {
  disable: "disable",
  enable: "enable"
};
var DnsSupportValue = {
  disable: "disable",
  enable: "enable"
};
var Ipv6SupportValue = {
  disable: "disable",
  enable: "enable"
};
var SecurityGroupReferencingSupportValue = {
  disable: "disable",
  enable: "enable"
};
var VpcPeeringConnectionStateReasonCode = {
  active: "active",
  deleted: "deleted",
  deleting: "deleting",
  expired: "expired",
  failed: "failed",
  initiating_request: "initiating-request",
  pending_acceptance: "pending-acceptance",
  provisioning: "provisioning",
  rejected: "rejected"
};
var Protocol = {
  tcp: "tcp",
  udp: "udp"
};
var AccountAttributeName = {
  default_vpc: "default-vpc",
  supported_platforms: "supported-platforms"
};
var InstanceHealthStatus = {
  HEALTHY_STATUS: "healthy",
  UNHEALTHY_STATUS: "unhealthy"
};
var ActivityStatus = {
  ERROR: "error",
  FULFILLED: "fulfilled",
  PENDING_FULFILLMENT: "pending_fulfillment",
  PENDING_TERMINATION: "pending_termination"
};
var PrincipalType = {
  Account: "Account",
  All: "All",
  OrganizationUnit: "OrganizationUnit",
  Role: "Role",
  Service: "Service",
  User: "User"
};
var DomainType = {
  standard: "standard",
  vpc: "vpc"
};
var AddressAttributeName = {
  domain_name: "domain-name"
};
var AddressFamily = {
  ipv4: "ipv4",
  ipv6: "ipv6"
};
var AsnAssociationState = {
  associated: "associated",
  disassociated: "disassociated",
  failed_association: "failed-association",
  failed_disassociation: "failed-disassociation",
  pending_association: "pending-association",
  pending_disassociation: "pending-disassociation"
};
var ByoipCidrState = {
  advertised: "advertised",
  deprovisioned: "deprovisioned",
  failed_deprovision: "failed-deprovision",
  failed_provision: "failed-provision",
  pending_deprovision: "pending-deprovision",
  pending_provision: "pending-provision",
  provisioned: "provisioned",
  provisioned_not_publicly_advertisable: "provisioned-not-publicly-advertisable"
};
var Affinity = {
  default: "default",
  host: "host"
};
var AutoPlacement = {
  off: "off",
  on: "on"
};
var HostMaintenance = {
  off: "off",
  on: "on"
};
var HostRecovery = {
  off: "off",
  on: "on"
};
var IpamPoolAllocationResourceType = {
  custom: "custom",
  ec2_public_ipv4_pool: "ec2-public-ipv4-pool",
  eip: "eip",
  ipam_pool: "ipam-pool",
  subnet: "subnet",
  vpc: "vpc"
};
var AllocationState = {
  available: "available",
  pending: "pending",
  permanent_failure: "permanent-failure",
  released: "released",
  released_permanent_failure: "released-permanent-failure",
  under_assessment: "under-assessment"
};
var AllocationStrategy = {
  CAPACITY_OPTIMIZED: "capacityOptimized",
  CAPACITY_OPTIMIZED_PRIORITIZED: "capacityOptimizedPrioritized",
  DIVERSIFIED: "diversified",
  LOWEST_PRICE: "lowestPrice",
  PRICE_CAPACITY_OPTIMIZED: "priceCapacityOptimized"
};
var AllocationType = {
  used: "used"
};
var AllowedImagesSettingsDisabledState = {
  disabled: "disabled"
};
var AllowedImagesSettingsEnabledState = {
  audit_mode: "audit-mode",
  enabled: "enabled"
};
var AllowsMultipleInstanceTypes = {
  off: "off",
  on: "on"
};
var NatGatewayAddressStatus = {
  ASSIGNING: "assigning",
  ASSOCIATING: "associating",
  DISASSOCIATING: "disassociating",
  FAILED: "failed",
  SUCCEEDED: "succeeded",
  UNASSIGNING: "unassigning"
};
var AssociationStatusCode = {
  associated: "associated",
  associating: "associating",
  association_failed: "association-failed",
  disassociated: "disassociated",
  disassociating: "disassociating"
};
var IamInstanceProfileAssociationState = {
  ASSOCIATED: "associated",
  ASSOCIATING: "associating",
  DISASSOCIATED: "disassociated",
  DISASSOCIATING: "disassociating"
};
var InstanceEventWindowState = {
  active: "active",
  creating: "creating",
  deleted: "deleted",
  deleting: "deleting"
};
var WeekDay = {
  friday: "friday",
  monday: "monday",
  saturday: "saturday",
  sunday: "sunday",
  thursday: "thursday",
  tuesday: "tuesday",
  wednesday: "wednesday"
};
var IpamAssociatedResourceDiscoveryStatus = {
  ACTIVE: "active",
  NOT_FOUND: "not-found"
};
var IpamResourceDiscoveryAssociationState = {
  ASSOCIATE_COMPLETE: "associate-complete",
  ASSOCIATE_FAILED: "associate-failed",
  ASSOCIATE_IN_PROGRESS: "associate-in-progress",
  DISASSOCIATE_COMPLETE: "disassociate-complete",
  DISASSOCIATE_FAILED: "disassociate-failed",
  DISASSOCIATE_IN_PROGRESS: "disassociate-in-progress",
  ISOLATE_COMPLETE: "isolate-complete",
  ISOLATE_IN_PROGRESS: "isolate-in-progress",
  RESTORE_IN_PROGRESS: "restore-in-progress"
};
var RouteTableAssociationStateCode = {
  associated: "associated",
  associating: "associating",
  disassociated: "disassociated",
  disassociating: "disassociating",
  failed: "failed"
};
var SecurityGroupVpcAssociationState = {
  associated: "associated",
  associating: "associating",
  association_failed: "association-failed",
  disassociated: "disassociated",
  disassociating: "disassociating",
  disassociation_failed: "disassociation-failed"
};
var IpSource = {
  amazon: "amazon",
  byoip: "byoip",
  none: "none"
};
var Ipv6AddressAttribute = {
  private: "private",
  public: "public"
};
var SubnetCidrBlockStateCode = {
  associated: "associated",
  associating: "associating",
  disassociated: "disassociated",
  disassociating: "disassociating",
  failed: "failed",
  failing: "failing"
};
var TransitGatewayAssociationState = {
  associated: "associated",
  associating: "associating",
  disassociated: "disassociated",
  disassociating: "disassociating"
};
var InterfaceProtocolType = {
  GRE: "GRE",
  VLAN: "VLAN"
};
var VpcCidrBlockStateCode = {
  associated: "associated",
  associating: "associating",
  disassociated: "disassociated",
  disassociating: "disassociating",
  failed: "failed",
  failing: "failing"
};
var DeviceTrustProviderType = {
  crowdstrike: "crowdstrike",
  jamf: "jamf",
  jumpcloud: "jumpcloud"
};
var TrustProviderType = {
  device: "device",
  user: "user"
};
var UserTrustProviderType = {
  iam_identity_center: "iam-identity-center",
  oidc: "oidc"
};
var VolumeAttachmentState = {
  attached: "attached",
  attaching: "attaching",
  busy: "busy",
  detached: "detached",
  detaching: "detaching"
};
var AttachmentStatus = {
  attached: "attached",
  attaching: "attaching",
  detached: "detached",
  detaching: "detaching"
};
var ClientVpnAuthorizationRuleStatusCode = {
  active: "active",
  authorizing: "authorizing",
  failed: "failed",
  revoking: "revoking"
};
var BundleTaskState = {
  bundling: "bundling",
  cancelling: "cancelling",
  complete: "complete",
  failed: "failed",
  pending: "pending",
  storing: "storing",
  waiting_for_shutdown: "waiting-for-shutdown"
};
var CapacityReservationFleetState = {
  ACTIVE: "active",
  CANCELLED: "cancelled",
  CANCELLING: "cancelling",
  EXPIRED: "expired",
  EXPIRING: "expiring",
  FAILED: "failed",
  MODIFYING: "modifying",
  PARTIALLY_FULFILLED: "partially_fulfilled",
  SUBMITTED: "submitted"
};
var ListingState = {
  available: "available",
  cancelled: "cancelled",
  pending: "pending",
  sold: "sold"
};
var CurrencyCodeValues = {
  USD: "USD"
};
var ListingStatus = {
  active: "active",
  cancelled: "cancelled",
  closed: "closed",
  pending: "pending"
};
var BatchState = {
  ACTIVE: "active",
  CANCELLED: "cancelled",
  CANCELLED_RUNNING: "cancelled_running",
  CANCELLED_TERMINATING_INSTANCES: "cancelled_terminating",
  FAILED: "failed",
  MODIFYING: "modifying",
  SUBMITTED: "submitted"
};
var CancelBatchErrorCode = {
  FLEET_REQUEST_ID_DOES_NOT_EXIST: "fleetRequestIdDoesNotExist",
  FLEET_REQUEST_ID_MALFORMED: "fleetRequestIdMalformed",
  FLEET_REQUEST_NOT_IN_CANCELLABLE_STATE: "fleetRequestNotInCancellableState",
  UNEXPECTED_ERROR: "unexpectedError"
};
var CancelSpotInstanceRequestState = {
  active: "active",
  cancelled: "cancelled",
  closed: "closed",
  completed: "completed",
  open: "open"
};
var CapacityReservationDeliveryPreference = {
  FIXED: "fixed",
  INCREMENTAL: "incremental"
};
var OidcOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var VerifiedAccessTrustProviderFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.OidcOptions && { OidcOptions: OidcOptionsFilterSensitiveLog(obj.OidcOptions) }
});
var AttachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProvider && {
    VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider)
  }
});
var S3StorageFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UploadPolicySignature && { UploadPolicySignature: SENSITIVE_STRING }
});
var StorageFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.S3 && { S3: S3StorageFilterSensitiveLog(obj.S3) }
});
var BundleInstanceRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Storage && { Storage: StorageFilterSensitiveLog(obj.Storage) }
});
var BundleTaskFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Storage && { Storage: StorageFilterSensitiveLog(obj.Storage) }
});
var BundleInstanceResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.BundleTask && { BundleTask: BundleTaskFilterSensitiveLog(obj.BundleTask) }
});
var CancelBundleTaskResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.BundleTask && { BundleTask: BundleTaskFilterSensitiveLog(obj.BundleTask) }
});
var CopySnapshotRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PresignedUrl && { PresignedUrl: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachVerifiedAccessTrustProviderCommand.js
var AttachVerifiedAccessTrustProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachVerifiedAccessTrustProvider", {}).n("EC2Client", "AttachVerifiedAccessTrustProviderCommand").f(void 0, AttachVerifiedAccessTrustProviderResultFilterSensitiveLog).ser(se_AttachVerifiedAccessTrustProviderCommand).de(de_AttachVerifiedAccessTrustProviderCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachVolumeCommand.js
var AttachVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachVolume", {}).n("EC2Client", "AttachVolumeCommand").f(void 0, void 0).ser(se_AttachVolumeCommand).de(de_AttachVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AttachVpnGatewayCommand.js
var AttachVpnGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AttachVpnGateway", {}).n("EC2Client", "AttachVpnGatewayCommand").f(void 0, void 0).ser(se_AttachVpnGatewayCommand).de(de_AttachVpnGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AuthorizeClientVpnIngressCommand.js
var AuthorizeClientVpnIngressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AuthorizeClientVpnIngress", {}).n("EC2Client", "AuthorizeClientVpnIngressCommand").f(void 0, void 0).ser(se_AuthorizeClientVpnIngressCommand).de(de_AuthorizeClientVpnIngressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AuthorizeSecurityGroupEgressCommand.js
var AuthorizeSecurityGroupEgressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AuthorizeSecurityGroupEgress", {}).n("EC2Client", "AuthorizeSecurityGroupEgressCommand").f(void 0, void 0).ser(se_AuthorizeSecurityGroupEgressCommand).de(de_AuthorizeSecurityGroupEgressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/AuthorizeSecurityGroupIngressCommand.js
var AuthorizeSecurityGroupIngressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "AuthorizeSecurityGroupIngress", {}).n("EC2Client", "AuthorizeSecurityGroupIngressCommand").f(void 0, void 0).ser(se_AuthorizeSecurityGroupIngressCommand).de(de_AuthorizeSecurityGroupIngressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/BundleInstanceCommand.js
var BundleInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "BundleInstance", {}).n("EC2Client", "BundleInstanceCommand").f(BundleInstanceRequestFilterSensitiveLog, BundleInstanceResultFilterSensitiveLog).ser(se_BundleInstanceCommand).de(de_BundleInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelBundleTaskCommand.js
var CancelBundleTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelBundleTask", {}).n("EC2Client", "CancelBundleTaskCommand").f(void 0, CancelBundleTaskResultFilterSensitiveLog).ser(se_CancelBundleTaskCommand).de(de_CancelBundleTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelCapacityReservationCommand.js
var CancelCapacityReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelCapacityReservation", {}).n("EC2Client", "CancelCapacityReservationCommand").f(void 0, void 0).ser(se_CancelCapacityReservationCommand).de(de_CancelCapacityReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelCapacityReservationFleetsCommand.js
var CancelCapacityReservationFleetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelCapacityReservationFleets", {}).n("EC2Client", "CancelCapacityReservationFleetsCommand").f(void 0, void 0).ser(se_CancelCapacityReservationFleetsCommand).de(de_CancelCapacityReservationFleetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelConversionTaskCommand.js
var CancelConversionTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelConversionTask", {}).n("EC2Client", "CancelConversionTaskCommand").f(void 0, void 0).ser(se_CancelConversionTaskCommand).de(de_CancelConversionTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelDeclarativePoliciesReportCommand.js
var CancelDeclarativePoliciesReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelDeclarativePoliciesReport", {}).n("EC2Client", "CancelDeclarativePoliciesReportCommand").f(void 0, void 0).ser(se_CancelDeclarativePoliciesReportCommand).de(de_CancelDeclarativePoliciesReportCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelExportTask", {}).n("EC2Client", "CancelExportTaskCommand").f(void 0, void 0).ser(se_CancelExportTaskCommand).de(de_CancelExportTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelImageLaunchPermissionCommand.js
var CancelImageLaunchPermissionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelImageLaunchPermission", {}).n("EC2Client", "CancelImageLaunchPermissionCommand").f(void 0, void 0).ser(se_CancelImageLaunchPermissionCommand).de(de_CancelImageLaunchPermissionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelImportTaskCommand.js
var CancelImportTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelImportTask", {}).n("EC2Client", "CancelImportTaskCommand").f(void 0, void 0).ser(se_CancelImportTaskCommand).de(de_CancelImportTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelReservedInstancesListingCommand.js
var CancelReservedInstancesListingCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelReservedInstancesListing", {}).n("EC2Client", "CancelReservedInstancesListingCommand").f(void 0, void 0).ser(se_CancelReservedInstancesListingCommand).de(de_CancelReservedInstancesListingCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelSpotFleetRequestsCommand.js
var CancelSpotFleetRequestsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelSpotFleetRequests", {}).n("EC2Client", "CancelSpotFleetRequestsCommand").f(void 0, void 0).ser(se_CancelSpotFleetRequestsCommand).de(de_CancelSpotFleetRequestsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CancelSpotInstanceRequestsCommand.js
var CancelSpotInstanceRequestsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CancelSpotInstanceRequests", {}).n("EC2Client", "CancelSpotInstanceRequestsCommand").f(void 0, void 0).ser(se_CancelSpotInstanceRequestsCommand).de(de_CancelSpotInstanceRequestsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ConfirmProductInstanceCommand.js
var ConfirmProductInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ConfirmProductInstance", {}).n("EC2Client", "ConfirmProductInstanceCommand").f(void 0, void 0).ser(se_ConfirmProductInstanceCommand).de(de_ConfirmProductInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CopyFpgaImageCommand.js
var CopyFpgaImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CopyFpgaImage", {}).n("EC2Client", "CopyFpgaImageCommand").f(void 0, void 0).ser(se_CopyFpgaImageCommand).de(de_CopyFpgaImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CopyImageCommand.js
var CopyImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CopyImage", {}).n("EC2Client", "CopyImageCommand").f(void 0, void 0).ser(se_CopyImageCommand).de(de_CopyImageCommand).build() {
};

// node_modules/@aws-sdk/util-format-url/dist-es/index.js
function formatUrl(request) {
  const { port, query } = request;
  let { protocol, path, hostname } = request;
  if (protocol && protocol.slice(-1) !== ":") {
    protocol += ":";
  }
  if (port) {
    hostname += `:${port}`;
  }
  if (path && path.charAt(0) !== "/") {
    path = `/${path}`;
  }
  let queryString = query ? buildQueryString(query) : "";
  if (queryString && queryString[0] !== "?") {
    queryString = `?${queryString}`;
  }
  let auth = "";
  if (request.username != null || request.password != null) {
    const username = request.username ?? "";
    const password = request.password ?? "";
    auth = `${username}:${password}@`;
  }
  let fragment = "";
  if (request.fragment) {
    fragment = `#${request.fragment}`;
  }
  return `${protocol}//${auth}${hostname}${path}${queryString}${fragment}`;
}

// node_modules/@aws-sdk/middleware-sdk-ec2/dist-es/index.js
var version = "2016-11-15";
function copySnapshotPresignedUrlMiddleware(options) {
  return (next, context) => async (args) => {
    const { input } = args;
    if (!input.PresignedUrl) {
      const destinationRegion = await options.region();
      const endpoint = await getEndpointFromInstructions(input, {
        getEndpointParameterInstructions() {
          return {
            UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
            Endpoint: { type: "builtInParams", name: "endpoint" },
            Region: { type: "builtInParams", name: "region" },
            UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
          };
        }
      }, {
        ...options,
        region: input.SourceRegion
      });
      const resolvedEndpoint = typeof options.endpoint === "function" ? await options.endpoint() : toEndpointV1(endpoint);
      const requestToSign = new HttpRequest({
        ...resolvedEndpoint,
        protocol: "https",
        headers: {
          host: resolvedEndpoint.hostname
        },
        query: {
          ...Object.entries(input).reduce((acc, [k2, v2]) => {
            acc[k2] = String(v2 ?? "");
            return acc;
          }, {}),
          Action: "CopySnapshot",
          Version: version,
          DestinationRegion: destinationRegion
        }
      });
      const signer = new SignatureV4({
        credentials: options.credentials,
        region: input.SourceRegion,
        service: "ec2",
        sha256: options.sha256,
        uriEscapePath: options.signingEscapePath
      });
      const presignedRequest = await signer.presign(requestToSign, {
        expiresIn: 3600
      });
      args = {
        ...args,
        input: {
          ...args.input,
          DestinationRegion: destinationRegion,
          PresignedUrl: formatUrl(presignedRequest)
        }
      };
      if (HttpRequest.isInstance(args.request)) {
        const { request } = args;
        if (!(request.body ?? "").includes("DestinationRegion=")) {
          request.body += `&DestinationRegion=${destinationRegion}`;
        }
        if (!(request.body ?? "").includes("PresignedUrl=")) {
          request.body += `&PresignedUrl=${extendedEncodeURIComponent(args.input.PresignedUrl)}`;
        }
      }
    }
    return next(args);
  };
}
var copySnapshotPresignedUrlMiddlewareOptions = {
  step: "serialize",
  tags: ["CROSS_REGION_PRESIGNED_URL"],
  name: "crossRegionPresignedUrlMiddleware",
  override: true,
  relation: "after",
  toMiddleware: "endpointV2Middleware"
};
var getCopySnapshotPresignedUrlPlugin = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(copySnapshotPresignedUrlMiddleware(config), copySnapshotPresignedUrlMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CopySnapshotCommand.js
var CopySnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getCopySnapshotPresignedUrlPlugin(config)
  ];
}).s("AmazonEC2", "CopySnapshot", {}).n("EC2Client", "CopySnapshotCommand").f(CopySnapshotRequestFilterSensitiveLog, void 0).ser(se_CopySnapshotCommand).de(de_CopySnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCapacityReservationBySplittingCommand.js
var CreateCapacityReservationBySplittingCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCapacityReservationBySplitting", {}).n("EC2Client", "CreateCapacityReservationBySplittingCommand").f(void 0, void 0).ser(se_CreateCapacityReservationBySplittingCommand).de(de_CreateCapacityReservationBySplittingCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCapacityReservationCommand.js
var CreateCapacityReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCapacityReservation", {}).n("EC2Client", "CreateCapacityReservationCommand").f(void 0, void 0).ser(se_CreateCapacityReservationCommand).de(de_CreateCapacityReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCapacityReservationFleetCommand.js
var CreateCapacityReservationFleetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCapacityReservationFleet", {}).n("EC2Client", "CreateCapacityReservationFleetCommand").f(void 0, void 0).ser(se_CreateCapacityReservationFleetCommand).de(de_CreateCapacityReservationFleetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCarrierGatewayCommand.js
var CreateCarrierGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCarrierGateway", {}).n("EC2Client", "CreateCarrierGatewayCommand").f(void 0, void 0).ser(se_CreateCarrierGatewayCommand).de(de_CreateCarrierGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateClientVpnEndpointCommand.js
var CreateClientVpnEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateClientVpnEndpoint", {}).n("EC2Client", "CreateClientVpnEndpointCommand").f(void 0, void 0).ser(se_CreateClientVpnEndpointCommand).de(de_CreateClientVpnEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateClientVpnRouteCommand.js
var CreateClientVpnRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateClientVpnRoute", {}).n("EC2Client", "CreateClientVpnRouteCommand").f(void 0, void 0).ser(se_CreateClientVpnRouteCommand).de(de_CreateClientVpnRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCoipCidrCommand.js
var CreateCoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCoipCidr", {}).n("EC2Client", "CreateCoipCidrCommand").f(void 0, void 0).ser(se_CreateCoipCidrCommand).de(de_CreateCoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCoipPoolCommand.js
var CreateCoipPoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCoipPool", {}).n("EC2Client", "CreateCoipPoolCommand").f(void 0, void 0).ser(se_CreateCoipPoolCommand).de(de_CreateCoipPoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateCustomerGatewayCommand.js
var CreateCustomerGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateCustomerGateway", {}).n("EC2Client", "CreateCustomerGatewayCommand").f(void 0, void 0).ser(se_CreateCustomerGatewayCommand).de(de_CreateCustomerGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateDefaultSubnetCommand.js
var CreateDefaultSubnetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateDefaultSubnet", {}).n("EC2Client", "CreateDefaultSubnetCommand").f(void 0, void 0).ser(se_CreateDefaultSubnetCommand).de(de_CreateDefaultSubnetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateDefaultVpcCommand.js
var CreateDefaultVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateDefaultVpc", {}).n("EC2Client", "CreateDefaultVpcCommand").f(void 0, void 0).ser(se_CreateDefaultVpcCommand).de(de_CreateDefaultVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateDhcpOptionsCommand.js
var CreateDhcpOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateDhcpOptions", {}).n("EC2Client", "CreateDhcpOptionsCommand").f(void 0, void 0).ser(se_CreateDhcpOptionsCommand).de(de_CreateDhcpOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateEgressOnlyInternetGatewayCommand.js
var CreateEgressOnlyInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateEgressOnlyInternetGateway", {}).n("EC2Client", "CreateEgressOnlyInternetGatewayCommand").f(void 0, void 0).ser(se_CreateEgressOnlyInternetGatewayCommand).de(de_CreateEgressOnlyInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateFleetCommand.js
var CreateFleetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateFleet", {}).n("EC2Client", "CreateFleetCommand").f(void 0, void 0).ser(se_CreateFleetCommand).de(de_CreateFleetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateFlowLogsCommand.js
var CreateFlowLogsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateFlowLogs", {}).n("EC2Client", "CreateFlowLogsCommand").f(void 0, void 0).ser(se_CreateFlowLogsCommand).de(de_CreateFlowLogsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateFpgaImageCommand.js
var CreateFpgaImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateFpgaImage", {}).n("EC2Client", "CreateFpgaImageCommand").f(void 0, void 0).ser(se_CreateFpgaImageCommand).de(de_CreateFpgaImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateImageCommand.js
var CreateImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateImage", {}).n("EC2Client", "CreateImageCommand").f(void 0, void 0).ser(se_CreateImageCommand).de(de_CreateImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateInstanceConnectEndpointCommand.js
var CreateInstanceConnectEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateInstanceConnectEndpoint", {}).n("EC2Client", "CreateInstanceConnectEndpointCommand").f(void 0, void 0).ser(se_CreateInstanceConnectEndpointCommand).de(de_CreateInstanceConnectEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateInstanceEventWindowCommand.js
var CreateInstanceEventWindowCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateInstanceEventWindow", {}).n("EC2Client", "CreateInstanceEventWindowCommand").f(void 0, void 0).ser(se_CreateInstanceEventWindowCommand).de(de_CreateInstanceEventWindowCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateInstanceExportTaskCommand.js
var CreateInstanceExportTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateInstanceExportTask", {}).n("EC2Client", "CreateInstanceExportTaskCommand").f(void 0, void 0).ser(se_CreateInstanceExportTaskCommand).de(de_CreateInstanceExportTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateInternetGatewayCommand.js
var CreateInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateInternetGateway", {}).n("EC2Client", "CreateInternetGatewayCommand").f(void 0, void 0).ser(se_CreateInternetGatewayCommand).de(de_CreateInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateIpamCommand.js
var CreateIpamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateIpam", {}).n("EC2Client", "CreateIpamCommand").f(void 0, void 0).ser(se_CreateIpamCommand).de(de_CreateIpamCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateIpamExternalResourceVerificationTokenCommand.js
var CreateIpamExternalResourceVerificationTokenCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateIpamExternalResourceVerificationToken", {}).n("EC2Client", "CreateIpamExternalResourceVerificationTokenCommand").f(void 0, void 0).ser(se_CreateIpamExternalResourceVerificationTokenCommand).de(de_CreateIpamExternalResourceVerificationTokenCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateIpamPoolCommand.js
var CreateIpamPoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateIpamPool", {}).n("EC2Client", "CreateIpamPoolCommand").f(void 0, void 0).ser(se_CreateIpamPoolCommand).de(de_CreateIpamPoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateIpamResourceDiscoveryCommand.js
var CreateIpamResourceDiscoveryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateIpamResourceDiscovery", {}).n("EC2Client", "CreateIpamResourceDiscoveryCommand").f(void 0, void 0).ser(se_CreateIpamResourceDiscoveryCommand).de(de_CreateIpamResourceDiscoveryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateIpamScopeCommand.js
var CreateIpamScopeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateIpamScope", {}).n("EC2Client", "CreateIpamScopeCommand").f(void 0, void 0).ser(se_CreateIpamScopeCommand).de(de_CreateIpamScopeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_1.js
var EndDateType = {
  limited: "limited",
  unlimited: "unlimited"
};
var InstanceMatchCriteria = {
  open: "open",
  targeted: "targeted"
};
var CapacityReservationInstancePlatform = {
  LINUX_UNIX: "Linux/UNIX",
  LINUX_WITH_SQL_SERVER_ENTERPRISE: "Linux with SQL Server Enterprise",
  LINUX_WITH_SQL_SERVER_STANDARD: "Linux with SQL Server Standard",
  LINUX_WITH_SQL_SERVER_WEB: "Linux with SQL Server Web",
  RED_HAT_ENTERPRISE_LINUX: "Red Hat Enterprise Linux",
  RHEL_WITH_HA: "RHEL with HA",
  RHEL_WITH_HA_AND_SQL_SERVER_ENTERPRISE: "RHEL with HA and SQL Server Enterprise",
  RHEL_WITH_HA_AND_SQL_SERVER_STANDARD: "RHEL with HA and SQL Server Standard",
  RHEL_WITH_SQL_SERVER_ENTERPRISE: "RHEL with SQL Server Enterprise",
  RHEL_WITH_SQL_SERVER_STANDARD: "RHEL with SQL Server Standard",
  RHEL_WITH_SQL_SERVER_WEB: "RHEL with SQL Server Web",
  SUSE_LINUX: "SUSE Linux",
  UBUNTU_PRO_LINUX: "Ubuntu Pro",
  WINDOWS: "Windows",
  WINDOWS_WITH_SQL_SERVER: "Windows with SQL Server",
  WINDOWS_WITH_SQL_SERVER_ENTERPRISE: "Windows with SQL Server Enterprise",
  WINDOWS_WITH_SQL_SERVER_STANDARD: "Windows with SQL Server Standard",
  WINDOWS_WITH_SQL_SERVER_WEB: "Windows with SQL Server Web"
};
var CapacityReservationTenancy = {
  dedicated: "dedicated",
  default: "default"
};
var CapacityReservationType = {
  CAPACITY_BLOCK: "capacity-block",
  DEFAULT: "default"
};
var CapacityReservationState = {
  active: "active",
  assessing: "assessing",
  cancelled: "cancelled",
  delayed: "delayed",
  expired: "expired",
  failed: "failed",
  payment_failed: "payment-failed",
  payment_pending: "payment-pending",
  pending: "pending",
  scheduled: "scheduled",
  unsupported: "unsupported"
};
var FleetInstanceMatchCriteria = {
  open: "open"
};
var _InstanceType = {
  a1_2xlarge: "a1.2xlarge",
  a1_4xlarge: "a1.4xlarge",
  a1_large: "a1.large",
  a1_medium: "a1.medium",
  a1_metal: "a1.metal",
  a1_xlarge: "a1.xlarge",
  c1_medium: "c1.medium",
  c1_xlarge: "c1.xlarge",
  c3_2xlarge: "c3.2xlarge",
  c3_4xlarge: "c3.4xlarge",
  c3_8xlarge: "c3.8xlarge",
  c3_large: "c3.large",
  c3_xlarge: "c3.xlarge",
  c4_2xlarge: "c4.2xlarge",
  c4_4xlarge: "c4.4xlarge",
  c4_8xlarge: "c4.8xlarge",
  c4_large: "c4.large",
  c4_xlarge: "c4.xlarge",
  c5_12xlarge: "c5.12xlarge",
  c5_18xlarge: "c5.18xlarge",
  c5_24xlarge: "c5.24xlarge",
  c5_2xlarge: "c5.2xlarge",
  c5_4xlarge: "c5.4xlarge",
  c5_9xlarge: "c5.9xlarge",
  c5_large: "c5.large",
  c5_metal: "c5.metal",
  c5_xlarge: "c5.xlarge",
  c5a_12xlarge: "c5a.12xlarge",
  c5a_16xlarge: "c5a.16xlarge",
  c5a_24xlarge: "c5a.24xlarge",
  c5a_2xlarge: "c5a.2xlarge",
  c5a_4xlarge: "c5a.4xlarge",
  c5a_8xlarge: "c5a.8xlarge",
  c5a_large: "c5a.large",
  c5a_xlarge: "c5a.xlarge",
  c5ad_12xlarge: "c5ad.12xlarge",
  c5ad_16xlarge: "c5ad.16xlarge",
  c5ad_24xlarge: "c5ad.24xlarge",
  c5ad_2xlarge: "c5ad.2xlarge",
  c5ad_4xlarge: "c5ad.4xlarge",
  c5ad_8xlarge: "c5ad.8xlarge",
  c5ad_large: "c5ad.large",
  c5ad_xlarge: "c5ad.xlarge",
  c5d_12xlarge: "c5d.12xlarge",
  c5d_18xlarge: "c5d.18xlarge",
  c5d_24xlarge: "c5d.24xlarge",
  c5d_2xlarge: "c5d.2xlarge",
  c5d_4xlarge: "c5d.4xlarge",
  c5d_9xlarge: "c5d.9xlarge",
  c5d_large: "c5d.large",
  c5d_metal: "c5d.metal",
  c5d_xlarge: "c5d.xlarge",
  c5n_18xlarge: "c5n.18xlarge",
  c5n_2xlarge: "c5n.2xlarge",
  c5n_4xlarge: "c5n.4xlarge",
  c5n_9xlarge: "c5n.9xlarge",
  c5n_large: "c5n.large",
  c5n_metal: "c5n.metal",
  c5n_xlarge: "c5n.xlarge",
  c6a_12xlarge: "c6a.12xlarge",
  c6a_16xlarge: "c6a.16xlarge",
  c6a_24xlarge: "c6a.24xlarge",
  c6a_2xlarge: "c6a.2xlarge",
  c6a_32xlarge: "c6a.32xlarge",
  c6a_48xlarge: "c6a.48xlarge",
  c6a_4xlarge: "c6a.4xlarge",
  c6a_8xlarge: "c6a.8xlarge",
  c6a_large: "c6a.large",
  c6a_metal: "c6a.metal",
  c6a_xlarge: "c6a.xlarge",
  c6g_12xlarge: "c6g.12xlarge",
  c6g_16xlarge: "c6g.16xlarge",
  c6g_2xlarge: "c6g.2xlarge",
  c6g_4xlarge: "c6g.4xlarge",
  c6g_8xlarge: "c6g.8xlarge",
  c6g_large: "c6g.large",
  c6g_medium: "c6g.medium",
  c6g_metal: "c6g.metal",
  c6g_xlarge: "c6g.xlarge",
  c6gd_12xlarge: "c6gd.12xlarge",
  c6gd_16xlarge: "c6gd.16xlarge",
  c6gd_2xlarge: "c6gd.2xlarge",
  c6gd_4xlarge: "c6gd.4xlarge",
  c6gd_8xlarge: "c6gd.8xlarge",
  c6gd_large: "c6gd.large",
  c6gd_medium: "c6gd.medium",
  c6gd_metal: "c6gd.metal",
  c6gd_xlarge: "c6gd.xlarge",
  c6gn_12xlarge: "c6gn.12xlarge",
  c6gn_16xlarge: "c6gn.16xlarge",
  c6gn_2xlarge: "c6gn.2xlarge",
  c6gn_4xlarge: "c6gn.4xlarge",
  c6gn_8xlarge: "c6gn.8xlarge",
  c6gn_large: "c6gn.large",
  c6gn_medium: "c6gn.medium",
  c6gn_xlarge: "c6gn.xlarge",
  c6i_12xlarge: "c6i.12xlarge",
  c6i_16xlarge: "c6i.16xlarge",
  c6i_24xlarge: "c6i.24xlarge",
  c6i_2xlarge: "c6i.2xlarge",
  c6i_32xlarge: "c6i.32xlarge",
  c6i_4xlarge: "c6i.4xlarge",
  c6i_8xlarge: "c6i.8xlarge",
  c6i_large: "c6i.large",
  c6i_metal: "c6i.metal",
  c6i_xlarge: "c6i.xlarge",
  c6id_12xlarge: "c6id.12xlarge",
  c6id_16xlarge: "c6id.16xlarge",
  c6id_24xlarge: "c6id.24xlarge",
  c6id_2xlarge: "c6id.2xlarge",
  c6id_32xlarge: "c6id.32xlarge",
  c6id_4xlarge: "c6id.4xlarge",
  c6id_8xlarge: "c6id.8xlarge",
  c6id_large: "c6id.large",
  c6id_metal: "c6id.metal",
  c6id_xlarge: "c6id.xlarge",
  c6in_12xlarge: "c6in.12xlarge",
  c6in_16xlarge: "c6in.16xlarge",
  c6in_24xlarge: "c6in.24xlarge",
  c6in_2xlarge: "c6in.2xlarge",
  c6in_32xlarge: "c6in.32xlarge",
  c6in_4xlarge: "c6in.4xlarge",
  c6in_8xlarge: "c6in.8xlarge",
  c6in_large: "c6in.large",
  c6in_metal: "c6in.metal",
  c6in_xlarge: "c6in.xlarge",
  c7a_12xlarge: "c7a.12xlarge",
  c7a_16xlarge: "c7a.16xlarge",
  c7a_24xlarge: "c7a.24xlarge",
  c7a_2xlarge: "c7a.2xlarge",
  c7a_32xlarge: "c7a.32xlarge",
  c7a_48xlarge: "c7a.48xlarge",
  c7a_4xlarge: "c7a.4xlarge",
  c7a_8xlarge: "c7a.8xlarge",
  c7a_large: "c7a.large",
  c7a_medium: "c7a.medium",
  c7a_metal_48xl: "c7a.metal-48xl",
  c7a_xlarge: "c7a.xlarge",
  c7g_12xlarge: "c7g.12xlarge",
  c7g_16xlarge: "c7g.16xlarge",
  c7g_2xlarge: "c7g.2xlarge",
  c7g_4xlarge: "c7g.4xlarge",
  c7g_8xlarge: "c7g.8xlarge",
  c7g_large: "c7g.large",
  c7g_medium: "c7g.medium",
  c7g_metal: "c7g.metal",
  c7g_xlarge: "c7g.xlarge",
  c7gd_12xlarge: "c7gd.12xlarge",
  c7gd_16xlarge: "c7gd.16xlarge",
  c7gd_2xlarge: "c7gd.2xlarge",
  c7gd_4xlarge: "c7gd.4xlarge",
  c7gd_8xlarge: "c7gd.8xlarge",
  c7gd_large: "c7gd.large",
  c7gd_medium: "c7gd.medium",
  c7gd_metal: "c7gd.metal",
  c7gd_xlarge: "c7gd.xlarge",
  c7gn_12xlarge: "c7gn.12xlarge",
  c7gn_16xlarge: "c7gn.16xlarge",
  c7gn_2xlarge: "c7gn.2xlarge",
  c7gn_4xlarge: "c7gn.4xlarge",
  c7gn_8xlarge: "c7gn.8xlarge",
  c7gn_large: "c7gn.large",
  c7gn_medium: "c7gn.medium",
  c7gn_metal: "c7gn.metal",
  c7gn_xlarge: "c7gn.xlarge",
  c7i_12xlarge: "c7i.12xlarge",
  c7i_16xlarge: "c7i.16xlarge",
  c7i_24xlarge: "c7i.24xlarge",
  c7i_2xlarge: "c7i.2xlarge",
  c7i_48xlarge: "c7i.48xlarge",
  c7i_4xlarge: "c7i.4xlarge",
  c7i_8xlarge: "c7i.8xlarge",
  c7i_flex_2xlarge: "c7i-flex.2xlarge",
  c7i_flex_4xlarge: "c7i-flex.4xlarge",
  c7i_flex_8xlarge: "c7i-flex.8xlarge",
  c7i_flex_large: "c7i-flex.large",
  c7i_flex_xlarge: "c7i-flex.xlarge",
  c7i_large: "c7i.large",
  c7i_metal_24xl: "c7i.metal-24xl",
  c7i_metal_48xl: "c7i.metal-48xl",
  c7i_xlarge: "c7i.xlarge",
  c8g_12xlarge: "c8g.12xlarge",
  c8g_16xlarge: "c8g.16xlarge",
  c8g_24xlarge: "c8g.24xlarge",
  c8g_2xlarge: "c8g.2xlarge",
  c8g_48xlarge: "c8g.48xlarge",
  c8g_4xlarge: "c8g.4xlarge",
  c8g_8xlarge: "c8g.8xlarge",
  c8g_large: "c8g.large",
  c8g_medium: "c8g.medium",
  c8g_metal_24xl: "c8g.metal-24xl",
  c8g_metal_48xl: "c8g.metal-48xl",
  c8g_xlarge: "c8g.xlarge",
  cc1_4xlarge: "cc1.4xlarge",
  cc2_8xlarge: "cc2.8xlarge",
  cg1_4xlarge: "cg1.4xlarge",
  cr1_8xlarge: "cr1.8xlarge",
  d2_2xlarge: "d2.2xlarge",
  d2_4xlarge: "d2.4xlarge",
  d2_8xlarge: "d2.8xlarge",
  d2_xlarge: "d2.xlarge",
  d3_2xlarge: "d3.2xlarge",
  d3_4xlarge: "d3.4xlarge",
  d3_8xlarge: "d3.8xlarge",
  d3_xlarge: "d3.xlarge",
  d3en_12xlarge: "d3en.12xlarge",
  d3en_2xlarge: "d3en.2xlarge",
  d3en_4xlarge: "d3en.4xlarge",
  d3en_6xlarge: "d3en.6xlarge",
  d3en_8xlarge: "d3en.8xlarge",
  d3en_xlarge: "d3en.xlarge",
  dl1_24xlarge: "dl1.24xlarge",
  dl2q_24xlarge: "dl2q.24xlarge",
  f1_16xlarge: "f1.16xlarge",
  f1_2xlarge: "f1.2xlarge",
  f1_4xlarge: "f1.4xlarge",
  f2_12xlarge: "f2.12xlarge",
  f2_48xlarge: "f2.48xlarge",
  g2_2xlarge: "g2.2xlarge",
  g2_8xlarge: "g2.8xlarge",
  g3_16xlarge: "g3.16xlarge",
  g3_4xlarge: "g3.4xlarge",
  g3_8xlarge: "g3.8xlarge",
  g3s_xlarge: "g3s.xlarge",
  g4ad_16xlarge: "g4ad.16xlarge",
  g4ad_2xlarge: "g4ad.2xlarge",
  g4ad_4xlarge: "g4ad.4xlarge",
  g4ad_8xlarge: "g4ad.8xlarge",
  g4ad_xlarge: "g4ad.xlarge",
  g4dn_12xlarge: "g4dn.12xlarge",
  g4dn_16xlarge: "g4dn.16xlarge",
  g4dn_2xlarge: "g4dn.2xlarge",
  g4dn_4xlarge: "g4dn.4xlarge",
  g4dn_8xlarge: "g4dn.8xlarge",
  g4dn_metal: "g4dn.metal",
  g4dn_xlarge: "g4dn.xlarge",
  g5_12xlarge: "g5.12xlarge",
  g5_16xlarge: "g5.16xlarge",
  g5_24xlarge: "g5.24xlarge",
  g5_2xlarge: "g5.2xlarge",
  g5_48xlarge: "g5.48xlarge",
  g5_4xlarge: "g5.4xlarge",
  g5_8xlarge: "g5.8xlarge",
  g5_xlarge: "g5.xlarge",
  g5g_16xlarge: "g5g.16xlarge",
  g5g_2xlarge: "g5g.2xlarge",
  g5g_4xlarge: "g5g.4xlarge",
  g5g_8xlarge: "g5g.8xlarge",
  g5g_metal: "g5g.metal",
  g5g_xlarge: "g5g.xlarge",
  g6_12xlarge: "g6.12xlarge",
  g6_16xlarge: "g6.16xlarge",
  g6_24xlarge: "g6.24xlarge",
  g6_2xlarge: "g6.2xlarge",
  g6_48xlarge: "g6.48xlarge",
  g6_4xlarge: "g6.4xlarge",
  g6_8xlarge: "g6.8xlarge",
  g6_xlarge: "g6.xlarge",
  g6e_12xlarge: "g6e.12xlarge",
  g6e_16xlarge: "g6e.16xlarge",
  g6e_24xlarge: "g6e.24xlarge",
  g6e_2xlarge: "g6e.2xlarge",
  g6e_48xlarge: "g6e.48xlarge",
  g6e_4xlarge: "g6e.4xlarge",
  g6e_8xlarge: "g6e.8xlarge",
  g6e_xlarge: "g6e.xlarge",
  gr6_4xlarge: "gr6.4xlarge",
  gr6_8xlarge: "gr6.8xlarge",
  h1_16xlarge: "h1.16xlarge",
  h1_2xlarge: "h1.2xlarge",
  h1_4xlarge: "h1.4xlarge",
  h1_8xlarge: "h1.8xlarge",
  hi1_4xlarge: "hi1.4xlarge",
  hpc6a_48xlarge: "hpc6a.48xlarge",
  hpc6id_32xlarge: "hpc6id.32xlarge",
  hpc7a_12xlarge: "hpc7a.12xlarge",
  hpc7a_24xlarge: "hpc7a.24xlarge",
  hpc7a_48xlarge: "hpc7a.48xlarge",
  hpc7a_96xlarge: "hpc7a.96xlarge",
  hpc7g_16xlarge: "hpc7g.16xlarge",
  hpc7g_4xlarge: "hpc7g.4xlarge",
  hpc7g_8xlarge: "hpc7g.8xlarge",
  hs1_8xlarge: "hs1.8xlarge",
  i2_2xlarge: "i2.2xlarge",
  i2_4xlarge: "i2.4xlarge",
  i2_8xlarge: "i2.8xlarge",
  i2_xlarge: "i2.xlarge",
  i3_16xlarge: "i3.16xlarge",
  i3_2xlarge: "i3.2xlarge",
  i3_4xlarge: "i3.4xlarge",
  i3_8xlarge: "i3.8xlarge",
  i3_large: "i3.large",
  i3_metal: "i3.metal",
  i3_xlarge: "i3.xlarge",
  i3en_12xlarge: "i3en.12xlarge",
  i3en_24xlarge: "i3en.24xlarge",
  i3en_2xlarge: "i3en.2xlarge",
  i3en_3xlarge: "i3en.3xlarge",
  i3en_6xlarge: "i3en.6xlarge",
  i3en_large: "i3en.large",
  i3en_metal: "i3en.metal",
  i3en_xlarge: "i3en.xlarge",
  i4g_16xlarge: "i4g.16xlarge",
  i4g_2xlarge: "i4g.2xlarge",
  i4g_4xlarge: "i4g.4xlarge",
  i4g_8xlarge: "i4g.8xlarge",
  i4g_large: "i4g.large",
  i4g_xlarge: "i4g.xlarge",
  i4i_12xlarge: "i4i.12xlarge",
  i4i_16xlarge: "i4i.16xlarge",
  i4i_24xlarge: "i4i.24xlarge",
  i4i_2xlarge: "i4i.2xlarge",
  i4i_32xlarge: "i4i.32xlarge",
  i4i_4xlarge: "i4i.4xlarge",
  i4i_8xlarge: "i4i.8xlarge",
  i4i_large: "i4i.large",
  i4i_metal: "i4i.metal",
  i4i_xlarge: "i4i.xlarge",
  i7ie_12xlarge: "i7ie.12xlarge",
  i7ie_18xlarge: "i7ie.18xlarge",
  i7ie_24xlarge: "i7ie.24xlarge",
  i7ie_2xlarge: "i7ie.2xlarge",
  i7ie_3xlarge: "i7ie.3xlarge",
  i7ie_48xlarge: "i7ie.48xlarge",
  i7ie_6xlarge: "i7ie.6xlarge",
  i7ie_large: "i7ie.large",
  i7ie_xlarge: "i7ie.xlarge",
  i8g_12xlarge: "i8g.12xlarge",
  i8g_16xlarge: "i8g.16xlarge",
  i8g_24xlarge: "i8g.24xlarge",
  i8g_2xlarge: "i8g.2xlarge",
  i8g_4xlarge: "i8g.4xlarge",
  i8g_8xlarge: "i8g.8xlarge",
  i8g_large: "i8g.large",
  i8g_metal_24xl: "i8g.metal-24xl",
  i8g_xlarge: "i8g.xlarge",
  im4gn_16xlarge: "im4gn.16xlarge",
  im4gn_2xlarge: "im4gn.2xlarge",
  im4gn_4xlarge: "im4gn.4xlarge",
  im4gn_8xlarge: "im4gn.8xlarge",
  im4gn_large: "im4gn.large",
  im4gn_xlarge: "im4gn.xlarge",
  inf1_24xlarge: "inf1.24xlarge",
  inf1_2xlarge: "inf1.2xlarge",
  inf1_6xlarge: "inf1.6xlarge",
  inf1_xlarge: "inf1.xlarge",
  inf2_24xlarge: "inf2.24xlarge",
  inf2_48xlarge: "inf2.48xlarge",
  inf2_8xlarge: "inf2.8xlarge",
  inf2_xlarge: "inf2.xlarge",
  is4gen_2xlarge: "is4gen.2xlarge",
  is4gen_4xlarge: "is4gen.4xlarge",
  is4gen_8xlarge: "is4gen.8xlarge",
  is4gen_large: "is4gen.large",
  is4gen_medium: "is4gen.medium",
  is4gen_xlarge: "is4gen.xlarge",
  m1_large: "m1.large",
  m1_medium: "m1.medium",
  m1_small: "m1.small",
  m1_xlarge: "m1.xlarge",
  m2_2xlarge: "m2.2xlarge",
  m2_4xlarge: "m2.4xlarge",
  m2_xlarge: "m2.xlarge",
  m3_2xlarge: "m3.2xlarge",
  m3_large: "m3.large",
  m3_medium: "m3.medium",
  m3_xlarge: "m3.xlarge",
  m4_10xlarge: "m4.10xlarge",
  m4_16xlarge: "m4.16xlarge",
  m4_2xlarge: "m4.2xlarge",
  m4_4xlarge: "m4.4xlarge",
  m4_large: "m4.large",
  m4_xlarge: "m4.xlarge",
  m5_12xlarge: "m5.12xlarge",
  m5_16xlarge: "m5.16xlarge",
  m5_24xlarge: "m5.24xlarge",
  m5_2xlarge: "m5.2xlarge",
  m5_4xlarge: "m5.4xlarge",
  m5_8xlarge: "m5.8xlarge",
  m5_large: "m5.large",
  m5_metal: "m5.metal",
  m5_xlarge: "m5.xlarge",
  m5a_12xlarge: "m5a.12xlarge",
  m5a_16xlarge: "m5a.16xlarge",
  m5a_24xlarge: "m5a.24xlarge",
  m5a_2xlarge: "m5a.2xlarge",
  m5a_4xlarge: "m5a.4xlarge",
  m5a_8xlarge: "m5a.8xlarge",
  m5a_large: "m5a.large",
  m5a_xlarge: "m5a.xlarge",
  m5ad_12xlarge: "m5ad.12xlarge",
  m5ad_16xlarge: "m5ad.16xlarge",
  m5ad_24xlarge: "m5ad.24xlarge",
  m5ad_2xlarge: "m5ad.2xlarge",
  m5ad_4xlarge: "m5ad.4xlarge",
  m5ad_8xlarge: "m5ad.8xlarge",
  m5ad_large: "m5ad.large",
  m5ad_xlarge: "m5ad.xlarge",
  m5d_12xlarge: "m5d.12xlarge",
  m5d_16xlarge: "m5d.16xlarge",
  m5d_24xlarge: "m5d.24xlarge",
  m5d_2xlarge: "m5d.2xlarge",
  m5d_4xlarge: "m5d.4xlarge",
  m5d_8xlarge: "m5d.8xlarge",
  m5d_large: "m5d.large",
  m5d_metal: "m5d.metal",
  m5d_xlarge: "m5d.xlarge",
  m5dn_12xlarge: "m5dn.12xlarge",
  m5dn_16xlarge: "m5dn.16xlarge",
  m5dn_24xlarge: "m5dn.24xlarge",
  m5dn_2xlarge: "m5dn.2xlarge",
  m5dn_4xlarge: "m5dn.4xlarge",
  m5dn_8xlarge: "m5dn.8xlarge",
  m5dn_large: "m5dn.large",
  m5dn_metal: "m5dn.metal",
  m5dn_xlarge: "m5dn.xlarge",
  m5n_12xlarge: "m5n.12xlarge",
  m5n_16xlarge: "m5n.16xlarge",
  m5n_24xlarge: "m5n.24xlarge",
  m5n_2xlarge: "m5n.2xlarge",
  m5n_4xlarge: "m5n.4xlarge",
  m5n_8xlarge: "m5n.8xlarge",
  m5n_large: "m5n.large",
  m5n_metal: "m5n.metal",
  m5n_xlarge: "m5n.xlarge",
  m5zn_12xlarge: "m5zn.12xlarge",
  m5zn_2xlarge: "m5zn.2xlarge",
  m5zn_3xlarge: "m5zn.3xlarge",
  m5zn_6xlarge: "m5zn.6xlarge",
  m5zn_large: "m5zn.large",
  m5zn_metal: "m5zn.metal",
  m5zn_xlarge: "m5zn.xlarge",
  m6a_12xlarge: "m6a.12xlarge",
  m6a_16xlarge: "m6a.16xlarge",
  m6a_24xlarge: "m6a.24xlarge",
  m6a_2xlarge: "m6a.2xlarge",
  m6a_32xlarge: "m6a.32xlarge",
  m6a_48xlarge: "m6a.48xlarge",
  m6a_4xlarge: "m6a.4xlarge",
  m6a_8xlarge: "m6a.8xlarge",
  m6a_large: "m6a.large",
  m6a_metal: "m6a.metal",
  m6a_xlarge: "m6a.xlarge",
  m6g_12xlarge: "m6g.12xlarge",
  m6g_16xlarge: "m6g.16xlarge",
  m6g_2xlarge: "m6g.2xlarge",
  m6g_4xlarge: "m6g.4xlarge",
  m6g_8xlarge: "m6g.8xlarge",
  m6g_large: "m6g.large",
  m6g_medium: "m6g.medium",
  m6g_metal: "m6g.metal",
  m6g_xlarge: "m6g.xlarge",
  m6gd_12xlarge: "m6gd.12xlarge",
  m6gd_16xlarge: "m6gd.16xlarge",
  m6gd_2xlarge: "m6gd.2xlarge",
  m6gd_4xlarge: "m6gd.4xlarge",
  m6gd_8xlarge: "m6gd.8xlarge",
  m6gd_large: "m6gd.large",
  m6gd_medium: "m6gd.medium",
  m6gd_metal: "m6gd.metal",
  m6gd_xlarge: "m6gd.xlarge",
  m6i_12xlarge: "m6i.12xlarge",
  m6i_16xlarge: "m6i.16xlarge",
  m6i_24xlarge: "m6i.24xlarge",
  m6i_2xlarge: "m6i.2xlarge",
  m6i_32xlarge: "m6i.32xlarge",
  m6i_4xlarge: "m6i.4xlarge",
  m6i_8xlarge: "m6i.8xlarge",
  m6i_large: "m6i.large",
  m6i_metal: "m6i.metal",
  m6i_xlarge: "m6i.xlarge",
  m6id_12xlarge: "m6id.12xlarge",
  m6id_16xlarge: "m6id.16xlarge",
  m6id_24xlarge: "m6id.24xlarge",
  m6id_2xlarge: "m6id.2xlarge",
  m6id_32xlarge: "m6id.32xlarge",
  m6id_4xlarge: "m6id.4xlarge",
  m6id_8xlarge: "m6id.8xlarge",
  m6id_large: "m6id.large",
  m6id_metal: "m6id.metal",
  m6id_xlarge: "m6id.xlarge",
  m6idn_12xlarge: "m6idn.12xlarge",
  m6idn_16xlarge: "m6idn.16xlarge",
  m6idn_24xlarge: "m6idn.24xlarge",
  m6idn_2xlarge: "m6idn.2xlarge",
  m6idn_32xlarge: "m6idn.32xlarge",
  m6idn_4xlarge: "m6idn.4xlarge",
  m6idn_8xlarge: "m6idn.8xlarge",
  m6idn_large: "m6idn.large",
  m6idn_metal: "m6idn.metal",
  m6idn_xlarge: "m6idn.xlarge",
  m6in_12xlarge: "m6in.12xlarge",
  m6in_16xlarge: "m6in.16xlarge",
  m6in_24xlarge: "m6in.24xlarge",
  m6in_2xlarge: "m6in.2xlarge",
  m6in_32xlarge: "m6in.32xlarge",
  m6in_4xlarge: "m6in.4xlarge",
  m6in_8xlarge: "m6in.8xlarge",
  m6in_large: "m6in.large",
  m6in_metal: "m6in.metal",
  m6in_xlarge: "m6in.xlarge",
  m7a_12xlarge: "m7a.12xlarge",
  m7a_16xlarge: "m7a.16xlarge",
  m7a_24xlarge: "m7a.24xlarge",
  m7a_2xlarge: "m7a.2xlarge",
  m7a_32xlarge: "m7a.32xlarge",
  m7a_48xlarge: "m7a.48xlarge",
  m7a_4xlarge: "m7a.4xlarge",
  m7a_8xlarge: "m7a.8xlarge",
  m7a_large: "m7a.large",
  m7a_medium: "m7a.medium",
  m7a_metal_48xl: "m7a.metal-48xl",
  m7a_xlarge: "m7a.xlarge",
  m7g_12xlarge: "m7g.12xlarge",
  m7g_16xlarge: "m7g.16xlarge",
  m7g_2xlarge: "m7g.2xlarge",
  m7g_4xlarge: "m7g.4xlarge",
  m7g_8xlarge: "m7g.8xlarge",
  m7g_large: "m7g.large",
  m7g_medium: "m7g.medium",
  m7g_metal: "m7g.metal",
  m7g_xlarge: "m7g.xlarge",
  m7gd_12xlarge: "m7gd.12xlarge",
  m7gd_16xlarge: "m7gd.16xlarge",
  m7gd_2xlarge: "m7gd.2xlarge",
  m7gd_4xlarge: "m7gd.4xlarge",
  m7gd_8xlarge: "m7gd.8xlarge",
  m7gd_large: "m7gd.large",
  m7gd_medium: "m7gd.medium",
  m7gd_metal: "m7gd.metal",
  m7gd_xlarge: "m7gd.xlarge",
  m7i_12xlarge: "m7i.12xlarge",
  m7i_16xlarge: "m7i.16xlarge",
  m7i_24xlarge: "m7i.24xlarge",
  m7i_2xlarge: "m7i.2xlarge",
  m7i_48xlarge: "m7i.48xlarge",
  m7i_4xlarge: "m7i.4xlarge",
  m7i_8xlarge: "m7i.8xlarge",
  m7i_flex_2xlarge: "m7i-flex.2xlarge",
  m7i_flex_4xlarge: "m7i-flex.4xlarge",
  m7i_flex_8xlarge: "m7i-flex.8xlarge",
  m7i_flex_large: "m7i-flex.large",
  m7i_flex_xlarge: "m7i-flex.xlarge",
  m7i_large: "m7i.large",
  m7i_metal_24xl: "m7i.metal-24xl",
  m7i_metal_48xl: "m7i.metal-48xl",
  m7i_xlarge: "m7i.xlarge",
  m8g_12xlarge: "m8g.12xlarge",
  m8g_16xlarge: "m8g.16xlarge",
  m8g_24xlarge: "m8g.24xlarge",
  m8g_2xlarge: "m8g.2xlarge",
  m8g_48xlarge: "m8g.48xlarge",
  m8g_4xlarge: "m8g.4xlarge",
  m8g_8xlarge: "m8g.8xlarge",
  m8g_large: "m8g.large",
  m8g_medium: "m8g.medium",
  m8g_metal_24xl: "m8g.metal-24xl",
  m8g_metal_48xl: "m8g.metal-48xl",
  m8g_xlarge: "m8g.xlarge",
  mac1_metal: "mac1.metal",
  mac2_m1ultra_metal: "mac2-m1ultra.metal",
  mac2_m2_metal: "mac2-m2.metal",
  mac2_m2pro_metal: "mac2-m2pro.metal",
  mac2_metal: "mac2.metal",
  p2_16xlarge: "p2.16xlarge",
  p2_8xlarge: "p2.8xlarge",
  p2_xlarge: "p2.xlarge",
  p3_16xlarge: "p3.16xlarge",
  p3_2xlarge: "p3.2xlarge",
  p3_8xlarge: "p3.8xlarge",
  p3dn_24xlarge: "p3dn.24xlarge",
  p4d_24xlarge: "p4d.24xlarge",
  p4de_24xlarge: "p4de.24xlarge",
  p5_48xlarge: "p5.48xlarge",
  p5e_48xlarge: "p5e.48xlarge",
  p5en_48xlarge: "p5en.48xlarge",
  r3_2xlarge: "r3.2xlarge",
  r3_4xlarge: "r3.4xlarge",
  r3_8xlarge: "r3.8xlarge",
  r3_large: "r3.large",
  r3_xlarge: "r3.xlarge",
  r4_16xlarge: "r4.16xlarge",
  r4_2xlarge: "r4.2xlarge",
  r4_4xlarge: "r4.4xlarge",
  r4_8xlarge: "r4.8xlarge",
  r4_large: "r4.large",
  r4_xlarge: "r4.xlarge",
  r5_12xlarge: "r5.12xlarge",
  r5_16xlarge: "r5.16xlarge",
  r5_24xlarge: "r5.24xlarge",
  r5_2xlarge: "r5.2xlarge",
  r5_4xlarge: "r5.4xlarge",
  r5_8xlarge: "r5.8xlarge",
  r5_large: "r5.large",
  r5_metal: "r5.metal",
  r5_xlarge: "r5.xlarge",
  r5a_12xlarge: "r5a.12xlarge",
  r5a_16xlarge: "r5a.16xlarge",
  r5a_24xlarge: "r5a.24xlarge",
  r5a_2xlarge: "r5a.2xlarge",
  r5a_4xlarge: "r5a.4xlarge",
  r5a_8xlarge: "r5a.8xlarge",
  r5a_large: "r5a.large",
  r5a_xlarge: "r5a.xlarge",
  r5ad_12xlarge: "r5ad.12xlarge",
  r5ad_16xlarge: "r5ad.16xlarge",
  r5ad_24xlarge: "r5ad.24xlarge",
  r5ad_2xlarge: "r5ad.2xlarge",
  r5ad_4xlarge: "r5ad.4xlarge",
  r5ad_8xlarge: "r5ad.8xlarge",
  r5ad_large: "r5ad.large",
  r5ad_xlarge: "r5ad.xlarge",
  r5b_12xlarge: "r5b.12xlarge",
  r5b_16xlarge: "r5b.16xlarge",
  r5b_24xlarge: "r5b.24xlarge",
  r5b_2xlarge: "r5b.2xlarge",
  r5b_4xlarge: "r5b.4xlarge",
  r5b_8xlarge: "r5b.8xlarge",
  r5b_large: "r5b.large",
  r5b_metal: "r5b.metal",
  r5b_xlarge: "r5b.xlarge",
  r5d_12xlarge: "r5d.12xlarge",
  r5d_16xlarge: "r5d.16xlarge",
  r5d_24xlarge: "r5d.24xlarge",
  r5d_2xlarge: "r5d.2xlarge",
  r5d_4xlarge: "r5d.4xlarge",
  r5d_8xlarge: "r5d.8xlarge",
  r5d_large: "r5d.large",
  r5d_metal: "r5d.metal",
  r5d_xlarge: "r5d.xlarge",
  r5dn_12xlarge: "r5dn.12xlarge",
  r5dn_16xlarge: "r5dn.16xlarge",
  r5dn_24xlarge: "r5dn.24xlarge",
  r5dn_2xlarge: "r5dn.2xlarge",
  r5dn_4xlarge: "r5dn.4xlarge",
  r5dn_8xlarge: "r5dn.8xlarge",
  r5dn_large: "r5dn.large",
  r5dn_metal: "r5dn.metal",
  r5dn_xlarge: "r5dn.xlarge",
  r5n_12xlarge: "r5n.12xlarge",
  r5n_16xlarge: "r5n.16xlarge",
  r5n_24xlarge: "r5n.24xlarge",
  r5n_2xlarge: "r5n.2xlarge",
  r5n_4xlarge: "r5n.4xlarge",
  r5n_8xlarge: "r5n.8xlarge",
  r5n_large: "r5n.large",
  r5n_metal: "r5n.metal",
  r5n_xlarge: "r5n.xlarge",
  r6a_12xlarge: "r6a.12xlarge",
  r6a_16xlarge: "r6a.16xlarge",
  r6a_24xlarge: "r6a.24xlarge",
  r6a_2xlarge: "r6a.2xlarge",
  r6a_32xlarge: "r6a.32xlarge",
  r6a_48xlarge: "r6a.48xlarge",
  r6a_4xlarge: "r6a.4xlarge",
  r6a_8xlarge: "r6a.8xlarge",
  r6a_large: "r6a.large",
  r6a_metal: "r6a.metal",
  r6a_xlarge: "r6a.xlarge",
  r6g_12xlarge: "r6g.12xlarge",
  r6g_16xlarge: "r6g.16xlarge",
  r6g_2xlarge: "r6g.2xlarge",
  r6g_4xlarge: "r6g.4xlarge",
  r6g_8xlarge: "r6g.8xlarge",
  r6g_large: "r6g.large",
  r6g_medium: "r6g.medium",
  r6g_metal: "r6g.metal",
  r6g_xlarge: "r6g.xlarge",
  r6gd_12xlarge: "r6gd.12xlarge",
  r6gd_16xlarge: "r6gd.16xlarge",
  r6gd_2xlarge: "r6gd.2xlarge",
  r6gd_4xlarge: "r6gd.4xlarge",
  r6gd_8xlarge: "r6gd.8xlarge",
  r6gd_large: "r6gd.large",
  r6gd_medium: "r6gd.medium",
  r6gd_metal: "r6gd.metal",
  r6gd_xlarge: "r6gd.xlarge",
  r6i_12xlarge: "r6i.12xlarge",
  r6i_16xlarge: "r6i.16xlarge",
  r6i_24xlarge: "r6i.24xlarge",
  r6i_2xlarge: "r6i.2xlarge",
  r6i_32xlarge: "r6i.32xlarge",
  r6i_4xlarge: "r6i.4xlarge",
  r6i_8xlarge: "r6i.8xlarge",
  r6i_large: "r6i.large",
  r6i_metal: "r6i.metal",
  r6i_xlarge: "r6i.xlarge",
  r6id_12xlarge: "r6id.12xlarge",
  r6id_16xlarge: "r6id.16xlarge",
  r6id_24xlarge: "r6id.24xlarge",
  r6id_2xlarge: "r6id.2xlarge",
  r6id_32xlarge: "r6id.32xlarge",
  r6id_4xlarge: "r6id.4xlarge",
  r6id_8xlarge: "r6id.8xlarge",
  r6id_large: "r6id.large",
  r6id_metal: "r6id.metal",
  r6id_xlarge: "r6id.xlarge",
  r6idn_12xlarge: "r6idn.12xlarge",
  r6idn_16xlarge: "r6idn.16xlarge",
  r6idn_24xlarge: "r6idn.24xlarge",
  r6idn_2xlarge: "r6idn.2xlarge",
  r6idn_32xlarge: "r6idn.32xlarge",
  r6idn_4xlarge: "r6idn.4xlarge",
  r6idn_8xlarge: "r6idn.8xlarge",
  r6idn_large: "r6idn.large",
  r6idn_metal: "r6idn.metal",
  r6idn_xlarge: "r6idn.xlarge",
  r6in_12xlarge: "r6in.12xlarge",
  r6in_16xlarge: "r6in.16xlarge",
  r6in_24xlarge: "r6in.24xlarge",
  r6in_2xlarge: "r6in.2xlarge",
  r6in_32xlarge: "r6in.32xlarge",
  r6in_4xlarge: "r6in.4xlarge",
  r6in_8xlarge: "r6in.8xlarge",
  r6in_large: "r6in.large",
  r6in_metal: "r6in.metal",
  r6in_xlarge: "r6in.xlarge",
  r7a_12xlarge: "r7a.12xlarge",
  r7a_16xlarge: "r7a.16xlarge",
  r7a_24xlarge: "r7a.24xlarge",
  r7a_2xlarge: "r7a.2xlarge",
  r7a_32xlarge: "r7a.32xlarge",
  r7a_48xlarge: "r7a.48xlarge",
  r7a_4xlarge: "r7a.4xlarge",
  r7a_8xlarge: "r7a.8xlarge",
  r7a_large: "r7a.large",
  r7a_medium: "r7a.medium",
  r7a_metal_48xl: "r7a.metal-48xl",
  r7a_xlarge: "r7a.xlarge",
  r7g_12xlarge: "r7g.12xlarge",
  r7g_16xlarge: "r7g.16xlarge",
  r7g_2xlarge: "r7g.2xlarge",
  r7g_4xlarge: "r7g.4xlarge",
  r7g_8xlarge: "r7g.8xlarge",
  r7g_large: "r7g.large",
  r7g_medium: "r7g.medium",
  r7g_metal: "r7g.metal",
  r7g_xlarge: "r7g.xlarge",
  r7gd_12xlarge: "r7gd.12xlarge",
  r7gd_16xlarge: "r7gd.16xlarge",
  r7gd_2xlarge: "r7gd.2xlarge",
  r7gd_4xlarge: "r7gd.4xlarge",
  r7gd_8xlarge: "r7gd.8xlarge",
  r7gd_large: "r7gd.large",
  r7gd_medium: "r7gd.medium",
  r7gd_metal: "r7gd.metal",
  r7gd_xlarge: "r7gd.xlarge",
  r7i_12xlarge: "r7i.12xlarge",
  r7i_16xlarge: "r7i.16xlarge",
  r7i_24xlarge: "r7i.24xlarge",
  r7i_2xlarge: "r7i.2xlarge",
  r7i_48xlarge: "r7i.48xlarge",
  r7i_4xlarge: "r7i.4xlarge",
  r7i_8xlarge: "r7i.8xlarge",
  r7i_large: "r7i.large",
  r7i_metal_24xl: "r7i.metal-24xl",
  r7i_metal_48xl: "r7i.metal-48xl",
  r7i_xlarge: "r7i.xlarge",
  r7iz_12xlarge: "r7iz.12xlarge",
  r7iz_16xlarge: "r7iz.16xlarge",
  r7iz_2xlarge: "r7iz.2xlarge",
  r7iz_32xlarge: "r7iz.32xlarge",
  r7iz_4xlarge: "r7iz.4xlarge",
  r7iz_8xlarge: "r7iz.8xlarge",
  r7iz_large: "r7iz.large",
  r7iz_metal_16xl: "r7iz.metal-16xl",
  r7iz_metal_32xl: "r7iz.metal-32xl",
  r7iz_xlarge: "r7iz.xlarge",
  r8g_12xlarge: "r8g.12xlarge",
  r8g_16xlarge: "r8g.16xlarge",
  r8g_24xlarge: "r8g.24xlarge",
  r8g_2xlarge: "r8g.2xlarge",
  r8g_48xlarge: "r8g.48xlarge",
  r8g_4xlarge: "r8g.4xlarge",
  r8g_8xlarge: "r8g.8xlarge",
  r8g_large: "r8g.large",
  r8g_medium: "r8g.medium",
  r8g_metal_24xl: "r8g.metal-24xl",
  r8g_metal_48xl: "r8g.metal-48xl",
  r8g_xlarge: "r8g.xlarge",
  t1_micro: "t1.micro",
  t2_2xlarge: "t2.2xlarge",
  t2_large: "t2.large",
  t2_medium: "t2.medium",
  t2_micro: "t2.micro",
  t2_nano: "t2.nano",
  t2_small: "t2.small",
  t2_xlarge: "t2.xlarge",
  t3_2xlarge: "t3.2xlarge",
  t3_large: "t3.large",
  t3_medium: "t3.medium",
  t3_micro: "t3.micro",
  t3_nano: "t3.nano",
  t3_small: "t3.small",
  t3_xlarge: "t3.xlarge",
  t3a_2xlarge: "t3a.2xlarge",
  t3a_large: "t3a.large",
  t3a_medium: "t3a.medium",
  t3a_micro: "t3a.micro",
  t3a_nano: "t3a.nano",
  t3a_small: "t3a.small",
  t3a_xlarge: "t3a.xlarge",
  t4g_2xlarge: "t4g.2xlarge",
  t4g_large: "t4g.large",
  t4g_medium: "t4g.medium",
  t4g_micro: "t4g.micro",
  t4g_nano: "t4g.nano",
  t4g_small: "t4g.small",
  t4g_xlarge: "t4g.xlarge",
  trn1_2xlarge: "trn1.2xlarge",
  trn1_32xlarge: "trn1.32xlarge",
  trn1n_32xlarge: "trn1n.32xlarge",
  trn2_48xlarge: "trn2.48xlarge",
  u7i_12tb_224xlarge: "u7i-12tb.224xlarge",
  u7i_6tb_112xlarge: "u7i-6tb.112xlarge",
  u7i_8tb_112xlarge: "u7i-8tb.112xlarge",
  u7ib_12tb_224xlarge: "u7ib-12tb.224xlarge",
  u7in_16tb_224xlarge: "u7in-16tb.224xlarge",
  u7in_24tb_224xlarge: "u7in-24tb.224xlarge",
  u7in_32tb_224xlarge: "u7in-32tb.224xlarge",
  u7inh_32tb_480xlarge: "u7inh-32tb.480xlarge",
  u_12tb1_112xlarge: "u-12tb1.112xlarge",
  u_12tb1_metal: "u-12tb1.metal",
  u_18tb1_112xlarge: "u-18tb1.112xlarge",
  u_18tb1_metal: "u-18tb1.metal",
  u_24tb1_112xlarge: "u-24tb1.112xlarge",
  u_24tb1_metal: "u-24tb1.metal",
  u_3tb1_56xlarge: "u-3tb1.56xlarge",
  u_6tb1_112xlarge: "u-6tb1.112xlarge",
  u_6tb1_56xlarge: "u-6tb1.56xlarge",
  u_6tb1_metal: "u-6tb1.metal",
  u_9tb1_112xlarge: "u-9tb1.112xlarge",
  u_9tb1_metal: "u-9tb1.metal",
  vt1_24xlarge: "vt1.24xlarge",
  vt1_3xlarge: "vt1.3xlarge",
  vt1_6xlarge: "vt1.6xlarge",
  x1_16xlarge: "x1.16xlarge",
  x1_32xlarge: "x1.32xlarge",
  x1e_16xlarge: "x1e.16xlarge",
  x1e_2xlarge: "x1e.2xlarge",
  x1e_32xlarge: "x1e.32xlarge",
  x1e_4xlarge: "x1e.4xlarge",
  x1e_8xlarge: "x1e.8xlarge",
  x1e_xlarge: "x1e.xlarge",
  x2gd_12xlarge: "x2gd.12xlarge",
  x2gd_16xlarge: "x2gd.16xlarge",
  x2gd_2xlarge: "x2gd.2xlarge",
  x2gd_4xlarge: "x2gd.4xlarge",
  x2gd_8xlarge: "x2gd.8xlarge",
  x2gd_large: "x2gd.large",
  x2gd_medium: "x2gd.medium",
  x2gd_metal: "x2gd.metal",
  x2gd_xlarge: "x2gd.xlarge",
  x2idn_16xlarge: "x2idn.16xlarge",
  x2idn_24xlarge: "x2idn.24xlarge",
  x2idn_32xlarge: "x2idn.32xlarge",
  x2idn_metal: "x2idn.metal",
  x2iedn_16xlarge: "x2iedn.16xlarge",
  x2iedn_24xlarge: "x2iedn.24xlarge",
  x2iedn_2xlarge: "x2iedn.2xlarge",
  x2iedn_32xlarge: "x2iedn.32xlarge",
  x2iedn_4xlarge: "x2iedn.4xlarge",
  x2iedn_8xlarge: "x2iedn.8xlarge",
  x2iedn_metal: "x2iedn.metal",
  x2iedn_xlarge: "x2iedn.xlarge",
  x2iezn_12xlarge: "x2iezn.12xlarge",
  x2iezn_2xlarge: "x2iezn.2xlarge",
  x2iezn_4xlarge: "x2iezn.4xlarge",
  x2iezn_6xlarge: "x2iezn.6xlarge",
  x2iezn_8xlarge: "x2iezn.8xlarge",
  x2iezn_metal: "x2iezn.metal",
  x8g_12xlarge: "x8g.12xlarge",
  x8g_16xlarge: "x8g.16xlarge",
  x8g_24xlarge: "x8g.24xlarge",
  x8g_2xlarge: "x8g.2xlarge",
  x8g_48xlarge: "x8g.48xlarge",
  x8g_4xlarge: "x8g.4xlarge",
  x8g_8xlarge: "x8g.8xlarge",
  x8g_large: "x8g.large",
  x8g_medium: "x8g.medium",
  x8g_metal_24xl: "x8g.metal-24xl",
  x8g_metal_48xl: "x8g.metal-48xl",
  x8g_xlarge: "x8g.xlarge",
  z1d_12xlarge: "z1d.12xlarge",
  z1d_2xlarge: "z1d.2xlarge",
  z1d_3xlarge: "z1d.3xlarge",
  z1d_6xlarge: "z1d.6xlarge",
  z1d_large: "z1d.large",
  z1d_metal: "z1d.metal",
  z1d_xlarge: "z1d.xlarge"
};
var FleetCapacityReservationTenancy = {
  default: "default"
};
var CarrierGatewayState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var ClientVpnAuthenticationType = {
  certificate_authentication: "certificate-authentication",
  directory_service_authentication: "directory-service-authentication",
  federated_authentication: "federated-authentication"
};
var SelfServicePortal = {
  disabled: "disabled",
  enabled: "enabled"
};
var TransportProtocol = {
  tcp: "tcp",
  udp: "udp"
};
var ClientVpnEndpointStatusCode = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending_associate: "pending-associate"
};
var ClientVpnRouteStatusCode = {
  active: "active",
  creating: "creating",
  deleting: "deleting",
  failed: "failed"
};
var GatewayType = {
  ipsec_1: "ipsec.1"
};
var BlockPublicAccessMode = {
  block_bidirectional: "block-bidirectional",
  block_ingress: "block-ingress",
  off: "off"
};
var HostnameType = {
  ip_name: "ip-name",
  resource_name: "resource-name"
};
var SubnetState = {
  available: "available",
  pending: "pending",
  unavailable: "unavailable"
};
var Tenancy = {
  dedicated: "dedicated",
  default: "default",
  host: "host"
};
var VpcState = {
  available: "available",
  pending: "pending"
};
var FleetExcessCapacityTerminationPolicy = {
  NO_TERMINATION: "no-termination",
  TERMINATION: "termination"
};
var BareMetal = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var BurstablePerformance = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var CpuManufacturer = {
  AMAZON_WEB_SERVICES: "amazon-web-services",
  AMD: "amd",
  APPLE: "apple",
  INTEL: "intel"
};
var InstanceGeneration = {
  CURRENT: "current",
  PREVIOUS: "previous"
};
var LocalStorage = {
  EXCLUDED: "excluded",
  INCLUDED: "included",
  REQUIRED: "required"
};
var LocalStorageType = {
  HDD: "hdd",
  SSD: "ssd"
};
var FleetOnDemandAllocationStrategy = {
  LOWEST_PRICE: "lowest-price",
  PRIORITIZED: "prioritized"
};
var FleetCapacityReservationUsageStrategy = {
  USE_CAPACITY_RESERVATIONS_FIRST: "use-capacity-reservations-first"
};
var SpotAllocationStrategy = {
  CAPACITY_OPTIMIZED: "capacity-optimized",
  CAPACITY_OPTIMIZED_PRIORITIZED: "capacity-optimized-prioritized",
  DIVERSIFIED: "diversified",
  LOWEST_PRICE: "lowest-price",
  PRICE_CAPACITY_OPTIMIZED: "price-capacity-optimized"
};
var SpotInstanceInterruptionBehavior = {
  hibernate: "hibernate",
  stop: "stop",
  terminate: "terminate"
};
var FleetReplacementStrategy = {
  LAUNCH: "launch",
  LAUNCH_BEFORE_TERMINATE: "launch-before-terminate"
};
var DefaultTargetCapacityType = {
  CAPACITY_BLOCK: "capacity-block",
  ON_DEMAND: "on-demand",
  SPOT: "spot"
};
var TargetCapacityUnitType = {
  MEMORY_MIB: "memory-mib",
  UNITS: "units",
  VCPU: "vcpu"
};
var FleetType = {
  INSTANT: "instant",
  MAINTAIN: "maintain",
  REQUEST: "request"
};
var InstanceLifecycle = {
  ON_DEMAND: "on-demand",
  SPOT: "spot"
};
var PlatformValues = {
  Windows: "Windows"
};
var DestinationFileFormat = {
  parquet: "parquet",
  plain_text: "plain-text"
};
var LogDestinationType = {
  cloud_watch_logs: "cloud-watch-logs",
  kinesis_data_firehose: "kinesis-data-firehose",
  s3: "s3"
};
var FlowLogsResourceType = {
  NetworkInterface: "NetworkInterface",
  Subnet: "Subnet",
  TransitGateway: "TransitGateway",
  TransitGatewayAttachment: "TransitGatewayAttachment",
  VPC: "VPC"
};
var TrafficType = {
  ACCEPT: "ACCEPT",
  ALL: "ALL",
  REJECT: "REJECT"
};
var VolumeType = {
  gp2: "gp2",
  gp3: "gp3",
  io1: "io1",
  io2: "io2",
  sc1: "sc1",
  st1: "st1",
  standard: "standard"
};
var Ec2InstanceConnectEndpointState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_failed: "delete-failed",
  delete_in_progress: "delete-in-progress"
};
var ContainerFormat = {
  ova: "ova"
};
var DiskImageFormat = {
  RAW: "RAW",
  VHD: "VHD",
  VMDK: "VMDK"
};
var ExportEnvironment = {
  citrix: "citrix",
  microsoft: "microsoft",
  vmware: "vmware"
};
var ExportTaskState = {
  active: "active",
  cancelled: "cancelled",
  cancelling: "cancelling",
  completed: "completed"
};
var IpamTier = {
  advanced: "advanced",
  free: "free"
};
var IpamState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_failed: "delete-failed",
  delete_in_progress: "delete-in-progress",
  isolate_complete: "isolate-complete",
  isolate_in_progress: "isolate-in-progress",
  modify_complete: "modify-complete",
  modify_failed: "modify-failed",
  modify_in_progress: "modify-in-progress",
  restore_in_progress: "restore-in-progress"
};
var IpamExternalResourceVerificationTokenState = {
  CREATE_COMPLETE: "create-complete",
  CREATE_FAILED: "create-failed",
  CREATE_IN_PROGRESS: "create-in-progress",
  DELETE_COMPLETE: "delete-complete",
  DELETE_FAILED: "delete-failed",
  DELETE_IN_PROGRESS: "delete-in-progress"
};
var TokenState = {
  expired: "expired",
  valid: "valid"
};
var IpamPoolAwsService = {
  ec2: "ec2"
};
var IpamPoolPublicIpSource = {
  amazon: "amazon",
  byoip: "byoip"
};
var IpamPoolSourceResourceType = {
  vpc: "vpc"
};
var IpamScopeType = {
  private: "private",
  public: "public"
};
var IpamPoolState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_failed: "delete-failed",
  delete_in_progress: "delete-in-progress",
  isolate_complete: "isolate-complete",
  isolate_in_progress: "isolate-in-progress",
  modify_complete: "modify-complete",
  modify_failed: "modify-failed",
  modify_in_progress: "modify-in-progress",
  restore_in_progress: "restore-in-progress"
};
var IpamResourceDiscoveryState = {
  CREATE_COMPLETE: "create-complete",
  CREATE_FAILED: "create-failed",
  CREATE_IN_PROGRESS: "create-in-progress",
  DELETE_COMPLETE: "delete-complete",
  DELETE_FAILED: "delete-failed",
  DELETE_IN_PROGRESS: "delete-in-progress",
  ISOLATE_COMPLETE: "isolate-complete",
  ISOLATE_IN_PROGRESS: "isolate-in-progress",
  MODIFY_COMPLETE: "modify-complete",
  MODIFY_FAILED: "modify-failed",
  MODIFY_IN_PROGRESS: "modify-in-progress",
  RESTORE_IN_PROGRESS: "restore-in-progress"
};
var IpamScopeState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_failed: "delete-failed",
  delete_in_progress: "delete-in-progress",
  isolate_complete: "isolate-complete",
  isolate_in_progress: "isolate-in-progress",
  modify_complete: "modify-complete",
  modify_failed: "modify-failed",
  modify_in_progress: "modify-in-progress",
  restore_in_progress: "restore-in-progress"
};
var KeyFormat = {
  pem: "pem",
  ppk: "ppk"
};
var KeyType = {
  ed25519: "ed25519",
  rsa: "rsa"
};
var CapacityReservationPreference = {
  capacity_reservations_only: "capacity-reservations-only",
  none: "none",
  open: "open"
};
var AmdSevSnpSpecification = {
  disabled: "disabled",
  enabled: "enabled"
};
var ShutdownBehavior = {
  stop: "stop",
  terminate: "terminate"
};
var MarketType = {
  capacity_block: "capacity-block",
  spot: "spot"
};
var InstanceInterruptionBehavior = {
  hibernate: "hibernate",
  stop: "stop",
  terminate: "terminate"
};
var SpotInstanceType = {
  one_time: "one-time",
  persistent: "persistent"
};
var LaunchTemplateAutoRecoveryState = {
  default: "default",
  disabled: "disabled"
};
var LaunchTemplateInstanceMetadataEndpointState = {
  disabled: "disabled",
  enabled: "enabled"
};
var LaunchTemplateInstanceMetadataProtocolIpv6 = {
  disabled: "disabled",
  enabled: "enabled"
};
var LaunchTemplateHttpTokensState = {
  optional: "optional",
  required: "required"
};
var LaunchTemplateInstanceMetadataTagsState = {
  disabled: "disabled",
  enabled: "enabled"
};
var InstanceBandwidthWeighting = {
  DEFAULT: "default",
  EBS_1: "ebs-1",
  VPC_1: "vpc-1"
};
var LaunchTemplateInstanceMetadataOptionsState = {
  applied: "applied",
  pending: "pending"
};
var LocalGatewayRouteState = {
  active: "active",
  blackhole: "blackhole",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var LocalGatewayRouteType = {
  propagated: "propagated",
  static: "static"
};
var LocalGatewayRouteTableMode = {
  coip: "coip",
  direct_vpc_routing: "direct-vpc-routing"
};
var KeyPairFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.KeyMaterial && { KeyMaterial: SENSITIVE_STRING }
});
var RequestLaunchTemplateDataFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var CreateLaunchTemplateRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateData && {
    LaunchTemplateData: RequestLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData)
  }
});
var CreateLaunchTemplateVersionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateData && {
    LaunchTemplateData: RequestLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData)
  }
});
var ResponseLaunchTemplateDataFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var LaunchTemplateVersionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateData && {
    LaunchTemplateData: ResponseLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData)
  }
});
var CreateLaunchTemplateVersionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateVersion && {
    LaunchTemplateVersion: LaunchTemplateVersionFilterSensitiveLog(obj.LaunchTemplateVersion)
  }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateKeyPairCommand.js
var CreateKeyPairCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateKeyPair", {}).n("EC2Client", "CreateKeyPairCommand").f(void 0, KeyPairFilterSensitiveLog).ser(se_CreateKeyPairCommand).de(de_CreateKeyPairCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLaunchTemplateCommand.js
var CreateLaunchTemplateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLaunchTemplate", {}).n("EC2Client", "CreateLaunchTemplateCommand").f(CreateLaunchTemplateRequestFilterSensitiveLog, void 0).ser(se_CreateLaunchTemplateCommand).de(de_CreateLaunchTemplateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLaunchTemplateVersionCommand.js
var CreateLaunchTemplateVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLaunchTemplateVersion", {}).n("EC2Client", "CreateLaunchTemplateVersionCommand").f(CreateLaunchTemplateVersionRequestFilterSensitiveLog, CreateLaunchTemplateVersionResultFilterSensitiveLog).ser(se_CreateLaunchTemplateVersionCommand).de(de_CreateLaunchTemplateVersionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLocalGatewayRouteCommand.js
var CreateLocalGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLocalGatewayRoute", {}).n("EC2Client", "CreateLocalGatewayRouteCommand").f(void 0, void 0).ser(se_CreateLocalGatewayRouteCommand).de(de_CreateLocalGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLocalGatewayRouteTableCommand.js
var CreateLocalGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLocalGatewayRouteTable", {}).n("EC2Client", "CreateLocalGatewayRouteTableCommand").f(void 0, void 0).ser(se_CreateLocalGatewayRouteTableCommand).de(de_CreateLocalGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand.js
var CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation", {}).n("EC2Client", "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand").f(void 0, void 0).ser(se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand).de(de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateLocalGatewayRouteTableVpcAssociationCommand.js
var CreateLocalGatewayRouteTableVpcAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateLocalGatewayRouteTableVpcAssociation", {}).n("EC2Client", "CreateLocalGatewayRouteTableVpcAssociationCommand").f(void 0, void 0).ser(se_CreateLocalGatewayRouteTableVpcAssociationCommand).de(de_CreateLocalGatewayRouteTableVpcAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateManagedPrefixListCommand.js
var CreateManagedPrefixListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateManagedPrefixList", {}).n("EC2Client", "CreateManagedPrefixListCommand").f(void 0, void 0).ser(se_CreateManagedPrefixListCommand).de(de_CreateManagedPrefixListCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNatGatewayCommand.js
var CreateNatGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNatGateway", {}).n("EC2Client", "CreateNatGatewayCommand").f(void 0, void 0).ser(se_CreateNatGatewayCommand).de(de_CreateNatGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkAclCommand.js
var CreateNetworkAclCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkAcl", {}).n("EC2Client", "CreateNetworkAclCommand").f(void 0, void 0).ser(se_CreateNetworkAclCommand).de(de_CreateNetworkAclCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkAclEntryCommand.js
var CreateNetworkAclEntryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkAclEntry", {}).n("EC2Client", "CreateNetworkAclEntryCommand").f(void 0, void 0).ser(se_CreateNetworkAclEntryCommand).de(de_CreateNetworkAclEntryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkInsightsAccessScopeCommand.js
var CreateNetworkInsightsAccessScopeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkInsightsAccessScope", {}).n("EC2Client", "CreateNetworkInsightsAccessScopeCommand").f(void 0, void 0).ser(se_CreateNetworkInsightsAccessScopeCommand).de(de_CreateNetworkInsightsAccessScopeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkInsightsPathCommand.js
var CreateNetworkInsightsPathCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkInsightsPath", {}).n("EC2Client", "CreateNetworkInsightsPathCommand").f(void 0, void 0).ser(se_CreateNetworkInsightsPathCommand).de(de_CreateNetworkInsightsPathCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkInterfaceCommand.js
var CreateNetworkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkInterface", {}).n("EC2Client", "CreateNetworkInterfaceCommand").f(void 0, void 0).ser(se_CreateNetworkInterfaceCommand).de(de_CreateNetworkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateNetworkInterfacePermissionCommand.js
var CreateNetworkInterfacePermissionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateNetworkInterfacePermission", {}).n("EC2Client", "CreateNetworkInterfacePermissionCommand").f(void 0, void 0).ser(se_CreateNetworkInterfacePermissionCommand).de(de_CreateNetworkInterfacePermissionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreatePlacementGroupCommand.js
var CreatePlacementGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreatePlacementGroup", {}).n("EC2Client", "CreatePlacementGroupCommand").f(void 0, void 0).ser(se_CreatePlacementGroupCommand).de(de_CreatePlacementGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreatePublicIpv4PoolCommand.js
var CreatePublicIpv4PoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreatePublicIpv4Pool", {}).n("EC2Client", "CreatePublicIpv4PoolCommand").f(void 0, void 0).ser(se_CreatePublicIpv4PoolCommand).de(de_CreatePublicIpv4PoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateReplaceRootVolumeTaskCommand.js
var CreateReplaceRootVolumeTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateReplaceRootVolumeTask", {}).n("EC2Client", "CreateReplaceRootVolumeTaskCommand").f(void 0, void 0).ser(se_CreateReplaceRootVolumeTaskCommand).de(de_CreateReplaceRootVolumeTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateReservedInstancesListingCommand.js
var CreateReservedInstancesListingCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateReservedInstancesListing", {}).n("EC2Client", "CreateReservedInstancesListingCommand").f(void 0, void 0).ser(se_CreateReservedInstancesListingCommand).de(de_CreateReservedInstancesListingCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateRestoreImageTaskCommand.js
var CreateRestoreImageTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateRestoreImageTask", {}).n("EC2Client", "CreateRestoreImageTaskCommand").f(void 0, void 0).ser(se_CreateRestoreImageTaskCommand).de(de_CreateRestoreImageTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateRouteCommand.js
var CreateRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateRoute", {}).n("EC2Client", "CreateRouteCommand").f(void 0, void 0).ser(se_CreateRouteCommand).de(de_CreateRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateRouteTableCommand.js
var CreateRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateRouteTable", {}).n("EC2Client", "CreateRouteTableCommand").f(void 0, void 0).ser(se_CreateRouteTableCommand).de(de_CreateRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSecurityGroupCommand.js
var CreateSecurityGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSecurityGroup", {}).n("EC2Client", "CreateSecurityGroupCommand").f(void 0, void 0).ser(se_CreateSecurityGroupCommand).de(de_CreateSecurityGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSnapshotCommand.js
var CreateSnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSnapshot", {}).n("EC2Client", "CreateSnapshotCommand").f(void 0, void 0).ser(se_CreateSnapshotCommand).de(de_CreateSnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSnapshotsCommand.js
var CreateSnapshotsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSnapshots", {}).n("EC2Client", "CreateSnapshotsCommand").f(void 0, void 0).ser(se_CreateSnapshotsCommand).de(de_CreateSnapshotsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSpotDatafeedSubscriptionCommand.js
var CreateSpotDatafeedSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSpotDatafeedSubscription", {}).n("EC2Client", "CreateSpotDatafeedSubscriptionCommand").f(void 0, void 0).ser(se_CreateSpotDatafeedSubscriptionCommand).de(de_CreateSpotDatafeedSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateStoreImageTaskCommand.js
var CreateStoreImageTaskCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateStoreImageTask", {}).n("EC2Client", "CreateStoreImageTaskCommand").f(void 0, void 0).ser(se_CreateStoreImageTaskCommand).de(de_CreateStoreImageTaskCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSubnetCidrReservationCommand.js
var CreateSubnetCidrReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSubnetCidrReservation", {}).n("EC2Client", "CreateSubnetCidrReservationCommand").f(void 0, void 0).ser(se_CreateSubnetCidrReservationCommand).de(de_CreateSubnetCidrReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateSubnetCommand.js
var CreateSubnetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateSubnet", {}).n("EC2Client", "CreateSubnetCommand").f(void 0, void 0).ser(se_CreateSubnetCommand).de(de_CreateSubnetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTagsCommand.js
var CreateTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTags", {}).n("EC2Client", "CreateTagsCommand").f(void 0, void 0).ser(se_CreateTagsCommand).de(de_CreateTagsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTrafficMirrorFilterCommand.js
var CreateTrafficMirrorFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTrafficMirrorFilter", {}).n("EC2Client", "CreateTrafficMirrorFilterCommand").f(void 0, void 0).ser(se_CreateTrafficMirrorFilterCommand).de(de_CreateTrafficMirrorFilterCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTrafficMirrorFilterRuleCommand.js
var CreateTrafficMirrorFilterRuleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTrafficMirrorFilterRule", {}).n("EC2Client", "CreateTrafficMirrorFilterRuleCommand").f(void 0, void 0).ser(se_CreateTrafficMirrorFilterRuleCommand).de(de_CreateTrafficMirrorFilterRuleCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTrafficMirrorSessionCommand.js
var CreateTrafficMirrorSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTrafficMirrorSession", {}).n("EC2Client", "CreateTrafficMirrorSessionCommand").f(void 0, void 0).ser(se_CreateTrafficMirrorSessionCommand).de(de_CreateTrafficMirrorSessionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTrafficMirrorTargetCommand.js
var CreateTrafficMirrorTargetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTrafficMirrorTarget", {}).n("EC2Client", "CreateTrafficMirrorTargetCommand").f(void 0, void 0).ser(se_CreateTrafficMirrorTargetCommand).de(de_CreateTrafficMirrorTargetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayCommand.js
var CreateTransitGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGateway", {}).n("EC2Client", "CreateTransitGatewayCommand").f(void 0, void 0).ser(se_CreateTransitGatewayCommand).de(de_CreateTransitGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayConnectCommand.js
var CreateTransitGatewayConnectCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayConnect", {}).n("EC2Client", "CreateTransitGatewayConnectCommand").f(void 0, void 0).ser(se_CreateTransitGatewayConnectCommand).de(de_CreateTransitGatewayConnectCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayConnectPeerCommand.js
var CreateTransitGatewayConnectPeerCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayConnectPeer", {}).n("EC2Client", "CreateTransitGatewayConnectPeerCommand").f(void 0, void 0).ser(se_CreateTransitGatewayConnectPeerCommand).de(de_CreateTransitGatewayConnectPeerCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayMulticastDomainCommand.js
var CreateTransitGatewayMulticastDomainCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayMulticastDomain", {}).n("EC2Client", "CreateTransitGatewayMulticastDomainCommand").f(void 0, void 0).ser(se_CreateTransitGatewayMulticastDomainCommand).de(de_CreateTransitGatewayMulticastDomainCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayPeeringAttachmentCommand.js
var CreateTransitGatewayPeeringAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayPeeringAttachment", {}).n("EC2Client", "CreateTransitGatewayPeeringAttachmentCommand").f(void 0, void 0).ser(se_CreateTransitGatewayPeeringAttachmentCommand).de(de_CreateTransitGatewayPeeringAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayPolicyTableCommand.js
var CreateTransitGatewayPolicyTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayPolicyTable", {}).n("EC2Client", "CreateTransitGatewayPolicyTableCommand").f(void 0, void 0).ser(se_CreateTransitGatewayPolicyTableCommand).de(de_CreateTransitGatewayPolicyTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayPrefixListReferenceCommand.js
var CreateTransitGatewayPrefixListReferenceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayPrefixListReference", {}).n("EC2Client", "CreateTransitGatewayPrefixListReferenceCommand").f(void 0, void 0).ser(se_CreateTransitGatewayPrefixListReferenceCommand).de(de_CreateTransitGatewayPrefixListReferenceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayRouteCommand.js
var CreateTransitGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayRoute", {}).n("EC2Client", "CreateTransitGatewayRouteCommand").f(void 0, void 0).ser(se_CreateTransitGatewayRouteCommand).de(de_CreateTransitGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayRouteTableAnnouncementCommand.js
var CreateTransitGatewayRouteTableAnnouncementCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayRouteTableAnnouncement", {}).n("EC2Client", "CreateTransitGatewayRouteTableAnnouncementCommand").f(void 0, void 0).ser(se_CreateTransitGatewayRouteTableAnnouncementCommand).de(de_CreateTransitGatewayRouteTableAnnouncementCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayRouteTableCommand.js
var CreateTransitGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayRouteTable", {}).n("EC2Client", "CreateTransitGatewayRouteTableCommand").f(void 0, void 0).ser(se_CreateTransitGatewayRouteTableCommand).de(de_CreateTransitGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateTransitGatewayVpcAttachmentCommand.js
var CreateTransitGatewayVpcAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateTransitGatewayVpcAttachment", {}).n("EC2Client", "CreateTransitGatewayVpcAttachmentCommand").f(void 0, void 0).ser(se_CreateTransitGatewayVpcAttachmentCommand).de(de_CreateTransitGatewayVpcAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVerifiedAccessEndpointCommand.js
var CreateVerifiedAccessEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVerifiedAccessEndpoint", {}).n("EC2Client", "CreateVerifiedAccessEndpointCommand").f(void 0, void 0).ser(se_CreateVerifiedAccessEndpointCommand).de(de_CreateVerifiedAccessEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVerifiedAccessGroupCommand.js
var CreateVerifiedAccessGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVerifiedAccessGroup", {}).n("EC2Client", "CreateVerifiedAccessGroupCommand").f(void 0, void 0).ser(se_CreateVerifiedAccessGroupCommand).de(de_CreateVerifiedAccessGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVerifiedAccessInstanceCommand.js
var CreateVerifiedAccessInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVerifiedAccessInstance", {}).n("EC2Client", "CreateVerifiedAccessInstanceCommand").f(void 0, void 0).ser(se_CreateVerifiedAccessInstanceCommand).de(de_CreateVerifiedAccessInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_2.js
var PrefixListState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_failed: "delete-failed",
  delete_in_progress: "delete-in-progress",
  modify_complete: "modify-complete",
  modify_failed: "modify-failed",
  modify_in_progress: "modify-in-progress",
  restore_complete: "restore-complete",
  restore_failed: "restore-failed",
  restore_in_progress: "restore-in-progress"
};
var ConnectivityType = {
  PRIVATE: "private",
  PUBLIC: "public"
};
var NatGatewayState = {
  AVAILABLE: "available",
  DELETED: "deleted",
  DELETING: "deleting",
  FAILED: "failed",
  PENDING: "pending"
};
var RuleAction = {
  allow: "allow",
  deny: "deny"
};
var NetworkInterfaceCreationType = {
  branch: "branch",
  efa: "efa",
  efa_only: "efa-only",
  trunk: "trunk"
};
var NetworkInterfaceType = {
  api_gateway_managed: "api_gateway_managed",
  aws_codestar_connections_managed: "aws_codestar_connections_managed",
  branch: "branch",
  efa: "efa",
  efa_only: "efa-only",
  gateway_load_balancer: "gateway_load_balancer",
  gateway_load_balancer_endpoint: "gateway_load_balancer_endpoint",
  global_accelerator_managed: "global_accelerator_managed",
  interface: "interface",
  iot_rules_managed: "iot_rules_managed",
  lambda: "lambda",
  load_balancer: "load_balancer",
  natGateway: "natGateway",
  network_load_balancer: "network_load_balancer",
  quicksight: "quicksight",
  transit_gateway: "transit_gateway",
  trunk: "trunk",
  vpc_endpoint: "vpc_endpoint"
};
var NetworkInterfaceStatus = {
  associated: "associated",
  attaching: "attaching",
  available: "available",
  detaching: "detaching",
  in_use: "in-use"
};
var InterfacePermissionType = {
  EIP_ASSOCIATE: "EIP-ASSOCIATE",
  INSTANCE_ATTACH: "INSTANCE-ATTACH"
};
var NetworkInterfacePermissionStateCode = {
  granted: "granted",
  pending: "pending",
  revoked: "revoked",
  revoking: "revoking"
};
var SpreadLevel = {
  host: "host",
  rack: "rack"
};
var PlacementStrategy = {
  cluster: "cluster",
  partition: "partition",
  spread: "spread"
};
var PlacementGroupState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var ReplaceRootVolumeTaskState = {
  failed: "failed",
  failed_detached: "failed-detached",
  failing: "failing",
  in_progress: "in-progress",
  pending: "pending",
  succeeded: "succeeded"
};
var RouteOrigin = {
  CreateRoute: "CreateRoute",
  CreateRouteTable: "CreateRouteTable",
  EnableVgwRoutePropagation: "EnableVgwRoutePropagation"
};
var RouteState = {
  active: "active",
  blackhole: "blackhole"
};
var SnapshotLocationEnum = {
  LOCAL: "local",
  REGIONAL: "regional"
};
var SSEType = {
  none: "none",
  sse_ebs: "sse-ebs",
  sse_kms: "sse-kms"
};
var SnapshotState = {
  completed: "completed",
  error: "error",
  pending: "pending",
  recoverable: "recoverable",
  recovering: "recovering"
};
var StorageTier = {
  archive: "archive",
  standard: "standard"
};
var TransferType = {
  standard: "standard",
  time_based: "time-based"
};
var CopyTagsFromSource = {
  volume: "volume"
};
var DatafeedSubscriptionState = {
  Active: "Active",
  Inactive: "Inactive"
};
var SubnetCidrReservationType = {
  explicit: "explicit",
  prefix: "prefix"
};
var TrafficMirrorRuleAction = {
  accept: "accept",
  reject: "reject"
};
var TrafficDirection = {
  egress: "egress",
  ingress: "ingress"
};
var TrafficMirrorNetworkService = {
  amazon_dns: "amazon-dns"
};
var TrafficMirrorTargetType = {
  gateway_load_balancer_endpoint: "gateway-load-balancer-endpoint",
  network_interface: "network-interface",
  network_load_balancer: "network-load-balancer"
};
var AutoAcceptSharedAttachmentsValue = {
  disable: "disable",
  enable: "enable"
};
var DefaultRouteTableAssociationValue = {
  disable: "disable",
  enable: "enable"
};
var DefaultRouteTablePropagationValue = {
  disable: "disable",
  enable: "enable"
};
var MulticastSupportValue = {
  disable: "disable",
  enable: "enable"
};
var VpnEcmpSupportValue = {
  disable: "disable",
  enable: "enable"
};
var TransitGatewayState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  modifying: "modifying",
  pending: "pending"
};
var ProtocolValue = {
  gre: "gre"
};
var BgpStatus = {
  down: "down",
  up: "up"
};
var TransitGatewayConnectPeerState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var AutoAcceptSharedAssociationsValue = {
  disable: "disable",
  enable: "enable"
};
var Igmpv2SupportValue = {
  disable: "disable",
  enable: "enable"
};
var StaticSourcesSupportValue = {
  disable: "disable",
  enable: "enable"
};
var TransitGatewayMulticastDomainState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var TransitGatewayPolicyTableState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var TransitGatewayPrefixListReferenceState = {
  available: "available",
  deleting: "deleting",
  modifying: "modifying",
  pending: "pending"
};
var TransitGatewayRouteState = {
  active: "active",
  blackhole: "blackhole",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var TransitGatewayRouteType = {
  propagated: "propagated",
  static: "static"
};
var TransitGatewayRouteTableState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var TransitGatewayRouteTableAnnouncementDirection = {
  incoming: "incoming",
  outgoing: "outgoing"
};
var TransitGatewayRouteTableAnnouncementState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  failed: "failed",
  failing: "failing",
  pending: "pending"
};
var VerifiedAccessEndpointAttachmentType = {
  vpc: "vpc"
};
var VerifiedAccessEndpointProtocol = {
  http: "http",
  https: "https",
  tcp: "tcp"
};
var VerifiedAccessEndpointType = {
  cidr: "cidr",
  load_balancer: "load-balancer",
  network_interface: "network-interface",
  rds: "rds"
};
var VerifiedAccessEndpointStatusCode = {
  active: "active",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending",
  updating: "updating"
};
var VolumeState = {
  available: "available",
  creating: "creating",
  deleted: "deleted",
  deleting: "deleting",
  error: "error",
  in_use: "in-use"
};
var InternetGatewayExclusionMode = {
  allow_bidirectional: "allow-bidirectional",
  allow_egress: "allow-egress"
};
var VpcBlockPublicAccessExclusionState = {
  create_complete: "create-complete",
  create_failed: "create-failed",
  create_in_progress: "create-in-progress",
  delete_complete: "delete-complete",
  delete_in_progress: "delete-in-progress",
  disable_complete: "disable-complete",
  disable_in_progress: "disable-in-progress",
  update_complete: "update-complete",
  update_failed: "update-failed",
  update_in_progress: "update-in-progress"
};
var DnsRecordIpType = {
  dualstack: "dualstack",
  ipv4: "ipv4",
  ipv6: "ipv6",
  service_defined: "service-defined"
};
var IpAddressType = {
  dualstack: "dualstack",
  ipv4: "ipv4",
  ipv6: "ipv6"
};
var VpcEndpointType = {
  Gateway: "Gateway",
  GatewayLoadBalancer: "GatewayLoadBalancer",
  Interface: "Interface",
  Resource: "Resource",
  ServiceNetwork: "ServiceNetwork"
};
var State = {
  Available: "Available",
  Deleted: "Deleted",
  Deleting: "Deleting",
  Expired: "Expired",
  Failed: "Failed",
  Partial: "Partial",
  Pending: "Pending",
  PendingAcceptance: "PendingAcceptance",
  Rejected: "Rejected"
};
var ConnectionNotificationState = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var ConnectionNotificationType = {
  Topic: "Topic"
};
var PayerResponsibility = {
  ServiceOwner: "ServiceOwner"
};
var DnsNameState = {
  Failed: "failed",
  PendingVerification: "pendingVerification",
  Verified: "verified"
};
var ServiceState = {
  Available: "Available",
  Deleted: "Deleted",
  Deleting: "Deleting",
  Failed: "Failed",
  Pending: "Pending"
};
var ServiceType = {
  Gateway: "Gateway",
  GatewayLoadBalancer: "GatewayLoadBalancer",
  Interface: "Interface"
};
var ServiceConnectivityType = {
  ipv4: "ipv4",
  ipv6: "ipv6"
};
var TunnelInsideIpVersion = {
  ipv4: "ipv4",
  ipv6: "ipv6"
};
var GatewayAssociationState = {
  associated: "associated",
  associating: "associating",
  disassociating: "disassociating",
  not_associated: "not-associated"
};
var VpnStaticRouteSource = {
  Static: "Static"
};
var VpnState = {
  available: "available",
  deleted: "deleted",
  deleting: "deleting",
  pending: "pending"
};
var TelemetryStatus = {
  DOWN: "DOWN",
  UP: "UP"
};
var CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.OidcOptions && {
    OidcOptions: CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog(obj.OidcOptions)
  },
  ...obj.NativeApplicationOidcOptions && {
    NativeApplicationOidcOptions: CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog(obj.NativeApplicationOidcOptions)
  }
});
var CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProvider && {
    VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider)
  }
});
var VpnTunnelOptionsSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PreSharedKey && { PreSharedKey: SENSITIVE_STRING }
});
var VpnConnectionOptionsSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TunnelOptions && {
    TunnelOptions: obj.TunnelOptions.map((item) => VpnTunnelOptionsSpecificationFilterSensitiveLog(item))
  }
});
var CreateVpnConnectionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Options && { Options: VpnConnectionOptionsSpecificationFilterSensitiveLog(obj.Options) }
});
var TunnelOptionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PreSharedKey && { PreSharedKey: SENSITIVE_STRING }
});
var VpnConnectionOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TunnelOptions && { TunnelOptions: obj.TunnelOptions.map((item) => TunnelOptionFilterSensitiveLog(item)) }
});
var VpnConnectionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Options && { Options: VpnConnectionOptionsFilterSensitiveLog(obj.Options) },
  ...obj.CustomerGatewayConfiguration && { CustomerGatewayConfiguration: SENSITIVE_STRING }
});
var CreateVpnConnectionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVerifiedAccessTrustProviderCommand.js
var CreateVerifiedAccessTrustProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVerifiedAccessTrustProvider", {}).n("EC2Client", "CreateVerifiedAccessTrustProviderCommand").f(CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog, CreateVerifiedAccessTrustProviderResultFilterSensitiveLog).ser(se_CreateVerifiedAccessTrustProviderCommand).de(de_CreateVerifiedAccessTrustProviderCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVolumeCommand.js
var CreateVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVolume", {}).n("EC2Client", "CreateVolumeCommand").f(void 0, void 0).ser(se_CreateVolumeCommand).de(de_CreateVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcBlockPublicAccessExclusionCommand.js
var CreateVpcBlockPublicAccessExclusionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpcBlockPublicAccessExclusion", {}).n("EC2Client", "CreateVpcBlockPublicAccessExclusionCommand").f(void 0, void 0).ser(se_CreateVpcBlockPublicAccessExclusionCommand).de(de_CreateVpcBlockPublicAccessExclusionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcCommand.js
var CreateVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpc", {}).n("EC2Client", "CreateVpcCommand").f(void 0, void 0).ser(se_CreateVpcCommand).de(de_CreateVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcEndpointCommand.js
var CreateVpcEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpcEndpoint", {}).n("EC2Client", "CreateVpcEndpointCommand").f(void 0, void 0).ser(se_CreateVpcEndpointCommand).de(de_CreateVpcEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcEndpointConnectionNotificationCommand.js
var CreateVpcEndpointConnectionNotificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpcEndpointConnectionNotification", {}).n("EC2Client", "CreateVpcEndpointConnectionNotificationCommand").f(void 0, void 0).ser(se_CreateVpcEndpointConnectionNotificationCommand).de(de_CreateVpcEndpointConnectionNotificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcEndpointServiceConfigurationCommand.js
var CreateVpcEndpointServiceConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpcEndpointServiceConfiguration", {}).n("EC2Client", "CreateVpcEndpointServiceConfigurationCommand").f(void 0, void 0).ser(se_CreateVpcEndpointServiceConfigurationCommand).de(de_CreateVpcEndpointServiceConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpcPeeringConnectionCommand.js
var CreateVpcPeeringConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpcPeeringConnection", {}).n("EC2Client", "CreateVpcPeeringConnectionCommand").f(void 0, void 0).ser(se_CreateVpcPeeringConnectionCommand).de(de_CreateVpcPeeringConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpnConnectionCommand.js
var CreateVpnConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpnConnection", {}).n("EC2Client", "CreateVpnConnectionCommand").f(CreateVpnConnectionRequestFilterSensitiveLog, CreateVpnConnectionResultFilterSensitiveLog).ser(se_CreateVpnConnectionCommand).de(de_CreateVpnConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpnConnectionRouteCommand.js
var CreateVpnConnectionRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpnConnectionRoute", {}).n("EC2Client", "CreateVpnConnectionRouteCommand").f(void 0, void 0).ser(se_CreateVpnConnectionRouteCommand).de(de_CreateVpnConnectionRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/CreateVpnGatewayCommand.js
var CreateVpnGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "CreateVpnGateway", {}).n("EC2Client", "CreateVpnGatewayCommand").f(void 0, void 0).ser(se_CreateVpnGatewayCommand).de(de_CreateVpnGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteCarrierGatewayCommand.js
var DeleteCarrierGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteCarrierGateway", {}).n("EC2Client", "DeleteCarrierGatewayCommand").f(void 0, void 0).ser(se_DeleteCarrierGatewayCommand).de(de_DeleteCarrierGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteClientVpnEndpointCommand.js
var DeleteClientVpnEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteClientVpnEndpoint", {}).n("EC2Client", "DeleteClientVpnEndpointCommand").f(void 0, void 0).ser(se_DeleteClientVpnEndpointCommand).de(de_DeleteClientVpnEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteClientVpnRouteCommand.js
var DeleteClientVpnRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteClientVpnRoute", {}).n("EC2Client", "DeleteClientVpnRouteCommand").f(void 0, void 0).ser(se_DeleteClientVpnRouteCommand).de(de_DeleteClientVpnRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteCoipCidrCommand.js
var DeleteCoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteCoipCidr", {}).n("EC2Client", "DeleteCoipCidrCommand").f(void 0, void 0).ser(se_DeleteCoipCidrCommand).de(de_DeleteCoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteCoipPoolCommand.js
var DeleteCoipPoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteCoipPool", {}).n("EC2Client", "DeleteCoipPoolCommand").f(void 0, void 0).ser(se_DeleteCoipPoolCommand).de(de_DeleteCoipPoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteCustomerGatewayCommand.js
var DeleteCustomerGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteCustomerGateway", {}).n("EC2Client", "DeleteCustomerGatewayCommand").f(void 0, void 0).ser(se_DeleteCustomerGatewayCommand).de(de_DeleteCustomerGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteDhcpOptionsCommand.js
var DeleteDhcpOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteDhcpOptions", {}).n("EC2Client", "DeleteDhcpOptionsCommand").f(void 0, void 0).ser(se_DeleteDhcpOptionsCommand).de(de_DeleteDhcpOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteEgressOnlyInternetGatewayCommand.js
var DeleteEgressOnlyInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteEgressOnlyInternetGateway", {}).n("EC2Client", "DeleteEgressOnlyInternetGatewayCommand").f(void 0, void 0).ser(se_DeleteEgressOnlyInternetGatewayCommand).de(de_DeleteEgressOnlyInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteFleetsCommand.js
var DeleteFleetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteFleets", {}).n("EC2Client", "DeleteFleetsCommand").f(void 0, void 0).ser(se_DeleteFleetsCommand).de(de_DeleteFleetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteFlowLogsCommand.js
var DeleteFlowLogsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteFlowLogs", {}).n("EC2Client", "DeleteFlowLogsCommand").f(void 0, void 0).ser(se_DeleteFlowLogsCommand).de(de_DeleteFlowLogsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteFpgaImageCommand.js
var DeleteFpgaImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteFpgaImage", {}).n("EC2Client", "DeleteFpgaImageCommand").f(void 0, void 0).ser(se_DeleteFpgaImageCommand).de(de_DeleteFpgaImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteInstanceConnectEndpointCommand.js
var DeleteInstanceConnectEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteInstanceConnectEndpoint", {}).n("EC2Client", "DeleteInstanceConnectEndpointCommand").f(void 0, void 0).ser(se_DeleteInstanceConnectEndpointCommand).de(de_DeleteInstanceConnectEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteInstanceEventWindowCommand.js
var DeleteInstanceEventWindowCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteInstanceEventWindow", {}).n("EC2Client", "DeleteInstanceEventWindowCommand").f(void 0, void 0).ser(se_DeleteInstanceEventWindowCommand).de(de_DeleteInstanceEventWindowCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteInternetGatewayCommand.js
var DeleteInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteInternetGateway", {}).n("EC2Client", "DeleteInternetGatewayCommand").f(void 0, void 0).ser(se_DeleteInternetGatewayCommand).de(de_DeleteInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteIpamCommand.js
var DeleteIpamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteIpam", {}).n("EC2Client", "DeleteIpamCommand").f(void 0, void 0).ser(se_DeleteIpamCommand).de(de_DeleteIpamCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteIpamExternalResourceVerificationTokenCommand.js
var DeleteIpamExternalResourceVerificationTokenCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteIpamExternalResourceVerificationToken", {}).n("EC2Client", "DeleteIpamExternalResourceVerificationTokenCommand").f(void 0, void 0).ser(se_DeleteIpamExternalResourceVerificationTokenCommand).de(de_DeleteIpamExternalResourceVerificationTokenCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteIpamPoolCommand.js
var DeleteIpamPoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteIpamPool", {}).n("EC2Client", "DeleteIpamPoolCommand").f(void 0, void 0).ser(se_DeleteIpamPoolCommand).de(de_DeleteIpamPoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteIpamResourceDiscoveryCommand.js
var DeleteIpamResourceDiscoveryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteIpamResourceDiscovery", {}).n("EC2Client", "DeleteIpamResourceDiscoveryCommand").f(void 0, void 0).ser(se_DeleteIpamResourceDiscoveryCommand).de(de_DeleteIpamResourceDiscoveryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteIpamScopeCommand.js
var DeleteIpamScopeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteIpamScope", {}).n("EC2Client", "DeleteIpamScopeCommand").f(void 0, void 0).ser(se_DeleteIpamScopeCommand).de(de_DeleteIpamScopeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteKeyPairCommand.js
var DeleteKeyPairCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteKeyPair", {}).n("EC2Client", "DeleteKeyPairCommand").f(void 0, void 0).ser(se_DeleteKeyPairCommand).de(de_DeleteKeyPairCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLaunchTemplateCommand.js
var DeleteLaunchTemplateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLaunchTemplate", {}).n("EC2Client", "DeleteLaunchTemplateCommand").f(void 0, void 0).ser(se_DeleteLaunchTemplateCommand).de(de_DeleteLaunchTemplateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLaunchTemplateVersionsCommand.js
var DeleteLaunchTemplateVersionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLaunchTemplateVersions", {}).n("EC2Client", "DeleteLaunchTemplateVersionsCommand").f(void 0, void 0).ser(se_DeleteLaunchTemplateVersionsCommand).de(de_DeleteLaunchTemplateVersionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLocalGatewayRouteCommand.js
var DeleteLocalGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLocalGatewayRoute", {}).n("EC2Client", "DeleteLocalGatewayRouteCommand").f(void 0, void 0).ser(se_DeleteLocalGatewayRouteCommand).de(de_DeleteLocalGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLocalGatewayRouteTableCommand.js
var DeleteLocalGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLocalGatewayRouteTable", {}).n("EC2Client", "DeleteLocalGatewayRouteTableCommand").f(void 0, void 0).ser(se_DeleteLocalGatewayRouteTableCommand).de(de_DeleteLocalGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand.js
var DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation", {}).n("EC2Client", "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand").f(void 0, void 0).ser(se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand).de(de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteLocalGatewayRouteTableVpcAssociationCommand.js
var DeleteLocalGatewayRouteTableVpcAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteLocalGatewayRouteTableVpcAssociation", {}).n("EC2Client", "DeleteLocalGatewayRouteTableVpcAssociationCommand").f(void 0, void 0).ser(se_DeleteLocalGatewayRouteTableVpcAssociationCommand).de(de_DeleteLocalGatewayRouteTableVpcAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteManagedPrefixListCommand.js
var DeleteManagedPrefixListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteManagedPrefixList", {}).n("EC2Client", "DeleteManagedPrefixListCommand").f(void 0, void 0).ser(se_DeleteManagedPrefixListCommand).de(de_DeleteManagedPrefixListCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNatGatewayCommand.js
var DeleteNatGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNatGateway", {}).n("EC2Client", "DeleteNatGatewayCommand").f(void 0, void 0).ser(se_DeleteNatGatewayCommand).de(de_DeleteNatGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkAclCommand.js
var DeleteNetworkAclCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkAcl", {}).n("EC2Client", "DeleteNetworkAclCommand").f(void 0, void 0).ser(se_DeleteNetworkAclCommand).de(de_DeleteNetworkAclCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkAclEntryCommand.js
var DeleteNetworkAclEntryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkAclEntry", {}).n("EC2Client", "DeleteNetworkAclEntryCommand").f(void 0, void 0).ser(se_DeleteNetworkAclEntryCommand).de(de_DeleteNetworkAclEntryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInsightsAccessScopeAnalysisCommand.js
var DeleteNetworkInsightsAccessScopeAnalysisCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInsightsAccessScopeAnalysis", {}).n("EC2Client", "DeleteNetworkInsightsAccessScopeAnalysisCommand").f(void 0, void 0).ser(se_DeleteNetworkInsightsAccessScopeAnalysisCommand).de(de_DeleteNetworkInsightsAccessScopeAnalysisCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInsightsAccessScopeCommand.js
var DeleteNetworkInsightsAccessScopeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInsightsAccessScope", {}).n("EC2Client", "DeleteNetworkInsightsAccessScopeCommand").f(void 0, void 0).ser(se_DeleteNetworkInsightsAccessScopeCommand).de(de_DeleteNetworkInsightsAccessScopeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInsightsAnalysisCommand.js
var DeleteNetworkInsightsAnalysisCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInsightsAnalysis", {}).n("EC2Client", "DeleteNetworkInsightsAnalysisCommand").f(void 0, void 0).ser(se_DeleteNetworkInsightsAnalysisCommand).de(de_DeleteNetworkInsightsAnalysisCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInsightsPathCommand.js
var DeleteNetworkInsightsPathCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInsightsPath", {}).n("EC2Client", "DeleteNetworkInsightsPathCommand").f(void 0, void 0).ser(se_DeleteNetworkInsightsPathCommand).de(de_DeleteNetworkInsightsPathCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInterfaceCommand.js
var DeleteNetworkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInterface", {}).n("EC2Client", "DeleteNetworkInterfaceCommand").f(void 0, void 0).ser(se_DeleteNetworkInterfaceCommand).de(de_DeleteNetworkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteNetworkInterfacePermissionCommand.js
var DeleteNetworkInterfacePermissionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteNetworkInterfacePermission", {}).n("EC2Client", "DeleteNetworkInterfacePermissionCommand").f(void 0, void 0).ser(se_DeleteNetworkInterfacePermissionCommand).de(de_DeleteNetworkInterfacePermissionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeletePlacementGroupCommand.js
var DeletePlacementGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeletePlacementGroup", {}).n("EC2Client", "DeletePlacementGroupCommand").f(void 0, void 0).ser(se_DeletePlacementGroupCommand).de(de_DeletePlacementGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeletePublicIpv4PoolCommand.js
var DeletePublicIpv4PoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeletePublicIpv4Pool", {}).n("EC2Client", "DeletePublicIpv4PoolCommand").f(void 0, void 0).ser(se_DeletePublicIpv4PoolCommand).de(de_DeletePublicIpv4PoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteQueuedReservedInstancesCommand.js
var DeleteQueuedReservedInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteQueuedReservedInstances", {}).n("EC2Client", "DeleteQueuedReservedInstancesCommand").f(void 0, void 0).ser(se_DeleteQueuedReservedInstancesCommand).de(de_DeleteQueuedReservedInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteRouteCommand.js
var DeleteRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteRoute", {}).n("EC2Client", "DeleteRouteCommand").f(void 0, void 0).ser(se_DeleteRouteCommand).de(de_DeleteRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteRouteTableCommand.js
var DeleteRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteRouteTable", {}).n("EC2Client", "DeleteRouteTableCommand").f(void 0, void 0).ser(se_DeleteRouteTableCommand).de(de_DeleteRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteSecurityGroupCommand.js
var DeleteSecurityGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteSecurityGroup", {}).n("EC2Client", "DeleteSecurityGroupCommand").f(void 0, void 0).ser(se_DeleteSecurityGroupCommand).de(de_DeleteSecurityGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteSnapshotCommand.js
var DeleteSnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteSnapshot", {}).n("EC2Client", "DeleteSnapshotCommand").f(void 0, void 0).ser(se_DeleteSnapshotCommand).de(de_DeleteSnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteSpotDatafeedSubscriptionCommand.js
var DeleteSpotDatafeedSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteSpotDatafeedSubscription", {}).n("EC2Client", "DeleteSpotDatafeedSubscriptionCommand").f(void 0, void 0).ser(se_DeleteSpotDatafeedSubscriptionCommand).de(de_DeleteSpotDatafeedSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteSubnetCidrReservationCommand.js
var DeleteSubnetCidrReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteSubnetCidrReservation", {}).n("EC2Client", "DeleteSubnetCidrReservationCommand").f(void 0, void 0).ser(se_DeleteSubnetCidrReservationCommand).de(de_DeleteSubnetCidrReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteSubnetCommand.js
var DeleteSubnetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteSubnet", {}).n("EC2Client", "DeleteSubnetCommand").f(void 0, void 0).ser(se_DeleteSubnetCommand).de(de_DeleteSubnetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTagsCommand.js
var DeleteTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTags", {}).n("EC2Client", "DeleteTagsCommand").f(void 0, void 0).ser(se_DeleteTagsCommand).de(de_DeleteTagsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTrafficMirrorFilterCommand.js
var DeleteTrafficMirrorFilterCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTrafficMirrorFilter", {}).n("EC2Client", "DeleteTrafficMirrorFilterCommand").f(void 0, void 0).ser(se_DeleteTrafficMirrorFilterCommand).de(de_DeleteTrafficMirrorFilterCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTrafficMirrorFilterRuleCommand.js
var DeleteTrafficMirrorFilterRuleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTrafficMirrorFilterRule", {}).n("EC2Client", "DeleteTrafficMirrorFilterRuleCommand").f(void 0, void 0).ser(se_DeleteTrafficMirrorFilterRuleCommand).de(de_DeleteTrafficMirrorFilterRuleCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTrafficMirrorSessionCommand.js
var DeleteTrafficMirrorSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTrafficMirrorSession", {}).n("EC2Client", "DeleteTrafficMirrorSessionCommand").f(void 0, void 0).ser(se_DeleteTrafficMirrorSessionCommand).de(de_DeleteTrafficMirrorSessionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTrafficMirrorTargetCommand.js
var DeleteTrafficMirrorTargetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTrafficMirrorTarget", {}).n("EC2Client", "DeleteTrafficMirrorTargetCommand").f(void 0, void 0).ser(se_DeleteTrafficMirrorTargetCommand).de(de_DeleteTrafficMirrorTargetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayCommand.js
var DeleteTransitGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGateway", {}).n("EC2Client", "DeleteTransitGatewayCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayCommand).de(de_DeleteTransitGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayConnectCommand.js
var DeleteTransitGatewayConnectCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayConnect", {}).n("EC2Client", "DeleteTransitGatewayConnectCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayConnectCommand).de(de_DeleteTransitGatewayConnectCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayConnectPeerCommand.js
var DeleteTransitGatewayConnectPeerCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayConnectPeer", {}).n("EC2Client", "DeleteTransitGatewayConnectPeerCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayConnectPeerCommand).de(de_DeleteTransitGatewayConnectPeerCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayMulticastDomainCommand.js
var DeleteTransitGatewayMulticastDomainCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayMulticastDomain", {}).n("EC2Client", "DeleteTransitGatewayMulticastDomainCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayMulticastDomainCommand).de(de_DeleteTransitGatewayMulticastDomainCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayPeeringAttachmentCommand.js
var DeleteTransitGatewayPeeringAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayPeeringAttachment", {}).n("EC2Client", "DeleteTransitGatewayPeeringAttachmentCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayPeeringAttachmentCommand).de(de_DeleteTransitGatewayPeeringAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayPolicyTableCommand.js
var DeleteTransitGatewayPolicyTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayPolicyTable", {}).n("EC2Client", "DeleteTransitGatewayPolicyTableCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayPolicyTableCommand).de(de_DeleteTransitGatewayPolicyTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayPrefixListReferenceCommand.js
var DeleteTransitGatewayPrefixListReferenceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayPrefixListReference", {}).n("EC2Client", "DeleteTransitGatewayPrefixListReferenceCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayPrefixListReferenceCommand).de(de_DeleteTransitGatewayPrefixListReferenceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayRouteCommand.js
var DeleteTransitGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayRoute", {}).n("EC2Client", "DeleteTransitGatewayRouteCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayRouteCommand).de(de_DeleteTransitGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayRouteTableAnnouncementCommand.js
var DeleteTransitGatewayRouteTableAnnouncementCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayRouteTableAnnouncement", {}).n("EC2Client", "DeleteTransitGatewayRouteTableAnnouncementCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayRouteTableAnnouncementCommand).de(de_DeleteTransitGatewayRouteTableAnnouncementCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayRouteTableCommand.js
var DeleteTransitGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayRouteTable", {}).n("EC2Client", "DeleteTransitGatewayRouteTableCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayRouteTableCommand).de(de_DeleteTransitGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteTransitGatewayVpcAttachmentCommand.js
var DeleteTransitGatewayVpcAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteTransitGatewayVpcAttachment", {}).n("EC2Client", "DeleteTransitGatewayVpcAttachmentCommand").f(void 0, void 0).ser(se_DeleteTransitGatewayVpcAttachmentCommand).de(de_DeleteTransitGatewayVpcAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVerifiedAccessEndpointCommand.js
var DeleteVerifiedAccessEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVerifiedAccessEndpoint", {}).n("EC2Client", "DeleteVerifiedAccessEndpointCommand").f(void 0, void 0).ser(se_DeleteVerifiedAccessEndpointCommand).de(de_DeleteVerifiedAccessEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVerifiedAccessGroupCommand.js
var DeleteVerifiedAccessGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVerifiedAccessGroup", {}).n("EC2Client", "DeleteVerifiedAccessGroupCommand").f(void 0, void 0).ser(se_DeleteVerifiedAccessGroupCommand).de(de_DeleteVerifiedAccessGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVerifiedAccessInstanceCommand.js
var DeleteVerifiedAccessInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVerifiedAccessInstance", {}).n("EC2Client", "DeleteVerifiedAccessInstanceCommand").f(void 0, void 0).ser(se_DeleteVerifiedAccessInstanceCommand).de(de_DeleteVerifiedAccessInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_3.js
var FleetStateCode = {
  ACTIVE: "active",
  DELETED: "deleted",
  DELETED_RUNNING: "deleted_running",
  DELETED_TERMINATING_INSTANCES: "deleted_terminating",
  FAILED: "failed",
  MODIFYING: "modifying",
  SUBMITTED: "submitted"
};
var DeleteFleetErrorCode = {
  FLEET_ID_DOES_NOT_EXIST: "fleetIdDoesNotExist",
  FLEET_ID_MALFORMED: "fleetIdMalformed",
  FLEET_NOT_IN_DELETABLE_STATE: "fleetNotInDeletableState",
  UNEXPECTED_ERROR: "unexpectedError"
};
var LaunchTemplateErrorCode = {
  LAUNCH_TEMPLATE_ID_DOES_NOT_EXIST: "launchTemplateIdDoesNotExist",
  LAUNCH_TEMPLATE_ID_MALFORMED: "launchTemplateIdMalformed",
  LAUNCH_TEMPLATE_NAME_DOES_NOT_EXIST: "launchTemplateNameDoesNotExist",
  LAUNCH_TEMPLATE_NAME_MALFORMED: "launchTemplateNameMalformed",
  LAUNCH_TEMPLATE_VERSION_DOES_NOT_EXIST: "launchTemplateVersionDoesNotExist",
  UNEXPECTED_ERROR: "unexpectedError"
};
var DeleteQueuedReservedInstancesErrorCode = {
  RESERVED_INSTANCES_ID_INVALID: "reserved-instances-id-invalid",
  RESERVED_INSTANCES_NOT_IN_QUEUED_STATE: "reserved-instances-not-in-queued-state",
  UNEXPECTED_ERROR: "unexpected-error"
};
var AsnState = {
  deprovisioned: "deprovisioned",
  failed_deprovision: "failed-deprovision",
  failed_provision: "failed-provision",
  pending_deprovision: "pending-deprovision",
  pending_provision: "pending-provision",
  provisioned: "provisioned"
};
var IpamPoolCidrFailureCode = {
  cidr_not_available: "cidr-not-available",
  limit_exceeded: "limit-exceeded"
};
var IpamPoolCidrState = {
  deprovisioned: "deprovisioned",
  failed_deprovision: "failed-deprovision",
  failed_import: "failed-import",
  failed_provision: "failed-provision",
  pending_deprovision: "pending-deprovision",
  pending_import: "pending-import",
  pending_provision: "pending-provision",
  provisioned: "provisioned"
};
var AvailabilityZoneOptInStatus = {
  not_opted_in: "not-opted-in",
  opt_in_not_required: "opt-in-not-required",
  opted_in: "opted-in"
};
var AvailabilityZoneState = {
  available: "available",
  constrained: "constrained",
  impaired: "impaired",
  information: "information",
  unavailable: "unavailable"
};
var MetricType = {
  aggregate_latency: "aggregate-latency"
};
var PeriodType = {
  fifteen_minutes: "fifteen-minutes",
  five_minutes: "five-minutes",
  one_day: "one-day",
  one_hour: "one-hour",
  one_week: "one-week",
  three_hours: "three-hours"
};
var StatisticType = {
  p50: "p50"
};
var CapacityBlockExtensionStatus = {
  PAYMENT_FAILED: "payment-failed",
  PAYMENT_PENDING: "payment-pending",
  PAYMENT_SUCCEEDED: "payment-succeeded"
};
var CallerRole = {
  odcr_owner: "odcr-owner",
  unused_reservation_billing_owner: "unused-reservation-billing-owner"
};
var CapacityReservationBillingRequestStatus = {
  accepted: "accepted",
  cancelled: "cancelled",
  expired: "expired",
  pending: "pending",
  rejected: "rejected",
  revoked: "revoked"
};
var ClientVpnConnectionStatusCode = {
  active: "active",
  failed_to_terminate: "failed-to-terminate",
  terminated: "terminated",
  terminating: "terminating"
};
var AssociatedNetworkType = {
  vpc: "vpc"
};
var ClientVpnEndpointAttributeStatusCode = {
  applied: "applied",
  applying: "applying"
};
var VpnProtocol = {
  openvpn: "openvpn"
};
var ConversionTaskState = {
  active: "active",
  cancelled: "cancelled",
  cancelling: "cancelling",
  completed: "completed"
};
var ReportState = {
  cancelled: "cancelled",
  complete: "complete",
  error: "error",
  running: "running"
};
var ElasticGpuStatus = {
  Impaired: "IMPAIRED",
  Ok: "OK"
};
var ElasticGpuState = {
  Attached: "ATTACHED"
};
var FastLaunchResourceType = {
  SNAPSHOT: "snapshot"
};
var FastLaunchStateCode = {
  disabling: "disabling",
  disabling_failed: "disabling-failed",
  enabled: "enabled",
  enabled_failed: "enabled-failed",
  enabling: "enabling",
  enabling_failed: "enabling-failed"
};
var FastSnapshotRestoreStateCode = {
  disabled: "disabled",
  disabling: "disabling",
  enabled: "enabled",
  enabling: "enabling",
  optimizing: "optimizing"
};
var FleetEventType = {
  FLEET_CHANGE: "fleet-change",
  INSTANCE_CHANGE: "instance-change",
  SERVICE_ERROR: "service-error"
};
var DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProvider && {
    VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider)
  }
});
var DescribeBundleTasksResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.BundleTasks && { BundleTasks: obj.BundleTasks.map((item) => BundleTaskFilterSensitiveLog(item)) }
});
var DiskImageDescriptionFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ImportManifestUrl && { ImportManifestUrl: SENSITIVE_STRING }
});
var ImportInstanceVolumeDetailItemFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Image && { Image: DiskImageDescriptionFilterSensitiveLog(obj.Image) }
});
var ImportInstanceTaskDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Volumes && { Volumes: obj.Volumes.map((item) => ImportInstanceVolumeDetailItemFilterSensitiveLog(item)) }
});
var ImportVolumeTaskDetailsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Image && { Image: DiskImageDescriptionFilterSensitiveLog(obj.Image) }
});
var ConversionTaskFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ImportInstance && { ImportInstance: ImportInstanceTaskDetailsFilterSensitiveLog(obj.ImportInstance) },
  ...obj.ImportVolume && { ImportVolume: ImportVolumeTaskDetailsFilterSensitiveLog(obj.ImportVolume) }
});
var DescribeConversionTasksResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ConversionTasks && {
    ConversionTasks: obj.ConversionTasks.map((item) => ConversionTaskFilterSensitiveLog(item))
  }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVerifiedAccessTrustProviderCommand.js
var DeleteVerifiedAccessTrustProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVerifiedAccessTrustProvider", {}).n("EC2Client", "DeleteVerifiedAccessTrustProviderCommand").f(void 0, DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog).ser(se_DeleteVerifiedAccessTrustProviderCommand).de(de_DeleteVerifiedAccessTrustProviderCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVolumeCommand.js
var DeleteVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVolume", {}).n("EC2Client", "DeleteVolumeCommand").f(void 0, void 0).ser(se_DeleteVolumeCommand).de(de_DeleteVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcBlockPublicAccessExclusionCommand.js
var DeleteVpcBlockPublicAccessExclusionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpcBlockPublicAccessExclusion", {}).n("EC2Client", "DeleteVpcBlockPublicAccessExclusionCommand").f(void 0, void 0).ser(se_DeleteVpcBlockPublicAccessExclusionCommand).de(de_DeleteVpcBlockPublicAccessExclusionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcCommand.js
var DeleteVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpc", {}).n("EC2Client", "DeleteVpcCommand").f(void 0, void 0).ser(se_DeleteVpcCommand).de(de_DeleteVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcEndpointConnectionNotificationsCommand.js
var DeleteVpcEndpointConnectionNotificationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpcEndpointConnectionNotifications", {}).n("EC2Client", "DeleteVpcEndpointConnectionNotificationsCommand").f(void 0, void 0).ser(se_DeleteVpcEndpointConnectionNotificationsCommand).de(de_DeleteVpcEndpointConnectionNotificationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcEndpointsCommand.js
var DeleteVpcEndpointsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpcEndpoints", {}).n("EC2Client", "DeleteVpcEndpointsCommand").f(void 0, void 0).ser(se_DeleteVpcEndpointsCommand).de(de_DeleteVpcEndpointsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcEndpointServiceConfigurationsCommand.js
var DeleteVpcEndpointServiceConfigurationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpcEndpointServiceConfigurations", {}).n("EC2Client", "DeleteVpcEndpointServiceConfigurationsCommand").f(void 0, void 0).ser(se_DeleteVpcEndpointServiceConfigurationsCommand).de(de_DeleteVpcEndpointServiceConfigurationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpcPeeringConnectionCommand.js
var DeleteVpcPeeringConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpcPeeringConnection", {}).n("EC2Client", "DeleteVpcPeeringConnectionCommand").f(void 0, void 0).ser(se_DeleteVpcPeeringConnectionCommand).de(de_DeleteVpcPeeringConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpnConnectionCommand.js
var DeleteVpnConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpnConnection", {}).n("EC2Client", "DeleteVpnConnectionCommand").f(void 0, void 0).ser(se_DeleteVpnConnectionCommand).de(de_DeleteVpnConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpnConnectionRouteCommand.js
var DeleteVpnConnectionRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpnConnectionRoute", {}).n("EC2Client", "DeleteVpnConnectionRouteCommand").f(void 0, void 0).ser(se_DeleteVpnConnectionRouteCommand).de(de_DeleteVpnConnectionRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeleteVpnGatewayCommand.js
var DeleteVpnGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeleteVpnGateway", {}).n("EC2Client", "DeleteVpnGatewayCommand").f(void 0, void 0).ser(se_DeleteVpnGatewayCommand).de(de_DeleteVpnGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeprovisionByoipCidrCommand.js
var DeprovisionByoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeprovisionByoipCidr", {}).n("EC2Client", "DeprovisionByoipCidrCommand").f(void 0, void 0).ser(se_DeprovisionByoipCidrCommand).de(de_DeprovisionByoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeprovisionIpamByoasnCommand.js
var DeprovisionIpamByoasnCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeprovisionIpamByoasn", {}).n("EC2Client", "DeprovisionIpamByoasnCommand").f(void 0, void 0).ser(se_DeprovisionIpamByoasnCommand).de(de_DeprovisionIpamByoasnCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeprovisionIpamPoolCidrCommand.js
var DeprovisionIpamPoolCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeprovisionIpamPoolCidr", {}).n("EC2Client", "DeprovisionIpamPoolCidrCommand").f(void 0, void 0).ser(se_DeprovisionIpamPoolCidrCommand).de(de_DeprovisionIpamPoolCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeprovisionPublicIpv4PoolCidrCommand.js
var DeprovisionPublicIpv4PoolCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeprovisionPublicIpv4PoolCidr", {}).n("EC2Client", "DeprovisionPublicIpv4PoolCidrCommand").f(void 0, void 0).ser(se_DeprovisionPublicIpv4PoolCidrCommand).de(de_DeprovisionPublicIpv4PoolCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeregisterImageCommand.js
var DeregisterImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeregisterImage", {}).n("EC2Client", "DeregisterImageCommand").f(void 0, void 0).ser(se_DeregisterImageCommand).de(de_DeregisterImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeregisterInstanceEventNotificationAttributesCommand.js
var DeregisterInstanceEventNotificationAttributesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeregisterInstanceEventNotificationAttributes", {}).n("EC2Client", "DeregisterInstanceEventNotificationAttributesCommand").f(void 0, void 0).ser(se_DeregisterInstanceEventNotificationAttributesCommand).de(de_DeregisterInstanceEventNotificationAttributesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeregisterTransitGatewayMulticastGroupMembersCommand.js
var DeregisterTransitGatewayMulticastGroupMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeregisterTransitGatewayMulticastGroupMembers", {}).n("EC2Client", "DeregisterTransitGatewayMulticastGroupMembersCommand").f(void 0, void 0).ser(se_DeregisterTransitGatewayMulticastGroupMembersCommand).de(de_DeregisterTransitGatewayMulticastGroupMembersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DeregisterTransitGatewayMulticastGroupSourcesCommand.js
var DeregisterTransitGatewayMulticastGroupSourcesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DeregisterTransitGatewayMulticastGroupSources", {}).n("EC2Client", "DeregisterTransitGatewayMulticastGroupSourcesCommand").f(void 0, void 0).ser(se_DeregisterTransitGatewayMulticastGroupSourcesCommand).de(de_DeregisterTransitGatewayMulticastGroupSourcesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAccountAttributesCommand.js
var DescribeAccountAttributesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAccountAttributes", {}).n("EC2Client", "DescribeAccountAttributesCommand").f(void 0, void 0).ser(se_DescribeAccountAttributesCommand).de(de_DescribeAccountAttributesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAddressesAttributeCommand.js
var DescribeAddressesAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAddressesAttribute", {}).n("EC2Client", "DescribeAddressesAttributeCommand").f(void 0, void 0).ser(se_DescribeAddressesAttributeCommand).de(de_DescribeAddressesAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAddressesCommand.js
var DescribeAddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAddresses", {}).n("EC2Client", "DescribeAddressesCommand").f(void 0, void 0).ser(se_DescribeAddressesCommand).de(de_DescribeAddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAddressTransfersCommand.js
var DescribeAddressTransfersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAddressTransfers", {}).n("EC2Client", "DescribeAddressTransfersCommand").f(void 0, void 0).ser(se_DescribeAddressTransfersCommand).de(de_DescribeAddressTransfersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAggregateIdFormatCommand.js
var DescribeAggregateIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAggregateIdFormat", {}).n("EC2Client", "DescribeAggregateIdFormatCommand").f(void 0, void 0).ser(se_DescribeAggregateIdFormatCommand).de(de_DescribeAggregateIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAvailabilityZonesCommand.js
var DescribeAvailabilityZonesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAvailabilityZones", {}).n("EC2Client", "DescribeAvailabilityZonesCommand").f(void 0, void 0).ser(se_DescribeAvailabilityZonesCommand).de(de_DescribeAvailabilityZonesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeAwsNetworkPerformanceMetricSubscriptionsCommand.js
var DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeAwsNetworkPerformanceMetricSubscriptions", {}).n("EC2Client", "DescribeAwsNetworkPerformanceMetricSubscriptionsCommand").f(void 0, void 0).ser(se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand).de(de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeBundleTasksCommand.js
var DescribeBundleTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeBundleTasks", {}).n("EC2Client", "DescribeBundleTasksCommand").f(void 0, DescribeBundleTasksResultFilterSensitiveLog).ser(se_DescribeBundleTasksCommand).de(de_DescribeBundleTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeByoipCidrsCommand.js
var DescribeByoipCidrsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeByoipCidrs", {}).n("EC2Client", "DescribeByoipCidrsCommand").f(void 0, void 0).ser(se_DescribeByoipCidrsCommand).de(de_DescribeByoipCidrsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityBlockExtensionHistoryCommand.js
var DescribeCapacityBlockExtensionHistoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityBlockExtensionHistory", {}).n("EC2Client", "DescribeCapacityBlockExtensionHistoryCommand").f(void 0, void 0).ser(se_DescribeCapacityBlockExtensionHistoryCommand).de(de_DescribeCapacityBlockExtensionHistoryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityBlockExtensionOfferingsCommand.js
var DescribeCapacityBlockExtensionOfferingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityBlockExtensionOfferings", {}).n("EC2Client", "DescribeCapacityBlockExtensionOfferingsCommand").f(void 0, void 0).ser(se_DescribeCapacityBlockExtensionOfferingsCommand).de(de_DescribeCapacityBlockExtensionOfferingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityBlockOfferingsCommand.js
var DescribeCapacityBlockOfferingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityBlockOfferings", {}).n("EC2Client", "DescribeCapacityBlockOfferingsCommand").f(void 0, void 0).ser(se_DescribeCapacityBlockOfferingsCommand).de(de_DescribeCapacityBlockOfferingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityReservationBillingRequestsCommand.js
var DescribeCapacityReservationBillingRequestsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityReservationBillingRequests", {}).n("EC2Client", "DescribeCapacityReservationBillingRequestsCommand").f(void 0, void 0).ser(se_DescribeCapacityReservationBillingRequestsCommand).de(de_DescribeCapacityReservationBillingRequestsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityReservationFleetsCommand.js
var DescribeCapacityReservationFleetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityReservationFleets", {}).n("EC2Client", "DescribeCapacityReservationFleetsCommand").f(void 0, void 0).ser(se_DescribeCapacityReservationFleetsCommand).de(de_DescribeCapacityReservationFleetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCapacityReservationsCommand.js
var DescribeCapacityReservationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCapacityReservations", {}).n("EC2Client", "DescribeCapacityReservationsCommand").f(void 0, void 0).ser(se_DescribeCapacityReservationsCommand).de(de_DescribeCapacityReservationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCarrierGatewaysCommand.js
var DescribeCarrierGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCarrierGateways", {}).n("EC2Client", "DescribeCarrierGatewaysCommand").f(void 0, void 0).ser(se_DescribeCarrierGatewaysCommand).de(de_DescribeCarrierGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClassicLinkInstancesCommand.js
var DescribeClassicLinkInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClassicLinkInstances", {}).n("EC2Client", "DescribeClassicLinkInstancesCommand").f(void 0, void 0).ser(se_DescribeClassicLinkInstancesCommand).de(de_DescribeClassicLinkInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClientVpnAuthorizationRulesCommand.js
var DescribeClientVpnAuthorizationRulesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClientVpnAuthorizationRules", {}).n("EC2Client", "DescribeClientVpnAuthorizationRulesCommand").f(void 0, void 0).ser(se_DescribeClientVpnAuthorizationRulesCommand).de(de_DescribeClientVpnAuthorizationRulesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClientVpnConnectionsCommand.js
var DescribeClientVpnConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClientVpnConnections", {}).n("EC2Client", "DescribeClientVpnConnectionsCommand").f(void 0, void 0).ser(se_DescribeClientVpnConnectionsCommand).de(de_DescribeClientVpnConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClientVpnEndpointsCommand.js
var DescribeClientVpnEndpointsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClientVpnEndpoints", {}).n("EC2Client", "DescribeClientVpnEndpointsCommand").f(void 0, void 0).ser(se_DescribeClientVpnEndpointsCommand).de(de_DescribeClientVpnEndpointsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClientVpnRoutesCommand.js
var DescribeClientVpnRoutesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClientVpnRoutes", {}).n("EC2Client", "DescribeClientVpnRoutesCommand").f(void 0, void 0).ser(se_DescribeClientVpnRoutesCommand).de(de_DescribeClientVpnRoutesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeClientVpnTargetNetworksCommand.js
var DescribeClientVpnTargetNetworksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeClientVpnTargetNetworks", {}).n("EC2Client", "DescribeClientVpnTargetNetworksCommand").f(void 0, void 0).ser(se_DescribeClientVpnTargetNetworksCommand).de(de_DescribeClientVpnTargetNetworksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCoipPoolsCommand.js
var DescribeCoipPoolsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCoipPools", {}).n("EC2Client", "DescribeCoipPoolsCommand").f(void 0, void 0).ser(se_DescribeCoipPoolsCommand).de(de_DescribeCoipPoolsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeConversionTasksCommand.js
var DescribeConversionTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeConversionTasks", {}).n("EC2Client", "DescribeConversionTasksCommand").f(void 0, DescribeConversionTasksResultFilterSensitiveLog).ser(se_DescribeConversionTasksCommand).de(de_DescribeConversionTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeCustomerGatewaysCommand.js
var DescribeCustomerGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeCustomerGateways", {}).n("EC2Client", "DescribeCustomerGatewaysCommand").f(void 0, void 0).ser(se_DescribeCustomerGatewaysCommand).de(de_DescribeCustomerGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeDeclarativePoliciesReportsCommand.js
var DescribeDeclarativePoliciesReportsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeDeclarativePoliciesReports", {}).n("EC2Client", "DescribeDeclarativePoliciesReportsCommand").f(void 0, void 0).ser(se_DescribeDeclarativePoliciesReportsCommand).de(de_DescribeDeclarativePoliciesReportsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeDhcpOptionsCommand.js
var DescribeDhcpOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeDhcpOptions", {}).n("EC2Client", "DescribeDhcpOptionsCommand").f(void 0, void 0).ser(se_DescribeDhcpOptionsCommand).de(de_DescribeDhcpOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeEgressOnlyInternetGatewaysCommand.js
var DescribeEgressOnlyInternetGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeEgressOnlyInternetGateways", {}).n("EC2Client", "DescribeEgressOnlyInternetGatewaysCommand").f(void 0, void 0).ser(se_DescribeEgressOnlyInternetGatewaysCommand).de(de_DescribeEgressOnlyInternetGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeElasticGpusCommand.js
var DescribeElasticGpusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeElasticGpus", {}).n("EC2Client", "DescribeElasticGpusCommand").f(void 0, void 0).ser(se_DescribeElasticGpusCommand).de(de_DescribeElasticGpusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeExportImageTasksCommand.js
var DescribeExportImageTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeExportImageTasks", {}).n("EC2Client", "DescribeExportImageTasksCommand").f(void 0, void 0).ser(se_DescribeExportImageTasksCommand).de(de_DescribeExportImageTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeExportTasks", {}).n("EC2Client", "DescribeExportTasksCommand").f(void 0, void 0).ser(se_DescribeExportTasksCommand).de(de_DescribeExportTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFastLaunchImagesCommand.js
var DescribeFastLaunchImagesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFastLaunchImages", {}).n("EC2Client", "DescribeFastLaunchImagesCommand").f(void 0, void 0).ser(se_DescribeFastLaunchImagesCommand).de(de_DescribeFastLaunchImagesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFastSnapshotRestoresCommand.js
var DescribeFastSnapshotRestoresCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFastSnapshotRestores", {}).n("EC2Client", "DescribeFastSnapshotRestoresCommand").f(void 0, void 0).ser(se_DescribeFastSnapshotRestoresCommand).de(de_DescribeFastSnapshotRestoresCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFleetHistoryCommand.js
var DescribeFleetHistoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFleetHistory", {}).n("EC2Client", "DescribeFleetHistoryCommand").f(void 0, void 0).ser(se_DescribeFleetHistoryCommand).de(de_DescribeFleetHistoryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFleetInstancesCommand.js
var DescribeFleetInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFleetInstances", {}).n("EC2Client", "DescribeFleetInstancesCommand").f(void 0, void 0).ser(se_DescribeFleetInstancesCommand).de(de_DescribeFleetInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFleetsCommand.js
var DescribeFleetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFleets", {}).n("EC2Client", "DescribeFleetsCommand").f(void 0, void 0).ser(se_DescribeFleetsCommand).de(de_DescribeFleetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFlowLogsCommand.js
var DescribeFlowLogsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFlowLogs", {}).n("EC2Client", "DescribeFlowLogsCommand").f(void 0, void 0).ser(se_DescribeFlowLogsCommand).de(de_DescribeFlowLogsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFpgaImageAttributeCommand.js
var DescribeFpgaImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFpgaImageAttribute", {}).n("EC2Client", "DescribeFpgaImageAttributeCommand").f(void 0, void 0).ser(se_DescribeFpgaImageAttributeCommand).de(de_DescribeFpgaImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeFpgaImagesCommand.js
var DescribeFpgaImagesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeFpgaImages", {}).n("EC2Client", "DescribeFpgaImagesCommand").f(void 0, void 0).ser(se_DescribeFpgaImagesCommand).de(de_DescribeFpgaImagesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeHostReservationOfferingsCommand.js
var DescribeHostReservationOfferingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeHostReservationOfferings", {}).n("EC2Client", "DescribeHostReservationOfferingsCommand").f(void 0, void 0).ser(se_DescribeHostReservationOfferingsCommand).de(de_DescribeHostReservationOfferingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeHostReservationsCommand.js
var DescribeHostReservationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeHostReservations", {}).n("EC2Client", "DescribeHostReservationsCommand").f(void 0, void 0).ser(se_DescribeHostReservationsCommand).de(de_DescribeHostReservationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeHostsCommand.js
var DescribeHostsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeHosts", {}).n("EC2Client", "DescribeHostsCommand").f(void 0, void 0).ser(se_DescribeHostsCommand).de(de_DescribeHostsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIamInstanceProfileAssociationsCommand.js
var DescribeIamInstanceProfileAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIamInstanceProfileAssociations", {}).n("EC2Client", "DescribeIamInstanceProfileAssociationsCommand").f(void 0, void 0).ser(se_DescribeIamInstanceProfileAssociationsCommand).de(de_DescribeIamInstanceProfileAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIdentityIdFormatCommand.js
var DescribeIdentityIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIdentityIdFormat", {}).n("EC2Client", "DescribeIdentityIdFormatCommand").f(void 0, void 0).ser(se_DescribeIdentityIdFormatCommand).de(de_DescribeIdentityIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIdFormatCommand.js
var DescribeIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIdFormat", {}).n("EC2Client", "DescribeIdFormatCommand").f(void 0, void 0).ser(se_DescribeIdFormatCommand).de(de_DescribeIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeImageAttributeCommand.js
var DescribeImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeImageAttribute", {}).n("EC2Client", "DescribeImageAttributeCommand").f(void 0, void 0).ser(se_DescribeImageAttributeCommand).de(de_DescribeImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeImagesCommand.js
var DescribeImagesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeImages", {}).n("EC2Client", "DescribeImagesCommand").f(void 0, void 0).ser(se_DescribeImagesCommand).de(de_DescribeImagesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_4.js
var FleetActivityStatus = {
  ERROR: "error",
  FULFILLED: "fulfilled",
  PENDING_FULFILLMENT: "pending_fulfillment",
  PENDING_TERMINATION: "pending_termination"
};
var FpgaImageAttributeName = {
  description: "description",
  loadPermission: "loadPermission",
  name: "name",
  productCodes: "productCodes"
};
var PermissionGroup = {
  all: "all"
};
var ProductCodeValues = {
  devpay: "devpay",
  marketplace: "marketplace"
};
var FpgaImageStateCode = {
  available: "available",
  failed: "failed",
  pending: "pending",
  unavailable: "unavailable"
};
var PaymentOption = {
  ALL_UPFRONT: "AllUpfront",
  NO_UPFRONT: "NoUpfront",
  PARTIAL_UPFRONT: "PartialUpfront"
};
var ReservationState = {
  ACTIVE: "active",
  PAYMENT_FAILED: "payment-failed",
  PAYMENT_PENDING: "payment-pending",
  RETIRED: "retired"
};
var ImageAttributeName = {
  blockDeviceMapping: "blockDeviceMapping",
  bootMode: "bootMode",
  deregistrationProtection: "deregistrationProtection",
  description: "description",
  imdsSupport: "imdsSupport",
  kernel: "kernel",
  lastLaunchedTime: "lastLaunchedTime",
  launchPermission: "launchPermission",
  productCodes: "productCodes",
  ramdisk: "ramdisk",
  sriovNetSupport: "sriovNetSupport",
  tpmSupport: "tpmSupport",
  uefiData: "uefiData"
};
var ArchitectureValues = {
  arm64: "arm64",
  arm64_mac: "arm64_mac",
  i386: "i386",
  x86_64: "x86_64",
  x86_64_mac: "x86_64_mac"
};
var BootModeValues = {
  legacy_bios: "legacy-bios",
  uefi: "uefi",
  uefi_preferred: "uefi-preferred"
};
var HypervisorType = {
  ovm: "ovm",
  xen: "xen"
};
var ImageTypeValues = {
  kernel: "kernel",
  machine: "machine",
  ramdisk: "ramdisk"
};
var ImdsSupportValues = {
  v2_0: "v2.0"
};
var DeviceType = {
  ebs: "ebs",
  instance_store: "instance-store"
};
var ImageState = {
  available: "available",
  deregistered: "deregistered",
  disabled: "disabled",
  error: "error",
  failed: "failed",
  invalid: "invalid",
  pending: "pending",
  transient: "transient"
};
var TpmSupportValues = {
  v2_0: "v2.0"
};
var VirtualizationType = {
  hvm: "hvm",
  paravirtual: "paravirtual"
};
var InstanceAttributeName = {
  blockDeviceMapping: "blockDeviceMapping",
  disableApiStop: "disableApiStop",
  disableApiTermination: "disableApiTermination",
  ebsOptimized: "ebsOptimized",
  enaSupport: "enaSupport",
  enclaveOptions: "enclaveOptions",
  groupSet: "groupSet",
  instanceInitiatedShutdownBehavior: "instanceInitiatedShutdownBehavior",
  instanceType: "instanceType",
  kernel: "kernel",
  productCodes: "productCodes",
  ramdisk: "ramdisk",
  rootDeviceName: "rootDeviceName",
  sourceDestCheck: "sourceDestCheck",
  sriovNetSupport: "sriovNetSupport",
  userData: "userData"
};
var InstanceStateName = {
  pending: "pending",
  running: "running",
  shutting_down: "shutting-down",
  stopped: "stopped",
  stopping: "stopping",
  terminated: "terminated"
};
var InstanceBootModeValues = {
  legacy_bios: "legacy-bios",
  uefi: "uefi"
};
var InstanceLifecycleType = {
  capacity_block: "capacity-block",
  scheduled: "scheduled",
  spot: "spot"
};
var InstanceAutoRecoveryState = {
  default: "default",
  disabled: "disabled"
};
var InstanceMetadataEndpointState = {
  disabled: "disabled",
  enabled: "enabled"
};
var InstanceMetadataProtocolState = {
  disabled: "disabled",
  enabled: "enabled"
};
var HttpTokensState = {
  optional: "optional",
  required: "required"
};
var InstanceMetadataTagsState = {
  disabled: "disabled",
  enabled: "enabled"
};
var InstanceMetadataOptionsState = {
  applied: "applied",
  pending: "pending"
};
var MonitoringState = {
  disabled: "disabled",
  disabling: "disabling",
  enabled: "enabled",
  pending: "pending"
};
var StatusName = {
  reachability: "reachability"
};
var StatusType = {
  failed: "failed",
  initializing: "initializing",
  insufficient_data: "insufficient-data",
  passed: "passed"
};
var SummaryStatus = {
  impaired: "impaired",
  initializing: "initializing",
  insufficient_data: "insufficient-data",
  not_applicable: "not-applicable",
  ok: "ok"
};
var EventCode = {
  instance_reboot: "instance-reboot",
  instance_retirement: "instance-retirement",
  instance_stop: "instance-stop",
  system_maintenance: "system-maintenance",
  system_reboot: "system-reboot"
};
var LocationType = {
  availability_zone: "availability-zone",
  availability_zone_id: "availability-zone-id",
  outpost: "outpost",
  region: "region"
};
var EbsOptimizedSupport = {
  default: "default",
  supported: "supported",
  unsupported: "unsupported"
};
var EbsEncryptionSupport = {
  supported: "supported",
  unsupported: "unsupported"
};
var EbsNvmeSupport = {
  REQUIRED: "required",
  SUPPORTED: "supported",
  UNSUPPORTED: "unsupported"
};
var InstanceTypeHypervisor = {
  NITRO: "nitro",
  XEN: "xen"
};
var DiskType = {
  hdd: "hdd",
  ssd: "ssd"
};
var InstanceStorageEncryptionSupport = {
  required: "required",
  unsupported: "unsupported"
};
var EphemeralNvmeSupport = {
  REQUIRED: "required",
  SUPPORTED: "supported",
  UNSUPPORTED: "unsupported"
};
var BandwidthWeightingType = {
  DEFAULT: "default",
  EBS_1: "ebs-1",
  VPC_1: "vpc-1"
};
var EnaSupport = {
  required: "required",
  supported: "supported",
  unsupported: "unsupported"
};
var NitroEnclavesSupport = {
  SUPPORTED: "supported",
  UNSUPPORTED: "unsupported"
};
var NitroTpmSupport = {
  SUPPORTED: "supported",
  UNSUPPORTED: "unsupported"
};
var PhcSupport = {
  SUPPORTED: "supported",
  UNSUPPORTED: "unsupported"
};
var PlacementGroupStrategy = {
  cluster: "cluster",
  partition: "partition",
  spread: "spread"
};
var ArchitectureType = {
  arm64: "arm64",
  arm64_mac: "arm64_mac",
  i386: "i386",
  x86_64: "x86_64",
  x86_64_mac: "x86_64_mac"
};
var SupportedAdditionalProcessorFeature = {
  AMD_SEV_SNP: "amd-sev-snp"
};
var BootModeType = {
  legacy_bios: "legacy-bios",
  uefi: "uefi"
};
var RootDeviceType = {
  ebs: "ebs",
  instance_store: "instance-store"
};
var UsageClassType = {
  capacity_block: "capacity-block",
  on_demand: "on-demand",
  spot: "spot"
};
var LockState = {
  compliance: "compliance",
  compliance_cooloff: "compliance-cooloff",
  expired: "expired",
  governance: "governance"
};
var MoveStatus = {
  movingToVpc: "movingToVpc",
  restoringToClassic: "restoringToClassic"
};
var FindingsFound = {
  false: "false",
  true: "true",
  unknown: "unknown"
};
var AnalysisStatus = {
  failed: "failed",
  running: "running",
  succeeded: "succeeded"
};
var NetworkInterfaceAttribute = {
  associatePublicIpAddress: "associatePublicIpAddress",
  attachment: "attachment",
  description: "description",
  groupSet: "groupSet",
  sourceDestCheck: "sourceDestCheck"
};
var OfferingClassType = {
  CONVERTIBLE: "convertible",
  STANDARD: "standard"
};
var SnapshotDetailFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Url && { Url: SENSITIVE_STRING }
});
var ImportImageTaskFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SnapshotDetails && {
    SnapshotDetails: obj.SnapshotDetails.map((item) => SnapshotDetailFilterSensitiveLog(item))
  }
});
var DescribeImportImageTasksResultFilterSensitiveLog = (obj) => ({
  ...obj
});
var SnapshotTaskDetailFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Url && { Url: SENSITIVE_STRING }
});
var ImportSnapshotTaskFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SnapshotTaskDetail && { SnapshotTaskDetail: SnapshotTaskDetailFilterSensitiveLog(obj.SnapshotTaskDetail) }
});
var DescribeImportSnapshotTasksResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ImportSnapshotTasks && {
    ImportSnapshotTasks: obj.ImportSnapshotTasks.map((item) => ImportSnapshotTaskFilterSensitiveLog(item))
  }
});
var DescribeLaunchTemplateVersionsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateVersions && {
    LaunchTemplateVersions: obj.LaunchTemplateVersions.map((item) => LaunchTemplateVersionFilterSensitiveLog(item))
  }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeImportImageTasksCommand.js
var DescribeImportImageTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeImportImageTasks", {}).n("EC2Client", "DescribeImportImageTasksCommand").f(void 0, DescribeImportImageTasksResultFilterSensitiveLog).ser(se_DescribeImportImageTasksCommand).de(de_DescribeImportImageTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeImportSnapshotTasksCommand.js
var DescribeImportSnapshotTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeImportSnapshotTasks", {}).n("EC2Client", "DescribeImportSnapshotTasksCommand").f(void 0, DescribeImportSnapshotTasksResultFilterSensitiveLog).ser(se_DescribeImportSnapshotTasksCommand).de(de_DescribeImportSnapshotTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceAttributeCommand.js
var DescribeInstanceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceAttribute", {}).n("EC2Client", "DescribeInstanceAttributeCommand").f(void 0, void 0).ser(se_DescribeInstanceAttributeCommand).de(de_DescribeInstanceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceConnectEndpointsCommand.js
var DescribeInstanceConnectEndpointsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceConnectEndpoints", {}).n("EC2Client", "DescribeInstanceConnectEndpointsCommand").f(void 0, void 0).ser(se_DescribeInstanceConnectEndpointsCommand).de(de_DescribeInstanceConnectEndpointsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceCreditSpecificationsCommand.js
var DescribeInstanceCreditSpecificationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceCreditSpecifications", {}).n("EC2Client", "DescribeInstanceCreditSpecificationsCommand").f(void 0, void 0).ser(se_DescribeInstanceCreditSpecificationsCommand).de(de_DescribeInstanceCreditSpecificationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceEventNotificationAttributesCommand.js
var DescribeInstanceEventNotificationAttributesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceEventNotificationAttributes", {}).n("EC2Client", "DescribeInstanceEventNotificationAttributesCommand").f(void 0, void 0).ser(se_DescribeInstanceEventNotificationAttributesCommand).de(de_DescribeInstanceEventNotificationAttributesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceEventWindowsCommand.js
var DescribeInstanceEventWindowsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceEventWindows", {}).n("EC2Client", "DescribeInstanceEventWindowsCommand").f(void 0, void 0).ser(se_DescribeInstanceEventWindowsCommand).de(de_DescribeInstanceEventWindowsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceImageMetadataCommand.js
var DescribeInstanceImageMetadataCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceImageMetadata", {}).n("EC2Client", "DescribeInstanceImageMetadataCommand").f(void 0, void 0).ser(se_DescribeInstanceImageMetadataCommand).de(de_DescribeInstanceImageMetadataCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstancesCommand.js
var DescribeInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstances", {}).n("EC2Client", "DescribeInstancesCommand").f(void 0, void 0).ser(se_DescribeInstancesCommand).de(de_DescribeInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceStatusCommand.js
var DescribeInstanceStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceStatus", {}).n("EC2Client", "DescribeInstanceStatusCommand").f(void 0, void 0).ser(se_DescribeInstanceStatusCommand).de(de_DescribeInstanceStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceTopologyCommand.js
var DescribeInstanceTopologyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceTopology", {}).n("EC2Client", "DescribeInstanceTopologyCommand").f(void 0, void 0).ser(se_DescribeInstanceTopologyCommand).de(de_DescribeInstanceTopologyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceTypeOfferingsCommand.js
var DescribeInstanceTypeOfferingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceTypeOfferings", {}).n("EC2Client", "DescribeInstanceTypeOfferingsCommand").f(void 0, void 0).ser(se_DescribeInstanceTypeOfferingsCommand).de(de_DescribeInstanceTypeOfferingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInstanceTypesCommand.js
var DescribeInstanceTypesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInstanceTypes", {}).n("EC2Client", "DescribeInstanceTypesCommand").f(void 0, void 0).ser(se_DescribeInstanceTypesCommand).de(de_DescribeInstanceTypesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeInternetGatewaysCommand.js
var DescribeInternetGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeInternetGateways", {}).n("EC2Client", "DescribeInternetGatewaysCommand").f(void 0, void 0).ser(se_DescribeInternetGatewaysCommand).de(de_DescribeInternetGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamByoasnCommand.js
var DescribeIpamByoasnCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamByoasn", {}).n("EC2Client", "DescribeIpamByoasnCommand").f(void 0, void 0).ser(se_DescribeIpamByoasnCommand).de(de_DescribeIpamByoasnCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamExternalResourceVerificationTokensCommand.js
var DescribeIpamExternalResourceVerificationTokensCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamExternalResourceVerificationTokens", {}).n("EC2Client", "DescribeIpamExternalResourceVerificationTokensCommand").f(void 0, void 0).ser(se_DescribeIpamExternalResourceVerificationTokensCommand).de(de_DescribeIpamExternalResourceVerificationTokensCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamPoolsCommand.js
var DescribeIpamPoolsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamPools", {}).n("EC2Client", "DescribeIpamPoolsCommand").f(void 0, void 0).ser(se_DescribeIpamPoolsCommand).de(de_DescribeIpamPoolsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamResourceDiscoveriesCommand.js
var DescribeIpamResourceDiscoveriesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamResourceDiscoveries", {}).n("EC2Client", "DescribeIpamResourceDiscoveriesCommand").f(void 0, void 0).ser(se_DescribeIpamResourceDiscoveriesCommand).de(de_DescribeIpamResourceDiscoveriesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamResourceDiscoveryAssociationsCommand.js
var DescribeIpamResourceDiscoveryAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamResourceDiscoveryAssociations", {}).n("EC2Client", "DescribeIpamResourceDiscoveryAssociationsCommand").f(void 0, void 0).ser(se_DescribeIpamResourceDiscoveryAssociationsCommand).de(de_DescribeIpamResourceDiscoveryAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamsCommand.js
var DescribeIpamsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpams", {}).n("EC2Client", "DescribeIpamsCommand").f(void 0, void 0).ser(se_DescribeIpamsCommand).de(de_DescribeIpamsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpamScopesCommand.js
var DescribeIpamScopesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpamScopes", {}).n("EC2Client", "DescribeIpamScopesCommand").f(void 0, void 0).ser(se_DescribeIpamScopesCommand).de(de_DescribeIpamScopesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeIpv6PoolsCommand.js
var DescribeIpv6PoolsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeIpv6Pools", {}).n("EC2Client", "DescribeIpv6PoolsCommand").f(void 0, void 0).ser(se_DescribeIpv6PoolsCommand).de(de_DescribeIpv6PoolsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeKeyPairsCommand.js
var DescribeKeyPairsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeKeyPairs", {}).n("EC2Client", "DescribeKeyPairsCommand").f(void 0, void 0).ser(se_DescribeKeyPairsCommand).de(de_DescribeKeyPairsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLaunchTemplatesCommand.js
var DescribeLaunchTemplatesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLaunchTemplates", {}).n("EC2Client", "DescribeLaunchTemplatesCommand").f(void 0, void 0).ser(se_DescribeLaunchTemplatesCommand).de(de_DescribeLaunchTemplatesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLaunchTemplateVersionsCommand.js
var DescribeLaunchTemplateVersionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLaunchTemplateVersions", {}).n("EC2Client", "DescribeLaunchTemplateVersionsCommand").f(void 0, DescribeLaunchTemplateVersionsResultFilterSensitiveLog).ser(se_DescribeLaunchTemplateVersionsCommand).de(de_DescribeLaunchTemplateVersionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewayRouteTablesCommand.js
var DescribeLocalGatewayRouteTablesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGatewayRouteTables", {}).n("EC2Client", "DescribeLocalGatewayRouteTablesCommand").f(void 0, void 0).ser(se_DescribeLocalGatewayRouteTablesCommand).de(de_DescribeLocalGatewayRouteTablesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand.js
var DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", {}).n("EC2Client", "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand").f(void 0, void 0).ser(se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand).de(de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewayRouteTableVpcAssociationsCommand.js
var DescribeLocalGatewayRouteTableVpcAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGatewayRouteTableVpcAssociations", {}).n("EC2Client", "DescribeLocalGatewayRouteTableVpcAssociationsCommand").f(void 0, void 0).ser(se_DescribeLocalGatewayRouteTableVpcAssociationsCommand).de(de_DescribeLocalGatewayRouteTableVpcAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewaysCommand.js
var DescribeLocalGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGateways", {}).n("EC2Client", "DescribeLocalGatewaysCommand").f(void 0, void 0).ser(se_DescribeLocalGatewaysCommand).de(de_DescribeLocalGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewayVirtualInterfaceGroupsCommand.js
var DescribeLocalGatewayVirtualInterfaceGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGatewayVirtualInterfaceGroups", {}).n("EC2Client", "DescribeLocalGatewayVirtualInterfaceGroupsCommand").f(void 0, void 0).ser(se_DescribeLocalGatewayVirtualInterfaceGroupsCommand).de(de_DescribeLocalGatewayVirtualInterfaceGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLocalGatewayVirtualInterfacesCommand.js
var DescribeLocalGatewayVirtualInterfacesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLocalGatewayVirtualInterfaces", {}).n("EC2Client", "DescribeLocalGatewayVirtualInterfacesCommand").f(void 0, void 0).ser(se_DescribeLocalGatewayVirtualInterfacesCommand).de(de_DescribeLocalGatewayVirtualInterfacesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeLockedSnapshotsCommand.js
var DescribeLockedSnapshotsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeLockedSnapshots", {}).n("EC2Client", "DescribeLockedSnapshotsCommand").f(void 0, void 0).ser(se_DescribeLockedSnapshotsCommand).de(de_DescribeLockedSnapshotsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeMacHostsCommand.js
var DescribeMacHostsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeMacHosts", {}).n("EC2Client", "DescribeMacHostsCommand").f(void 0, void 0).ser(se_DescribeMacHostsCommand).de(de_DescribeMacHostsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeManagedPrefixListsCommand.js
var DescribeManagedPrefixListsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeManagedPrefixLists", {}).n("EC2Client", "DescribeManagedPrefixListsCommand").f(void 0, void 0).ser(se_DescribeManagedPrefixListsCommand).de(de_DescribeManagedPrefixListsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeMovingAddressesCommand.js
var DescribeMovingAddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeMovingAddresses", {}).n("EC2Client", "DescribeMovingAddressesCommand").f(void 0, void 0).ser(se_DescribeMovingAddressesCommand).de(de_DescribeMovingAddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNatGatewaysCommand.js
var DescribeNatGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNatGateways", {}).n("EC2Client", "DescribeNatGatewaysCommand").f(void 0, void 0).ser(se_DescribeNatGatewaysCommand).de(de_DescribeNatGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkAclsCommand.js
var DescribeNetworkAclsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkAcls", {}).n("EC2Client", "DescribeNetworkAclsCommand").f(void 0, void 0).ser(se_DescribeNetworkAclsCommand).de(de_DescribeNetworkAclsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInsightsAccessScopeAnalysesCommand.js
var DescribeNetworkInsightsAccessScopeAnalysesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInsightsAccessScopeAnalyses", {}).n("EC2Client", "DescribeNetworkInsightsAccessScopeAnalysesCommand").f(void 0, void 0).ser(se_DescribeNetworkInsightsAccessScopeAnalysesCommand).de(de_DescribeNetworkInsightsAccessScopeAnalysesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInsightsAccessScopesCommand.js
var DescribeNetworkInsightsAccessScopesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInsightsAccessScopes", {}).n("EC2Client", "DescribeNetworkInsightsAccessScopesCommand").f(void 0, void 0).ser(se_DescribeNetworkInsightsAccessScopesCommand).de(de_DescribeNetworkInsightsAccessScopesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInsightsAnalysesCommand.js
var DescribeNetworkInsightsAnalysesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInsightsAnalyses", {}).n("EC2Client", "DescribeNetworkInsightsAnalysesCommand").f(void 0, void 0).ser(se_DescribeNetworkInsightsAnalysesCommand).de(de_DescribeNetworkInsightsAnalysesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInsightsPathsCommand.js
var DescribeNetworkInsightsPathsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInsightsPaths", {}).n("EC2Client", "DescribeNetworkInsightsPathsCommand").f(void 0, void 0).ser(se_DescribeNetworkInsightsPathsCommand).de(de_DescribeNetworkInsightsPathsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInterfaceAttributeCommand.js
var DescribeNetworkInterfaceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInterfaceAttribute", {}).n("EC2Client", "DescribeNetworkInterfaceAttributeCommand").f(void 0, void 0).ser(se_DescribeNetworkInterfaceAttributeCommand).de(de_DescribeNetworkInterfaceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInterfacePermissionsCommand.js
var DescribeNetworkInterfacePermissionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInterfacePermissions", {}).n("EC2Client", "DescribeNetworkInterfacePermissionsCommand").f(void 0, void 0).ser(se_DescribeNetworkInterfacePermissionsCommand).de(de_DescribeNetworkInterfacePermissionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeNetworkInterfacesCommand.js
var DescribeNetworkInterfacesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeNetworkInterfaces", {}).n("EC2Client", "DescribeNetworkInterfacesCommand").f(void 0, void 0).ser(se_DescribeNetworkInterfacesCommand).de(de_DescribeNetworkInterfacesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribePlacementGroupsCommand.js
var DescribePlacementGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribePlacementGroups", {}).n("EC2Client", "DescribePlacementGroupsCommand").f(void 0, void 0).ser(se_DescribePlacementGroupsCommand).de(de_DescribePlacementGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribePrefixListsCommand.js
var DescribePrefixListsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribePrefixLists", {}).n("EC2Client", "DescribePrefixListsCommand").f(void 0, void 0).ser(se_DescribePrefixListsCommand).de(de_DescribePrefixListsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribePrincipalIdFormatCommand.js
var DescribePrincipalIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribePrincipalIdFormat", {}).n("EC2Client", "DescribePrincipalIdFormatCommand").f(void 0, void 0).ser(se_DescribePrincipalIdFormatCommand).de(de_DescribePrincipalIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribePublicIpv4PoolsCommand.js
var DescribePublicIpv4PoolsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribePublicIpv4Pools", {}).n("EC2Client", "DescribePublicIpv4PoolsCommand").f(void 0, void 0).ser(se_DescribePublicIpv4PoolsCommand).de(de_DescribePublicIpv4PoolsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeRegionsCommand.js
var DescribeRegionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeRegions", {}).n("EC2Client", "DescribeRegionsCommand").f(void 0, void 0).ser(se_DescribeRegionsCommand).de(de_DescribeRegionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeReplaceRootVolumeTasksCommand.js
var DescribeReplaceRootVolumeTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeReplaceRootVolumeTasks", {}).n("EC2Client", "DescribeReplaceRootVolumeTasksCommand").f(void 0, void 0).ser(se_DescribeReplaceRootVolumeTasksCommand).de(de_DescribeReplaceRootVolumeTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeReservedInstancesCommand.js
var DescribeReservedInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeReservedInstances", {}).n("EC2Client", "DescribeReservedInstancesCommand").f(void 0, void 0).ser(se_DescribeReservedInstancesCommand).de(de_DescribeReservedInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeReservedInstancesListingsCommand.js
var DescribeReservedInstancesListingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeReservedInstancesListings", {}).n("EC2Client", "DescribeReservedInstancesListingsCommand").f(void 0, void 0).ser(se_DescribeReservedInstancesListingsCommand).de(de_DescribeReservedInstancesListingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeReservedInstancesModificationsCommand.js
var DescribeReservedInstancesModificationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeReservedInstancesModifications", {}).n("EC2Client", "DescribeReservedInstancesModificationsCommand").f(void 0, void 0).ser(se_DescribeReservedInstancesModificationsCommand).de(de_DescribeReservedInstancesModificationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeReservedInstancesOfferingsCommand.js
var DescribeReservedInstancesOfferingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeReservedInstancesOfferings", {}).n("EC2Client", "DescribeReservedInstancesOfferingsCommand").f(void 0, void 0).ser(se_DescribeReservedInstancesOfferingsCommand).de(de_DescribeReservedInstancesOfferingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeRouteTablesCommand.js
var DescribeRouteTablesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeRouteTables", {}).n("EC2Client", "DescribeRouteTablesCommand").f(void 0, void 0).ser(se_DescribeRouteTablesCommand).de(de_DescribeRouteTablesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeScheduledInstanceAvailabilityCommand.js
var DescribeScheduledInstanceAvailabilityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeScheduledInstanceAvailability", {}).n("EC2Client", "DescribeScheduledInstanceAvailabilityCommand").f(void 0, void 0).ser(se_DescribeScheduledInstanceAvailabilityCommand).de(de_DescribeScheduledInstanceAvailabilityCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeScheduledInstancesCommand.js
var DescribeScheduledInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeScheduledInstances", {}).n("EC2Client", "DescribeScheduledInstancesCommand").f(void 0, void 0).ser(se_DescribeScheduledInstancesCommand).de(de_DescribeScheduledInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSecurityGroupReferencesCommand.js
var DescribeSecurityGroupReferencesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSecurityGroupReferences", {}).n("EC2Client", "DescribeSecurityGroupReferencesCommand").f(void 0, void 0).ser(se_DescribeSecurityGroupReferencesCommand).de(de_DescribeSecurityGroupReferencesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSecurityGroupRulesCommand.js
var DescribeSecurityGroupRulesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSecurityGroupRules", {}).n("EC2Client", "DescribeSecurityGroupRulesCommand").f(void 0, void 0).ser(se_DescribeSecurityGroupRulesCommand).de(de_DescribeSecurityGroupRulesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSecurityGroupsCommand.js
var DescribeSecurityGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSecurityGroups", {}).n("EC2Client", "DescribeSecurityGroupsCommand").f(void 0, void 0).ser(se_DescribeSecurityGroupsCommand).de(de_DescribeSecurityGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSecurityGroupVpcAssociationsCommand.js
var DescribeSecurityGroupVpcAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSecurityGroupVpcAssociations", {}).n("EC2Client", "DescribeSecurityGroupVpcAssociationsCommand").f(void 0, void 0).ser(se_DescribeSecurityGroupVpcAssociationsCommand).de(de_DescribeSecurityGroupVpcAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSnapshotAttributeCommand.js
var DescribeSnapshotAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSnapshotAttribute", {}).n("EC2Client", "DescribeSnapshotAttributeCommand").f(void 0, void 0).ser(se_DescribeSnapshotAttributeCommand).de(de_DescribeSnapshotAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSnapshotsCommand.js
var DescribeSnapshotsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSnapshots", {}).n("EC2Client", "DescribeSnapshotsCommand").f(void 0, void 0).ser(se_DescribeSnapshotsCommand).de(de_DescribeSnapshotsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSnapshotTierStatusCommand.js
var DescribeSnapshotTierStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSnapshotTierStatus", {}).n("EC2Client", "DescribeSnapshotTierStatusCommand").f(void 0, void 0).ser(se_DescribeSnapshotTierStatusCommand).de(de_DescribeSnapshotTierStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotDatafeedSubscriptionCommand.js
var DescribeSpotDatafeedSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotDatafeedSubscription", {}).n("EC2Client", "DescribeSpotDatafeedSubscriptionCommand").f(void 0, void 0).ser(se_DescribeSpotDatafeedSubscriptionCommand).de(de_DescribeSpotDatafeedSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotFleetInstancesCommand.js
var DescribeSpotFleetInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotFleetInstances", {}).n("EC2Client", "DescribeSpotFleetInstancesCommand").f(void 0, void 0).ser(se_DescribeSpotFleetInstancesCommand).de(de_DescribeSpotFleetInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotFleetRequestHistoryCommand.js
var DescribeSpotFleetRequestHistoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotFleetRequestHistory", {}).n("EC2Client", "DescribeSpotFleetRequestHistoryCommand").f(void 0, void 0).ser(se_DescribeSpotFleetRequestHistoryCommand).de(de_DescribeSpotFleetRequestHistoryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_5.js
var OfferingTypeValues = {
  All_Upfront: "All Upfront",
  Heavy_Utilization: "Heavy Utilization",
  Light_Utilization: "Light Utilization",
  Medium_Utilization: "Medium Utilization",
  No_Upfront: "No Upfront",
  Partial_Upfront: "Partial Upfront"
};
var RIProductDescription = {
  Linux_UNIX: "Linux/UNIX",
  Linux_UNIX_Amazon_VPC_: "Linux/UNIX (Amazon VPC)",
  Windows: "Windows",
  Windows_Amazon_VPC_: "Windows (Amazon VPC)"
};
var RecurringChargeFrequency = {
  Hourly: "Hourly"
};
var Scope = {
  AVAILABILITY_ZONE: "Availability Zone",
  REGIONAL: "Region"
};
var ReservedInstanceState = {
  active: "active",
  payment_failed: "payment-failed",
  payment_pending: "payment-pending",
  queued: "queued",
  queued_deleted: "queued-deleted",
  retired: "retired"
};
var SnapshotAttributeName = {
  createVolumePermission: "createVolumePermission",
  productCodes: "productCodes"
};
var TieringOperationStatus = {
  archival_completed: "archival-completed",
  archival_failed: "archival-failed",
  archival_in_progress: "archival-in-progress",
  permanent_restore_completed: "permanent-restore-completed",
  permanent_restore_failed: "permanent-restore-failed",
  permanent_restore_in_progress: "permanent-restore-in-progress",
  temporary_restore_completed: "temporary-restore-completed",
  temporary_restore_failed: "temporary-restore-failed",
  temporary_restore_in_progress: "temporary-restore-in-progress"
};
var EventType = {
  BATCH_CHANGE: "fleetRequestChange",
  ERROR: "error",
  INFORMATION: "information",
  INSTANCE_CHANGE: "instanceChange"
};
var ExcessCapacityTerminationPolicy = {
  DEFAULT: "default",
  NO_TERMINATION: "noTermination"
};
var OnDemandAllocationStrategy = {
  LOWEST_PRICE: "lowestPrice",
  PRIORITIZED: "prioritized"
};
var ReplacementStrategy = {
  LAUNCH: "launch",
  LAUNCH_BEFORE_TERMINATE: "launch-before-terminate"
};
var SpotInstanceState = {
  active: "active",
  cancelled: "cancelled",
  closed: "closed",
  disabled: "disabled",
  failed: "failed",
  open: "open"
};
var VerifiedAccessLogDeliveryStatusCode = {
  FAILED: "failed",
  SUCCESS: "success"
};
var VolumeAttributeName = {
  autoEnableIO: "autoEnableIO",
  productCodes: "productCodes"
};
var VolumeModificationState = {
  completed: "completed",
  failed: "failed",
  modifying: "modifying",
  optimizing: "optimizing"
};
var VolumeStatusName = {
  io_enabled: "io-enabled",
  io_performance: "io-performance"
};
var VolumeStatusInfoStatus = {
  impaired: "impaired",
  insufficient_data: "insufficient-data",
  ok: "ok"
};
var VpcAttributeName = {
  enableDnsHostnames: "enableDnsHostnames",
  enableDnsSupport: "enableDnsSupport",
  enableNetworkAddressUsageMetrics: "enableNetworkAddressUsageMetrics"
};
var VpcBlockPublicAccessExclusionsAllowed = {
  allowed: "allowed",
  not_allowed: "not-allowed"
};
var InternetGatewayBlockMode = {
  block_bidirectional: "block-bidirectional",
  block_ingress: "block-ingress",
  off: "off"
};
var ManagedBy = {
  account: "account",
  declarative_policy: "declarative-policy"
};
var VpcBlockPublicAccessState = {
  default_state: "default-state",
  update_complete: "update-complete",
  update_in_progress: "update-in-progress"
};
var ImageBlockPublicAccessDisabledState = {
  unblocked: "unblocked"
};
var SnapshotBlockPublicAccessState = {
  block_all_sharing: "block-all-sharing",
  block_new_sharing: "block-new-sharing",
  unblocked: "unblocked"
};
var TransitGatewayPropagationState = {
  disabled: "disabled",
  disabling: "disabling",
  enabled: "enabled",
  enabling: "enabling"
};
var SpotFleetLaunchSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var SpotFleetRequestConfigDataFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchSpecifications && {
    LaunchSpecifications: obj.LaunchSpecifications.map((item) => SpotFleetLaunchSpecificationFilterSensitiveLog(item))
  }
});
var SpotFleetRequestConfigFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SpotFleetRequestConfig && {
    SpotFleetRequestConfig: SpotFleetRequestConfigDataFilterSensitiveLog(obj.SpotFleetRequestConfig)
  }
});
var DescribeSpotFleetRequestsResponseFilterSensitiveLog = (obj) => ({
  ...obj
});
var LaunchSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var SpotInstanceRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchSpecification && {
    LaunchSpecification: LaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification)
  }
});
var DescribeSpotInstanceRequestsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SpotInstanceRequests && {
    SpotInstanceRequests: obj.SpotInstanceRequests.map((item) => SpotInstanceRequestFilterSensitiveLog(item))
  }
});
var DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProviders && {
    VerifiedAccessTrustProviders: obj.VerifiedAccessTrustProviders.map((item) => VerifiedAccessTrustProviderFilterSensitiveLog(item))
  }
});
var DescribeVpnConnectionsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnections && {
    VpnConnections: obj.VpnConnections.map((item) => VpnConnectionFilterSensitiveLog(item))
  }
});
var DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProvider && {
    VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider)
  }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotFleetRequestsCommand.js
var DescribeSpotFleetRequestsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotFleetRequests", {}).n("EC2Client", "DescribeSpotFleetRequestsCommand").f(void 0, DescribeSpotFleetRequestsResponseFilterSensitiveLog).ser(se_DescribeSpotFleetRequestsCommand).de(de_DescribeSpotFleetRequestsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotInstanceRequestsCommand.js
var DescribeSpotInstanceRequestsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotInstanceRequests", {}).n("EC2Client", "DescribeSpotInstanceRequestsCommand").f(void 0, DescribeSpotInstanceRequestsResultFilterSensitiveLog).ser(se_DescribeSpotInstanceRequestsCommand).de(de_DescribeSpotInstanceRequestsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSpotPriceHistoryCommand.js
var DescribeSpotPriceHistoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSpotPriceHistory", {}).n("EC2Client", "DescribeSpotPriceHistoryCommand").f(void 0, void 0).ser(se_DescribeSpotPriceHistoryCommand).de(de_DescribeSpotPriceHistoryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeStaleSecurityGroupsCommand.js
var DescribeStaleSecurityGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeStaleSecurityGroups", {}).n("EC2Client", "DescribeStaleSecurityGroupsCommand").f(void 0, void 0).ser(se_DescribeStaleSecurityGroupsCommand).de(de_DescribeStaleSecurityGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeStoreImageTasksCommand.js
var DescribeStoreImageTasksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeStoreImageTasks", {}).n("EC2Client", "DescribeStoreImageTasksCommand").f(void 0, void 0).ser(se_DescribeStoreImageTasksCommand).de(de_DescribeStoreImageTasksCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeSubnetsCommand.js
var DescribeSubnetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeSubnets", {}).n("EC2Client", "DescribeSubnetsCommand").f(void 0, void 0).ser(se_DescribeSubnetsCommand).de(de_DescribeSubnetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTagsCommand.js
var DescribeTagsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTags", {}).n("EC2Client", "DescribeTagsCommand").f(void 0, void 0).ser(se_DescribeTagsCommand).de(de_DescribeTagsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTrafficMirrorFilterRulesCommand.js
var DescribeTrafficMirrorFilterRulesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTrafficMirrorFilterRules", {}).n("EC2Client", "DescribeTrafficMirrorFilterRulesCommand").f(void 0, void 0).ser(se_DescribeTrafficMirrorFilterRulesCommand).de(de_DescribeTrafficMirrorFilterRulesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTrafficMirrorFiltersCommand.js
var DescribeTrafficMirrorFiltersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTrafficMirrorFilters", {}).n("EC2Client", "DescribeTrafficMirrorFiltersCommand").f(void 0, void 0).ser(se_DescribeTrafficMirrorFiltersCommand).de(de_DescribeTrafficMirrorFiltersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTrafficMirrorSessionsCommand.js
var DescribeTrafficMirrorSessionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTrafficMirrorSessions", {}).n("EC2Client", "DescribeTrafficMirrorSessionsCommand").f(void 0, void 0).ser(se_DescribeTrafficMirrorSessionsCommand).de(de_DescribeTrafficMirrorSessionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTrafficMirrorTargetsCommand.js
var DescribeTrafficMirrorTargetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTrafficMirrorTargets", {}).n("EC2Client", "DescribeTrafficMirrorTargetsCommand").f(void 0, void 0).ser(se_DescribeTrafficMirrorTargetsCommand).de(de_DescribeTrafficMirrorTargetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayAttachmentsCommand.js
var DescribeTransitGatewayAttachmentsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayAttachments", {}).n("EC2Client", "DescribeTransitGatewayAttachmentsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayAttachmentsCommand).de(de_DescribeTransitGatewayAttachmentsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayConnectPeersCommand.js
var DescribeTransitGatewayConnectPeersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayConnectPeers", {}).n("EC2Client", "DescribeTransitGatewayConnectPeersCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayConnectPeersCommand).de(de_DescribeTransitGatewayConnectPeersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayConnectsCommand.js
var DescribeTransitGatewayConnectsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayConnects", {}).n("EC2Client", "DescribeTransitGatewayConnectsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayConnectsCommand).de(de_DescribeTransitGatewayConnectsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayMulticastDomainsCommand.js
var DescribeTransitGatewayMulticastDomainsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayMulticastDomains", {}).n("EC2Client", "DescribeTransitGatewayMulticastDomainsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayMulticastDomainsCommand).de(de_DescribeTransitGatewayMulticastDomainsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayPeeringAttachmentsCommand.js
var DescribeTransitGatewayPeeringAttachmentsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayPeeringAttachments", {}).n("EC2Client", "DescribeTransitGatewayPeeringAttachmentsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayPeeringAttachmentsCommand).de(de_DescribeTransitGatewayPeeringAttachmentsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayPolicyTablesCommand.js
var DescribeTransitGatewayPolicyTablesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayPolicyTables", {}).n("EC2Client", "DescribeTransitGatewayPolicyTablesCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayPolicyTablesCommand).de(de_DescribeTransitGatewayPolicyTablesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayRouteTableAnnouncementsCommand.js
var DescribeTransitGatewayRouteTableAnnouncementsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayRouteTableAnnouncements", {}).n("EC2Client", "DescribeTransitGatewayRouteTableAnnouncementsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayRouteTableAnnouncementsCommand).de(de_DescribeTransitGatewayRouteTableAnnouncementsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayRouteTablesCommand.js
var DescribeTransitGatewayRouteTablesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayRouteTables", {}).n("EC2Client", "DescribeTransitGatewayRouteTablesCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayRouteTablesCommand).de(de_DescribeTransitGatewayRouteTablesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewaysCommand.js
var DescribeTransitGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGateways", {}).n("EC2Client", "DescribeTransitGatewaysCommand").f(void 0, void 0).ser(se_DescribeTransitGatewaysCommand).de(de_DescribeTransitGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTransitGatewayVpcAttachmentsCommand.js
var DescribeTransitGatewayVpcAttachmentsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTransitGatewayVpcAttachments", {}).n("EC2Client", "DescribeTransitGatewayVpcAttachmentsCommand").f(void 0, void 0).ser(se_DescribeTransitGatewayVpcAttachmentsCommand).de(de_DescribeTransitGatewayVpcAttachmentsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeTrunkInterfaceAssociationsCommand.js
var DescribeTrunkInterfaceAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeTrunkInterfaceAssociations", {}).n("EC2Client", "DescribeTrunkInterfaceAssociationsCommand").f(void 0, void 0).ser(se_DescribeTrunkInterfaceAssociationsCommand).de(de_DescribeTrunkInterfaceAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVerifiedAccessEndpointsCommand.js
var DescribeVerifiedAccessEndpointsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVerifiedAccessEndpoints", {}).n("EC2Client", "DescribeVerifiedAccessEndpointsCommand").f(void 0, void 0).ser(se_DescribeVerifiedAccessEndpointsCommand).de(de_DescribeVerifiedAccessEndpointsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVerifiedAccessGroupsCommand.js
var DescribeVerifiedAccessGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVerifiedAccessGroups", {}).n("EC2Client", "DescribeVerifiedAccessGroupsCommand").f(void 0, void 0).ser(se_DescribeVerifiedAccessGroupsCommand).de(de_DescribeVerifiedAccessGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVerifiedAccessInstanceLoggingConfigurationsCommand.js
var DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVerifiedAccessInstanceLoggingConfigurations", {}).n("EC2Client", "DescribeVerifiedAccessInstanceLoggingConfigurationsCommand").f(void 0, void 0).ser(se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand).de(de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVerifiedAccessInstancesCommand.js
var DescribeVerifiedAccessInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVerifiedAccessInstances", {}).n("EC2Client", "DescribeVerifiedAccessInstancesCommand").f(void 0, void 0).ser(se_DescribeVerifiedAccessInstancesCommand).de(de_DescribeVerifiedAccessInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVerifiedAccessTrustProvidersCommand.js
var DescribeVerifiedAccessTrustProvidersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVerifiedAccessTrustProviders", {}).n("EC2Client", "DescribeVerifiedAccessTrustProvidersCommand").f(void 0, DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog).ser(se_DescribeVerifiedAccessTrustProvidersCommand).de(de_DescribeVerifiedAccessTrustProvidersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVolumeAttributeCommand.js
var DescribeVolumeAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVolumeAttribute", {}).n("EC2Client", "DescribeVolumeAttributeCommand").f(void 0, void 0).ser(se_DescribeVolumeAttributeCommand).de(de_DescribeVolumeAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVolumesCommand.js
var DescribeVolumesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVolumes", {}).n("EC2Client", "DescribeVolumesCommand").f(void 0, void 0).ser(se_DescribeVolumesCommand).de(de_DescribeVolumesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVolumesModificationsCommand.js
var DescribeVolumesModificationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVolumesModifications", {}).n("EC2Client", "DescribeVolumesModificationsCommand").f(void 0, void 0).ser(se_DescribeVolumesModificationsCommand).de(de_DescribeVolumesModificationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVolumeStatusCommand.js
var DescribeVolumeStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVolumeStatus", {}).n("EC2Client", "DescribeVolumeStatusCommand").f(void 0, void 0).ser(se_DescribeVolumeStatusCommand).de(de_DescribeVolumeStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcAttributeCommand.js
var DescribeVpcAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcAttribute", {}).n("EC2Client", "DescribeVpcAttributeCommand").f(void 0, void 0).ser(se_DescribeVpcAttributeCommand).de(de_DescribeVpcAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcBlockPublicAccessExclusionsCommand.js
var DescribeVpcBlockPublicAccessExclusionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcBlockPublicAccessExclusions", {}).n("EC2Client", "DescribeVpcBlockPublicAccessExclusionsCommand").f(void 0, void 0).ser(se_DescribeVpcBlockPublicAccessExclusionsCommand).de(de_DescribeVpcBlockPublicAccessExclusionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcBlockPublicAccessOptionsCommand.js
var DescribeVpcBlockPublicAccessOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcBlockPublicAccessOptions", {}).n("EC2Client", "DescribeVpcBlockPublicAccessOptionsCommand").f(void 0, void 0).ser(se_DescribeVpcBlockPublicAccessOptionsCommand).de(de_DescribeVpcBlockPublicAccessOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcClassicLinkCommand.js
var DescribeVpcClassicLinkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcClassicLink", {}).n("EC2Client", "DescribeVpcClassicLinkCommand").f(void 0, void 0).ser(se_DescribeVpcClassicLinkCommand).de(de_DescribeVpcClassicLinkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcClassicLinkDnsSupportCommand.js
var DescribeVpcClassicLinkDnsSupportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcClassicLinkDnsSupport", {}).n("EC2Client", "DescribeVpcClassicLinkDnsSupportCommand").f(void 0, void 0).ser(se_DescribeVpcClassicLinkDnsSupportCommand).de(de_DescribeVpcClassicLinkDnsSupportCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointAssociationsCommand.js
var DescribeVpcEndpointAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointAssociations", {}).n("EC2Client", "DescribeVpcEndpointAssociationsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointAssociationsCommand).de(de_DescribeVpcEndpointAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointConnectionNotificationsCommand.js
var DescribeVpcEndpointConnectionNotificationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointConnectionNotifications", {}).n("EC2Client", "DescribeVpcEndpointConnectionNotificationsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointConnectionNotificationsCommand).de(de_DescribeVpcEndpointConnectionNotificationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointConnectionsCommand.js
var DescribeVpcEndpointConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointConnections", {}).n("EC2Client", "DescribeVpcEndpointConnectionsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointConnectionsCommand).de(de_DescribeVpcEndpointConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointsCommand.js
var DescribeVpcEndpointsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpoints", {}).n("EC2Client", "DescribeVpcEndpointsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointsCommand).de(de_DescribeVpcEndpointsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointServiceConfigurationsCommand.js
var DescribeVpcEndpointServiceConfigurationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointServiceConfigurations", {}).n("EC2Client", "DescribeVpcEndpointServiceConfigurationsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointServiceConfigurationsCommand).de(de_DescribeVpcEndpointServiceConfigurationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointServicePermissionsCommand.js
var DescribeVpcEndpointServicePermissionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointServicePermissions", {}).n("EC2Client", "DescribeVpcEndpointServicePermissionsCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointServicePermissionsCommand).de(de_DescribeVpcEndpointServicePermissionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcEndpointServicesCommand.js
var DescribeVpcEndpointServicesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcEndpointServices", {}).n("EC2Client", "DescribeVpcEndpointServicesCommand").f(void 0, void 0).ser(se_DescribeVpcEndpointServicesCommand).de(de_DescribeVpcEndpointServicesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcPeeringConnectionsCommand.js
var DescribeVpcPeeringConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcPeeringConnections", {}).n("EC2Client", "DescribeVpcPeeringConnectionsCommand").f(void 0, void 0).ser(se_DescribeVpcPeeringConnectionsCommand).de(de_DescribeVpcPeeringConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpcsCommand.js
var DescribeVpcsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpcs", {}).n("EC2Client", "DescribeVpcsCommand").f(void 0, void 0).ser(se_DescribeVpcsCommand).de(de_DescribeVpcsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpnConnectionsCommand.js
var DescribeVpnConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpnConnections", {}).n("EC2Client", "DescribeVpnConnectionsCommand").f(void 0, DescribeVpnConnectionsResultFilterSensitiveLog).ser(se_DescribeVpnConnectionsCommand).de(de_DescribeVpnConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DescribeVpnGatewaysCommand.js
var DescribeVpnGatewaysCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DescribeVpnGateways", {}).n("EC2Client", "DescribeVpnGatewaysCommand").f(void 0, void 0).ser(se_DescribeVpnGatewaysCommand).de(de_DescribeVpnGatewaysCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachClassicLinkVpcCommand.js
var DetachClassicLinkVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachClassicLinkVpc", {}).n("EC2Client", "DetachClassicLinkVpcCommand").f(void 0, void 0).ser(se_DetachClassicLinkVpcCommand).de(de_DetachClassicLinkVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachInternetGatewayCommand.js
var DetachInternetGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachInternetGateway", {}).n("EC2Client", "DetachInternetGatewayCommand").f(void 0, void 0).ser(se_DetachInternetGatewayCommand).de(de_DetachInternetGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachNetworkInterfaceCommand.js
var DetachNetworkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachNetworkInterface", {}).n("EC2Client", "DetachNetworkInterfaceCommand").f(void 0, void 0).ser(se_DetachNetworkInterfaceCommand).de(de_DetachNetworkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachVerifiedAccessTrustProviderCommand.js
var DetachVerifiedAccessTrustProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachVerifiedAccessTrustProvider", {}).n("EC2Client", "DetachVerifiedAccessTrustProviderCommand").f(void 0, DetachVerifiedAccessTrustProviderResultFilterSensitiveLog).ser(se_DetachVerifiedAccessTrustProviderCommand).de(de_DetachVerifiedAccessTrustProviderCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachVolumeCommand.js
var DetachVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachVolume", {}).n("EC2Client", "DetachVolumeCommand").f(void 0, void 0).ser(se_DetachVolumeCommand).de(de_DetachVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DetachVpnGatewayCommand.js
var DetachVpnGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DetachVpnGateway", {}).n("EC2Client", "DetachVpnGatewayCommand").f(void 0, void 0).ser(se_DetachVpnGatewayCommand).de(de_DetachVpnGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableAddressTransferCommand.js
var DisableAddressTransferCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableAddressTransfer", {}).n("EC2Client", "DisableAddressTransferCommand").f(void 0, void 0).ser(se_DisableAddressTransferCommand).de(de_DisableAddressTransferCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableAllowedImagesSettingsCommand.js
var DisableAllowedImagesSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableAllowedImagesSettings", {}).n("EC2Client", "DisableAllowedImagesSettingsCommand").f(void 0, void 0).ser(se_DisableAllowedImagesSettingsCommand).de(de_DisableAllowedImagesSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableAwsNetworkPerformanceMetricSubscriptionCommand.js
var DisableAwsNetworkPerformanceMetricSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableAwsNetworkPerformanceMetricSubscription", {}).n("EC2Client", "DisableAwsNetworkPerformanceMetricSubscriptionCommand").f(void 0, void 0).ser(se_DisableAwsNetworkPerformanceMetricSubscriptionCommand).de(de_DisableAwsNetworkPerformanceMetricSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableEbsEncryptionByDefaultCommand.js
var DisableEbsEncryptionByDefaultCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableEbsEncryptionByDefault", {}).n("EC2Client", "DisableEbsEncryptionByDefaultCommand").f(void 0, void 0).ser(se_DisableEbsEncryptionByDefaultCommand).de(de_DisableEbsEncryptionByDefaultCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableFastLaunchCommand.js
var DisableFastLaunchCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableFastLaunch", {}).n("EC2Client", "DisableFastLaunchCommand").f(void 0, void 0).ser(se_DisableFastLaunchCommand).de(de_DisableFastLaunchCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableFastSnapshotRestoresCommand.js
var DisableFastSnapshotRestoresCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableFastSnapshotRestores", {}).n("EC2Client", "DisableFastSnapshotRestoresCommand").f(void 0, void 0).ser(se_DisableFastSnapshotRestoresCommand).de(de_DisableFastSnapshotRestoresCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableImageBlockPublicAccessCommand.js
var DisableImageBlockPublicAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableImageBlockPublicAccess", {}).n("EC2Client", "DisableImageBlockPublicAccessCommand").f(void 0, void 0).ser(se_DisableImageBlockPublicAccessCommand).de(de_DisableImageBlockPublicAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableImageCommand.js
var DisableImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableImage", {}).n("EC2Client", "DisableImageCommand").f(void 0, void 0).ser(se_DisableImageCommand).de(de_DisableImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableImageDeprecationCommand.js
var DisableImageDeprecationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableImageDeprecation", {}).n("EC2Client", "DisableImageDeprecationCommand").f(void 0, void 0).ser(se_DisableImageDeprecationCommand).de(de_DisableImageDeprecationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableImageDeregistrationProtectionCommand.js
var DisableImageDeregistrationProtectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableImageDeregistrationProtection", {}).n("EC2Client", "DisableImageDeregistrationProtectionCommand").f(void 0, void 0).ser(se_DisableImageDeregistrationProtectionCommand).de(de_DisableImageDeregistrationProtectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableIpamOrganizationAdminAccountCommand.js
var DisableIpamOrganizationAdminAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableIpamOrganizationAdminAccount", {}).n("EC2Client", "DisableIpamOrganizationAdminAccountCommand").f(void 0, void 0).ser(se_DisableIpamOrganizationAdminAccountCommand).de(de_DisableIpamOrganizationAdminAccountCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableSerialConsoleAccessCommand.js
var DisableSerialConsoleAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableSerialConsoleAccess", {}).n("EC2Client", "DisableSerialConsoleAccessCommand").f(void 0, void 0).ser(se_DisableSerialConsoleAccessCommand).de(de_DisableSerialConsoleAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableSnapshotBlockPublicAccessCommand.js
var DisableSnapshotBlockPublicAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableSnapshotBlockPublicAccess", {}).n("EC2Client", "DisableSnapshotBlockPublicAccessCommand").f(void 0, void 0).ser(se_DisableSnapshotBlockPublicAccessCommand).de(de_DisableSnapshotBlockPublicAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableTransitGatewayRouteTablePropagationCommand.js
var DisableTransitGatewayRouteTablePropagationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableTransitGatewayRouteTablePropagation", {}).n("EC2Client", "DisableTransitGatewayRouteTablePropagationCommand").f(void 0, void 0).ser(se_DisableTransitGatewayRouteTablePropagationCommand).de(de_DisableTransitGatewayRouteTablePropagationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableVgwRoutePropagationCommand.js
var DisableVgwRoutePropagationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableVgwRoutePropagation", {}).n("EC2Client", "DisableVgwRoutePropagationCommand").f(void 0, void 0).ser(se_DisableVgwRoutePropagationCommand).de(de_DisableVgwRoutePropagationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableVpcClassicLinkCommand.js
var DisableVpcClassicLinkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableVpcClassicLink", {}).n("EC2Client", "DisableVpcClassicLinkCommand").f(void 0, void 0).ser(se_DisableVpcClassicLinkCommand).de(de_DisableVpcClassicLinkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisableVpcClassicLinkDnsSupportCommand.js
var DisableVpcClassicLinkDnsSupportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisableVpcClassicLinkDnsSupport", {}).n("EC2Client", "DisableVpcClassicLinkDnsSupportCommand").f(void 0, void 0).ser(se_DisableVpcClassicLinkDnsSupportCommand).de(de_DisableVpcClassicLinkDnsSupportCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateAddressCommand.js
var DisassociateAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateAddress", {}).n("EC2Client", "DisassociateAddressCommand").f(void 0, void 0).ser(se_DisassociateAddressCommand).de(de_DisassociateAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateCapacityReservationBillingOwnerCommand.js
var DisassociateCapacityReservationBillingOwnerCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateCapacityReservationBillingOwner", {}).n("EC2Client", "DisassociateCapacityReservationBillingOwnerCommand").f(void 0, void 0).ser(se_DisassociateCapacityReservationBillingOwnerCommand).de(de_DisassociateCapacityReservationBillingOwnerCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateClientVpnTargetNetworkCommand.js
var DisassociateClientVpnTargetNetworkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateClientVpnTargetNetwork", {}).n("EC2Client", "DisassociateClientVpnTargetNetworkCommand").f(void 0, void 0).ser(se_DisassociateClientVpnTargetNetworkCommand).de(de_DisassociateClientVpnTargetNetworkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateEnclaveCertificateIamRoleCommand.js
var DisassociateEnclaveCertificateIamRoleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateEnclaveCertificateIamRole", {}).n("EC2Client", "DisassociateEnclaveCertificateIamRoleCommand").f(void 0, void 0).ser(se_DisassociateEnclaveCertificateIamRoleCommand).de(de_DisassociateEnclaveCertificateIamRoleCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateIamInstanceProfileCommand.js
var DisassociateIamInstanceProfileCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateIamInstanceProfile", {}).n("EC2Client", "DisassociateIamInstanceProfileCommand").f(void 0, void 0).ser(se_DisassociateIamInstanceProfileCommand).de(de_DisassociateIamInstanceProfileCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateInstanceEventWindowCommand.js
var DisassociateInstanceEventWindowCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateInstanceEventWindow", {}).n("EC2Client", "DisassociateInstanceEventWindowCommand").f(void 0, void 0).ser(se_DisassociateInstanceEventWindowCommand).de(de_DisassociateInstanceEventWindowCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateIpamByoasnCommand.js
var DisassociateIpamByoasnCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateIpamByoasn", {}).n("EC2Client", "DisassociateIpamByoasnCommand").f(void 0, void 0).ser(se_DisassociateIpamByoasnCommand).de(de_DisassociateIpamByoasnCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateIpamResourceDiscoveryCommand.js
var DisassociateIpamResourceDiscoveryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateIpamResourceDiscovery", {}).n("EC2Client", "DisassociateIpamResourceDiscoveryCommand").f(void 0, void 0).ser(se_DisassociateIpamResourceDiscoveryCommand).de(de_DisassociateIpamResourceDiscoveryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateNatGatewayAddressCommand.js
var DisassociateNatGatewayAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateNatGatewayAddress", {}).n("EC2Client", "DisassociateNatGatewayAddressCommand").f(void 0, void 0).ser(se_DisassociateNatGatewayAddressCommand).de(de_DisassociateNatGatewayAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateRouteTableCommand.js
var DisassociateRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateRouteTable", {}).n("EC2Client", "DisassociateRouteTableCommand").f(void 0, void 0).ser(se_DisassociateRouteTableCommand).de(de_DisassociateRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateSecurityGroupVpcCommand.js
var DisassociateSecurityGroupVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateSecurityGroupVpc", {}).n("EC2Client", "DisassociateSecurityGroupVpcCommand").f(void 0, void 0).ser(se_DisassociateSecurityGroupVpcCommand).de(de_DisassociateSecurityGroupVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateSubnetCidrBlockCommand.js
var DisassociateSubnetCidrBlockCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateSubnetCidrBlock", {}).n("EC2Client", "DisassociateSubnetCidrBlockCommand").f(void 0, void 0).ser(se_DisassociateSubnetCidrBlockCommand).de(de_DisassociateSubnetCidrBlockCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateTransitGatewayMulticastDomainCommand.js
var DisassociateTransitGatewayMulticastDomainCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateTransitGatewayMulticastDomain", {}).n("EC2Client", "DisassociateTransitGatewayMulticastDomainCommand").f(void 0, void 0).ser(se_DisassociateTransitGatewayMulticastDomainCommand).de(de_DisassociateTransitGatewayMulticastDomainCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateTransitGatewayPolicyTableCommand.js
var DisassociateTransitGatewayPolicyTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateTransitGatewayPolicyTable", {}).n("EC2Client", "DisassociateTransitGatewayPolicyTableCommand").f(void 0, void 0).ser(se_DisassociateTransitGatewayPolicyTableCommand).de(de_DisassociateTransitGatewayPolicyTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateTransitGatewayRouteTableCommand.js
var DisassociateTransitGatewayRouteTableCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateTransitGatewayRouteTable", {}).n("EC2Client", "DisassociateTransitGatewayRouteTableCommand").f(void 0, void 0).ser(se_DisassociateTransitGatewayRouteTableCommand).de(de_DisassociateTransitGatewayRouteTableCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateTrunkInterfaceCommand.js
var DisassociateTrunkInterfaceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateTrunkInterface", {}).n("EC2Client", "DisassociateTrunkInterfaceCommand").f(void 0, void 0).ser(se_DisassociateTrunkInterfaceCommand).de(de_DisassociateTrunkInterfaceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/DisassociateVpcCidrBlockCommand.js
var DisassociateVpcCidrBlockCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "DisassociateVpcCidrBlock", {}).n("EC2Client", "DisassociateVpcCidrBlockCommand").f(void 0, void 0).ser(se_DisassociateVpcCidrBlockCommand).de(de_DisassociateVpcCidrBlockCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableAddressTransferCommand.js
var EnableAddressTransferCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableAddressTransfer", {}).n("EC2Client", "EnableAddressTransferCommand").f(void 0, void 0).ser(se_EnableAddressTransferCommand).de(de_EnableAddressTransferCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableAllowedImagesSettingsCommand.js
var EnableAllowedImagesSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableAllowedImagesSettings", {}).n("EC2Client", "EnableAllowedImagesSettingsCommand").f(void 0, void 0).ser(se_EnableAllowedImagesSettingsCommand).de(de_EnableAllowedImagesSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableAwsNetworkPerformanceMetricSubscriptionCommand.js
var EnableAwsNetworkPerformanceMetricSubscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableAwsNetworkPerformanceMetricSubscription", {}).n("EC2Client", "EnableAwsNetworkPerformanceMetricSubscriptionCommand").f(void 0, void 0).ser(se_EnableAwsNetworkPerformanceMetricSubscriptionCommand).de(de_EnableAwsNetworkPerformanceMetricSubscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableEbsEncryptionByDefaultCommand.js
var EnableEbsEncryptionByDefaultCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableEbsEncryptionByDefault", {}).n("EC2Client", "EnableEbsEncryptionByDefaultCommand").f(void 0, void 0).ser(se_EnableEbsEncryptionByDefaultCommand).de(de_EnableEbsEncryptionByDefaultCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableFastLaunchCommand.js
var EnableFastLaunchCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableFastLaunch", {}).n("EC2Client", "EnableFastLaunchCommand").f(void 0, void 0).ser(se_EnableFastLaunchCommand).de(de_EnableFastLaunchCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableFastSnapshotRestoresCommand.js
var EnableFastSnapshotRestoresCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableFastSnapshotRestores", {}).n("EC2Client", "EnableFastSnapshotRestoresCommand").f(void 0, void 0).ser(se_EnableFastSnapshotRestoresCommand).de(de_EnableFastSnapshotRestoresCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableImageBlockPublicAccessCommand.js
var EnableImageBlockPublicAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableImageBlockPublicAccess", {}).n("EC2Client", "EnableImageBlockPublicAccessCommand").f(void 0, void 0).ser(se_EnableImageBlockPublicAccessCommand).de(de_EnableImageBlockPublicAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableImageCommand.js
var EnableImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableImage", {}).n("EC2Client", "EnableImageCommand").f(void 0, void 0).ser(se_EnableImageCommand).de(de_EnableImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableImageDeprecationCommand.js
var EnableImageDeprecationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableImageDeprecation", {}).n("EC2Client", "EnableImageDeprecationCommand").f(void 0, void 0).ser(se_EnableImageDeprecationCommand).de(de_EnableImageDeprecationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableImageDeregistrationProtectionCommand.js
var EnableImageDeregistrationProtectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableImageDeregistrationProtection", {}).n("EC2Client", "EnableImageDeregistrationProtectionCommand").f(void 0, void 0).ser(se_EnableImageDeregistrationProtectionCommand).de(de_EnableImageDeregistrationProtectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableIpamOrganizationAdminAccountCommand.js
var EnableIpamOrganizationAdminAccountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableIpamOrganizationAdminAccount", {}).n("EC2Client", "EnableIpamOrganizationAdminAccountCommand").f(void 0, void 0).ser(se_EnableIpamOrganizationAdminAccountCommand).de(de_EnableIpamOrganizationAdminAccountCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableReachabilityAnalyzerOrganizationSharingCommand.js
var EnableReachabilityAnalyzerOrganizationSharingCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableReachabilityAnalyzerOrganizationSharing", {}).n("EC2Client", "EnableReachabilityAnalyzerOrganizationSharingCommand").f(void 0, void 0).ser(se_EnableReachabilityAnalyzerOrganizationSharingCommand).de(de_EnableReachabilityAnalyzerOrganizationSharingCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableSerialConsoleAccessCommand.js
var EnableSerialConsoleAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableSerialConsoleAccess", {}).n("EC2Client", "EnableSerialConsoleAccessCommand").f(void 0, void 0).ser(se_EnableSerialConsoleAccessCommand).de(de_EnableSerialConsoleAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableSnapshotBlockPublicAccessCommand.js
var EnableSnapshotBlockPublicAccessCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableSnapshotBlockPublicAccess", {}).n("EC2Client", "EnableSnapshotBlockPublicAccessCommand").f(void 0, void 0).ser(se_EnableSnapshotBlockPublicAccessCommand).de(de_EnableSnapshotBlockPublicAccessCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableTransitGatewayRouteTablePropagationCommand.js
var EnableTransitGatewayRouteTablePropagationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableTransitGatewayRouteTablePropagation", {}).n("EC2Client", "EnableTransitGatewayRouteTablePropagationCommand").f(void 0, void 0).ser(se_EnableTransitGatewayRouteTablePropagationCommand).de(de_EnableTransitGatewayRouteTablePropagationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableVgwRoutePropagationCommand.js
var EnableVgwRoutePropagationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableVgwRoutePropagation", {}).n("EC2Client", "EnableVgwRoutePropagationCommand").f(void 0, void 0).ser(se_EnableVgwRoutePropagationCommand).de(de_EnableVgwRoutePropagationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableVolumeIOCommand.js
var EnableVolumeIOCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableVolumeIO", {}).n("EC2Client", "EnableVolumeIOCommand").f(void 0, void 0).ser(se_EnableVolumeIOCommand).de(de_EnableVolumeIOCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableVpcClassicLinkCommand.js
var EnableVpcClassicLinkCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableVpcClassicLink", {}).n("EC2Client", "EnableVpcClassicLinkCommand").f(void 0, void 0).ser(se_EnableVpcClassicLinkCommand).de(de_EnableVpcClassicLinkCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/EnableVpcClassicLinkDnsSupportCommand.js
var EnableVpcClassicLinkDnsSupportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "EnableVpcClassicLinkDnsSupport", {}).n("EC2Client", "EnableVpcClassicLinkDnsSupportCommand").f(void 0, void 0).ser(se_EnableVpcClassicLinkDnsSupportCommand).de(de_EnableVpcClassicLinkDnsSupportCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ExportClientVpnClientCertificateRevocationListCommand.js
var ExportClientVpnClientCertificateRevocationListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ExportClientVpnClientCertificateRevocationList", {}).n("EC2Client", "ExportClientVpnClientCertificateRevocationListCommand").f(void 0, void 0).ser(se_ExportClientVpnClientCertificateRevocationListCommand).de(de_ExportClientVpnClientCertificateRevocationListCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ExportClientVpnClientConfigurationCommand.js
var ExportClientVpnClientConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ExportClientVpnClientConfiguration", {}).n("EC2Client", "ExportClientVpnClientConfigurationCommand").f(void 0, void 0).ser(se_ExportClientVpnClientConfigurationCommand).de(de_ExportClientVpnClientConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ExportImageCommand.js
var ExportImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ExportImage", {}).n("EC2Client", "ExportImageCommand").f(void 0, void 0).ser(se_ExportImageCommand).de(de_ExportImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ExportTransitGatewayRoutesCommand.js
var ExportTransitGatewayRoutesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ExportTransitGatewayRoutes", {}).n("EC2Client", "ExportTransitGatewayRoutesCommand").f(void 0, void 0).ser(se_ExportTransitGatewayRoutesCommand).de(de_ExportTransitGatewayRoutesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_6.js
var ImageBlockPublicAccessEnabledState = {
  block_new_sharing: "block-new-sharing"
};
var ClientCertificateRevocationListStatusCode = {
  active: "active",
  pending: "pending"
};
var UnlimitedSupportedInstanceFamily = {
  t2: "t2",
  t3: "t3",
  t3a: "t3a",
  t4g: "t4g"
};
var PartitionLoadFrequency = {
  DAILY: "daily",
  MONTHLY: "monthly",
  NONE: "none",
  WEEKLY: "weekly"
};
var EkPubKeyFormat = {
  der: "der",
  tpmt: "tpmt"
};
var EkPubKeyType = {
  ECC_SEC_P384: "ecc-sec-p384",
  RSA_2048: "rsa-2048"
};
var IpamComplianceStatus = {
  compliant: "compliant",
  ignored: "ignored",
  noncompliant: "noncompliant",
  unmanaged: "unmanaged"
};
var IpamOverlapStatus = {
  ignored: "ignored",
  nonoverlapping: "nonoverlapping",
  overlapping: "overlapping"
};
var IpamAddressHistoryResourceType = {
  eip: "eip",
  instance: "instance",
  network_interface: "network-interface",
  subnet: "subnet",
  vpc: "vpc"
};
var IpamDiscoveryFailureCode = {
  assume_role_failure: "assume-role-failure",
  throttling_failure: "throttling-failure",
  unauthorized_failure: "unauthorized-failure"
};
var IpamPublicAddressType = {
  AMAZON_OWNED_CONTIG: "amazon-owned-contig",
  AMAZON_OWNED_EIP: "amazon-owned-eip",
  BYOIP: "byoip",
  EC2_PUBLIC_IP: "ec2-public-ip",
  SERVICE_MANAGED_BYOIP: "service-managed-byoip",
  SERVICE_MANAGED_IP: "service-managed-ip"
};
var IpamPublicAddressAssociationStatus = {
  ASSOCIATED: "associated",
  DISASSOCIATED: "disassociated"
};
var IpamPublicAddressAwsService = {
  AGA: "global-accelerator",
  DMS: "database-migration-service",
  EC2_LB: "load-balancer",
  ECS: "elastic-container-service",
  NAT_GATEWAY: "nat-gateway",
  OTHER: "other",
  RDS: "relational-database-service",
  REDSHIFT: "redshift",
  S2S_VPN: "site-to-site-vpn"
};
var IpamResourceCidrIpSource = {
  amazon: "amazon",
  byoip: "byoip",
  none: "none"
};
var IpamNetworkInterfaceAttachmentStatus = {
  available: "available",
  in_use: "in-use"
};
var IpamResourceType = {
  eip: "eip",
  eni: "eni",
  ipv6_pool: "ipv6-pool",
  public_ipv4_pool: "public-ipv4-pool",
  subnet: "subnet",
  vpc: "vpc"
};
var IpamManagementState = {
  ignored: "ignored",
  managed: "managed",
  unmanaged: "unmanaged"
};
var LockMode = {
  compliance: "compliance",
  governance: "governance"
};
var ModifyAvailabilityZoneOptInStatus = {
  not_opted_in: "not-opted-in",
  opted_in: "opted-in"
};
var OperationType = {
  add: "add",
  remove: "remove"
};
var UnsuccessfulInstanceCreditSpecificationErrorCode = {
  INCORRECT_INSTANCE_STATE: "IncorrectInstanceState",
  INSTANCE_CREDIT_SPECIFICATION_NOT_SUPPORTED: "InstanceCreditSpecification.NotSupported",
  INSTANCE_NOT_FOUND: "InvalidInstanceID.NotFound",
  INVALID_INSTANCE_ID: "InvalidInstanceID.Malformed"
};
var VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserTrustProvider && {
    UserTrustProvider: VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog(obj.UserTrustProvider)
  }
});
var GetInstanceTpmEkPubResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.KeyValue && { KeyValue: SENSITIVE_STRING }
});
var GetLaunchTemplateDataResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchTemplateData && {
    LaunchTemplateData: ResponseLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData)
  }
});
var GetPasswordDataResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PasswordData && { PasswordData: SENSITIVE_STRING }
});
var GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnectionDeviceSampleConfiguration && { VpnConnectionDeviceSampleConfiguration: SENSITIVE_STRING }
});
var ImageDiskContainerFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Url && { Url: SENSITIVE_STRING }
});
var ImportImageRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DiskContainers && {
    DiskContainers: obj.DiskContainers.map((item) => ImageDiskContainerFilterSensitiveLog(item))
  }
});
var ImportImageResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SnapshotDetails && {
    SnapshotDetails: obj.SnapshotDetails.map((item) => SnapshotDetailFilterSensitiveLog(item))
  }
});
var DiskImageDetailFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ImportManifestUrl && { ImportManifestUrl: SENSITIVE_STRING }
});
var DiskImageFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Image && { Image: DiskImageDetailFilterSensitiveLog(obj.Image) }
});
var UserDataFilterSensitiveLog = (obj) => ({
  ...obj
});
var ImportInstanceLaunchSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var ImportInstanceRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchSpecification && {
    LaunchSpecification: ImportInstanceLaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification)
  },
  ...obj.DiskImages && { DiskImages: obj.DiskImages.map((item) => DiskImageFilterSensitiveLog(item)) }
});
var ImportInstanceResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ConversionTask && { ConversionTask: ConversionTaskFilterSensitiveLog(obj.ConversionTask) }
});
var SnapshotDiskContainerFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Url && { Url: SENSITIVE_STRING }
});
var ImportSnapshotRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.DiskContainer && { DiskContainer: SnapshotDiskContainerFilterSensitiveLog(obj.DiskContainer) }
});
var ImportSnapshotResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SnapshotTaskDetail && { SnapshotTaskDetail: SnapshotTaskDetailFilterSensitiveLog(obj.SnapshotTaskDetail) }
});
var ImportVolumeRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Image && { Image: DiskImageDetailFilterSensitiveLog(obj.Image) }
});
var ImportVolumeResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ConversionTask && { ConversionTask: ConversionTaskFilterSensitiveLog(obj.ConversionTask) }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ExportVerifiedAccessInstanceClientConfigurationCommand.js
var ExportVerifiedAccessInstanceClientConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ExportVerifiedAccessInstanceClientConfiguration", {}).n("EC2Client", "ExportVerifiedAccessInstanceClientConfigurationCommand").f(void 0, ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog).ser(se_ExportVerifiedAccessInstanceClientConfigurationCommand).de(de_ExportVerifiedAccessInstanceClientConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetAllowedImagesSettingsCommand.js
var GetAllowedImagesSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetAllowedImagesSettings", {}).n("EC2Client", "GetAllowedImagesSettingsCommand").f(void 0, void 0).ser(se_GetAllowedImagesSettingsCommand).de(de_GetAllowedImagesSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetAssociatedEnclaveCertificateIamRolesCommand.js
var GetAssociatedEnclaveCertificateIamRolesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetAssociatedEnclaveCertificateIamRoles", {}).n("EC2Client", "GetAssociatedEnclaveCertificateIamRolesCommand").f(void 0, void 0).ser(se_GetAssociatedEnclaveCertificateIamRolesCommand).de(de_GetAssociatedEnclaveCertificateIamRolesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetAssociatedIpv6PoolCidrsCommand.js
var GetAssociatedIpv6PoolCidrsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetAssociatedIpv6PoolCidrs", {}).n("EC2Client", "GetAssociatedIpv6PoolCidrsCommand").f(void 0, void 0).ser(se_GetAssociatedIpv6PoolCidrsCommand).de(de_GetAssociatedIpv6PoolCidrsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetAwsNetworkPerformanceDataCommand.js
var GetAwsNetworkPerformanceDataCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetAwsNetworkPerformanceData", {}).n("EC2Client", "GetAwsNetworkPerformanceDataCommand").f(void 0, void 0).ser(se_GetAwsNetworkPerformanceDataCommand).de(de_GetAwsNetworkPerformanceDataCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetCapacityReservationUsageCommand.js
var GetCapacityReservationUsageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetCapacityReservationUsage", {}).n("EC2Client", "GetCapacityReservationUsageCommand").f(void 0, void 0).ser(se_GetCapacityReservationUsageCommand).de(de_GetCapacityReservationUsageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetCoipPoolUsageCommand.js
var GetCoipPoolUsageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetCoipPoolUsage", {}).n("EC2Client", "GetCoipPoolUsageCommand").f(void 0, void 0).ser(se_GetCoipPoolUsageCommand).de(de_GetCoipPoolUsageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetConsoleOutputCommand.js
var GetConsoleOutputCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetConsoleOutput", {}).n("EC2Client", "GetConsoleOutputCommand").f(void 0, void 0).ser(se_GetConsoleOutputCommand).de(de_GetConsoleOutputCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetConsoleScreenshotCommand.js
var GetConsoleScreenshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetConsoleScreenshot", {}).n("EC2Client", "GetConsoleScreenshotCommand").f(void 0, void 0).ser(se_GetConsoleScreenshotCommand).de(de_GetConsoleScreenshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetDeclarativePoliciesReportSummaryCommand.js
var GetDeclarativePoliciesReportSummaryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetDeclarativePoliciesReportSummary", {}).n("EC2Client", "GetDeclarativePoliciesReportSummaryCommand").f(void 0, void 0).ser(se_GetDeclarativePoliciesReportSummaryCommand).de(de_GetDeclarativePoliciesReportSummaryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetDefaultCreditSpecificationCommand.js
var GetDefaultCreditSpecificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetDefaultCreditSpecification", {}).n("EC2Client", "GetDefaultCreditSpecificationCommand").f(void 0, void 0).ser(se_GetDefaultCreditSpecificationCommand).de(de_GetDefaultCreditSpecificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetEbsDefaultKmsKeyIdCommand.js
var GetEbsDefaultKmsKeyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetEbsDefaultKmsKeyId", {}).n("EC2Client", "GetEbsDefaultKmsKeyIdCommand").f(void 0, void 0).ser(se_GetEbsDefaultKmsKeyIdCommand).de(de_GetEbsDefaultKmsKeyIdCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetEbsEncryptionByDefaultCommand.js
var GetEbsEncryptionByDefaultCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetEbsEncryptionByDefault", {}).n("EC2Client", "GetEbsEncryptionByDefaultCommand").f(void 0, void 0).ser(se_GetEbsEncryptionByDefaultCommand).de(de_GetEbsEncryptionByDefaultCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetFlowLogsIntegrationTemplateCommand.js
var GetFlowLogsIntegrationTemplateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetFlowLogsIntegrationTemplate", {}).n("EC2Client", "GetFlowLogsIntegrationTemplateCommand").f(void 0, void 0).ser(se_GetFlowLogsIntegrationTemplateCommand).de(de_GetFlowLogsIntegrationTemplateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetGroupsForCapacityReservationCommand.js
var GetGroupsForCapacityReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetGroupsForCapacityReservation", {}).n("EC2Client", "GetGroupsForCapacityReservationCommand").f(void 0, void 0).ser(se_GetGroupsForCapacityReservationCommand).de(de_GetGroupsForCapacityReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetHostReservationPurchasePreviewCommand.js
var GetHostReservationPurchasePreviewCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetHostReservationPurchasePreview", {}).n("EC2Client", "GetHostReservationPurchasePreviewCommand").f(void 0, void 0).ser(se_GetHostReservationPurchasePreviewCommand).de(de_GetHostReservationPurchasePreviewCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetImageBlockPublicAccessStateCommand.js
var GetImageBlockPublicAccessStateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetImageBlockPublicAccessState", {}).n("EC2Client", "GetImageBlockPublicAccessStateCommand").f(void 0, void 0).ser(se_GetImageBlockPublicAccessStateCommand).de(de_GetImageBlockPublicAccessStateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetInstanceMetadataDefaultsCommand.js
var GetInstanceMetadataDefaultsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetInstanceMetadataDefaults", {}).n("EC2Client", "GetInstanceMetadataDefaultsCommand").f(void 0, void 0).ser(se_GetInstanceMetadataDefaultsCommand).de(de_GetInstanceMetadataDefaultsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetInstanceTpmEkPubCommand.js
var GetInstanceTpmEkPubCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetInstanceTpmEkPub", {}).n("EC2Client", "GetInstanceTpmEkPubCommand").f(void 0, GetInstanceTpmEkPubResultFilterSensitiveLog).ser(se_GetInstanceTpmEkPubCommand).de(de_GetInstanceTpmEkPubCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetInstanceTypesFromInstanceRequirementsCommand.js
var GetInstanceTypesFromInstanceRequirementsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetInstanceTypesFromInstanceRequirements", {}).n("EC2Client", "GetInstanceTypesFromInstanceRequirementsCommand").f(void 0, void 0).ser(se_GetInstanceTypesFromInstanceRequirementsCommand).de(de_GetInstanceTypesFromInstanceRequirementsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetInstanceUefiDataCommand.js
var GetInstanceUefiDataCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetInstanceUefiData", {}).n("EC2Client", "GetInstanceUefiDataCommand").f(void 0, void 0).ser(se_GetInstanceUefiDataCommand).de(de_GetInstanceUefiDataCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamAddressHistoryCommand.js
var GetIpamAddressHistoryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamAddressHistory", {}).n("EC2Client", "GetIpamAddressHistoryCommand").f(void 0, void 0).ser(se_GetIpamAddressHistoryCommand).de(de_GetIpamAddressHistoryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamDiscoveredAccountsCommand.js
var GetIpamDiscoveredAccountsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamDiscoveredAccounts", {}).n("EC2Client", "GetIpamDiscoveredAccountsCommand").f(void 0, void 0).ser(se_GetIpamDiscoveredAccountsCommand).de(de_GetIpamDiscoveredAccountsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamDiscoveredPublicAddressesCommand.js
var GetIpamDiscoveredPublicAddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamDiscoveredPublicAddresses", {}).n("EC2Client", "GetIpamDiscoveredPublicAddressesCommand").f(void 0, void 0).ser(se_GetIpamDiscoveredPublicAddressesCommand).de(de_GetIpamDiscoveredPublicAddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamDiscoveredResourceCidrsCommand.js
var GetIpamDiscoveredResourceCidrsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamDiscoveredResourceCidrs", {}).n("EC2Client", "GetIpamDiscoveredResourceCidrsCommand").f(void 0, void 0).ser(se_GetIpamDiscoveredResourceCidrsCommand).de(de_GetIpamDiscoveredResourceCidrsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamPoolAllocationsCommand.js
var GetIpamPoolAllocationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamPoolAllocations", {}).n("EC2Client", "GetIpamPoolAllocationsCommand").f(void 0, void 0).ser(se_GetIpamPoolAllocationsCommand).de(de_GetIpamPoolAllocationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamPoolCidrsCommand.js
var GetIpamPoolCidrsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamPoolCidrs", {}).n("EC2Client", "GetIpamPoolCidrsCommand").f(void 0, void 0).ser(se_GetIpamPoolCidrsCommand).de(de_GetIpamPoolCidrsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetIpamResourceCidrsCommand.js
var GetIpamResourceCidrsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetIpamResourceCidrs", {}).n("EC2Client", "GetIpamResourceCidrsCommand").f(void 0, void 0).ser(se_GetIpamResourceCidrsCommand).de(de_GetIpamResourceCidrsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetLaunchTemplateDataCommand.js
var GetLaunchTemplateDataCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetLaunchTemplateData", {}).n("EC2Client", "GetLaunchTemplateDataCommand").f(void 0, GetLaunchTemplateDataResultFilterSensitiveLog).ser(se_GetLaunchTemplateDataCommand).de(de_GetLaunchTemplateDataCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetManagedPrefixListAssociationsCommand.js
var GetManagedPrefixListAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetManagedPrefixListAssociations", {}).n("EC2Client", "GetManagedPrefixListAssociationsCommand").f(void 0, void 0).ser(se_GetManagedPrefixListAssociationsCommand).de(de_GetManagedPrefixListAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetManagedPrefixListEntriesCommand.js
var GetManagedPrefixListEntriesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetManagedPrefixListEntries", {}).n("EC2Client", "GetManagedPrefixListEntriesCommand").f(void 0, void 0).ser(se_GetManagedPrefixListEntriesCommand).de(de_GetManagedPrefixListEntriesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetNetworkInsightsAccessScopeAnalysisFindingsCommand.js
var GetNetworkInsightsAccessScopeAnalysisFindingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetNetworkInsightsAccessScopeAnalysisFindings", {}).n("EC2Client", "GetNetworkInsightsAccessScopeAnalysisFindingsCommand").f(void 0, void 0).ser(se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand).de(de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetNetworkInsightsAccessScopeContentCommand.js
var GetNetworkInsightsAccessScopeContentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetNetworkInsightsAccessScopeContent", {}).n("EC2Client", "GetNetworkInsightsAccessScopeContentCommand").f(void 0, void 0).ser(se_GetNetworkInsightsAccessScopeContentCommand).de(de_GetNetworkInsightsAccessScopeContentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetPasswordDataCommand.js
var GetPasswordDataCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetPasswordData", {}).n("EC2Client", "GetPasswordDataCommand").f(void 0, GetPasswordDataResultFilterSensitiveLog).ser(se_GetPasswordDataCommand).de(de_GetPasswordDataCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetReservedInstancesExchangeQuoteCommand.js
var GetReservedInstancesExchangeQuoteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetReservedInstancesExchangeQuote", {}).n("EC2Client", "GetReservedInstancesExchangeQuoteCommand").f(void 0, void 0).ser(se_GetReservedInstancesExchangeQuoteCommand).de(de_GetReservedInstancesExchangeQuoteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetSecurityGroupsForVpcCommand.js
var GetSecurityGroupsForVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetSecurityGroupsForVpc", {}).n("EC2Client", "GetSecurityGroupsForVpcCommand").f(void 0, void 0).ser(se_GetSecurityGroupsForVpcCommand).de(de_GetSecurityGroupsForVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetSerialConsoleAccessStatusCommand.js
var GetSerialConsoleAccessStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetSerialConsoleAccessStatus", {}).n("EC2Client", "GetSerialConsoleAccessStatusCommand").f(void 0, void 0).ser(se_GetSerialConsoleAccessStatusCommand).de(de_GetSerialConsoleAccessStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetSnapshotBlockPublicAccessStateCommand.js
var GetSnapshotBlockPublicAccessStateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetSnapshotBlockPublicAccessState", {}).n("EC2Client", "GetSnapshotBlockPublicAccessStateCommand").f(void 0, void 0).ser(se_GetSnapshotBlockPublicAccessStateCommand).de(de_GetSnapshotBlockPublicAccessStateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetSpotPlacementScoresCommand.js
var GetSpotPlacementScoresCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetSpotPlacementScores", {}).n("EC2Client", "GetSpotPlacementScoresCommand").f(void 0, void 0).ser(se_GetSpotPlacementScoresCommand).de(de_GetSpotPlacementScoresCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetSubnetCidrReservationsCommand.js
var GetSubnetCidrReservationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetSubnetCidrReservations", {}).n("EC2Client", "GetSubnetCidrReservationsCommand").f(void 0, void 0).ser(se_GetSubnetCidrReservationsCommand).de(de_GetSubnetCidrReservationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayAttachmentPropagationsCommand.js
var GetTransitGatewayAttachmentPropagationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayAttachmentPropagations", {}).n("EC2Client", "GetTransitGatewayAttachmentPropagationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayAttachmentPropagationsCommand).de(de_GetTransitGatewayAttachmentPropagationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayMulticastDomainAssociationsCommand.js
var GetTransitGatewayMulticastDomainAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayMulticastDomainAssociations", {}).n("EC2Client", "GetTransitGatewayMulticastDomainAssociationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayMulticastDomainAssociationsCommand).de(de_GetTransitGatewayMulticastDomainAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayPolicyTableAssociationsCommand.js
var GetTransitGatewayPolicyTableAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayPolicyTableAssociations", {}).n("EC2Client", "GetTransitGatewayPolicyTableAssociationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayPolicyTableAssociationsCommand).de(de_GetTransitGatewayPolicyTableAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayPolicyTableEntriesCommand.js
var GetTransitGatewayPolicyTableEntriesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayPolicyTableEntries", {}).n("EC2Client", "GetTransitGatewayPolicyTableEntriesCommand").f(void 0, void 0).ser(se_GetTransitGatewayPolicyTableEntriesCommand).de(de_GetTransitGatewayPolicyTableEntriesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayPrefixListReferencesCommand.js
var GetTransitGatewayPrefixListReferencesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayPrefixListReferences", {}).n("EC2Client", "GetTransitGatewayPrefixListReferencesCommand").f(void 0, void 0).ser(se_GetTransitGatewayPrefixListReferencesCommand).de(de_GetTransitGatewayPrefixListReferencesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayRouteTableAssociationsCommand.js
var GetTransitGatewayRouteTableAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayRouteTableAssociations", {}).n("EC2Client", "GetTransitGatewayRouteTableAssociationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayRouteTableAssociationsCommand).de(de_GetTransitGatewayRouteTableAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetTransitGatewayRouteTablePropagationsCommand.js
var GetTransitGatewayRouteTablePropagationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetTransitGatewayRouteTablePropagations", {}).n("EC2Client", "GetTransitGatewayRouteTablePropagationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayRouteTablePropagationsCommand).de(de_GetTransitGatewayRouteTablePropagationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVerifiedAccessEndpointPolicyCommand.js
var GetVerifiedAccessEndpointPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVerifiedAccessEndpointPolicy", {}).n("EC2Client", "GetVerifiedAccessEndpointPolicyCommand").f(void 0, void 0).ser(se_GetVerifiedAccessEndpointPolicyCommand).de(de_GetVerifiedAccessEndpointPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVerifiedAccessEndpointTargetsCommand.js
var GetVerifiedAccessEndpointTargetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVerifiedAccessEndpointTargets", {}).n("EC2Client", "GetVerifiedAccessEndpointTargetsCommand").f(void 0, void 0).ser(se_GetVerifiedAccessEndpointTargetsCommand).de(de_GetVerifiedAccessEndpointTargetsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVerifiedAccessGroupPolicyCommand.js
var GetVerifiedAccessGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVerifiedAccessGroupPolicy", {}).n("EC2Client", "GetVerifiedAccessGroupPolicyCommand").f(void 0, void 0).ser(se_GetVerifiedAccessGroupPolicyCommand).de(de_GetVerifiedAccessGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVpnConnectionDeviceSampleConfigurationCommand.js
var GetVpnConnectionDeviceSampleConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVpnConnectionDeviceSampleConfiguration", {}).n("EC2Client", "GetVpnConnectionDeviceSampleConfigurationCommand").f(void 0, GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog).ser(se_GetVpnConnectionDeviceSampleConfigurationCommand).de(de_GetVpnConnectionDeviceSampleConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVpnConnectionDeviceTypesCommand.js
var GetVpnConnectionDeviceTypesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVpnConnectionDeviceTypes", {}).n("EC2Client", "GetVpnConnectionDeviceTypesCommand").f(void 0, void 0).ser(se_GetVpnConnectionDeviceTypesCommand).de(de_GetVpnConnectionDeviceTypesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/GetVpnTunnelReplacementStatusCommand.js
var GetVpnTunnelReplacementStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "GetVpnTunnelReplacementStatus", {}).n("EC2Client", "GetVpnTunnelReplacementStatusCommand").f(void 0, void 0).ser(se_GetVpnTunnelReplacementStatusCommand).de(de_GetVpnTunnelReplacementStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportClientVpnClientCertificateRevocationListCommand.js
var ImportClientVpnClientCertificateRevocationListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportClientVpnClientCertificateRevocationList", {}).n("EC2Client", "ImportClientVpnClientCertificateRevocationListCommand").f(void 0, void 0).ser(se_ImportClientVpnClientCertificateRevocationListCommand).de(de_ImportClientVpnClientCertificateRevocationListCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportImageCommand.js
var ImportImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportImage", {}).n("EC2Client", "ImportImageCommand").f(ImportImageRequestFilterSensitiveLog, ImportImageResultFilterSensitiveLog).ser(se_ImportImageCommand).de(de_ImportImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportInstanceCommand.js
var ImportInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportInstance", {}).n("EC2Client", "ImportInstanceCommand").f(ImportInstanceRequestFilterSensitiveLog, ImportInstanceResultFilterSensitiveLog).ser(se_ImportInstanceCommand).de(de_ImportInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportKeyPairCommand.js
var ImportKeyPairCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportKeyPair", {}).n("EC2Client", "ImportKeyPairCommand").f(void 0, void 0).ser(se_ImportKeyPairCommand).de(de_ImportKeyPairCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportSnapshotCommand.js
var ImportSnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportSnapshot", {}).n("EC2Client", "ImportSnapshotCommand").f(ImportSnapshotRequestFilterSensitiveLog, ImportSnapshotResultFilterSensitiveLog).ser(se_ImportSnapshotCommand).de(de_ImportSnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ImportVolumeCommand.js
var ImportVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ImportVolume", {}).n("EC2Client", "ImportVolumeCommand").f(ImportVolumeRequestFilterSensitiveLog, ImportVolumeResultFilterSensitiveLog).ser(se_ImportVolumeCommand).de(de_ImportVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ListImagesInRecycleBinCommand.js
var ListImagesInRecycleBinCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ListImagesInRecycleBin", {}).n("EC2Client", "ListImagesInRecycleBinCommand").f(void 0, void 0).ser(se_ListImagesInRecycleBinCommand).de(de_ListImagesInRecycleBinCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ListSnapshotsInRecycleBinCommand.js
var ListSnapshotsInRecycleBinCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ListSnapshotsInRecycleBin", {}).n("EC2Client", "ListSnapshotsInRecycleBinCommand").f(void 0, void 0).ser(se_ListSnapshotsInRecycleBinCommand).de(de_ListSnapshotsInRecycleBinCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/LockSnapshotCommand.js
var LockSnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "LockSnapshot", {}).n("EC2Client", "LockSnapshotCommand").f(void 0, void 0).ser(se_LockSnapshotCommand).de(de_LockSnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyAddressAttributeCommand.js
var ModifyAddressAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyAddressAttribute", {}).n("EC2Client", "ModifyAddressAttributeCommand").f(void 0, void 0).ser(se_ModifyAddressAttributeCommand).de(de_ModifyAddressAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyAvailabilityZoneGroupCommand.js
var ModifyAvailabilityZoneGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyAvailabilityZoneGroup", {}).n("EC2Client", "ModifyAvailabilityZoneGroupCommand").f(void 0, void 0).ser(se_ModifyAvailabilityZoneGroupCommand).de(de_ModifyAvailabilityZoneGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyCapacityReservationCommand.js
var ModifyCapacityReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyCapacityReservation", {}).n("EC2Client", "ModifyCapacityReservationCommand").f(void 0, void 0).ser(se_ModifyCapacityReservationCommand).de(de_ModifyCapacityReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyCapacityReservationFleetCommand.js
var ModifyCapacityReservationFleetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyCapacityReservationFleet", {}).n("EC2Client", "ModifyCapacityReservationFleetCommand").f(void 0, void 0).ser(se_ModifyCapacityReservationFleetCommand).de(de_ModifyCapacityReservationFleetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyClientVpnEndpointCommand.js
var ModifyClientVpnEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyClientVpnEndpoint", {}).n("EC2Client", "ModifyClientVpnEndpointCommand").f(void 0, void 0).ser(se_ModifyClientVpnEndpointCommand).de(de_ModifyClientVpnEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyDefaultCreditSpecificationCommand.js
var ModifyDefaultCreditSpecificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyDefaultCreditSpecification", {}).n("EC2Client", "ModifyDefaultCreditSpecificationCommand").f(void 0, void 0).ser(se_ModifyDefaultCreditSpecificationCommand).de(de_ModifyDefaultCreditSpecificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyEbsDefaultKmsKeyIdCommand.js
var ModifyEbsDefaultKmsKeyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyEbsDefaultKmsKeyId", {}).n("EC2Client", "ModifyEbsDefaultKmsKeyIdCommand").f(void 0, void 0).ser(se_ModifyEbsDefaultKmsKeyIdCommand).de(de_ModifyEbsDefaultKmsKeyIdCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyFleetCommand.js
var ModifyFleetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyFleet", {}).n("EC2Client", "ModifyFleetCommand").f(void 0, void 0).ser(se_ModifyFleetCommand).de(de_ModifyFleetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyFpgaImageAttributeCommand.js
var ModifyFpgaImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyFpgaImageAttribute", {}).n("EC2Client", "ModifyFpgaImageAttributeCommand").f(void 0, void 0).ser(se_ModifyFpgaImageAttributeCommand).de(de_ModifyFpgaImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyHostsCommand.js
var ModifyHostsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyHosts", {}).n("EC2Client", "ModifyHostsCommand").f(void 0, void 0).ser(se_ModifyHostsCommand).de(de_ModifyHostsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIdentityIdFormatCommand.js
var ModifyIdentityIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIdentityIdFormat", {}).n("EC2Client", "ModifyIdentityIdFormatCommand").f(void 0, void 0).ser(se_ModifyIdentityIdFormatCommand).de(de_ModifyIdentityIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIdFormatCommand.js
var ModifyIdFormatCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIdFormat", {}).n("EC2Client", "ModifyIdFormatCommand").f(void 0, void 0).ser(se_ModifyIdFormatCommand).de(de_ModifyIdFormatCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyImageAttributeCommand.js
var ModifyImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyImageAttribute", {}).n("EC2Client", "ModifyImageAttributeCommand").f(void 0, void 0).ser(se_ModifyImageAttributeCommand).de(de_ModifyImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceAttributeCommand.js
var ModifyInstanceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceAttribute", {}).n("EC2Client", "ModifyInstanceAttributeCommand").f(void 0, void 0).ser(se_ModifyInstanceAttributeCommand).de(de_ModifyInstanceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceCapacityReservationAttributesCommand.js
var ModifyInstanceCapacityReservationAttributesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceCapacityReservationAttributes", {}).n("EC2Client", "ModifyInstanceCapacityReservationAttributesCommand").f(void 0, void 0).ser(se_ModifyInstanceCapacityReservationAttributesCommand).de(de_ModifyInstanceCapacityReservationAttributesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceCpuOptionsCommand.js
var ModifyInstanceCpuOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceCpuOptions", {}).n("EC2Client", "ModifyInstanceCpuOptionsCommand").f(void 0, void 0).ser(se_ModifyInstanceCpuOptionsCommand).de(de_ModifyInstanceCpuOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceCreditSpecificationCommand.js
var ModifyInstanceCreditSpecificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceCreditSpecification", {}).n("EC2Client", "ModifyInstanceCreditSpecificationCommand").f(void 0, void 0).ser(se_ModifyInstanceCreditSpecificationCommand).de(de_ModifyInstanceCreditSpecificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceEventStartTimeCommand.js
var ModifyInstanceEventStartTimeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceEventStartTime", {}).n("EC2Client", "ModifyInstanceEventStartTimeCommand").f(void 0, void 0).ser(se_ModifyInstanceEventStartTimeCommand).de(de_ModifyInstanceEventStartTimeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceEventWindowCommand.js
var ModifyInstanceEventWindowCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceEventWindow", {}).n("EC2Client", "ModifyInstanceEventWindowCommand").f(void 0, void 0).ser(se_ModifyInstanceEventWindowCommand).de(de_ModifyInstanceEventWindowCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceMaintenanceOptionsCommand.js
var ModifyInstanceMaintenanceOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceMaintenanceOptions", {}).n("EC2Client", "ModifyInstanceMaintenanceOptionsCommand").f(void 0, void 0).ser(se_ModifyInstanceMaintenanceOptionsCommand).de(de_ModifyInstanceMaintenanceOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceMetadataDefaultsCommand.js
var ModifyInstanceMetadataDefaultsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceMetadataDefaults", {}).n("EC2Client", "ModifyInstanceMetadataDefaultsCommand").f(void 0, void 0).ser(se_ModifyInstanceMetadataDefaultsCommand).de(de_ModifyInstanceMetadataDefaultsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceMetadataOptionsCommand.js
var ModifyInstanceMetadataOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceMetadataOptions", {}).n("EC2Client", "ModifyInstanceMetadataOptionsCommand").f(void 0, void 0).ser(se_ModifyInstanceMetadataOptionsCommand).de(de_ModifyInstanceMetadataOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstanceNetworkPerformanceOptionsCommand.js
var ModifyInstanceNetworkPerformanceOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstanceNetworkPerformanceOptions", {}).n("EC2Client", "ModifyInstanceNetworkPerformanceOptionsCommand").f(void 0, void 0).ser(se_ModifyInstanceNetworkPerformanceOptionsCommand).de(de_ModifyInstanceNetworkPerformanceOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyInstancePlacementCommand.js
var ModifyInstancePlacementCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyInstancePlacement", {}).n("EC2Client", "ModifyInstancePlacementCommand").f(void 0, void 0).ser(se_ModifyInstancePlacementCommand).de(de_ModifyInstancePlacementCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIpamCommand.js
var ModifyIpamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIpam", {}).n("EC2Client", "ModifyIpamCommand").f(void 0, void 0).ser(se_ModifyIpamCommand).de(de_ModifyIpamCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIpamPoolCommand.js
var ModifyIpamPoolCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIpamPool", {}).n("EC2Client", "ModifyIpamPoolCommand").f(void 0, void 0).ser(se_ModifyIpamPoolCommand).de(de_ModifyIpamPoolCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIpamResourceCidrCommand.js
var ModifyIpamResourceCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIpamResourceCidr", {}).n("EC2Client", "ModifyIpamResourceCidrCommand").f(void 0, void 0).ser(se_ModifyIpamResourceCidrCommand).de(de_ModifyIpamResourceCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIpamResourceDiscoveryCommand.js
var ModifyIpamResourceDiscoveryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIpamResourceDiscovery", {}).n("EC2Client", "ModifyIpamResourceDiscoveryCommand").f(void 0, void 0).ser(se_ModifyIpamResourceDiscoveryCommand).de(de_ModifyIpamResourceDiscoveryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyIpamScopeCommand.js
var ModifyIpamScopeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyIpamScope", {}).n("EC2Client", "ModifyIpamScopeCommand").f(void 0, void 0).ser(se_ModifyIpamScopeCommand).de(de_ModifyIpamScopeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyLaunchTemplateCommand.js
var ModifyLaunchTemplateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyLaunchTemplate", {}).n("EC2Client", "ModifyLaunchTemplateCommand").f(void 0, void 0).ser(se_ModifyLaunchTemplateCommand).de(de_ModifyLaunchTemplateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyLocalGatewayRouteCommand.js
var ModifyLocalGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyLocalGatewayRoute", {}).n("EC2Client", "ModifyLocalGatewayRouteCommand").f(void 0, void 0).ser(se_ModifyLocalGatewayRouteCommand).de(de_ModifyLocalGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyManagedPrefixListCommand.js
var ModifyManagedPrefixListCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyManagedPrefixList", {}).n("EC2Client", "ModifyManagedPrefixListCommand").f(void 0, void 0).ser(se_ModifyManagedPrefixListCommand).de(de_ModifyManagedPrefixListCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyNetworkInterfaceAttributeCommand.js
var ModifyNetworkInterfaceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyNetworkInterfaceAttribute", {}).n("EC2Client", "ModifyNetworkInterfaceAttributeCommand").f(void 0, void 0).ser(se_ModifyNetworkInterfaceAttributeCommand).de(de_ModifyNetworkInterfaceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyPrivateDnsNameOptionsCommand.js
var ModifyPrivateDnsNameOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyPrivateDnsNameOptions", {}).n("EC2Client", "ModifyPrivateDnsNameOptionsCommand").f(void 0, void 0).ser(se_ModifyPrivateDnsNameOptionsCommand).de(de_ModifyPrivateDnsNameOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyReservedInstancesCommand.js
var ModifyReservedInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyReservedInstances", {}).n("EC2Client", "ModifyReservedInstancesCommand").f(void 0, void 0).ser(se_ModifyReservedInstancesCommand).de(de_ModifyReservedInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifySecurityGroupRulesCommand.js
var ModifySecurityGroupRulesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifySecurityGroupRules", {}).n("EC2Client", "ModifySecurityGroupRulesCommand").f(void 0, void 0).ser(se_ModifySecurityGroupRulesCommand).de(de_ModifySecurityGroupRulesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifySnapshotAttributeCommand.js
var ModifySnapshotAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifySnapshotAttribute", {}).n("EC2Client", "ModifySnapshotAttributeCommand").f(void 0, void 0).ser(se_ModifySnapshotAttributeCommand).de(de_ModifySnapshotAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifySnapshotTierCommand.js
var ModifySnapshotTierCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifySnapshotTier", {}).n("EC2Client", "ModifySnapshotTierCommand").f(void 0, void 0).ser(se_ModifySnapshotTierCommand).de(de_ModifySnapshotTierCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifySpotFleetRequestCommand.js
var ModifySpotFleetRequestCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifySpotFleetRequest", {}).n("EC2Client", "ModifySpotFleetRequestCommand").f(void 0, void 0).ser(se_ModifySpotFleetRequestCommand).de(de_ModifySpotFleetRequestCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifySubnetAttributeCommand.js
var ModifySubnetAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifySubnetAttribute", {}).n("EC2Client", "ModifySubnetAttributeCommand").f(void 0, void 0).ser(se_ModifySubnetAttributeCommand).de(de_ModifySubnetAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTrafficMirrorFilterNetworkServicesCommand.js
var ModifyTrafficMirrorFilterNetworkServicesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTrafficMirrorFilterNetworkServices", {}).n("EC2Client", "ModifyTrafficMirrorFilterNetworkServicesCommand").f(void 0, void 0).ser(se_ModifyTrafficMirrorFilterNetworkServicesCommand).de(de_ModifyTrafficMirrorFilterNetworkServicesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTrafficMirrorFilterRuleCommand.js
var ModifyTrafficMirrorFilterRuleCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTrafficMirrorFilterRule", {}).n("EC2Client", "ModifyTrafficMirrorFilterRuleCommand").f(void 0, void 0).ser(se_ModifyTrafficMirrorFilterRuleCommand).de(de_ModifyTrafficMirrorFilterRuleCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTrafficMirrorSessionCommand.js
var ModifyTrafficMirrorSessionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTrafficMirrorSession", {}).n("EC2Client", "ModifyTrafficMirrorSessionCommand").f(void 0, void 0).ser(se_ModifyTrafficMirrorSessionCommand).de(de_ModifyTrafficMirrorSessionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTransitGatewayCommand.js
var ModifyTransitGatewayCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTransitGateway", {}).n("EC2Client", "ModifyTransitGatewayCommand").f(void 0, void 0).ser(se_ModifyTransitGatewayCommand).de(de_ModifyTransitGatewayCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTransitGatewayPrefixListReferenceCommand.js
var ModifyTransitGatewayPrefixListReferenceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTransitGatewayPrefixListReference", {}).n("EC2Client", "ModifyTransitGatewayPrefixListReferenceCommand").f(void 0, void 0).ser(se_ModifyTransitGatewayPrefixListReferenceCommand).de(de_ModifyTransitGatewayPrefixListReferenceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyTransitGatewayVpcAttachmentCommand.js
var ModifyTransitGatewayVpcAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyTransitGatewayVpcAttachment", {}).n("EC2Client", "ModifyTransitGatewayVpcAttachmentCommand").f(void 0, void 0).ser(se_ModifyTransitGatewayVpcAttachmentCommand).de(de_ModifyTransitGatewayVpcAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessEndpointCommand.js
var ModifyVerifiedAccessEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessEndpoint", {}).n("EC2Client", "ModifyVerifiedAccessEndpointCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessEndpointCommand).de(de_ModifyVerifiedAccessEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessEndpointPolicyCommand.js
var ModifyVerifiedAccessEndpointPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessEndpointPolicy", {}).n("EC2Client", "ModifyVerifiedAccessEndpointPolicyCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessEndpointPolicyCommand).de(de_ModifyVerifiedAccessEndpointPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessGroupCommand.js
var ModifyVerifiedAccessGroupCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessGroup", {}).n("EC2Client", "ModifyVerifiedAccessGroupCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessGroupCommand).de(de_ModifyVerifiedAccessGroupCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessGroupPolicyCommand.js
var ModifyVerifiedAccessGroupPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessGroupPolicy", {}).n("EC2Client", "ModifyVerifiedAccessGroupPolicyCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessGroupPolicyCommand).de(de_ModifyVerifiedAccessGroupPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessInstanceCommand.js
var ModifyVerifiedAccessInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessInstance", {}).n("EC2Client", "ModifyVerifiedAccessInstanceCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessInstanceCommand).de(de_ModifyVerifiedAccessInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessInstanceLoggingConfigurationCommand.js
var ModifyVerifiedAccessInstanceLoggingConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessInstanceLoggingConfiguration", {}).n("EC2Client", "ModifyVerifiedAccessInstanceLoggingConfigurationCommand").f(void 0, void 0).ser(se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand).de(de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/models/models_7.js
var DefaultInstanceMetadataEndpointState = {
  disabled: "disabled",
  enabled: "enabled",
  no_preference: "no-preference"
};
var MetadataDefaultHttpTokensState = {
  no_preference: "no-preference",
  optional: "optional",
  required: "required"
};
var DefaultInstanceMetadataTagsState = {
  disabled: "disabled",
  enabled: "enabled",
  no_preference: "no-preference"
};
var HostTenancy = {
  dedicated: "dedicated",
  default: "default",
  host: "host"
};
var TargetStorageTier = {
  archive: "archive"
};
var TrafficMirrorFilterRuleField = {
  description: "description",
  destination_port_range: "destination-port-range",
  protocol: "protocol",
  source_port_range: "source-port-range"
};
var TrafficMirrorSessionField = {
  description: "description",
  packet_length: "packet-length",
  virtual_network_id: "virtual-network-id"
};
var VpcTenancy = {
  default: "default"
};
var Status = {
  inClassic: "InClassic",
  inVpc: "InVpc",
  moveInProgress: "MoveInProgress"
};
var VerificationMethod = {
  dns_token: "dns-token",
  remarks_x509: "remarks-x509"
};
var ReportInstanceReasonCodes = {
  instance_stuck_in_state: "instance-stuck-in-state",
  not_accepting_credentials: "not-accepting-credentials",
  other: "other",
  password_not_available: "password-not-available",
  performance_ebs_volume: "performance-ebs-volume",
  performance_instance_store: "performance-instance-store",
  performance_network: "performance-network",
  performance_other: "performance-other",
  unresponsive: "unresponsive"
};
var ReportStatusType = {
  impaired: "impaired",
  ok: "ok"
};
var ResetFpgaImageAttributeName = {
  loadPermission: "loadPermission"
};
var ResetImageAttributeName = {
  launchPermission: "launchPermission"
};
var MembershipType = {
  igmp: "igmp",
  static: "static"
};
var ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }
});
var ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.OidcOptions && {
    OidcOptions: ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog(obj.OidcOptions)
  },
  ...obj.NativeApplicationOidcOptions && {
    NativeApplicationOidcOptions: ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog(obj.NativeApplicationOidcOptions)
  }
});
var ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VerifiedAccessTrustProvider && {
    VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider)
  }
});
var ModifyVpnConnectionResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }
});
var ModifyVpnConnectionOptionsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }
});
var ModifyVpnTunnelCertificateResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }
});
var ModifyVpnTunnelOptionsSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PreSharedKey && { PreSharedKey: SENSITIVE_STRING }
});
var ModifyVpnTunnelOptionsRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TunnelOptions && { TunnelOptions: SENSITIVE_STRING }
});
var ModifyVpnTunnelOptionsResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }
});
var ReportInstanceStatusRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Description && { Description: SENSITIVE_STRING }
});
var RequestSpotFleetRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SpotFleetRequestConfig && {
    SpotFleetRequestConfig: SpotFleetRequestConfigDataFilterSensitiveLog(obj.SpotFleetRequestConfig)
  }
});
var RequestSpotLaunchSpecificationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var RequestSpotInstancesRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchSpecification && {
    LaunchSpecification: RequestSpotLaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification)
  }
});
var RequestSpotInstancesResultFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.SpotInstanceRequests && {
    SpotInstanceRequests: obj.SpotInstanceRequests.map((item) => SpotInstanceRequestFilterSensitiveLog(item))
  }
});
var RunInstancesRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.UserData && { UserData: SENSITIVE_STRING }
});
var ScheduledInstancesLaunchSpecificationFilterSensitiveLog = (obj) => ({
  ...obj
});
var RunScheduledInstancesRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.LaunchSpecification && { LaunchSpecification: SENSITIVE_STRING }
});

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVerifiedAccessTrustProviderCommand.js
var ModifyVerifiedAccessTrustProviderCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVerifiedAccessTrustProvider", {}).n("EC2Client", "ModifyVerifiedAccessTrustProviderCommand").f(ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog, ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog).ser(se_ModifyVerifiedAccessTrustProviderCommand).de(de_ModifyVerifiedAccessTrustProviderCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVolumeAttributeCommand.js
var ModifyVolumeAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVolumeAttribute", {}).n("EC2Client", "ModifyVolumeAttributeCommand").f(void 0, void 0).ser(se_ModifyVolumeAttributeCommand).de(de_ModifyVolumeAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVolumeCommand.js
var ModifyVolumeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVolume", {}).n("EC2Client", "ModifyVolumeCommand").f(void 0, void 0).ser(se_ModifyVolumeCommand).de(de_ModifyVolumeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcAttributeCommand.js
var ModifyVpcAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcAttribute", {}).n("EC2Client", "ModifyVpcAttributeCommand").f(void 0, void 0).ser(se_ModifyVpcAttributeCommand).de(de_ModifyVpcAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcBlockPublicAccessExclusionCommand.js
var ModifyVpcBlockPublicAccessExclusionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcBlockPublicAccessExclusion", {}).n("EC2Client", "ModifyVpcBlockPublicAccessExclusionCommand").f(void 0, void 0).ser(se_ModifyVpcBlockPublicAccessExclusionCommand).de(de_ModifyVpcBlockPublicAccessExclusionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcBlockPublicAccessOptionsCommand.js
var ModifyVpcBlockPublicAccessOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcBlockPublicAccessOptions", {}).n("EC2Client", "ModifyVpcBlockPublicAccessOptionsCommand").f(void 0, void 0).ser(se_ModifyVpcBlockPublicAccessOptionsCommand).de(de_ModifyVpcBlockPublicAccessOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcEndpointCommand.js
var ModifyVpcEndpointCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcEndpoint", {}).n("EC2Client", "ModifyVpcEndpointCommand").f(void 0, void 0).ser(se_ModifyVpcEndpointCommand).de(de_ModifyVpcEndpointCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcEndpointConnectionNotificationCommand.js
var ModifyVpcEndpointConnectionNotificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcEndpointConnectionNotification", {}).n("EC2Client", "ModifyVpcEndpointConnectionNotificationCommand").f(void 0, void 0).ser(se_ModifyVpcEndpointConnectionNotificationCommand).de(de_ModifyVpcEndpointConnectionNotificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcEndpointServiceConfigurationCommand.js
var ModifyVpcEndpointServiceConfigurationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcEndpointServiceConfiguration", {}).n("EC2Client", "ModifyVpcEndpointServiceConfigurationCommand").f(void 0, void 0).ser(se_ModifyVpcEndpointServiceConfigurationCommand).de(de_ModifyVpcEndpointServiceConfigurationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcEndpointServicePayerResponsibilityCommand.js
var ModifyVpcEndpointServicePayerResponsibilityCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcEndpointServicePayerResponsibility", {}).n("EC2Client", "ModifyVpcEndpointServicePayerResponsibilityCommand").f(void 0, void 0).ser(se_ModifyVpcEndpointServicePayerResponsibilityCommand).de(de_ModifyVpcEndpointServicePayerResponsibilityCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcEndpointServicePermissionsCommand.js
var ModifyVpcEndpointServicePermissionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcEndpointServicePermissions", {}).n("EC2Client", "ModifyVpcEndpointServicePermissionsCommand").f(void 0, void 0).ser(se_ModifyVpcEndpointServicePermissionsCommand).de(de_ModifyVpcEndpointServicePermissionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcPeeringConnectionOptionsCommand.js
var ModifyVpcPeeringConnectionOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcPeeringConnectionOptions", {}).n("EC2Client", "ModifyVpcPeeringConnectionOptionsCommand").f(void 0, void 0).ser(se_ModifyVpcPeeringConnectionOptionsCommand).de(de_ModifyVpcPeeringConnectionOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpcTenancyCommand.js
var ModifyVpcTenancyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpcTenancy", {}).n("EC2Client", "ModifyVpcTenancyCommand").f(void 0, void 0).ser(se_ModifyVpcTenancyCommand).de(de_ModifyVpcTenancyCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpnConnectionCommand.js
var ModifyVpnConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpnConnection", {}).n("EC2Client", "ModifyVpnConnectionCommand").f(void 0, ModifyVpnConnectionResultFilterSensitiveLog).ser(se_ModifyVpnConnectionCommand).de(de_ModifyVpnConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpnConnectionOptionsCommand.js
var ModifyVpnConnectionOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpnConnectionOptions", {}).n("EC2Client", "ModifyVpnConnectionOptionsCommand").f(void 0, ModifyVpnConnectionOptionsResultFilterSensitiveLog).ser(se_ModifyVpnConnectionOptionsCommand).de(de_ModifyVpnConnectionOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpnTunnelCertificateCommand.js
var ModifyVpnTunnelCertificateCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpnTunnelCertificate", {}).n("EC2Client", "ModifyVpnTunnelCertificateCommand").f(void 0, ModifyVpnTunnelCertificateResultFilterSensitiveLog).ser(se_ModifyVpnTunnelCertificateCommand).de(de_ModifyVpnTunnelCertificateCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ModifyVpnTunnelOptionsCommand.js
var ModifyVpnTunnelOptionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ModifyVpnTunnelOptions", {}).n("EC2Client", "ModifyVpnTunnelOptionsCommand").f(ModifyVpnTunnelOptionsRequestFilterSensitiveLog, ModifyVpnTunnelOptionsResultFilterSensitiveLog).ser(se_ModifyVpnTunnelOptionsCommand).de(de_ModifyVpnTunnelOptionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/MonitorInstancesCommand.js
var MonitorInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "MonitorInstances", {}).n("EC2Client", "MonitorInstancesCommand").f(void 0, void 0).ser(se_MonitorInstancesCommand).de(de_MonitorInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/MoveAddressToVpcCommand.js
var MoveAddressToVpcCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "MoveAddressToVpc", {}).n("EC2Client", "MoveAddressToVpcCommand").f(void 0, void 0).ser(se_MoveAddressToVpcCommand).de(de_MoveAddressToVpcCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/MoveByoipCidrToIpamCommand.js
var MoveByoipCidrToIpamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "MoveByoipCidrToIpam", {}).n("EC2Client", "MoveByoipCidrToIpamCommand").f(void 0, void 0).ser(se_MoveByoipCidrToIpamCommand).de(de_MoveByoipCidrToIpamCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/MoveCapacityReservationInstancesCommand.js
var MoveCapacityReservationInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "MoveCapacityReservationInstances", {}).n("EC2Client", "MoveCapacityReservationInstancesCommand").f(void 0, void 0).ser(se_MoveCapacityReservationInstancesCommand).de(de_MoveCapacityReservationInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ProvisionByoipCidrCommand.js
var ProvisionByoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ProvisionByoipCidr", {}).n("EC2Client", "ProvisionByoipCidrCommand").f(void 0, void 0).ser(se_ProvisionByoipCidrCommand).de(de_ProvisionByoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ProvisionIpamByoasnCommand.js
var ProvisionIpamByoasnCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ProvisionIpamByoasn", {}).n("EC2Client", "ProvisionIpamByoasnCommand").f(void 0, void 0).ser(se_ProvisionIpamByoasnCommand).de(de_ProvisionIpamByoasnCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ProvisionIpamPoolCidrCommand.js
var ProvisionIpamPoolCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ProvisionIpamPoolCidr", {}).n("EC2Client", "ProvisionIpamPoolCidrCommand").f(void 0, void 0).ser(se_ProvisionIpamPoolCidrCommand).de(de_ProvisionIpamPoolCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ProvisionPublicIpv4PoolCidrCommand.js
var ProvisionPublicIpv4PoolCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ProvisionPublicIpv4PoolCidr", {}).n("EC2Client", "ProvisionPublicIpv4PoolCidrCommand").f(void 0, void 0).ser(se_ProvisionPublicIpv4PoolCidrCommand).de(de_ProvisionPublicIpv4PoolCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/PurchaseCapacityBlockCommand.js
var PurchaseCapacityBlockCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "PurchaseCapacityBlock", {}).n("EC2Client", "PurchaseCapacityBlockCommand").f(void 0, void 0).ser(se_PurchaseCapacityBlockCommand).de(de_PurchaseCapacityBlockCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/PurchaseCapacityBlockExtensionCommand.js
var PurchaseCapacityBlockExtensionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "PurchaseCapacityBlockExtension", {}).n("EC2Client", "PurchaseCapacityBlockExtensionCommand").f(void 0, void 0).ser(se_PurchaseCapacityBlockExtensionCommand).de(de_PurchaseCapacityBlockExtensionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/PurchaseHostReservationCommand.js
var PurchaseHostReservationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "PurchaseHostReservation", {}).n("EC2Client", "PurchaseHostReservationCommand").f(void 0, void 0).ser(se_PurchaseHostReservationCommand).de(de_PurchaseHostReservationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/PurchaseReservedInstancesOfferingCommand.js
var PurchaseReservedInstancesOfferingCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "PurchaseReservedInstancesOffering", {}).n("EC2Client", "PurchaseReservedInstancesOfferingCommand").f(void 0, void 0).ser(se_PurchaseReservedInstancesOfferingCommand).de(de_PurchaseReservedInstancesOfferingCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/PurchaseScheduledInstancesCommand.js
var PurchaseScheduledInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "PurchaseScheduledInstances", {}).n("EC2Client", "PurchaseScheduledInstancesCommand").f(void 0, void 0).ser(se_PurchaseScheduledInstancesCommand).de(de_PurchaseScheduledInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RebootInstancesCommand.js
var RebootInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RebootInstances", {}).n("EC2Client", "RebootInstancesCommand").f(void 0, void 0).ser(se_RebootInstancesCommand).de(de_RebootInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RegisterImageCommand.js
var RegisterImageCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RegisterImage", {}).n("EC2Client", "RegisterImageCommand").f(void 0, void 0).ser(se_RegisterImageCommand).de(de_RegisterImageCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RegisterInstanceEventNotificationAttributesCommand.js
var RegisterInstanceEventNotificationAttributesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RegisterInstanceEventNotificationAttributes", {}).n("EC2Client", "RegisterInstanceEventNotificationAttributesCommand").f(void 0, void 0).ser(se_RegisterInstanceEventNotificationAttributesCommand).de(de_RegisterInstanceEventNotificationAttributesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RegisterTransitGatewayMulticastGroupMembersCommand.js
var RegisterTransitGatewayMulticastGroupMembersCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RegisterTransitGatewayMulticastGroupMembers", {}).n("EC2Client", "RegisterTransitGatewayMulticastGroupMembersCommand").f(void 0, void 0).ser(se_RegisterTransitGatewayMulticastGroupMembersCommand).de(de_RegisterTransitGatewayMulticastGroupMembersCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RegisterTransitGatewayMulticastGroupSourcesCommand.js
var RegisterTransitGatewayMulticastGroupSourcesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RegisterTransitGatewayMulticastGroupSources", {}).n("EC2Client", "RegisterTransitGatewayMulticastGroupSourcesCommand").f(void 0, void 0).ser(se_RegisterTransitGatewayMulticastGroupSourcesCommand).de(de_RegisterTransitGatewayMulticastGroupSourcesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectCapacityReservationBillingOwnershipCommand.js
var RejectCapacityReservationBillingOwnershipCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectCapacityReservationBillingOwnership", {}).n("EC2Client", "RejectCapacityReservationBillingOwnershipCommand").f(void 0, void 0).ser(se_RejectCapacityReservationBillingOwnershipCommand).de(de_RejectCapacityReservationBillingOwnershipCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectTransitGatewayMulticastDomainAssociationsCommand.js
var RejectTransitGatewayMulticastDomainAssociationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectTransitGatewayMulticastDomainAssociations", {}).n("EC2Client", "RejectTransitGatewayMulticastDomainAssociationsCommand").f(void 0, void 0).ser(se_RejectTransitGatewayMulticastDomainAssociationsCommand).de(de_RejectTransitGatewayMulticastDomainAssociationsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectTransitGatewayPeeringAttachmentCommand.js
var RejectTransitGatewayPeeringAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectTransitGatewayPeeringAttachment", {}).n("EC2Client", "RejectTransitGatewayPeeringAttachmentCommand").f(void 0, void 0).ser(se_RejectTransitGatewayPeeringAttachmentCommand).de(de_RejectTransitGatewayPeeringAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectTransitGatewayVpcAttachmentCommand.js
var RejectTransitGatewayVpcAttachmentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectTransitGatewayVpcAttachment", {}).n("EC2Client", "RejectTransitGatewayVpcAttachmentCommand").f(void 0, void 0).ser(se_RejectTransitGatewayVpcAttachmentCommand).de(de_RejectTransitGatewayVpcAttachmentCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectVpcEndpointConnectionsCommand.js
var RejectVpcEndpointConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectVpcEndpointConnections", {}).n("EC2Client", "RejectVpcEndpointConnectionsCommand").f(void 0, void 0).ser(se_RejectVpcEndpointConnectionsCommand).de(de_RejectVpcEndpointConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RejectVpcPeeringConnectionCommand.js
var RejectVpcPeeringConnectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RejectVpcPeeringConnection", {}).n("EC2Client", "RejectVpcPeeringConnectionCommand").f(void 0, void 0).ser(se_RejectVpcPeeringConnectionCommand).de(de_RejectVpcPeeringConnectionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReleaseAddressCommand.js
var ReleaseAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReleaseAddress", {}).n("EC2Client", "ReleaseAddressCommand").f(void 0, void 0).ser(se_ReleaseAddressCommand).de(de_ReleaseAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReleaseHostsCommand.js
var ReleaseHostsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReleaseHosts", {}).n("EC2Client", "ReleaseHostsCommand").f(void 0, void 0).ser(se_ReleaseHostsCommand).de(de_ReleaseHostsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReleaseIpamPoolAllocationCommand.js
var ReleaseIpamPoolAllocationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReleaseIpamPoolAllocation", {}).n("EC2Client", "ReleaseIpamPoolAllocationCommand").f(void 0, void 0).ser(se_ReleaseIpamPoolAllocationCommand).de(de_ReleaseIpamPoolAllocationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceIamInstanceProfileAssociationCommand.js
var ReplaceIamInstanceProfileAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceIamInstanceProfileAssociation", {}).n("EC2Client", "ReplaceIamInstanceProfileAssociationCommand").f(void 0, void 0).ser(se_ReplaceIamInstanceProfileAssociationCommand).de(de_ReplaceIamInstanceProfileAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceImageCriteriaInAllowedImagesSettingsCommand.js
var ReplaceImageCriteriaInAllowedImagesSettingsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceImageCriteriaInAllowedImagesSettings", {}).n("EC2Client", "ReplaceImageCriteriaInAllowedImagesSettingsCommand").f(void 0, void 0).ser(se_ReplaceImageCriteriaInAllowedImagesSettingsCommand).de(de_ReplaceImageCriteriaInAllowedImagesSettingsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceNetworkAclAssociationCommand.js
var ReplaceNetworkAclAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceNetworkAclAssociation", {}).n("EC2Client", "ReplaceNetworkAclAssociationCommand").f(void 0, void 0).ser(se_ReplaceNetworkAclAssociationCommand).de(de_ReplaceNetworkAclAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceNetworkAclEntryCommand.js
var ReplaceNetworkAclEntryCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceNetworkAclEntry", {}).n("EC2Client", "ReplaceNetworkAclEntryCommand").f(void 0, void 0).ser(se_ReplaceNetworkAclEntryCommand).de(de_ReplaceNetworkAclEntryCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceRouteCommand.js
var ReplaceRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceRoute", {}).n("EC2Client", "ReplaceRouteCommand").f(void 0, void 0).ser(se_ReplaceRouteCommand).de(de_ReplaceRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceRouteTableAssociationCommand.js
var ReplaceRouteTableAssociationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceRouteTableAssociation", {}).n("EC2Client", "ReplaceRouteTableAssociationCommand").f(void 0, void 0).ser(se_ReplaceRouteTableAssociationCommand).de(de_ReplaceRouteTableAssociationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceTransitGatewayRouteCommand.js
var ReplaceTransitGatewayRouteCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceTransitGatewayRoute", {}).n("EC2Client", "ReplaceTransitGatewayRouteCommand").f(void 0, void 0).ser(se_ReplaceTransitGatewayRouteCommand).de(de_ReplaceTransitGatewayRouteCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReplaceVpnTunnelCommand.js
var ReplaceVpnTunnelCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReplaceVpnTunnel", {}).n("EC2Client", "ReplaceVpnTunnelCommand").f(void 0, void 0).ser(se_ReplaceVpnTunnelCommand).de(de_ReplaceVpnTunnelCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ReportInstanceStatusCommand.js
var ReportInstanceStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ReportInstanceStatus", {}).n("EC2Client", "ReportInstanceStatusCommand").f(ReportInstanceStatusRequestFilterSensitiveLog, void 0).ser(se_ReportInstanceStatusCommand).de(de_ReportInstanceStatusCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RequestSpotFleetCommand.js
var RequestSpotFleetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RequestSpotFleet", {}).n("EC2Client", "RequestSpotFleetCommand").f(RequestSpotFleetRequestFilterSensitiveLog, void 0).ser(se_RequestSpotFleetCommand).de(de_RequestSpotFleetCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RequestSpotInstancesCommand.js
var RequestSpotInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RequestSpotInstances", {}).n("EC2Client", "RequestSpotInstancesCommand").f(RequestSpotInstancesRequestFilterSensitiveLog, RequestSpotInstancesResultFilterSensitiveLog).ser(se_RequestSpotInstancesCommand).de(de_RequestSpotInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetAddressAttributeCommand.js
var ResetAddressAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetAddressAttribute", {}).n("EC2Client", "ResetAddressAttributeCommand").f(void 0, void 0).ser(se_ResetAddressAttributeCommand).de(de_ResetAddressAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetEbsDefaultKmsKeyIdCommand.js
var ResetEbsDefaultKmsKeyIdCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetEbsDefaultKmsKeyId", {}).n("EC2Client", "ResetEbsDefaultKmsKeyIdCommand").f(void 0, void 0).ser(se_ResetEbsDefaultKmsKeyIdCommand).de(de_ResetEbsDefaultKmsKeyIdCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetFpgaImageAttributeCommand.js
var ResetFpgaImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetFpgaImageAttribute", {}).n("EC2Client", "ResetFpgaImageAttributeCommand").f(void 0, void 0).ser(se_ResetFpgaImageAttributeCommand).de(de_ResetFpgaImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetImageAttributeCommand.js
var ResetImageAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetImageAttribute", {}).n("EC2Client", "ResetImageAttributeCommand").f(void 0, void 0).ser(se_ResetImageAttributeCommand).de(de_ResetImageAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetInstanceAttributeCommand.js
var ResetInstanceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetInstanceAttribute", {}).n("EC2Client", "ResetInstanceAttributeCommand").f(void 0, void 0).ser(se_ResetInstanceAttributeCommand).de(de_ResetInstanceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetNetworkInterfaceAttributeCommand.js
var ResetNetworkInterfaceAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetNetworkInterfaceAttribute", {}).n("EC2Client", "ResetNetworkInterfaceAttributeCommand").f(void 0, void 0).ser(se_ResetNetworkInterfaceAttributeCommand).de(de_ResetNetworkInterfaceAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/ResetSnapshotAttributeCommand.js
var ResetSnapshotAttributeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "ResetSnapshotAttribute", {}).n("EC2Client", "ResetSnapshotAttributeCommand").f(void 0, void 0).ser(se_ResetSnapshotAttributeCommand).de(de_ResetSnapshotAttributeCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RestoreAddressToClassicCommand.js
var RestoreAddressToClassicCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RestoreAddressToClassic", {}).n("EC2Client", "RestoreAddressToClassicCommand").f(void 0, void 0).ser(se_RestoreAddressToClassicCommand).de(de_RestoreAddressToClassicCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RestoreImageFromRecycleBinCommand.js
var RestoreImageFromRecycleBinCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RestoreImageFromRecycleBin", {}).n("EC2Client", "RestoreImageFromRecycleBinCommand").f(void 0, void 0).ser(se_RestoreImageFromRecycleBinCommand).de(de_RestoreImageFromRecycleBinCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RestoreManagedPrefixListVersionCommand.js
var RestoreManagedPrefixListVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RestoreManagedPrefixListVersion", {}).n("EC2Client", "RestoreManagedPrefixListVersionCommand").f(void 0, void 0).ser(se_RestoreManagedPrefixListVersionCommand).de(de_RestoreManagedPrefixListVersionCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RestoreSnapshotFromRecycleBinCommand.js
var RestoreSnapshotFromRecycleBinCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RestoreSnapshotFromRecycleBin", {}).n("EC2Client", "RestoreSnapshotFromRecycleBinCommand").f(void 0, void 0).ser(se_RestoreSnapshotFromRecycleBinCommand).de(de_RestoreSnapshotFromRecycleBinCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RestoreSnapshotTierCommand.js
var RestoreSnapshotTierCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RestoreSnapshotTier", {}).n("EC2Client", "RestoreSnapshotTierCommand").f(void 0, void 0).ser(se_RestoreSnapshotTierCommand).de(de_RestoreSnapshotTierCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RevokeClientVpnIngressCommand.js
var RevokeClientVpnIngressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RevokeClientVpnIngress", {}).n("EC2Client", "RevokeClientVpnIngressCommand").f(void 0, void 0).ser(se_RevokeClientVpnIngressCommand).de(de_RevokeClientVpnIngressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RevokeSecurityGroupEgressCommand.js
var RevokeSecurityGroupEgressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RevokeSecurityGroupEgress", {}).n("EC2Client", "RevokeSecurityGroupEgressCommand").f(void 0, void 0).ser(se_RevokeSecurityGroupEgressCommand).de(de_RevokeSecurityGroupEgressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RevokeSecurityGroupIngressCommand.js
var RevokeSecurityGroupIngressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RevokeSecurityGroupIngress", {}).n("EC2Client", "RevokeSecurityGroupIngressCommand").f(void 0, void 0).ser(se_RevokeSecurityGroupIngressCommand).de(de_RevokeSecurityGroupIngressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RunInstancesCommand.js
var RunInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RunInstances", {}).n("EC2Client", "RunInstancesCommand").f(RunInstancesRequestFilterSensitiveLog, void 0).ser(se_RunInstancesCommand).de(de_RunInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/RunScheduledInstancesCommand.js
var RunScheduledInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "RunScheduledInstances", {}).n("EC2Client", "RunScheduledInstancesCommand").f(RunScheduledInstancesRequestFilterSensitiveLog, void 0).ser(se_RunScheduledInstancesCommand).de(de_RunScheduledInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/SearchLocalGatewayRoutesCommand.js
var SearchLocalGatewayRoutesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "SearchLocalGatewayRoutes", {}).n("EC2Client", "SearchLocalGatewayRoutesCommand").f(void 0, void 0).ser(se_SearchLocalGatewayRoutesCommand).de(de_SearchLocalGatewayRoutesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/SearchTransitGatewayMulticastGroupsCommand.js
var SearchTransitGatewayMulticastGroupsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "SearchTransitGatewayMulticastGroups", {}).n("EC2Client", "SearchTransitGatewayMulticastGroupsCommand").f(void 0, void 0).ser(se_SearchTransitGatewayMulticastGroupsCommand).de(de_SearchTransitGatewayMulticastGroupsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/SearchTransitGatewayRoutesCommand.js
var SearchTransitGatewayRoutesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "SearchTransitGatewayRoutes", {}).n("EC2Client", "SearchTransitGatewayRoutesCommand").f(void 0, void 0).ser(se_SearchTransitGatewayRoutesCommand).de(de_SearchTransitGatewayRoutesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/SendDiagnosticInterruptCommand.js
var SendDiagnosticInterruptCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "SendDiagnosticInterrupt", {}).n("EC2Client", "SendDiagnosticInterruptCommand").f(void 0, void 0).ser(se_SendDiagnosticInterruptCommand).de(de_SendDiagnosticInterruptCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StartDeclarativePoliciesReportCommand.js
var StartDeclarativePoliciesReportCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StartDeclarativePoliciesReport", {}).n("EC2Client", "StartDeclarativePoliciesReportCommand").f(void 0, void 0).ser(se_StartDeclarativePoliciesReportCommand).de(de_StartDeclarativePoliciesReportCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StartInstancesCommand.js
var StartInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StartInstances", {}).n("EC2Client", "StartInstancesCommand").f(void 0, void 0).ser(se_StartInstancesCommand).de(de_StartInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StartNetworkInsightsAccessScopeAnalysisCommand.js
var StartNetworkInsightsAccessScopeAnalysisCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StartNetworkInsightsAccessScopeAnalysis", {}).n("EC2Client", "StartNetworkInsightsAccessScopeAnalysisCommand").f(void 0, void 0).ser(se_StartNetworkInsightsAccessScopeAnalysisCommand).de(de_StartNetworkInsightsAccessScopeAnalysisCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StartNetworkInsightsAnalysisCommand.js
var StartNetworkInsightsAnalysisCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StartNetworkInsightsAnalysis", {}).n("EC2Client", "StartNetworkInsightsAnalysisCommand").f(void 0, void 0).ser(se_StartNetworkInsightsAnalysisCommand).de(de_StartNetworkInsightsAnalysisCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StartVpcEndpointServicePrivateDnsVerificationCommand.js
var StartVpcEndpointServicePrivateDnsVerificationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StartVpcEndpointServicePrivateDnsVerification", {}).n("EC2Client", "StartVpcEndpointServicePrivateDnsVerificationCommand").f(void 0, void 0).ser(se_StartVpcEndpointServicePrivateDnsVerificationCommand).de(de_StartVpcEndpointServicePrivateDnsVerificationCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/StopInstancesCommand.js
var StopInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "StopInstances", {}).n("EC2Client", "StopInstancesCommand").f(void 0, void 0).ser(se_StopInstancesCommand).de(de_StopInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/TerminateClientVpnConnectionsCommand.js
var TerminateClientVpnConnectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "TerminateClientVpnConnections", {}).n("EC2Client", "TerminateClientVpnConnectionsCommand").f(void 0, void 0).ser(se_TerminateClientVpnConnectionsCommand).de(de_TerminateClientVpnConnectionsCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/TerminateInstancesCommand.js
var TerminateInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "TerminateInstances", {}).n("EC2Client", "TerminateInstancesCommand").f(void 0, void 0).ser(se_TerminateInstancesCommand).de(de_TerminateInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UnassignIpv6AddressesCommand.js
var UnassignIpv6AddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UnassignIpv6Addresses", {}).n("EC2Client", "UnassignIpv6AddressesCommand").f(void 0, void 0).ser(se_UnassignIpv6AddressesCommand).de(de_UnassignIpv6AddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UnassignPrivateIpAddressesCommand.js
var UnassignPrivateIpAddressesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UnassignPrivateIpAddresses", {}).n("EC2Client", "UnassignPrivateIpAddressesCommand").f(void 0, void 0).ser(se_UnassignPrivateIpAddressesCommand).de(de_UnassignPrivateIpAddressesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UnassignPrivateNatGatewayAddressCommand.js
var UnassignPrivateNatGatewayAddressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UnassignPrivateNatGatewayAddress", {}).n("EC2Client", "UnassignPrivateNatGatewayAddressCommand").f(void 0, void 0).ser(se_UnassignPrivateNatGatewayAddressCommand).de(de_UnassignPrivateNatGatewayAddressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UnlockSnapshotCommand.js
var UnlockSnapshotCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UnlockSnapshot", {}).n("EC2Client", "UnlockSnapshotCommand").f(void 0, void 0).ser(se_UnlockSnapshotCommand).de(de_UnlockSnapshotCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UnmonitorInstancesCommand.js
var UnmonitorInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UnmonitorInstances", {}).n("EC2Client", "UnmonitorInstancesCommand").f(void 0, void 0).ser(se_UnmonitorInstancesCommand).de(de_UnmonitorInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UpdateSecurityGroupRuleDescriptionsEgressCommand.js
var UpdateSecurityGroupRuleDescriptionsEgressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UpdateSecurityGroupRuleDescriptionsEgress", {}).n("EC2Client", "UpdateSecurityGroupRuleDescriptionsEgressCommand").f(void 0, void 0).ser(se_UpdateSecurityGroupRuleDescriptionsEgressCommand).de(de_UpdateSecurityGroupRuleDescriptionsEgressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/UpdateSecurityGroupRuleDescriptionsIngressCommand.js
var UpdateSecurityGroupRuleDescriptionsIngressCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "UpdateSecurityGroupRuleDescriptionsIngress", {}).n("EC2Client", "UpdateSecurityGroupRuleDescriptionsIngressCommand").f(void 0, void 0).ser(se_UpdateSecurityGroupRuleDescriptionsIngressCommand).de(de_UpdateSecurityGroupRuleDescriptionsIngressCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/commands/WithdrawByoipCidrCommand.js
var WithdrawByoipCidrCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonEC2", "WithdrawByoipCidr", {}).n("EC2Client", "WithdrawByoipCidrCommand").f(void 0, void 0).ser(se_WithdrawByoipCidrCommand).de(de_WithdrawByoipCidrCommand).build() {
};

// node_modules/@aws-sdk/client-ec2/dist-es/EC2.js
var commands = {
  AcceptAddressTransferCommand,
  AcceptCapacityReservationBillingOwnershipCommand,
  AcceptReservedInstancesExchangeQuoteCommand,
  AcceptTransitGatewayMulticastDomainAssociationsCommand,
  AcceptTransitGatewayPeeringAttachmentCommand,
  AcceptTransitGatewayVpcAttachmentCommand,
  AcceptVpcEndpointConnectionsCommand,
  AcceptVpcPeeringConnectionCommand,
  AdvertiseByoipCidrCommand,
  AllocateAddressCommand,
  AllocateHostsCommand,
  AllocateIpamPoolCidrCommand,
  ApplySecurityGroupsToClientVpnTargetNetworkCommand,
  AssignIpv6AddressesCommand,
  AssignPrivateIpAddressesCommand,
  AssignPrivateNatGatewayAddressCommand,
  AssociateAddressCommand,
  AssociateCapacityReservationBillingOwnerCommand,
  AssociateClientVpnTargetNetworkCommand,
  AssociateDhcpOptionsCommand,
  AssociateEnclaveCertificateIamRoleCommand,
  AssociateIamInstanceProfileCommand,
  AssociateInstanceEventWindowCommand,
  AssociateIpamByoasnCommand,
  AssociateIpamResourceDiscoveryCommand,
  AssociateNatGatewayAddressCommand,
  AssociateRouteTableCommand,
  AssociateSecurityGroupVpcCommand,
  AssociateSubnetCidrBlockCommand,
  AssociateTransitGatewayMulticastDomainCommand,
  AssociateTransitGatewayPolicyTableCommand,
  AssociateTransitGatewayRouteTableCommand,
  AssociateTrunkInterfaceCommand,
  AssociateVpcCidrBlockCommand,
  AttachClassicLinkVpcCommand,
  AttachInternetGatewayCommand,
  AttachNetworkInterfaceCommand,
  AttachVerifiedAccessTrustProviderCommand,
  AttachVolumeCommand,
  AttachVpnGatewayCommand,
  AuthorizeClientVpnIngressCommand,
  AuthorizeSecurityGroupEgressCommand,
  AuthorizeSecurityGroupIngressCommand,
  BundleInstanceCommand,
  CancelBundleTaskCommand,
  CancelCapacityReservationCommand,
  CancelCapacityReservationFleetsCommand,
  CancelConversionTaskCommand,
  CancelDeclarativePoliciesReportCommand,
  CancelExportTaskCommand,
  CancelImageLaunchPermissionCommand,
  CancelImportTaskCommand,
  CancelReservedInstancesListingCommand,
  CancelSpotFleetRequestsCommand,
  CancelSpotInstanceRequestsCommand,
  ConfirmProductInstanceCommand,
  CopyFpgaImageCommand,
  CopyImageCommand,
  CopySnapshotCommand,
  CreateCapacityReservationCommand,
  CreateCapacityReservationBySplittingCommand,
  CreateCapacityReservationFleetCommand,
  CreateCarrierGatewayCommand,
  CreateClientVpnEndpointCommand,
  CreateClientVpnRouteCommand,
  CreateCoipCidrCommand,
  CreateCoipPoolCommand,
  CreateCustomerGatewayCommand,
  CreateDefaultSubnetCommand,
  CreateDefaultVpcCommand,
  CreateDhcpOptionsCommand,
  CreateEgressOnlyInternetGatewayCommand,
  CreateFleetCommand,
  CreateFlowLogsCommand,
  CreateFpgaImageCommand,
  CreateImageCommand,
  CreateInstanceConnectEndpointCommand,
  CreateInstanceEventWindowCommand,
  CreateInstanceExportTaskCommand,
  CreateInternetGatewayCommand,
  CreateIpamCommand,
  CreateIpamExternalResourceVerificationTokenCommand,
  CreateIpamPoolCommand,
  CreateIpamResourceDiscoveryCommand,
  CreateIpamScopeCommand,
  CreateKeyPairCommand,
  CreateLaunchTemplateCommand,
  CreateLaunchTemplateVersionCommand,
  CreateLocalGatewayRouteCommand,
  CreateLocalGatewayRouteTableCommand,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
  CreateLocalGatewayRouteTableVpcAssociationCommand,
  CreateManagedPrefixListCommand,
  CreateNatGatewayCommand,
  CreateNetworkAclCommand,
  CreateNetworkAclEntryCommand,
  CreateNetworkInsightsAccessScopeCommand,
  CreateNetworkInsightsPathCommand,
  CreateNetworkInterfaceCommand,
  CreateNetworkInterfacePermissionCommand,
  CreatePlacementGroupCommand,
  CreatePublicIpv4PoolCommand,
  CreateReplaceRootVolumeTaskCommand,
  CreateReservedInstancesListingCommand,
  CreateRestoreImageTaskCommand,
  CreateRouteCommand,
  CreateRouteTableCommand,
  CreateSecurityGroupCommand,
  CreateSnapshotCommand,
  CreateSnapshotsCommand,
  CreateSpotDatafeedSubscriptionCommand,
  CreateStoreImageTaskCommand,
  CreateSubnetCommand,
  CreateSubnetCidrReservationCommand,
  CreateTagsCommand,
  CreateTrafficMirrorFilterCommand,
  CreateTrafficMirrorFilterRuleCommand,
  CreateTrafficMirrorSessionCommand,
  CreateTrafficMirrorTargetCommand,
  CreateTransitGatewayCommand,
  CreateTransitGatewayConnectCommand,
  CreateTransitGatewayConnectPeerCommand,
  CreateTransitGatewayMulticastDomainCommand,
  CreateTransitGatewayPeeringAttachmentCommand,
  CreateTransitGatewayPolicyTableCommand,
  CreateTransitGatewayPrefixListReferenceCommand,
  CreateTransitGatewayRouteCommand,
  CreateTransitGatewayRouteTableCommand,
  CreateTransitGatewayRouteTableAnnouncementCommand,
  CreateTransitGatewayVpcAttachmentCommand,
  CreateVerifiedAccessEndpointCommand,
  CreateVerifiedAccessGroupCommand,
  CreateVerifiedAccessInstanceCommand,
  CreateVerifiedAccessTrustProviderCommand,
  CreateVolumeCommand,
  CreateVpcCommand,
  CreateVpcBlockPublicAccessExclusionCommand,
  CreateVpcEndpointCommand,
  CreateVpcEndpointConnectionNotificationCommand,
  CreateVpcEndpointServiceConfigurationCommand,
  CreateVpcPeeringConnectionCommand,
  CreateVpnConnectionCommand,
  CreateVpnConnectionRouteCommand,
  CreateVpnGatewayCommand,
  DeleteCarrierGatewayCommand,
  DeleteClientVpnEndpointCommand,
  DeleteClientVpnRouteCommand,
  DeleteCoipCidrCommand,
  DeleteCoipPoolCommand,
  DeleteCustomerGatewayCommand,
  DeleteDhcpOptionsCommand,
  DeleteEgressOnlyInternetGatewayCommand,
  DeleteFleetsCommand,
  DeleteFlowLogsCommand,
  DeleteFpgaImageCommand,
  DeleteInstanceConnectEndpointCommand,
  DeleteInstanceEventWindowCommand,
  DeleteInternetGatewayCommand,
  DeleteIpamCommand,
  DeleteIpamExternalResourceVerificationTokenCommand,
  DeleteIpamPoolCommand,
  DeleteIpamResourceDiscoveryCommand,
  DeleteIpamScopeCommand,
  DeleteKeyPairCommand,
  DeleteLaunchTemplateCommand,
  DeleteLaunchTemplateVersionsCommand,
  DeleteLocalGatewayRouteCommand,
  DeleteLocalGatewayRouteTableCommand,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
  DeleteLocalGatewayRouteTableVpcAssociationCommand,
  DeleteManagedPrefixListCommand,
  DeleteNatGatewayCommand,
  DeleteNetworkAclCommand,
  DeleteNetworkAclEntryCommand,
  DeleteNetworkInsightsAccessScopeCommand,
  DeleteNetworkInsightsAccessScopeAnalysisCommand,
  DeleteNetworkInsightsAnalysisCommand,
  DeleteNetworkInsightsPathCommand,
  DeleteNetworkInterfaceCommand,
  DeleteNetworkInterfacePermissionCommand,
  DeletePlacementGroupCommand,
  DeletePublicIpv4PoolCommand,
  DeleteQueuedReservedInstancesCommand,
  DeleteRouteCommand,
  DeleteRouteTableCommand,
  DeleteSecurityGroupCommand,
  DeleteSnapshotCommand,
  DeleteSpotDatafeedSubscriptionCommand,
  DeleteSubnetCommand,
  DeleteSubnetCidrReservationCommand,
  DeleteTagsCommand,
  DeleteTrafficMirrorFilterCommand,
  DeleteTrafficMirrorFilterRuleCommand,
  DeleteTrafficMirrorSessionCommand,
  DeleteTrafficMirrorTargetCommand,
  DeleteTransitGatewayCommand,
  DeleteTransitGatewayConnectCommand,
  DeleteTransitGatewayConnectPeerCommand,
  DeleteTransitGatewayMulticastDomainCommand,
  DeleteTransitGatewayPeeringAttachmentCommand,
  DeleteTransitGatewayPolicyTableCommand,
  DeleteTransitGatewayPrefixListReferenceCommand,
  DeleteTransitGatewayRouteCommand,
  DeleteTransitGatewayRouteTableCommand,
  DeleteTransitGatewayRouteTableAnnouncementCommand,
  DeleteTransitGatewayVpcAttachmentCommand,
  DeleteVerifiedAccessEndpointCommand,
  DeleteVerifiedAccessGroupCommand,
  DeleteVerifiedAccessInstanceCommand,
  DeleteVerifiedAccessTrustProviderCommand,
  DeleteVolumeCommand,
  DeleteVpcCommand,
  DeleteVpcBlockPublicAccessExclusionCommand,
  DeleteVpcEndpointConnectionNotificationsCommand,
  DeleteVpcEndpointsCommand,
  DeleteVpcEndpointServiceConfigurationsCommand,
  DeleteVpcPeeringConnectionCommand,
  DeleteVpnConnectionCommand,
  DeleteVpnConnectionRouteCommand,
  DeleteVpnGatewayCommand,
  DeprovisionByoipCidrCommand,
  DeprovisionIpamByoasnCommand,
  DeprovisionIpamPoolCidrCommand,
  DeprovisionPublicIpv4PoolCidrCommand,
  DeregisterImageCommand,
  DeregisterInstanceEventNotificationAttributesCommand,
  DeregisterTransitGatewayMulticastGroupMembersCommand,
  DeregisterTransitGatewayMulticastGroupSourcesCommand,
  DescribeAccountAttributesCommand,
  DescribeAddressesCommand,
  DescribeAddressesAttributeCommand,
  DescribeAddressTransfersCommand,
  DescribeAggregateIdFormatCommand,
  DescribeAvailabilityZonesCommand,
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommand,
  DescribeBundleTasksCommand,
  DescribeByoipCidrsCommand,
  DescribeCapacityBlockExtensionHistoryCommand,
  DescribeCapacityBlockExtensionOfferingsCommand,
  DescribeCapacityBlockOfferingsCommand,
  DescribeCapacityReservationBillingRequestsCommand,
  DescribeCapacityReservationFleetsCommand,
  DescribeCapacityReservationsCommand,
  DescribeCarrierGatewaysCommand,
  DescribeClassicLinkInstancesCommand,
  DescribeClientVpnAuthorizationRulesCommand,
  DescribeClientVpnConnectionsCommand,
  DescribeClientVpnEndpointsCommand,
  DescribeClientVpnRoutesCommand,
  DescribeClientVpnTargetNetworksCommand,
  DescribeCoipPoolsCommand,
  DescribeConversionTasksCommand,
  DescribeCustomerGatewaysCommand,
  DescribeDeclarativePoliciesReportsCommand,
  DescribeDhcpOptionsCommand,
  DescribeEgressOnlyInternetGatewaysCommand,
  DescribeElasticGpusCommand,
  DescribeExportImageTasksCommand,
  DescribeExportTasksCommand,
  DescribeFastLaunchImagesCommand,
  DescribeFastSnapshotRestoresCommand,
  DescribeFleetHistoryCommand,
  DescribeFleetInstancesCommand,
  DescribeFleetsCommand,
  DescribeFlowLogsCommand,
  DescribeFpgaImageAttributeCommand,
  DescribeFpgaImagesCommand,
  DescribeHostReservationOfferingsCommand,
  DescribeHostReservationsCommand,
  DescribeHostsCommand,
  DescribeIamInstanceProfileAssociationsCommand,
  DescribeIdentityIdFormatCommand,
  DescribeIdFormatCommand,
  DescribeImageAttributeCommand,
  DescribeImagesCommand,
  DescribeImportImageTasksCommand,
  DescribeImportSnapshotTasksCommand,
  DescribeInstanceAttributeCommand,
  DescribeInstanceConnectEndpointsCommand,
  DescribeInstanceCreditSpecificationsCommand,
  DescribeInstanceEventNotificationAttributesCommand,
  DescribeInstanceEventWindowsCommand,
  DescribeInstanceImageMetadataCommand,
  DescribeInstancesCommand,
  DescribeInstanceStatusCommand,
  DescribeInstanceTopologyCommand,
  DescribeInstanceTypeOfferingsCommand,
  DescribeInstanceTypesCommand,
  DescribeInternetGatewaysCommand,
  DescribeIpamByoasnCommand,
  DescribeIpamExternalResourceVerificationTokensCommand,
  DescribeIpamPoolsCommand,
  DescribeIpamResourceDiscoveriesCommand,
  DescribeIpamResourceDiscoveryAssociationsCommand,
  DescribeIpamsCommand,
  DescribeIpamScopesCommand,
  DescribeIpv6PoolsCommand,
  DescribeKeyPairsCommand,
  DescribeLaunchTemplatesCommand,
  DescribeLaunchTemplateVersionsCommand,
  DescribeLocalGatewayRouteTablesCommand,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand,
  DescribeLocalGatewayRouteTableVpcAssociationsCommand,
  DescribeLocalGatewaysCommand,
  DescribeLocalGatewayVirtualInterfaceGroupsCommand,
  DescribeLocalGatewayVirtualInterfacesCommand,
  DescribeLockedSnapshotsCommand,
  DescribeMacHostsCommand,
  DescribeManagedPrefixListsCommand,
  DescribeMovingAddressesCommand,
  DescribeNatGatewaysCommand,
  DescribeNetworkAclsCommand,
  DescribeNetworkInsightsAccessScopeAnalysesCommand,
  DescribeNetworkInsightsAccessScopesCommand,
  DescribeNetworkInsightsAnalysesCommand,
  DescribeNetworkInsightsPathsCommand,
  DescribeNetworkInterfaceAttributeCommand,
  DescribeNetworkInterfacePermissionsCommand,
  DescribeNetworkInterfacesCommand,
  DescribePlacementGroupsCommand,
  DescribePrefixListsCommand,
  DescribePrincipalIdFormatCommand,
  DescribePublicIpv4PoolsCommand,
  DescribeRegionsCommand,
  DescribeReplaceRootVolumeTasksCommand,
  DescribeReservedInstancesCommand,
  DescribeReservedInstancesListingsCommand,
  DescribeReservedInstancesModificationsCommand,
  DescribeReservedInstancesOfferingsCommand,
  DescribeRouteTablesCommand,
  DescribeScheduledInstanceAvailabilityCommand,
  DescribeScheduledInstancesCommand,
  DescribeSecurityGroupReferencesCommand,
  DescribeSecurityGroupRulesCommand,
  DescribeSecurityGroupsCommand,
  DescribeSecurityGroupVpcAssociationsCommand,
  DescribeSnapshotAttributeCommand,
  DescribeSnapshotsCommand,
  DescribeSnapshotTierStatusCommand,
  DescribeSpotDatafeedSubscriptionCommand,
  DescribeSpotFleetInstancesCommand,
  DescribeSpotFleetRequestHistoryCommand,
  DescribeSpotFleetRequestsCommand,
  DescribeSpotInstanceRequestsCommand,
  DescribeSpotPriceHistoryCommand,
  DescribeStaleSecurityGroupsCommand,
  DescribeStoreImageTasksCommand,
  DescribeSubnetsCommand,
  DescribeTagsCommand,
  DescribeTrafficMirrorFilterRulesCommand,
  DescribeTrafficMirrorFiltersCommand,
  DescribeTrafficMirrorSessionsCommand,
  DescribeTrafficMirrorTargetsCommand,
  DescribeTransitGatewayAttachmentsCommand,
  DescribeTransitGatewayConnectPeersCommand,
  DescribeTransitGatewayConnectsCommand,
  DescribeTransitGatewayMulticastDomainsCommand,
  DescribeTransitGatewayPeeringAttachmentsCommand,
  DescribeTransitGatewayPolicyTablesCommand,
  DescribeTransitGatewayRouteTableAnnouncementsCommand,
  DescribeTransitGatewayRouteTablesCommand,
  DescribeTransitGatewaysCommand,
  DescribeTransitGatewayVpcAttachmentsCommand,
  DescribeTrunkInterfaceAssociationsCommand,
  DescribeVerifiedAccessEndpointsCommand,
  DescribeVerifiedAccessGroupsCommand,
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommand,
  DescribeVerifiedAccessInstancesCommand,
  DescribeVerifiedAccessTrustProvidersCommand,
  DescribeVolumeAttributeCommand,
  DescribeVolumesCommand,
  DescribeVolumesModificationsCommand,
  DescribeVolumeStatusCommand,
  DescribeVpcAttributeCommand,
  DescribeVpcBlockPublicAccessExclusionsCommand,
  DescribeVpcBlockPublicAccessOptionsCommand,
  DescribeVpcClassicLinkCommand,
  DescribeVpcClassicLinkDnsSupportCommand,
  DescribeVpcEndpointAssociationsCommand,
  DescribeVpcEndpointConnectionNotificationsCommand,
  DescribeVpcEndpointConnectionsCommand,
  DescribeVpcEndpointsCommand,
  DescribeVpcEndpointServiceConfigurationsCommand,
  DescribeVpcEndpointServicePermissionsCommand,
  DescribeVpcEndpointServicesCommand,
  DescribeVpcPeeringConnectionsCommand,
  DescribeVpcsCommand,
  DescribeVpnConnectionsCommand,
  DescribeVpnGatewaysCommand,
  DetachClassicLinkVpcCommand,
  DetachInternetGatewayCommand,
  DetachNetworkInterfaceCommand,
  DetachVerifiedAccessTrustProviderCommand,
  DetachVolumeCommand,
  DetachVpnGatewayCommand,
  DisableAddressTransferCommand,
  DisableAllowedImagesSettingsCommand,
  DisableAwsNetworkPerformanceMetricSubscriptionCommand,
  DisableEbsEncryptionByDefaultCommand,
  DisableFastLaunchCommand,
  DisableFastSnapshotRestoresCommand,
  DisableImageCommand,
  DisableImageBlockPublicAccessCommand,
  DisableImageDeprecationCommand,
  DisableImageDeregistrationProtectionCommand,
  DisableIpamOrganizationAdminAccountCommand,
  DisableSerialConsoleAccessCommand,
  DisableSnapshotBlockPublicAccessCommand,
  DisableTransitGatewayRouteTablePropagationCommand,
  DisableVgwRoutePropagationCommand,
  DisableVpcClassicLinkCommand,
  DisableVpcClassicLinkDnsSupportCommand,
  DisassociateAddressCommand,
  DisassociateCapacityReservationBillingOwnerCommand,
  DisassociateClientVpnTargetNetworkCommand,
  DisassociateEnclaveCertificateIamRoleCommand,
  DisassociateIamInstanceProfileCommand,
  DisassociateInstanceEventWindowCommand,
  DisassociateIpamByoasnCommand,
  DisassociateIpamResourceDiscoveryCommand,
  DisassociateNatGatewayAddressCommand,
  DisassociateRouteTableCommand,
  DisassociateSecurityGroupVpcCommand,
  DisassociateSubnetCidrBlockCommand,
  DisassociateTransitGatewayMulticastDomainCommand,
  DisassociateTransitGatewayPolicyTableCommand,
  DisassociateTransitGatewayRouteTableCommand,
  DisassociateTrunkInterfaceCommand,
  DisassociateVpcCidrBlockCommand,
  EnableAddressTransferCommand,
  EnableAllowedImagesSettingsCommand,
  EnableAwsNetworkPerformanceMetricSubscriptionCommand,
  EnableEbsEncryptionByDefaultCommand,
  EnableFastLaunchCommand,
  EnableFastSnapshotRestoresCommand,
  EnableImageCommand,
  EnableImageBlockPublicAccessCommand,
  EnableImageDeprecationCommand,
  EnableImageDeregistrationProtectionCommand,
  EnableIpamOrganizationAdminAccountCommand,
  EnableReachabilityAnalyzerOrganizationSharingCommand,
  EnableSerialConsoleAccessCommand,
  EnableSnapshotBlockPublicAccessCommand,
  EnableTransitGatewayRouteTablePropagationCommand,
  EnableVgwRoutePropagationCommand,
  EnableVolumeIOCommand,
  EnableVpcClassicLinkCommand,
  EnableVpcClassicLinkDnsSupportCommand,
  ExportClientVpnClientCertificateRevocationListCommand,
  ExportClientVpnClientConfigurationCommand,
  ExportImageCommand,
  ExportTransitGatewayRoutesCommand,
  ExportVerifiedAccessInstanceClientConfigurationCommand,
  GetAllowedImagesSettingsCommand,
  GetAssociatedEnclaveCertificateIamRolesCommand,
  GetAssociatedIpv6PoolCidrsCommand,
  GetAwsNetworkPerformanceDataCommand,
  GetCapacityReservationUsageCommand,
  GetCoipPoolUsageCommand,
  GetConsoleOutputCommand,
  GetConsoleScreenshotCommand,
  GetDeclarativePoliciesReportSummaryCommand,
  GetDefaultCreditSpecificationCommand,
  GetEbsDefaultKmsKeyIdCommand,
  GetEbsEncryptionByDefaultCommand,
  GetFlowLogsIntegrationTemplateCommand,
  GetGroupsForCapacityReservationCommand,
  GetHostReservationPurchasePreviewCommand,
  GetImageBlockPublicAccessStateCommand,
  GetInstanceMetadataDefaultsCommand,
  GetInstanceTpmEkPubCommand,
  GetInstanceTypesFromInstanceRequirementsCommand,
  GetInstanceUefiDataCommand,
  GetIpamAddressHistoryCommand,
  GetIpamDiscoveredAccountsCommand,
  GetIpamDiscoveredPublicAddressesCommand,
  GetIpamDiscoveredResourceCidrsCommand,
  GetIpamPoolAllocationsCommand,
  GetIpamPoolCidrsCommand,
  GetIpamResourceCidrsCommand,
  GetLaunchTemplateDataCommand,
  GetManagedPrefixListAssociationsCommand,
  GetManagedPrefixListEntriesCommand,
  GetNetworkInsightsAccessScopeAnalysisFindingsCommand,
  GetNetworkInsightsAccessScopeContentCommand,
  GetPasswordDataCommand,
  GetReservedInstancesExchangeQuoteCommand,
  GetSecurityGroupsForVpcCommand,
  GetSerialConsoleAccessStatusCommand,
  GetSnapshotBlockPublicAccessStateCommand,
  GetSpotPlacementScoresCommand,
  GetSubnetCidrReservationsCommand,
  GetTransitGatewayAttachmentPropagationsCommand,
  GetTransitGatewayMulticastDomainAssociationsCommand,
  GetTransitGatewayPolicyTableAssociationsCommand,
  GetTransitGatewayPolicyTableEntriesCommand,
  GetTransitGatewayPrefixListReferencesCommand,
  GetTransitGatewayRouteTableAssociationsCommand,
  GetTransitGatewayRouteTablePropagationsCommand,
  GetVerifiedAccessEndpointPolicyCommand,
  GetVerifiedAccessEndpointTargetsCommand,
  GetVerifiedAccessGroupPolicyCommand,
  GetVpnConnectionDeviceSampleConfigurationCommand,
  GetVpnConnectionDeviceTypesCommand,
  GetVpnTunnelReplacementStatusCommand,
  ImportClientVpnClientCertificateRevocationListCommand,
  ImportImageCommand,
  ImportInstanceCommand,
  ImportKeyPairCommand,
  ImportSnapshotCommand,
  ImportVolumeCommand,
  ListImagesInRecycleBinCommand,
  ListSnapshotsInRecycleBinCommand,
  LockSnapshotCommand,
  ModifyAddressAttributeCommand,
  ModifyAvailabilityZoneGroupCommand,
  ModifyCapacityReservationCommand,
  ModifyCapacityReservationFleetCommand,
  ModifyClientVpnEndpointCommand,
  ModifyDefaultCreditSpecificationCommand,
  ModifyEbsDefaultKmsKeyIdCommand,
  ModifyFleetCommand,
  ModifyFpgaImageAttributeCommand,
  ModifyHostsCommand,
  ModifyIdentityIdFormatCommand,
  ModifyIdFormatCommand,
  ModifyImageAttributeCommand,
  ModifyInstanceAttributeCommand,
  ModifyInstanceCapacityReservationAttributesCommand,
  ModifyInstanceCpuOptionsCommand,
  ModifyInstanceCreditSpecificationCommand,
  ModifyInstanceEventStartTimeCommand,
  ModifyInstanceEventWindowCommand,
  ModifyInstanceMaintenanceOptionsCommand,
  ModifyInstanceMetadataDefaultsCommand,
  ModifyInstanceMetadataOptionsCommand,
  ModifyInstanceNetworkPerformanceOptionsCommand,
  ModifyInstancePlacementCommand,
  ModifyIpamCommand,
  ModifyIpamPoolCommand,
  ModifyIpamResourceCidrCommand,
  ModifyIpamResourceDiscoveryCommand,
  ModifyIpamScopeCommand,
  ModifyLaunchTemplateCommand,
  ModifyLocalGatewayRouteCommand,
  ModifyManagedPrefixListCommand,
  ModifyNetworkInterfaceAttributeCommand,
  ModifyPrivateDnsNameOptionsCommand,
  ModifyReservedInstancesCommand,
  ModifySecurityGroupRulesCommand,
  ModifySnapshotAttributeCommand,
  ModifySnapshotTierCommand,
  ModifySpotFleetRequestCommand,
  ModifySubnetAttributeCommand,
  ModifyTrafficMirrorFilterNetworkServicesCommand,
  ModifyTrafficMirrorFilterRuleCommand,
  ModifyTrafficMirrorSessionCommand,
  ModifyTransitGatewayCommand,
  ModifyTransitGatewayPrefixListReferenceCommand,
  ModifyTransitGatewayVpcAttachmentCommand,
  ModifyVerifiedAccessEndpointCommand,
  ModifyVerifiedAccessEndpointPolicyCommand,
  ModifyVerifiedAccessGroupCommand,
  ModifyVerifiedAccessGroupPolicyCommand,
  ModifyVerifiedAccessInstanceCommand,
  ModifyVerifiedAccessInstanceLoggingConfigurationCommand,
  ModifyVerifiedAccessTrustProviderCommand,
  ModifyVolumeCommand,
  ModifyVolumeAttributeCommand,
  ModifyVpcAttributeCommand,
  ModifyVpcBlockPublicAccessExclusionCommand,
  ModifyVpcBlockPublicAccessOptionsCommand,
  ModifyVpcEndpointCommand,
  ModifyVpcEndpointConnectionNotificationCommand,
  ModifyVpcEndpointServiceConfigurationCommand,
  ModifyVpcEndpointServicePayerResponsibilityCommand,
  ModifyVpcEndpointServicePermissionsCommand,
  ModifyVpcPeeringConnectionOptionsCommand,
  ModifyVpcTenancyCommand,
  ModifyVpnConnectionCommand,
  ModifyVpnConnectionOptionsCommand,
  ModifyVpnTunnelCertificateCommand,
  ModifyVpnTunnelOptionsCommand,
  MonitorInstancesCommand,
  MoveAddressToVpcCommand,
  MoveByoipCidrToIpamCommand,
  MoveCapacityReservationInstancesCommand,
  ProvisionByoipCidrCommand,
  ProvisionIpamByoasnCommand,
  ProvisionIpamPoolCidrCommand,
  ProvisionPublicIpv4PoolCidrCommand,
  PurchaseCapacityBlockCommand,
  PurchaseCapacityBlockExtensionCommand,
  PurchaseHostReservationCommand,
  PurchaseReservedInstancesOfferingCommand,
  PurchaseScheduledInstancesCommand,
  RebootInstancesCommand,
  RegisterImageCommand,
  RegisterInstanceEventNotificationAttributesCommand,
  RegisterTransitGatewayMulticastGroupMembersCommand,
  RegisterTransitGatewayMulticastGroupSourcesCommand,
  RejectCapacityReservationBillingOwnershipCommand,
  RejectTransitGatewayMulticastDomainAssociationsCommand,
  RejectTransitGatewayPeeringAttachmentCommand,
  RejectTransitGatewayVpcAttachmentCommand,
  RejectVpcEndpointConnectionsCommand,
  RejectVpcPeeringConnectionCommand,
  ReleaseAddressCommand,
  ReleaseHostsCommand,
  ReleaseIpamPoolAllocationCommand,
  ReplaceIamInstanceProfileAssociationCommand,
  ReplaceImageCriteriaInAllowedImagesSettingsCommand,
  ReplaceNetworkAclAssociationCommand,
  ReplaceNetworkAclEntryCommand,
  ReplaceRouteCommand,
  ReplaceRouteTableAssociationCommand,
  ReplaceTransitGatewayRouteCommand,
  ReplaceVpnTunnelCommand,
  ReportInstanceStatusCommand,
  RequestSpotFleetCommand,
  RequestSpotInstancesCommand,
  ResetAddressAttributeCommand,
  ResetEbsDefaultKmsKeyIdCommand,
  ResetFpgaImageAttributeCommand,
  ResetImageAttributeCommand,
  ResetInstanceAttributeCommand,
  ResetNetworkInterfaceAttributeCommand,
  ResetSnapshotAttributeCommand,
  RestoreAddressToClassicCommand,
  RestoreImageFromRecycleBinCommand,
  RestoreManagedPrefixListVersionCommand,
  RestoreSnapshotFromRecycleBinCommand,
  RestoreSnapshotTierCommand,
  RevokeClientVpnIngressCommand,
  RevokeSecurityGroupEgressCommand,
  RevokeSecurityGroupIngressCommand,
  RunInstancesCommand,
  RunScheduledInstancesCommand,
  SearchLocalGatewayRoutesCommand,
  SearchTransitGatewayMulticastGroupsCommand,
  SearchTransitGatewayRoutesCommand,
  SendDiagnosticInterruptCommand,
  StartDeclarativePoliciesReportCommand,
  StartInstancesCommand,
  StartNetworkInsightsAccessScopeAnalysisCommand,
  StartNetworkInsightsAnalysisCommand,
  StartVpcEndpointServicePrivateDnsVerificationCommand,
  StopInstancesCommand,
  TerminateClientVpnConnectionsCommand,
  TerminateInstancesCommand,
  UnassignIpv6AddressesCommand,
  UnassignPrivateIpAddressesCommand,
  UnassignPrivateNatGatewayAddressCommand,
  UnlockSnapshotCommand,
  UnmonitorInstancesCommand,
  UpdateSecurityGroupRuleDescriptionsEgressCommand,
  UpdateSecurityGroupRuleDescriptionsIngressCommand,
  WithdrawByoipCidrCommand
};
var EC2 = class extends EC2Client {
};
createAggregatedClient(commands, EC2);

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeAddressTransfersPaginator.js
var paginateDescribeAddressTransfers = createPaginator(EC2Client, DescribeAddressTransfersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeAddressesAttributePaginator.js
var paginateDescribeAddressesAttribute = createPaginator(EC2Client, DescribeAddressesAttributeCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeAwsNetworkPerformanceMetricSubscriptionsPaginator.js
var paginateDescribeAwsNetworkPerformanceMetricSubscriptions = createPaginator(EC2Client, DescribeAwsNetworkPerformanceMetricSubscriptionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeByoipCidrsPaginator.js
var paginateDescribeByoipCidrs = createPaginator(EC2Client, DescribeByoipCidrsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityBlockExtensionHistoryPaginator.js
var paginateDescribeCapacityBlockExtensionHistory = createPaginator(EC2Client, DescribeCapacityBlockExtensionHistoryCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityBlockExtensionOfferingsPaginator.js
var paginateDescribeCapacityBlockExtensionOfferings = createPaginator(EC2Client, DescribeCapacityBlockExtensionOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityBlockOfferingsPaginator.js
var paginateDescribeCapacityBlockOfferings = createPaginator(EC2Client, DescribeCapacityBlockOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityReservationBillingRequestsPaginator.js
var paginateDescribeCapacityReservationBillingRequests = createPaginator(EC2Client, DescribeCapacityReservationBillingRequestsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityReservationFleetsPaginator.js
var paginateDescribeCapacityReservationFleets = createPaginator(EC2Client, DescribeCapacityReservationFleetsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCapacityReservationsPaginator.js
var paginateDescribeCapacityReservations = createPaginator(EC2Client, DescribeCapacityReservationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCarrierGatewaysPaginator.js
var paginateDescribeCarrierGateways = createPaginator(EC2Client, DescribeCarrierGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClassicLinkInstancesPaginator.js
var paginateDescribeClassicLinkInstances = createPaginator(EC2Client, DescribeClassicLinkInstancesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClientVpnAuthorizationRulesPaginator.js
var paginateDescribeClientVpnAuthorizationRules = createPaginator(EC2Client, DescribeClientVpnAuthorizationRulesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClientVpnConnectionsPaginator.js
var paginateDescribeClientVpnConnections = createPaginator(EC2Client, DescribeClientVpnConnectionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClientVpnEndpointsPaginator.js
var paginateDescribeClientVpnEndpoints = createPaginator(EC2Client, DescribeClientVpnEndpointsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClientVpnRoutesPaginator.js
var paginateDescribeClientVpnRoutes = createPaginator(EC2Client, DescribeClientVpnRoutesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeClientVpnTargetNetworksPaginator.js
var paginateDescribeClientVpnTargetNetworks = createPaginator(EC2Client, DescribeClientVpnTargetNetworksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeCoipPoolsPaginator.js
var paginateDescribeCoipPools = createPaginator(EC2Client, DescribeCoipPoolsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeDhcpOptionsPaginator.js
var paginateDescribeDhcpOptions = createPaginator(EC2Client, DescribeDhcpOptionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeEgressOnlyInternetGatewaysPaginator.js
var paginateDescribeEgressOnlyInternetGateways = createPaginator(EC2Client, DescribeEgressOnlyInternetGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeExportImageTasksPaginator.js
var paginateDescribeExportImageTasks = createPaginator(EC2Client, DescribeExportImageTasksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeFastLaunchImagesPaginator.js
var paginateDescribeFastLaunchImages = createPaginator(EC2Client, DescribeFastLaunchImagesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeFastSnapshotRestoresPaginator.js
var paginateDescribeFastSnapshotRestores = createPaginator(EC2Client, DescribeFastSnapshotRestoresCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeFleetsPaginator.js
var paginateDescribeFleets = createPaginator(EC2Client, DescribeFleetsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeFlowLogsPaginator.js
var paginateDescribeFlowLogs = createPaginator(EC2Client, DescribeFlowLogsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeFpgaImagesPaginator.js
var paginateDescribeFpgaImages = createPaginator(EC2Client, DescribeFpgaImagesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeHostReservationOfferingsPaginator.js
var paginateDescribeHostReservationOfferings = createPaginator(EC2Client, DescribeHostReservationOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeHostReservationsPaginator.js
var paginateDescribeHostReservations = createPaginator(EC2Client, DescribeHostReservationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeHostsPaginator.js
var paginateDescribeHosts = createPaginator(EC2Client, DescribeHostsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIamInstanceProfileAssociationsPaginator.js
var paginateDescribeIamInstanceProfileAssociations = createPaginator(EC2Client, DescribeIamInstanceProfileAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeImagesPaginator.js
var paginateDescribeImages = createPaginator(EC2Client, DescribeImagesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeImportImageTasksPaginator.js
var paginateDescribeImportImageTasks = createPaginator(EC2Client, DescribeImportImageTasksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeImportSnapshotTasksPaginator.js
var paginateDescribeImportSnapshotTasks = createPaginator(EC2Client, DescribeImportSnapshotTasksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceConnectEndpointsPaginator.js
var paginateDescribeInstanceConnectEndpoints = createPaginator(EC2Client, DescribeInstanceConnectEndpointsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceCreditSpecificationsPaginator.js
var paginateDescribeInstanceCreditSpecifications = createPaginator(EC2Client, DescribeInstanceCreditSpecificationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceEventWindowsPaginator.js
var paginateDescribeInstanceEventWindows = createPaginator(EC2Client, DescribeInstanceEventWindowsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceImageMetadataPaginator.js
var paginateDescribeInstanceImageMetadata = createPaginator(EC2Client, DescribeInstanceImageMetadataCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceStatusPaginator.js
var paginateDescribeInstanceStatus = createPaginator(EC2Client, DescribeInstanceStatusCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceTopologyPaginator.js
var paginateDescribeInstanceTopology = createPaginator(EC2Client, DescribeInstanceTopologyCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceTypeOfferingsPaginator.js
var paginateDescribeInstanceTypeOfferings = createPaginator(EC2Client, DescribeInstanceTypeOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstanceTypesPaginator.js
var paginateDescribeInstanceTypes = createPaginator(EC2Client, DescribeInstanceTypesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInstancesPaginator.js
var paginateDescribeInstances = createPaginator(EC2Client, DescribeInstancesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeInternetGatewaysPaginator.js
var paginateDescribeInternetGateways = createPaginator(EC2Client, DescribeInternetGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpamPoolsPaginator.js
var paginateDescribeIpamPools = createPaginator(EC2Client, DescribeIpamPoolsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpamResourceDiscoveriesPaginator.js
var paginateDescribeIpamResourceDiscoveries = createPaginator(EC2Client, DescribeIpamResourceDiscoveriesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpamResourceDiscoveryAssociationsPaginator.js
var paginateDescribeIpamResourceDiscoveryAssociations = createPaginator(EC2Client, DescribeIpamResourceDiscoveryAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpamScopesPaginator.js
var paginateDescribeIpamScopes = createPaginator(EC2Client, DescribeIpamScopesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpamsPaginator.js
var paginateDescribeIpams = createPaginator(EC2Client, DescribeIpamsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeIpv6PoolsPaginator.js
var paginateDescribeIpv6Pools = createPaginator(EC2Client, DescribeIpv6PoolsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLaunchTemplateVersionsPaginator.js
var paginateDescribeLaunchTemplateVersions = createPaginator(EC2Client, DescribeLaunchTemplateVersionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLaunchTemplatesPaginator.js
var paginateDescribeLaunchTemplates = createPaginator(EC2Client, DescribeLaunchTemplatesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginator.js
var paginateDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = createPaginator(EC2Client, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewayRouteTableVpcAssociationsPaginator.js
var paginateDescribeLocalGatewayRouteTableVpcAssociations = createPaginator(EC2Client, DescribeLocalGatewayRouteTableVpcAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewayRouteTablesPaginator.js
var paginateDescribeLocalGatewayRouteTables = createPaginator(EC2Client, DescribeLocalGatewayRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewayVirtualInterfaceGroupsPaginator.js
var paginateDescribeLocalGatewayVirtualInterfaceGroups = createPaginator(EC2Client, DescribeLocalGatewayVirtualInterfaceGroupsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewayVirtualInterfacesPaginator.js
var paginateDescribeLocalGatewayVirtualInterfaces = createPaginator(EC2Client, DescribeLocalGatewayVirtualInterfacesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeLocalGatewaysPaginator.js
var paginateDescribeLocalGateways = createPaginator(EC2Client, DescribeLocalGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeMacHostsPaginator.js
var paginateDescribeMacHosts = createPaginator(EC2Client, DescribeMacHostsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeManagedPrefixListsPaginator.js
var paginateDescribeManagedPrefixLists = createPaginator(EC2Client, DescribeManagedPrefixListsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeMovingAddressesPaginator.js
var paginateDescribeMovingAddresses = createPaginator(EC2Client, DescribeMovingAddressesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNatGatewaysPaginator.js
var paginateDescribeNatGateways = createPaginator(EC2Client, DescribeNatGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkAclsPaginator.js
var paginateDescribeNetworkAcls = createPaginator(EC2Client, DescribeNetworkAclsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInsightsAccessScopeAnalysesPaginator.js
var paginateDescribeNetworkInsightsAccessScopeAnalyses = createPaginator(EC2Client, DescribeNetworkInsightsAccessScopeAnalysesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInsightsAccessScopesPaginator.js
var paginateDescribeNetworkInsightsAccessScopes = createPaginator(EC2Client, DescribeNetworkInsightsAccessScopesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInsightsAnalysesPaginator.js
var paginateDescribeNetworkInsightsAnalyses = createPaginator(EC2Client, DescribeNetworkInsightsAnalysesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInsightsPathsPaginator.js
var paginateDescribeNetworkInsightsPaths = createPaginator(EC2Client, DescribeNetworkInsightsPathsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInterfacePermissionsPaginator.js
var paginateDescribeNetworkInterfacePermissions = createPaginator(EC2Client, DescribeNetworkInterfacePermissionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeNetworkInterfacesPaginator.js
var paginateDescribeNetworkInterfaces = createPaginator(EC2Client, DescribeNetworkInterfacesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribePrefixListsPaginator.js
var paginateDescribePrefixLists = createPaginator(EC2Client, DescribePrefixListsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribePrincipalIdFormatPaginator.js
var paginateDescribePrincipalIdFormat = createPaginator(EC2Client, DescribePrincipalIdFormatCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribePublicIpv4PoolsPaginator.js
var paginateDescribePublicIpv4Pools = createPaginator(EC2Client, DescribePublicIpv4PoolsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeReplaceRootVolumeTasksPaginator.js
var paginateDescribeReplaceRootVolumeTasks = createPaginator(EC2Client, DescribeReplaceRootVolumeTasksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeReservedInstancesModificationsPaginator.js
var paginateDescribeReservedInstancesModifications = createPaginator(EC2Client, DescribeReservedInstancesModificationsCommand, "NextToken", "NextToken", "");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeReservedInstancesOfferingsPaginator.js
var paginateDescribeReservedInstancesOfferings = createPaginator(EC2Client, DescribeReservedInstancesOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeRouteTablesPaginator.js
var paginateDescribeRouteTables = createPaginator(EC2Client, DescribeRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeScheduledInstanceAvailabilityPaginator.js
var paginateDescribeScheduledInstanceAvailability = createPaginator(EC2Client, DescribeScheduledInstanceAvailabilityCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeScheduledInstancesPaginator.js
var paginateDescribeScheduledInstances = createPaginator(EC2Client, DescribeScheduledInstancesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSecurityGroupRulesPaginator.js
var paginateDescribeSecurityGroupRules = createPaginator(EC2Client, DescribeSecurityGroupRulesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSecurityGroupVpcAssociationsPaginator.js
var paginateDescribeSecurityGroupVpcAssociations = createPaginator(EC2Client, DescribeSecurityGroupVpcAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSecurityGroupsPaginator.js
var paginateDescribeSecurityGroups = createPaginator(EC2Client, DescribeSecurityGroupsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSnapshotTierStatusPaginator.js
var paginateDescribeSnapshotTierStatus = createPaginator(EC2Client, DescribeSnapshotTierStatusCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSnapshotsPaginator.js
var paginateDescribeSnapshots = createPaginator(EC2Client, DescribeSnapshotsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSpotFleetRequestsPaginator.js
var paginateDescribeSpotFleetRequests = createPaginator(EC2Client, DescribeSpotFleetRequestsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSpotInstanceRequestsPaginator.js
var paginateDescribeSpotInstanceRequests = createPaginator(EC2Client, DescribeSpotInstanceRequestsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSpotPriceHistoryPaginator.js
var paginateDescribeSpotPriceHistory = createPaginator(EC2Client, DescribeSpotPriceHistoryCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeStaleSecurityGroupsPaginator.js
var paginateDescribeStaleSecurityGroups = createPaginator(EC2Client, DescribeStaleSecurityGroupsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeStoreImageTasksPaginator.js
var paginateDescribeStoreImageTasks = createPaginator(EC2Client, DescribeStoreImageTasksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeSubnetsPaginator.js
var paginateDescribeSubnets = createPaginator(EC2Client, DescribeSubnetsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTagsPaginator.js
var paginateDescribeTags = createPaginator(EC2Client, DescribeTagsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTrafficMirrorFiltersPaginator.js
var paginateDescribeTrafficMirrorFilters = createPaginator(EC2Client, DescribeTrafficMirrorFiltersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTrafficMirrorSessionsPaginator.js
var paginateDescribeTrafficMirrorSessions = createPaginator(EC2Client, DescribeTrafficMirrorSessionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTrafficMirrorTargetsPaginator.js
var paginateDescribeTrafficMirrorTargets = createPaginator(EC2Client, DescribeTrafficMirrorTargetsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayAttachmentsPaginator.js
var paginateDescribeTransitGatewayAttachments = createPaginator(EC2Client, DescribeTransitGatewayAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayConnectPeersPaginator.js
var paginateDescribeTransitGatewayConnectPeers = createPaginator(EC2Client, DescribeTransitGatewayConnectPeersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayConnectsPaginator.js
var paginateDescribeTransitGatewayConnects = createPaginator(EC2Client, DescribeTransitGatewayConnectsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayMulticastDomainsPaginator.js
var paginateDescribeTransitGatewayMulticastDomains = createPaginator(EC2Client, DescribeTransitGatewayMulticastDomainsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayPeeringAttachmentsPaginator.js
var paginateDescribeTransitGatewayPeeringAttachments = createPaginator(EC2Client, DescribeTransitGatewayPeeringAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayPolicyTablesPaginator.js
var paginateDescribeTransitGatewayPolicyTables = createPaginator(EC2Client, DescribeTransitGatewayPolicyTablesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayRouteTableAnnouncementsPaginator.js
var paginateDescribeTransitGatewayRouteTableAnnouncements = createPaginator(EC2Client, DescribeTransitGatewayRouteTableAnnouncementsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayRouteTablesPaginator.js
var paginateDescribeTransitGatewayRouteTables = createPaginator(EC2Client, DescribeTransitGatewayRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewayVpcAttachmentsPaginator.js
var paginateDescribeTransitGatewayVpcAttachments = createPaginator(EC2Client, DescribeTransitGatewayVpcAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTransitGatewaysPaginator.js
var paginateDescribeTransitGateways = createPaginator(EC2Client, DescribeTransitGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeTrunkInterfaceAssociationsPaginator.js
var paginateDescribeTrunkInterfaceAssociations = createPaginator(EC2Client, DescribeTrunkInterfaceAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVerifiedAccessEndpointsPaginator.js
var paginateDescribeVerifiedAccessEndpoints = createPaginator(EC2Client, DescribeVerifiedAccessEndpointsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVerifiedAccessGroupsPaginator.js
var paginateDescribeVerifiedAccessGroups = createPaginator(EC2Client, DescribeVerifiedAccessGroupsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVerifiedAccessInstanceLoggingConfigurationsPaginator.js
var paginateDescribeVerifiedAccessInstanceLoggingConfigurations = createPaginator(EC2Client, DescribeVerifiedAccessInstanceLoggingConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVerifiedAccessInstancesPaginator.js
var paginateDescribeVerifiedAccessInstances = createPaginator(EC2Client, DescribeVerifiedAccessInstancesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVerifiedAccessTrustProvidersPaginator.js
var paginateDescribeVerifiedAccessTrustProviders = createPaginator(EC2Client, DescribeVerifiedAccessTrustProvidersCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVolumeStatusPaginator.js
var paginateDescribeVolumeStatus = createPaginator(EC2Client, DescribeVolumeStatusCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVolumesModificationsPaginator.js
var paginateDescribeVolumesModifications = createPaginator(EC2Client, DescribeVolumesModificationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVolumesPaginator.js
var paginateDescribeVolumes = createPaginator(EC2Client, DescribeVolumesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcClassicLinkDnsSupportPaginator.js
var paginateDescribeVpcClassicLinkDnsSupport = createPaginator(EC2Client, DescribeVpcClassicLinkDnsSupportCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcEndpointConnectionNotificationsPaginator.js
var paginateDescribeVpcEndpointConnectionNotifications = createPaginator(EC2Client, DescribeVpcEndpointConnectionNotificationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcEndpointConnectionsPaginator.js
var paginateDescribeVpcEndpointConnections = createPaginator(EC2Client, DescribeVpcEndpointConnectionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcEndpointServiceConfigurationsPaginator.js
var paginateDescribeVpcEndpointServiceConfigurations = createPaginator(EC2Client, DescribeVpcEndpointServiceConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcEndpointServicePermissionsPaginator.js
var paginateDescribeVpcEndpointServicePermissions = createPaginator(EC2Client, DescribeVpcEndpointServicePermissionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcEndpointsPaginator.js
var paginateDescribeVpcEndpoints = createPaginator(EC2Client, DescribeVpcEndpointsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcPeeringConnectionsPaginator.js
var paginateDescribeVpcPeeringConnections = createPaginator(EC2Client, DescribeVpcPeeringConnectionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/DescribeVpcsPaginator.js
var paginateDescribeVpcs = createPaginator(EC2Client, DescribeVpcsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetAssociatedIpv6PoolCidrsPaginator.js
var paginateGetAssociatedIpv6PoolCidrs = createPaginator(EC2Client, GetAssociatedIpv6PoolCidrsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetAwsNetworkPerformanceDataPaginator.js
var paginateGetAwsNetworkPerformanceData = createPaginator(EC2Client, GetAwsNetworkPerformanceDataCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetGroupsForCapacityReservationPaginator.js
var paginateGetGroupsForCapacityReservation = createPaginator(EC2Client, GetGroupsForCapacityReservationCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetInstanceTypesFromInstanceRequirementsPaginator.js
var paginateGetInstanceTypesFromInstanceRequirements = createPaginator(EC2Client, GetInstanceTypesFromInstanceRequirementsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamAddressHistoryPaginator.js
var paginateGetIpamAddressHistory = createPaginator(EC2Client, GetIpamAddressHistoryCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamDiscoveredAccountsPaginator.js
var paginateGetIpamDiscoveredAccounts = createPaginator(EC2Client, GetIpamDiscoveredAccountsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamDiscoveredResourceCidrsPaginator.js
var paginateGetIpamDiscoveredResourceCidrs = createPaginator(EC2Client, GetIpamDiscoveredResourceCidrsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamPoolAllocationsPaginator.js
var paginateGetIpamPoolAllocations = createPaginator(EC2Client, GetIpamPoolAllocationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamPoolCidrsPaginator.js
var paginateGetIpamPoolCidrs = createPaginator(EC2Client, GetIpamPoolCidrsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetIpamResourceCidrsPaginator.js
var paginateGetIpamResourceCidrs = createPaginator(EC2Client, GetIpamResourceCidrsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetManagedPrefixListAssociationsPaginator.js
var paginateGetManagedPrefixListAssociations = createPaginator(EC2Client, GetManagedPrefixListAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetManagedPrefixListEntriesPaginator.js
var paginateGetManagedPrefixListEntries = createPaginator(EC2Client, GetManagedPrefixListEntriesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetNetworkInsightsAccessScopeAnalysisFindingsPaginator.js
var paginateGetNetworkInsightsAccessScopeAnalysisFindings = createPaginator(EC2Client, GetNetworkInsightsAccessScopeAnalysisFindingsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetSecurityGroupsForVpcPaginator.js
var paginateGetSecurityGroupsForVpc = createPaginator(EC2Client, GetSecurityGroupsForVpcCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetSpotPlacementScoresPaginator.js
var paginateGetSpotPlacementScores = createPaginator(EC2Client, GetSpotPlacementScoresCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayAttachmentPropagationsPaginator.js
var paginateGetTransitGatewayAttachmentPropagations = createPaginator(EC2Client, GetTransitGatewayAttachmentPropagationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayMulticastDomainAssociationsPaginator.js
var paginateGetTransitGatewayMulticastDomainAssociations = createPaginator(EC2Client, GetTransitGatewayMulticastDomainAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayPolicyTableAssociationsPaginator.js
var paginateGetTransitGatewayPolicyTableAssociations = createPaginator(EC2Client, GetTransitGatewayPolicyTableAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayPrefixListReferencesPaginator.js
var paginateGetTransitGatewayPrefixListReferences = createPaginator(EC2Client, GetTransitGatewayPrefixListReferencesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayRouteTableAssociationsPaginator.js
var paginateGetTransitGatewayRouteTableAssociations = createPaginator(EC2Client, GetTransitGatewayRouteTableAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetTransitGatewayRouteTablePropagationsPaginator.js
var paginateGetTransitGatewayRouteTablePropagations = createPaginator(EC2Client, GetTransitGatewayRouteTablePropagationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/GetVpnConnectionDeviceTypesPaginator.js
var paginateGetVpnConnectionDeviceTypes = createPaginator(EC2Client, GetVpnConnectionDeviceTypesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/ListImagesInRecycleBinPaginator.js
var paginateListImagesInRecycleBin = createPaginator(EC2Client, ListImagesInRecycleBinCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/ListSnapshotsInRecycleBinPaginator.js
var paginateListSnapshotsInRecycleBin = createPaginator(EC2Client, ListSnapshotsInRecycleBinCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/SearchLocalGatewayRoutesPaginator.js
var paginateSearchLocalGatewayRoutes = createPaginator(EC2Client, SearchLocalGatewayRoutesCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/pagination/SearchTransitGatewayMulticastGroupsPaginator.js
var paginateSearchTransitGatewayMulticastGroups = createPaginator(EC2Client, SearchTransitGatewayMulticastGroupsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForBundleTaskComplete.js
var checkState = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeBundleTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.BundleTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "complete";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.BundleTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "failed") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForBundleTaskComplete = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
var waitUntilBundleTaskComplete = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForConversionTaskCancelled.js
var checkState2 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeConversionTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ConversionTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "cancelled";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForConversionTaskCancelled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
};
var waitUntilConversionTaskCancelled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState2);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForConversionTaskCompleted.js
var checkState3 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeConversionTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ConversionTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "completed";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ConversionTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "cancelled") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ConversionTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "cancelling") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForConversionTaskCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
};
var waitUntilConversionTaskCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState3);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForConversionTaskDeleted.js
var checkState4 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeConversionTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ConversionTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForConversionTaskDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState4);
};
var waitUntilConversionTaskDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState4);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForCustomerGatewayAvailable.js
var checkState5 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeCustomerGatewaysCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.CustomerGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.CustomerGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.CustomerGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleting") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForCustomerGatewayAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState5);
};
var waitUntilCustomerGatewayAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState5);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForExportTaskCancelled.js
var checkState6 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeExportTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ExportTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "cancelled";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForExportTaskCancelled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState6);
};
var waitUntilExportTaskCancelled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState6);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForExportTaskCompleted.js
var checkState7 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeExportTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ExportTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "completed";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForExportTaskCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState7);
};
var waitUntilExportTaskCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState7);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForImageAvailable.js
var checkState8 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeImagesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Images);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Images);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "failed") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForImageAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState8);
};
var waitUntilImageAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState8);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForImageExists.js
var checkState9 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeImagesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Images);
        return flat_1.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidAMIID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForImageExists = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState9);
};
var waitUntilImageExists = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState9);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInstanceExists.js
var checkState10 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        return flat_1.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState10);
};
var waitUntilInstanceExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState10);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInstanceRunning.js
var checkState11 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      let allStringEq_8 = returnComparator().length > 0;
      for (const element_7 of returnComparator()) {
        allStringEq_8 = allStringEq_8 && element_7 == "running";
      }
      if (allStringEq_8) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "shutting-down") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "terminated") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "stopping") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceRunning = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState11);
};
var waitUntilInstanceRunning = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState11);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInstanceStatusOk.js
var checkState12 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstanceStatusCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.InstanceStatuses);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.InstanceStatus.Status;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "ok";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceStatusOk = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState12);
};
var waitUntilInstanceStatusOk = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState12);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInstanceStopped.js
var checkState13 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      let allStringEq_8 = returnComparator().length > 0;
      for (const element_7 of returnComparator()) {
        allStringEq_8 = allStringEq_8 && element_7 == "stopped";
      }
      if (allStringEq_8) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "pending") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "terminated") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceStopped = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState13);
};
var waitUntilInstanceStopped = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState13);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInstanceTerminated.js
var checkState14 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstancesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      let allStringEq_8 = returnComparator().length > 0;
      for (const element_7 of returnComparator()) {
        allStringEq_8 = allStringEq_8 && element_7 == "terminated";
      }
      if (allStringEq_8) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "pending") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Reservations);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Instances;
        });
        const flat_4 = [].concat(...projection_3);
        const projection_6 = flat_4.map((element_5) => {
          return element_5.State.Name;
        });
        return projection_6;
      };
      for (const anyStringEq_7 of returnComparator()) {
        if (anyStringEq_7 == "stopping") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInstanceTerminated = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState14);
};
var waitUntilInstanceTerminated = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState14);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForInternetGatewayExists.js
var checkState15 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInternetGatewaysCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.InternetGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.InternetGatewayId;
        });
        return projection_3.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidInternetGateway.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForInternetGatewayExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState15);
};
var waitUntilInternetGatewayExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState15);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForKeyPairExists.js
var checkState16 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeKeyPairsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.KeyPairs);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.KeyName;
        });
        return projection_3.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidKeyPair.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForKeyPairExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState16);
};
var waitUntilKeyPairExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState16);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForNatGatewayAvailable.js
var checkState17 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeNatGatewaysCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NatGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NatGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "failed") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NatGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleting") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NatGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NatGatewayNotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForNatGatewayAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState17);
};
var waitUntilNatGatewayAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState17);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForNatGatewayDeleted.js
var checkState18 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeNatGatewaysCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NatGateways);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NatGatewayNotFound") {
      return { state: WaiterState.SUCCESS, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForNatGatewayDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState18);
};
var waitUntilNatGatewayDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState18);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForNetworkInterfaceAvailable.js
var checkState19 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeNetworkInterfacesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.NetworkInterfaces);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidNetworkInterfaceID.NotFound") {
      return { state: WaiterState.FAILURE, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForNetworkInterfaceAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 20, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState19);
};
var waitUntilNetworkInterfaceAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 20, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState19);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSnapshotImported.js
var checkState20 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeImportSnapshotTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ImportSnapshotTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.SnapshotTaskDetail.Status;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "completed";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.ImportSnapshotTasks);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.SnapshotTaskDetail.Status;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "error") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSnapshotImported = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState20);
};
var waitUntilSnapshotImported = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState20);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSecurityGroupExists.js
var checkState21 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeSecurityGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SecurityGroups);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.GroupId;
        });
        return projection_3.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidGroup.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSecurityGroupExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState21);
};
var waitUntilSecurityGroupExists = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState21);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSnapshotCompleted.js
var checkState22 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeSnapshotsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Snapshots);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "completed";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Snapshots);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "error") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSnapshotCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState22);
};
var waitUntilSnapshotCompleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState22);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSpotInstanceRequestFulfilled.js
var checkState23 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeSpotInstanceRequestsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "fulfilled";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "request-canceled-and-instance-running";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "schedule-expired") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "canceled-before-fulfillment") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "bad-parameters") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.SpotInstanceRequests);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "system-error") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidSpotInstanceRequestID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSpotInstanceRequestFulfilled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState23);
};
var waitUntilSpotInstanceRequestFulfilled = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState23);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForStoreImageTaskComplete.js
var checkState24 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeStoreImageTasksCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.StoreImageTaskResults);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.StoreTaskState;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "Completed";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.StoreImageTaskResults);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.StoreTaskState;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "Failed") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.StoreImageTaskResults);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.StoreTaskState;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "InProgress") {
          return { state: WaiterState.RETRY, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForStoreImageTaskComplete = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState24);
};
var waitUntilStoreImageTaskComplete = async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState24);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSubnetAvailable.js
var checkState25 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeSubnetsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Subnets);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSubnetAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState25);
};
var waitUntilSubnetAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState25);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForSystemStatusOk.js
var checkState26 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInstanceStatusCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.InstanceStatuses);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.SystemStatus.Status;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "ok";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForSystemStatusOk = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState26);
};
var waitUntilSystemStatusOk = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState26);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForPasswordDataAvailable.js
var checkState27 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetPasswordDataCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        return result.PasswordData.length > 0;
      };
      if (returnComparator() == true) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForPasswordDataAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState27);
};
var waitUntilPasswordDataAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState27);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVolumeAvailable.js
var checkState28 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVolumesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Volumes);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Volumes);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVolumeAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState28);
};
var waitUntilVolumeAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState28);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVolumeDeleted.js
var checkState29 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVolumesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Volumes);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidVolume.NotFound") {
      return { state: WaiterState.SUCCESS, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVolumeDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState29);
};
var waitUntilVolumeDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState29);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVolumeInUse.js
var checkState30 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVolumesCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Volumes);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "in-use";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Volumes);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVolumeInUse = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState30);
};
var waitUntilVolumeInUse = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState30);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpcAvailable.js
var checkState31 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpcsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.Vpcs);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpcAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState31);
};
var waitUntilVpcAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState31);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpcExists.js
var checkState32 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpcsCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidVpcID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpcExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState32);
};
var waitUntilVpcExists = async (params, input) => {
  const serviceDefaults = { minDelay: 1, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState32);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpcPeeringConnectionDeleted.js
var checkState33 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpcPeeringConnectionsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpcPeeringConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status.Code;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidVpcPeeringConnectionID.NotFound") {
      return { state: WaiterState.SUCCESS, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpcPeeringConnectionDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState33);
};
var waitUntilVpcPeeringConnectionDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState33);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpcPeeringConnectionExists.js
var checkState34 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpcPeeringConnectionsCommand(input));
    reason = result;
    return { state: WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidVpcPeeringConnectionID.NotFound") {
      return { state: WaiterState.RETRY, reason };
    }
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpcPeeringConnectionExists = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState34);
};
var waitUntilVpcPeeringConnectionExists = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState34);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpnConnectionAvailable.js
var checkState35 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpnConnectionsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpnConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpnConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleting") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpnConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpnConnectionAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState35);
};
var waitUntilVpnConnectionAvailable = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState35);
  return checkExceptions(result);
};

// node_modules/@aws-sdk/client-ec2/dist-es/waiters/waitForVpnConnectionDeleted.js
var checkState36 = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeVpnConnectionsCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpnConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
    try {
      const returnComparator = () => {
        const flat_1 = [].concat(...result.VpnConnections);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State;
        });
        return projection_3;
      };
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "pending") {
          return { state: WaiterState.FAILURE, reason };
        }
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForVpnConnectionDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState36);
};
var waitUntilVpnConnectionDeleted = async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState36);
  return checkExceptions(result);
};
export {
  Command as $Command,
  AcceleratorManufacturer,
  AcceleratorName,
  AcceleratorType,
  AcceptAddressTransferCommand,
  AcceptCapacityReservationBillingOwnershipCommand,
  AcceptReservedInstancesExchangeQuoteCommand,
  AcceptTransitGatewayMulticastDomainAssociationsCommand,
  AcceptTransitGatewayPeeringAttachmentCommand,
  AcceptTransitGatewayVpcAttachmentCommand,
  AcceptVpcEndpointConnectionsCommand,
  AcceptVpcPeeringConnectionCommand,
  AccountAttributeName,
  ActivityStatus,
  AddressAttributeName,
  AddressFamily,
  AddressTransferStatus,
  AdvertiseByoipCidrCommand,
  Affinity,
  AllocateAddressCommand,
  AllocateHostsCommand,
  AllocateIpamPoolCidrCommand,
  AllocationState,
  AllocationStrategy,
  AllocationType,
  AllowedImagesSettingsDisabledState,
  AllowedImagesSettingsEnabledState,
  AllowsMultipleInstanceTypes,
  AmdSevSnpSpecification,
  AnalysisStatus,
  ApplianceModeSupportValue,
  ApplySecurityGroupsToClientVpnTargetNetworkCommand,
  ArchitectureType,
  ArchitectureValues,
  AsnAssociationState,
  AsnState,
  AssignIpv6AddressesCommand,
  AssignPrivateIpAddressesCommand,
  AssignPrivateNatGatewayAddressCommand,
  AssociateAddressCommand,
  AssociateCapacityReservationBillingOwnerCommand,
  AssociateClientVpnTargetNetworkCommand,
  AssociateDhcpOptionsCommand,
  AssociateEnclaveCertificateIamRoleCommand,
  AssociateIamInstanceProfileCommand,
  AssociateInstanceEventWindowCommand,
  AssociateIpamByoasnCommand,
  AssociateIpamResourceDiscoveryCommand,
  AssociateNatGatewayAddressCommand,
  AssociateRouteTableCommand,
  AssociateSecurityGroupVpcCommand,
  AssociateSubnetCidrBlockCommand,
  AssociateTransitGatewayMulticastDomainCommand,
  AssociateTransitGatewayPolicyTableCommand,
  AssociateTransitGatewayRouteTableCommand,
  AssociateTrunkInterfaceCommand,
  AssociateVpcCidrBlockCommand,
  AssociatedNetworkType,
  AssociationStatusCode,
  AttachClassicLinkVpcCommand,
  AttachInternetGatewayCommand,
  AttachNetworkInterfaceCommand,
  AttachVerifiedAccessTrustProviderCommand,
  AttachVerifiedAccessTrustProviderResultFilterSensitiveLog,
  AttachVolumeCommand,
  AttachVpnGatewayCommand,
  AttachmentStatus,
  AuthorizeClientVpnIngressCommand,
  AuthorizeSecurityGroupEgressCommand,
  AuthorizeSecurityGroupIngressCommand,
  AutoAcceptSharedAssociationsValue,
  AutoAcceptSharedAttachmentsValue,
  AutoPlacement,
  AvailabilityZoneOptInStatus,
  AvailabilityZoneState,
  BandwidthWeightingType,
  BareMetal,
  BatchState,
  BgpStatus,
  BlockPublicAccessMode,
  BootModeType,
  BootModeValues,
  BundleInstanceCommand,
  BundleInstanceRequestFilterSensitiveLog,
  BundleInstanceResultFilterSensitiveLog,
  BundleTaskFilterSensitiveLog,
  BundleTaskState,
  BurstablePerformance,
  ByoipCidrState,
  CallerRole,
  CancelBatchErrorCode,
  CancelBundleTaskCommand,
  CancelBundleTaskResultFilterSensitiveLog,
  CancelCapacityReservationCommand,
  CancelCapacityReservationFleetsCommand,
  CancelConversionTaskCommand,
  CancelDeclarativePoliciesReportCommand,
  CancelExportTaskCommand,
  CancelImageLaunchPermissionCommand,
  CancelImportTaskCommand,
  CancelReservedInstancesListingCommand,
  CancelSpotFleetRequestsCommand,
  CancelSpotInstanceRequestState,
  CancelSpotInstanceRequestsCommand,
  CapacityBlockExtensionStatus,
  CapacityReservationBillingRequestStatus,
  CapacityReservationDeliveryPreference,
  CapacityReservationFleetState,
  CapacityReservationInstancePlatform,
  CapacityReservationPreference,
  CapacityReservationState,
  CapacityReservationTenancy,
  CapacityReservationType,
  CarrierGatewayState,
  ClientCertificateRevocationListStatusCode,
  ClientVpnAuthenticationType,
  ClientVpnAuthorizationRuleStatusCode,
  ClientVpnConnectionStatusCode,
  ClientVpnEndpointAttributeStatusCode,
  ClientVpnEndpointStatusCode,
  ClientVpnRouteStatusCode,
  ConfirmProductInstanceCommand,
  ConnectionNotificationState,
  ConnectionNotificationType,
  ConnectivityType,
  ContainerFormat,
  ConversionTaskFilterSensitiveLog,
  ConversionTaskState,
  CopyFpgaImageCommand,
  CopyImageCommand,
  CopySnapshotCommand,
  CopySnapshotRequestFilterSensitiveLog,
  CopyTagsFromSource,
  CpuManufacturer,
  CreateCapacityReservationBySplittingCommand,
  CreateCapacityReservationCommand,
  CreateCapacityReservationFleetCommand,
  CreateCarrierGatewayCommand,
  CreateClientVpnEndpointCommand,
  CreateClientVpnRouteCommand,
  CreateCoipCidrCommand,
  CreateCoipPoolCommand,
  CreateCustomerGatewayCommand,
  CreateDefaultSubnetCommand,
  CreateDefaultVpcCommand,
  CreateDhcpOptionsCommand,
  CreateEgressOnlyInternetGatewayCommand,
  CreateFleetCommand,
  CreateFlowLogsCommand,
  CreateFpgaImageCommand,
  CreateImageCommand,
  CreateInstanceConnectEndpointCommand,
  CreateInstanceEventWindowCommand,
  CreateInstanceExportTaskCommand,
  CreateInternetGatewayCommand,
  CreateIpamCommand,
  CreateIpamExternalResourceVerificationTokenCommand,
  CreateIpamPoolCommand,
  CreateIpamResourceDiscoveryCommand,
  CreateIpamScopeCommand,
  CreateKeyPairCommand,
  CreateLaunchTemplateCommand,
  CreateLaunchTemplateRequestFilterSensitiveLog,
  CreateLaunchTemplateVersionCommand,
  CreateLaunchTemplateVersionRequestFilterSensitiveLog,
  CreateLaunchTemplateVersionResultFilterSensitiveLog,
  CreateLocalGatewayRouteCommand,
  CreateLocalGatewayRouteTableCommand,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
  CreateLocalGatewayRouteTableVpcAssociationCommand,
  CreateManagedPrefixListCommand,
  CreateNatGatewayCommand,
  CreateNetworkAclCommand,
  CreateNetworkAclEntryCommand,
  CreateNetworkInsightsAccessScopeCommand,
  CreateNetworkInsightsPathCommand,
  CreateNetworkInterfaceCommand,
  CreateNetworkInterfacePermissionCommand,
  CreatePlacementGroupCommand,
  CreatePublicIpv4PoolCommand,
  CreateReplaceRootVolumeTaskCommand,
  CreateReservedInstancesListingCommand,
  CreateRestoreImageTaskCommand,
  CreateRouteCommand,
  CreateRouteTableCommand,
  CreateSecurityGroupCommand,
  CreateSnapshotCommand,
  CreateSnapshotsCommand,
  CreateSpotDatafeedSubscriptionCommand,
  CreateStoreImageTaskCommand,
  CreateSubnetCidrReservationCommand,
  CreateSubnetCommand,
  CreateTagsCommand,
  CreateTrafficMirrorFilterCommand,
  CreateTrafficMirrorFilterRuleCommand,
  CreateTrafficMirrorSessionCommand,
  CreateTrafficMirrorTargetCommand,
  CreateTransitGatewayCommand,
  CreateTransitGatewayConnectCommand,
  CreateTransitGatewayConnectPeerCommand,
  CreateTransitGatewayMulticastDomainCommand,
  CreateTransitGatewayPeeringAttachmentCommand,
  CreateTransitGatewayPolicyTableCommand,
  CreateTransitGatewayPrefixListReferenceCommand,
  CreateTransitGatewayRouteCommand,
  CreateTransitGatewayRouteTableAnnouncementCommand,
  CreateTransitGatewayRouteTableCommand,
  CreateTransitGatewayVpcAttachmentCommand,
  CreateVerifiedAccessEndpointCommand,
  CreateVerifiedAccessGroupCommand,
  CreateVerifiedAccessInstanceCommand,
  CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog,
  CreateVerifiedAccessTrustProviderCommand,
  CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog,
  CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog,
  CreateVerifiedAccessTrustProviderResultFilterSensitiveLog,
  CreateVolumeCommand,
  CreateVpcBlockPublicAccessExclusionCommand,
  CreateVpcCommand,
  CreateVpcEndpointCommand,
  CreateVpcEndpointConnectionNotificationCommand,
  CreateVpcEndpointServiceConfigurationCommand,
  CreateVpcPeeringConnectionCommand,
  CreateVpnConnectionCommand,
  CreateVpnConnectionRequestFilterSensitiveLog,
  CreateVpnConnectionResultFilterSensitiveLog,
  CreateVpnConnectionRouteCommand,
  CreateVpnGatewayCommand,
  CurrencyCodeValues,
  DatafeedSubscriptionState,
  DefaultInstanceMetadataEndpointState,
  DefaultInstanceMetadataTagsState,
  DefaultRouteTableAssociationValue,
  DefaultRouteTablePropagationValue,
  DefaultTargetCapacityType,
  DeleteCarrierGatewayCommand,
  DeleteClientVpnEndpointCommand,
  DeleteClientVpnRouteCommand,
  DeleteCoipCidrCommand,
  DeleteCoipPoolCommand,
  DeleteCustomerGatewayCommand,
  DeleteDhcpOptionsCommand,
  DeleteEgressOnlyInternetGatewayCommand,
  DeleteFleetErrorCode,
  DeleteFleetsCommand,
  DeleteFlowLogsCommand,
  DeleteFpgaImageCommand,
  DeleteInstanceConnectEndpointCommand,
  DeleteInstanceEventWindowCommand,
  DeleteInternetGatewayCommand,
  DeleteIpamCommand,
  DeleteIpamExternalResourceVerificationTokenCommand,
  DeleteIpamPoolCommand,
  DeleteIpamResourceDiscoveryCommand,
  DeleteIpamScopeCommand,
  DeleteKeyPairCommand,
  DeleteLaunchTemplateCommand,
  DeleteLaunchTemplateVersionsCommand,
  DeleteLocalGatewayRouteCommand,
  DeleteLocalGatewayRouteTableCommand,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
  DeleteLocalGatewayRouteTableVpcAssociationCommand,
  DeleteManagedPrefixListCommand,
  DeleteNatGatewayCommand,
  DeleteNetworkAclCommand,
  DeleteNetworkAclEntryCommand,
  DeleteNetworkInsightsAccessScopeAnalysisCommand,
  DeleteNetworkInsightsAccessScopeCommand,
  DeleteNetworkInsightsAnalysisCommand,
  DeleteNetworkInsightsPathCommand,
  DeleteNetworkInterfaceCommand,
  DeleteNetworkInterfacePermissionCommand,
  DeletePlacementGroupCommand,
  DeletePublicIpv4PoolCommand,
  DeleteQueuedReservedInstancesCommand,
  DeleteQueuedReservedInstancesErrorCode,
  DeleteRouteCommand,
  DeleteRouteTableCommand,
  DeleteSecurityGroupCommand,
  DeleteSnapshotCommand,
  DeleteSpotDatafeedSubscriptionCommand,
  DeleteSubnetCidrReservationCommand,
  DeleteSubnetCommand,
  DeleteTagsCommand,
  DeleteTrafficMirrorFilterCommand,
  DeleteTrafficMirrorFilterRuleCommand,
  DeleteTrafficMirrorSessionCommand,
  DeleteTrafficMirrorTargetCommand,
  DeleteTransitGatewayCommand,
  DeleteTransitGatewayConnectCommand,
  DeleteTransitGatewayConnectPeerCommand,
  DeleteTransitGatewayMulticastDomainCommand,
  DeleteTransitGatewayPeeringAttachmentCommand,
  DeleteTransitGatewayPolicyTableCommand,
  DeleteTransitGatewayPrefixListReferenceCommand,
  DeleteTransitGatewayRouteCommand,
  DeleteTransitGatewayRouteTableAnnouncementCommand,
  DeleteTransitGatewayRouteTableCommand,
  DeleteTransitGatewayVpcAttachmentCommand,
  DeleteVerifiedAccessEndpointCommand,
  DeleteVerifiedAccessGroupCommand,
  DeleteVerifiedAccessInstanceCommand,
  DeleteVerifiedAccessTrustProviderCommand,
  DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog,
  DeleteVolumeCommand,
  DeleteVpcBlockPublicAccessExclusionCommand,
  DeleteVpcCommand,
  DeleteVpcEndpointConnectionNotificationsCommand,
  DeleteVpcEndpointServiceConfigurationsCommand,
  DeleteVpcEndpointsCommand,
  DeleteVpcPeeringConnectionCommand,
  DeleteVpnConnectionCommand,
  DeleteVpnConnectionRouteCommand,
  DeleteVpnGatewayCommand,
  DeprovisionByoipCidrCommand,
  DeprovisionIpamByoasnCommand,
  DeprovisionIpamPoolCidrCommand,
  DeprovisionPublicIpv4PoolCidrCommand,
  DeregisterImageCommand,
  DeregisterInstanceEventNotificationAttributesCommand,
  DeregisterTransitGatewayMulticastGroupMembersCommand,
  DeregisterTransitGatewayMulticastGroupSourcesCommand,
  DescribeAccountAttributesCommand,
  DescribeAddressTransfersCommand,
  DescribeAddressesAttributeCommand,
  DescribeAddressesCommand,
  DescribeAggregateIdFormatCommand,
  DescribeAvailabilityZonesCommand,
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommand,
  DescribeBundleTasksCommand,
  DescribeBundleTasksResultFilterSensitiveLog,
  DescribeByoipCidrsCommand,
  DescribeCapacityBlockExtensionHistoryCommand,
  DescribeCapacityBlockExtensionOfferingsCommand,
  DescribeCapacityBlockOfferingsCommand,
  DescribeCapacityReservationBillingRequestsCommand,
  DescribeCapacityReservationFleetsCommand,
  DescribeCapacityReservationsCommand,
  DescribeCarrierGatewaysCommand,
  DescribeClassicLinkInstancesCommand,
  DescribeClientVpnAuthorizationRulesCommand,
  DescribeClientVpnConnectionsCommand,
  DescribeClientVpnEndpointsCommand,
  DescribeClientVpnRoutesCommand,
  DescribeClientVpnTargetNetworksCommand,
  DescribeCoipPoolsCommand,
  DescribeConversionTasksCommand,
  DescribeConversionTasksResultFilterSensitiveLog,
  DescribeCustomerGatewaysCommand,
  DescribeDeclarativePoliciesReportsCommand,
  DescribeDhcpOptionsCommand,
  DescribeEgressOnlyInternetGatewaysCommand,
  DescribeElasticGpusCommand,
  DescribeExportImageTasksCommand,
  DescribeExportTasksCommand,
  DescribeFastLaunchImagesCommand,
  DescribeFastSnapshotRestoresCommand,
  DescribeFleetHistoryCommand,
  DescribeFleetInstancesCommand,
  DescribeFleetsCommand,
  DescribeFlowLogsCommand,
  DescribeFpgaImageAttributeCommand,
  DescribeFpgaImagesCommand,
  DescribeHostReservationOfferingsCommand,
  DescribeHostReservationsCommand,
  DescribeHostsCommand,
  DescribeIamInstanceProfileAssociationsCommand,
  DescribeIdFormatCommand,
  DescribeIdentityIdFormatCommand,
  DescribeImageAttributeCommand,
  DescribeImagesCommand,
  DescribeImportImageTasksCommand,
  DescribeImportImageTasksResultFilterSensitiveLog,
  DescribeImportSnapshotTasksCommand,
  DescribeImportSnapshotTasksResultFilterSensitiveLog,
  DescribeInstanceAttributeCommand,
  DescribeInstanceConnectEndpointsCommand,
  DescribeInstanceCreditSpecificationsCommand,
  DescribeInstanceEventNotificationAttributesCommand,
  DescribeInstanceEventWindowsCommand,
  DescribeInstanceImageMetadataCommand,
  DescribeInstanceStatusCommand,
  DescribeInstanceTopologyCommand,
  DescribeInstanceTypeOfferingsCommand,
  DescribeInstanceTypesCommand,
  DescribeInstancesCommand,
  DescribeInternetGatewaysCommand,
  DescribeIpamByoasnCommand,
  DescribeIpamExternalResourceVerificationTokensCommand,
  DescribeIpamPoolsCommand,
  DescribeIpamResourceDiscoveriesCommand,
  DescribeIpamResourceDiscoveryAssociationsCommand,
  DescribeIpamScopesCommand,
  DescribeIpamsCommand,
  DescribeIpv6PoolsCommand,
  DescribeKeyPairsCommand,
  DescribeLaunchTemplateVersionsCommand,
  DescribeLaunchTemplateVersionsResultFilterSensitiveLog,
  DescribeLaunchTemplatesCommand,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand,
  DescribeLocalGatewayRouteTableVpcAssociationsCommand,
  DescribeLocalGatewayRouteTablesCommand,
  DescribeLocalGatewayVirtualInterfaceGroupsCommand,
  DescribeLocalGatewayVirtualInterfacesCommand,
  DescribeLocalGatewaysCommand,
  DescribeLockedSnapshotsCommand,
  DescribeMacHostsCommand,
  DescribeManagedPrefixListsCommand,
  DescribeMovingAddressesCommand,
  DescribeNatGatewaysCommand,
  DescribeNetworkAclsCommand,
  DescribeNetworkInsightsAccessScopeAnalysesCommand,
  DescribeNetworkInsightsAccessScopesCommand,
  DescribeNetworkInsightsAnalysesCommand,
  DescribeNetworkInsightsPathsCommand,
  DescribeNetworkInterfaceAttributeCommand,
  DescribeNetworkInterfacePermissionsCommand,
  DescribeNetworkInterfacesCommand,
  DescribePlacementGroupsCommand,
  DescribePrefixListsCommand,
  DescribePrincipalIdFormatCommand,
  DescribePublicIpv4PoolsCommand,
  DescribeRegionsCommand,
  DescribeReplaceRootVolumeTasksCommand,
  DescribeReservedInstancesCommand,
  DescribeReservedInstancesListingsCommand,
  DescribeReservedInstancesModificationsCommand,
  DescribeReservedInstancesOfferingsCommand,
  DescribeRouteTablesCommand,
  DescribeScheduledInstanceAvailabilityCommand,
  DescribeScheduledInstancesCommand,
  DescribeSecurityGroupReferencesCommand,
  DescribeSecurityGroupRulesCommand,
  DescribeSecurityGroupVpcAssociationsCommand,
  DescribeSecurityGroupsCommand,
  DescribeSnapshotAttributeCommand,
  DescribeSnapshotTierStatusCommand,
  DescribeSnapshotsCommand,
  DescribeSpotDatafeedSubscriptionCommand,
  DescribeSpotFleetInstancesCommand,
  DescribeSpotFleetRequestHistoryCommand,
  DescribeSpotFleetRequestsCommand,
  DescribeSpotFleetRequestsResponseFilterSensitiveLog,
  DescribeSpotInstanceRequestsCommand,
  DescribeSpotInstanceRequestsResultFilterSensitiveLog,
  DescribeSpotPriceHistoryCommand,
  DescribeStaleSecurityGroupsCommand,
  DescribeStoreImageTasksCommand,
  DescribeSubnetsCommand,
  DescribeTagsCommand,
  DescribeTrafficMirrorFilterRulesCommand,
  DescribeTrafficMirrorFiltersCommand,
  DescribeTrafficMirrorSessionsCommand,
  DescribeTrafficMirrorTargetsCommand,
  DescribeTransitGatewayAttachmentsCommand,
  DescribeTransitGatewayConnectPeersCommand,
  DescribeTransitGatewayConnectsCommand,
  DescribeTransitGatewayMulticastDomainsCommand,
  DescribeTransitGatewayPeeringAttachmentsCommand,
  DescribeTransitGatewayPolicyTablesCommand,
  DescribeTransitGatewayRouteTableAnnouncementsCommand,
  DescribeTransitGatewayRouteTablesCommand,
  DescribeTransitGatewayVpcAttachmentsCommand,
  DescribeTransitGatewaysCommand,
  DescribeTrunkInterfaceAssociationsCommand,
  DescribeVerifiedAccessEndpointsCommand,
  DescribeVerifiedAccessGroupsCommand,
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommand,
  DescribeVerifiedAccessInstancesCommand,
  DescribeVerifiedAccessTrustProvidersCommand,
  DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog,
  DescribeVolumeAttributeCommand,
  DescribeVolumeStatusCommand,
  DescribeVolumesCommand,
  DescribeVolumesModificationsCommand,
  DescribeVpcAttributeCommand,
  DescribeVpcBlockPublicAccessExclusionsCommand,
  DescribeVpcBlockPublicAccessOptionsCommand,
  DescribeVpcClassicLinkCommand,
  DescribeVpcClassicLinkDnsSupportCommand,
  DescribeVpcEndpointAssociationsCommand,
  DescribeVpcEndpointConnectionNotificationsCommand,
  DescribeVpcEndpointConnectionsCommand,
  DescribeVpcEndpointServiceConfigurationsCommand,
  DescribeVpcEndpointServicePermissionsCommand,
  DescribeVpcEndpointServicesCommand,
  DescribeVpcEndpointsCommand,
  DescribeVpcPeeringConnectionsCommand,
  DescribeVpcsCommand,
  DescribeVpnConnectionsCommand,
  DescribeVpnConnectionsResultFilterSensitiveLog,
  DescribeVpnGatewaysCommand,
  DestinationFileFormat,
  DetachClassicLinkVpcCommand,
  DetachInternetGatewayCommand,
  DetachNetworkInterfaceCommand,
  DetachVerifiedAccessTrustProviderCommand,
  DetachVerifiedAccessTrustProviderResultFilterSensitiveLog,
  DetachVolumeCommand,
  DetachVpnGatewayCommand,
  DeviceTrustProviderType,
  DeviceType,
  DisableAddressTransferCommand,
  DisableAllowedImagesSettingsCommand,
  DisableAwsNetworkPerformanceMetricSubscriptionCommand,
  DisableEbsEncryptionByDefaultCommand,
  DisableFastLaunchCommand,
  DisableFastSnapshotRestoresCommand,
  DisableImageBlockPublicAccessCommand,
  DisableImageCommand,
  DisableImageDeprecationCommand,
  DisableImageDeregistrationProtectionCommand,
  DisableIpamOrganizationAdminAccountCommand,
  DisableSerialConsoleAccessCommand,
  DisableSnapshotBlockPublicAccessCommand,
  DisableTransitGatewayRouteTablePropagationCommand,
  DisableVgwRoutePropagationCommand,
  DisableVpcClassicLinkCommand,
  DisableVpcClassicLinkDnsSupportCommand,
  DisassociateAddressCommand,
  DisassociateCapacityReservationBillingOwnerCommand,
  DisassociateClientVpnTargetNetworkCommand,
  DisassociateEnclaveCertificateIamRoleCommand,
  DisassociateIamInstanceProfileCommand,
  DisassociateInstanceEventWindowCommand,
  DisassociateIpamByoasnCommand,
  DisassociateIpamResourceDiscoveryCommand,
  DisassociateNatGatewayAddressCommand,
  DisassociateRouteTableCommand,
  DisassociateSecurityGroupVpcCommand,
  DisassociateSubnetCidrBlockCommand,
  DisassociateTransitGatewayMulticastDomainCommand,
  DisassociateTransitGatewayPolicyTableCommand,
  DisassociateTransitGatewayRouteTableCommand,
  DisassociateTrunkInterfaceCommand,
  DisassociateVpcCidrBlockCommand,
  DiskImageDescriptionFilterSensitiveLog,
  DiskImageDetailFilterSensitiveLog,
  DiskImageFilterSensitiveLog,
  DiskImageFormat,
  DiskType,
  DnsNameState,
  DnsRecordIpType,
  DnsSupportValue,
  DomainType,
  DynamicRoutingValue,
  EC2,
  EC2Client,
  EC2ServiceException,
  EbsEncryptionSupport,
  EbsNvmeSupport,
  EbsOptimizedSupport,
  Ec2InstanceConnectEndpointState,
  EkPubKeyFormat,
  EkPubKeyType,
  ElasticGpuState,
  ElasticGpuStatus,
  EnaSupport,
  EnableAddressTransferCommand,
  EnableAllowedImagesSettingsCommand,
  EnableAwsNetworkPerformanceMetricSubscriptionCommand,
  EnableEbsEncryptionByDefaultCommand,
  EnableFastLaunchCommand,
  EnableFastSnapshotRestoresCommand,
  EnableImageBlockPublicAccessCommand,
  EnableImageCommand,
  EnableImageDeprecationCommand,
  EnableImageDeregistrationProtectionCommand,
  EnableIpamOrganizationAdminAccountCommand,
  EnableReachabilityAnalyzerOrganizationSharingCommand,
  EnableSerialConsoleAccessCommand,
  EnableSnapshotBlockPublicAccessCommand,
  EnableTransitGatewayRouteTablePropagationCommand,
  EnableVgwRoutePropagationCommand,
  EnableVolumeIOCommand,
  EnableVpcClassicLinkCommand,
  EnableVpcClassicLinkDnsSupportCommand,
  EndDateType,
  EphemeralNvmeSupport,
  EventCode,
  EventType,
  ExcessCapacityTerminationPolicy,
  ExportClientVpnClientCertificateRevocationListCommand,
  ExportClientVpnClientConfigurationCommand,
  ExportEnvironment,
  ExportImageCommand,
  ExportTaskState,
  ExportTransitGatewayRoutesCommand,
  ExportVerifiedAccessInstanceClientConfigurationCommand,
  ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog,
  FastLaunchResourceType,
  FastLaunchStateCode,
  FastSnapshotRestoreStateCode,
  FindingsFound,
  FleetActivityStatus,
  FleetCapacityReservationTenancy,
  FleetCapacityReservationUsageStrategy,
  FleetEventType,
  FleetExcessCapacityTerminationPolicy,
  FleetInstanceMatchCriteria,
  FleetOnDemandAllocationStrategy,
  FleetReplacementStrategy,
  FleetStateCode,
  FleetType,
  FlowLogsResourceType,
  FpgaImageAttributeName,
  FpgaImageStateCode,
  GatewayAssociationState,
  GatewayType,
  GetAllowedImagesSettingsCommand,
  GetAssociatedEnclaveCertificateIamRolesCommand,
  GetAssociatedIpv6PoolCidrsCommand,
  GetAwsNetworkPerformanceDataCommand,
  GetCapacityReservationUsageCommand,
  GetCoipPoolUsageCommand,
  GetConsoleOutputCommand,
  GetConsoleScreenshotCommand,
  GetDeclarativePoliciesReportSummaryCommand,
  GetDefaultCreditSpecificationCommand,
  GetEbsDefaultKmsKeyIdCommand,
  GetEbsEncryptionByDefaultCommand,
  GetFlowLogsIntegrationTemplateCommand,
  GetGroupsForCapacityReservationCommand,
  GetHostReservationPurchasePreviewCommand,
  GetImageBlockPublicAccessStateCommand,
  GetInstanceMetadataDefaultsCommand,
  GetInstanceTpmEkPubCommand,
  GetInstanceTpmEkPubResultFilterSensitiveLog,
  GetInstanceTypesFromInstanceRequirementsCommand,
  GetInstanceUefiDataCommand,
  GetIpamAddressHistoryCommand,
  GetIpamDiscoveredAccountsCommand,
  GetIpamDiscoveredPublicAddressesCommand,
  GetIpamDiscoveredResourceCidrsCommand,
  GetIpamPoolAllocationsCommand,
  GetIpamPoolCidrsCommand,
  GetIpamResourceCidrsCommand,
  GetLaunchTemplateDataCommand,
  GetLaunchTemplateDataResultFilterSensitiveLog,
  GetManagedPrefixListAssociationsCommand,
  GetManagedPrefixListEntriesCommand,
  GetNetworkInsightsAccessScopeAnalysisFindingsCommand,
  GetNetworkInsightsAccessScopeContentCommand,
  GetPasswordDataCommand,
  GetPasswordDataResultFilterSensitiveLog,
  GetReservedInstancesExchangeQuoteCommand,
  GetSecurityGroupsForVpcCommand,
  GetSerialConsoleAccessStatusCommand,
  GetSnapshotBlockPublicAccessStateCommand,
  GetSpotPlacementScoresCommand,
  GetSubnetCidrReservationsCommand,
  GetTransitGatewayAttachmentPropagationsCommand,
  GetTransitGatewayMulticastDomainAssociationsCommand,
  GetTransitGatewayPolicyTableAssociationsCommand,
  GetTransitGatewayPolicyTableEntriesCommand,
  GetTransitGatewayPrefixListReferencesCommand,
  GetTransitGatewayRouteTableAssociationsCommand,
  GetTransitGatewayRouteTablePropagationsCommand,
  GetVerifiedAccessEndpointPolicyCommand,
  GetVerifiedAccessEndpointTargetsCommand,
  GetVerifiedAccessGroupPolicyCommand,
  GetVpnConnectionDeviceSampleConfigurationCommand,
  GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog,
  GetVpnConnectionDeviceTypesCommand,
  GetVpnTunnelReplacementStatusCommand,
  HostMaintenance,
  HostRecovery,
  HostTenancy,
  HostnameType,
  HttpTokensState,
  HypervisorType,
  IamInstanceProfileAssociationState,
  Igmpv2SupportValue,
  ImageAttributeName,
  ImageBlockPublicAccessDisabledState,
  ImageBlockPublicAccessEnabledState,
  ImageDiskContainerFilterSensitiveLog,
  ImageState,
  ImageTypeValues,
  ImdsSupportValues,
  ImportClientVpnClientCertificateRevocationListCommand,
  ImportImageCommand,
  ImportImageRequestFilterSensitiveLog,
  ImportImageResultFilterSensitiveLog,
  ImportImageTaskFilterSensitiveLog,
  ImportInstanceCommand,
  ImportInstanceLaunchSpecificationFilterSensitiveLog,
  ImportInstanceRequestFilterSensitiveLog,
  ImportInstanceResultFilterSensitiveLog,
  ImportInstanceTaskDetailsFilterSensitiveLog,
  ImportInstanceVolumeDetailItemFilterSensitiveLog,
  ImportKeyPairCommand,
  ImportSnapshotCommand,
  ImportSnapshotRequestFilterSensitiveLog,
  ImportSnapshotResultFilterSensitiveLog,
  ImportSnapshotTaskFilterSensitiveLog,
  ImportVolumeCommand,
  ImportVolumeRequestFilterSensitiveLog,
  ImportVolumeResultFilterSensitiveLog,
  ImportVolumeTaskDetailsFilterSensitiveLog,
  InstanceAttributeName,
  InstanceAutoRecoveryState,
  InstanceBandwidthWeighting,
  InstanceBootModeValues,
  InstanceEventWindowState,
  InstanceGeneration,
  InstanceHealthStatus,
  InstanceInterruptionBehavior,
  InstanceLifecycle,
  InstanceLifecycleType,
  InstanceMatchCriteria,
  InstanceMetadataEndpointState,
  InstanceMetadataOptionsState,
  InstanceMetadataProtocolState,
  InstanceMetadataTagsState,
  InstanceStateName,
  InstanceStorageEncryptionSupport,
  InstanceTypeHypervisor,
  InterfacePermissionType,
  InterfaceProtocolType,
  InternetGatewayBlockMode,
  InternetGatewayExclusionMode,
  IpAddressType,
  IpSource,
  IpamAddressHistoryResourceType,
  IpamAssociatedResourceDiscoveryStatus,
  IpamComplianceStatus,
  IpamDiscoveryFailureCode,
  IpamExternalResourceVerificationTokenState,
  IpamManagementState,
  IpamNetworkInterfaceAttachmentStatus,
  IpamOverlapStatus,
  IpamPoolAllocationResourceType,
  IpamPoolAwsService,
  IpamPoolCidrFailureCode,
  IpamPoolCidrState,
  IpamPoolPublicIpSource,
  IpamPoolSourceResourceType,
  IpamPoolState,
  IpamPublicAddressAssociationStatus,
  IpamPublicAddressAwsService,
  IpamPublicAddressType,
  IpamResourceCidrIpSource,
  IpamResourceDiscoveryAssociationState,
  IpamResourceDiscoveryState,
  IpamResourceType,
  IpamScopeState,
  IpamScopeType,
  IpamState,
  IpamTier,
  Ipv6AddressAttribute,
  Ipv6SupportValue,
  KeyFormat,
  KeyPairFilterSensitiveLog,
  KeyType,
  LaunchSpecificationFilterSensitiveLog,
  LaunchTemplateAutoRecoveryState,
  LaunchTemplateErrorCode,
  LaunchTemplateHttpTokensState,
  LaunchTemplateInstanceMetadataEndpointState,
  LaunchTemplateInstanceMetadataOptionsState,
  LaunchTemplateInstanceMetadataProtocolIpv6,
  LaunchTemplateInstanceMetadataTagsState,
  LaunchTemplateVersionFilterSensitiveLog,
  ListImagesInRecycleBinCommand,
  ListSnapshotsInRecycleBinCommand,
  ListingState,
  ListingStatus,
  LocalGatewayRouteState,
  LocalGatewayRouteTableMode,
  LocalGatewayRouteType,
  LocalStorage,
  LocalStorageType,
  LocationType,
  LockMode,
  LockSnapshotCommand,
  LockState,
  LogDestinationType,
  ManagedBy,
  MarketType,
  MembershipType,
  MetadataDefaultHttpTokensState,
  MetricType,
  ModifyAddressAttributeCommand,
  ModifyAvailabilityZoneGroupCommand,
  ModifyAvailabilityZoneOptInStatus,
  ModifyCapacityReservationCommand,
  ModifyCapacityReservationFleetCommand,
  ModifyClientVpnEndpointCommand,
  ModifyDefaultCreditSpecificationCommand,
  ModifyEbsDefaultKmsKeyIdCommand,
  ModifyFleetCommand,
  ModifyFpgaImageAttributeCommand,
  ModifyHostsCommand,
  ModifyIdFormatCommand,
  ModifyIdentityIdFormatCommand,
  ModifyImageAttributeCommand,
  ModifyInstanceAttributeCommand,
  ModifyInstanceCapacityReservationAttributesCommand,
  ModifyInstanceCpuOptionsCommand,
  ModifyInstanceCreditSpecificationCommand,
  ModifyInstanceEventStartTimeCommand,
  ModifyInstanceEventWindowCommand,
  ModifyInstanceMaintenanceOptionsCommand,
  ModifyInstanceMetadataDefaultsCommand,
  ModifyInstanceMetadataOptionsCommand,
  ModifyInstanceNetworkPerformanceOptionsCommand,
  ModifyInstancePlacementCommand,
  ModifyIpamCommand,
  ModifyIpamPoolCommand,
  ModifyIpamResourceCidrCommand,
  ModifyIpamResourceDiscoveryCommand,
  ModifyIpamScopeCommand,
  ModifyLaunchTemplateCommand,
  ModifyLocalGatewayRouteCommand,
  ModifyManagedPrefixListCommand,
  ModifyNetworkInterfaceAttributeCommand,
  ModifyPrivateDnsNameOptionsCommand,
  ModifyReservedInstancesCommand,
  ModifySecurityGroupRulesCommand,
  ModifySnapshotAttributeCommand,
  ModifySnapshotTierCommand,
  ModifySpotFleetRequestCommand,
  ModifySubnetAttributeCommand,
  ModifyTrafficMirrorFilterNetworkServicesCommand,
  ModifyTrafficMirrorFilterRuleCommand,
  ModifyTrafficMirrorSessionCommand,
  ModifyTransitGatewayCommand,
  ModifyTransitGatewayPrefixListReferenceCommand,
  ModifyTransitGatewayVpcAttachmentCommand,
  ModifyVerifiedAccessEndpointCommand,
  ModifyVerifiedAccessEndpointPolicyCommand,
  ModifyVerifiedAccessGroupCommand,
  ModifyVerifiedAccessGroupPolicyCommand,
  ModifyVerifiedAccessInstanceCommand,
  ModifyVerifiedAccessInstanceLoggingConfigurationCommand,
  ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog,
  ModifyVerifiedAccessTrustProviderCommand,
  ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog,
  ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog,
  ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog,
  ModifyVolumeAttributeCommand,
  ModifyVolumeCommand,
  ModifyVpcAttributeCommand,
  ModifyVpcBlockPublicAccessExclusionCommand,
  ModifyVpcBlockPublicAccessOptionsCommand,
  ModifyVpcEndpointCommand,
  ModifyVpcEndpointConnectionNotificationCommand,
  ModifyVpcEndpointServiceConfigurationCommand,
  ModifyVpcEndpointServicePayerResponsibilityCommand,
  ModifyVpcEndpointServicePermissionsCommand,
  ModifyVpcPeeringConnectionOptionsCommand,
  ModifyVpcTenancyCommand,
  ModifyVpnConnectionCommand,
  ModifyVpnConnectionOptionsCommand,
  ModifyVpnConnectionOptionsResultFilterSensitiveLog,
  ModifyVpnConnectionResultFilterSensitiveLog,
  ModifyVpnTunnelCertificateCommand,
  ModifyVpnTunnelCertificateResultFilterSensitiveLog,
  ModifyVpnTunnelOptionsCommand,
  ModifyVpnTunnelOptionsRequestFilterSensitiveLog,
  ModifyVpnTunnelOptionsResultFilterSensitiveLog,
  ModifyVpnTunnelOptionsSpecificationFilterSensitiveLog,
  MonitorInstancesCommand,
  MonitoringState,
  MoveAddressToVpcCommand,
  MoveByoipCidrToIpamCommand,
  MoveCapacityReservationInstancesCommand,
  MoveStatus,
  MulticastSupportValue,
  NatGatewayAddressStatus,
  NatGatewayState,
  NetworkInterfaceAttribute,
  NetworkInterfaceCreationType,
  NetworkInterfacePermissionStateCode,
  NetworkInterfaceStatus,
  NetworkInterfaceType,
  NitroEnclavesSupport,
  NitroTpmSupport,
  OfferingClassType,
  OfferingTypeValues,
  OidcOptionsFilterSensitiveLog,
  OnDemandAllocationStrategy,
  OperationType,
  PartitionLoadFrequency,
  PayerResponsibility,
  PaymentOption,
  PeriodType,
  PermissionGroup,
  PhcSupport,
  PlacementGroupState,
  PlacementGroupStrategy,
  PlacementStrategy,
  PlatformValues,
  PrefixListState,
  PrincipalType,
  ProductCodeValues,
  Protocol,
  ProtocolValue,
  ProvisionByoipCidrCommand,
  ProvisionIpamByoasnCommand,
  ProvisionIpamPoolCidrCommand,
  ProvisionPublicIpv4PoolCidrCommand,
  PurchaseCapacityBlockCommand,
  PurchaseCapacityBlockExtensionCommand,
  PurchaseHostReservationCommand,
  PurchaseReservedInstancesOfferingCommand,
  PurchaseScheduledInstancesCommand,
  RIProductDescription,
  RebootInstancesCommand,
  RecurringChargeFrequency,
  RegisterImageCommand,
  RegisterInstanceEventNotificationAttributesCommand,
  RegisterTransitGatewayMulticastGroupMembersCommand,
  RegisterTransitGatewayMulticastGroupSourcesCommand,
  RejectCapacityReservationBillingOwnershipCommand,
  RejectTransitGatewayMulticastDomainAssociationsCommand,
  RejectTransitGatewayPeeringAttachmentCommand,
  RejectTransitGatewayVpcAttachmentCommand,
  RejectVpcEndpointConnectionsCommand,
  RejectVpcPeeringConnectionCommand,
  ReleaseAddressCommand,
  ReleaseHostsCommand,
  ReleaseIpamPoolAllocationCommand,
  ReplaceIamInstanceProfileAssociationCommand,
  ReplaceImageCriteriaInAllowedImagesSettingsCommand,
  ReplaceNetworkAclAssociationCommand,
  ReplaceNetworkAclEntryCommand,
  ReplaceRootVolumeTaskState,
  ReplaceRouteCommand,
  ReplaceRouteTableAssociationCommand,
  ReplaceTransitGatewayRouteCommand,
  ReplaceVpnTunnelCommand,
  ReplacementStrategy,
  ReportInstanceReasonCodes,
  ReportInstanceStatusCommand,
  ReportInstanceStatusRequestFilterSensitiveLog,
  ReportState,
  ReportStatusType,
  RequestLaunchTemplateDataFilterSensitiveLog,
  RequestSpotFleetCommand,
  RequestSpotFleetRequestFilterSensitiveLog,
  RequestSpotInstancesCommand,
  RequestSpotInstancesRequestFilterSensitiveLog,
  RequestSpotInstancesResultFilterSensitiveLog,
  RequestSpotLaunchSpecificationFilterSensitiveLog,
  ReservationState,
  ReservedInstanceState,
  ResetAddressAttributeCommand,
  ResetEbsDefaultKmsKeyIdCommand,
  ResetFpgaImageAttributeCommand,
  ResetFpgaImageAttributeName,
  ResetImageAttributeCommand,
  ResetImageAttributeName,
  ResetInstanceAttributeCommand,
  ResetNetworkInterfaceAttributeCommand,
  ResetSnapshotAttributeCommand,
  ResourceType,
  ResponseLaunchTemplateDataFilterSensitiveLog,
  RestoreAddressToClassicCommand,
  RestoreImageFromRecycleBinCommand,
  RestoreManagedPrefixListVersionCommand,
  RestoreSnapshotFromRecycleBinCommand,
  RestoreSnapshotTierCommand,
  RevokeClientVpnIngressCommand,
  RevokeSecurityGroupEgressCommand,
  RevokeSecurityGroupIngressCommand,
  RootDeviceType,
  RouteOrigin,
  RouteState,
  RouteTableAssociationStateCode,
  RuleAction,
  RunInstancesCommand,
  RunInstancesRequestFilterSensitiveLog,
  RunScheduledInstancesCommand,
  RunScheduledInstancesRequestFilterSensitiveLog,
  S3StorageFilterSensitiveLog,
  SSEType,
  ScheduledInstancesLaunchSpecificationFilterSensitiveLog,
  Scope,
  SearchLocalGatewayRoutesCommand,
  SearchTransitGatewayMulticastGroupsCommand,
  SearchTransitGatewayRoutesCommand,
  SecurityGroupReferencingSupportValue,
  SecurityGroupVpcAssociationState,
  SelfServicePortal,
  SendDiagnosticInterruptCommand,
  ServiceConnectivityType,
  ServiceState,
  ServiceType,
  ShutdownBehavior,
  SnapshotAttributeName,
  SnapshotBlockPublicAccessState,
  SnapshotDetailFilterSensitiveLog,
  SnapshotDiskContainerFilterSensitiveLog,
  SnapshotLocationEnum,
  SnapshotState,
  SnapshotTaskDetailFilterSensitiveLog,
  SpotAllocationStrategy,
  SpotFleetLaunchSpecificationFilterSensitiveLog,
  SpotFleetRequestConfigDataFilterSensitiveLog,
  SpotFleetRequestConfigFilterSensitiveLog,
  SpotInstanceInterruptionBehavior,
  SpotInstanceRequestFilterSensitiveLog,
  SpotInstanceState,
  SpotInstanceType,
  SpreadLevel,
  StartDeclarativePoliciesReportCommand,
  StartInstancesCommand,
  StartNetworkInsightsAccessScopeAnalysisCommand,
  StartNetworkInsightsAnalysisCommand,
  StartVpcEndpointServicePrivateDnsVerificationCommand,
  State,
  StaticSourcesSupportValue,
  StatisticType,
  Status,
  StatusName,
  StatusType,
  StopInstancesCommand,
  StorageFilterSensitiveLog,
  StorageTier,
  SubnetCidrBlockStateCode,
  SubnetCidrReservationType,
  SubnetState,
  SummaryStatus,
  SupportedAdditionalProcessorFeature,
  TargetCapacityUnitType,
  TargetStorageTier,
  TelemetryStatus,
  Tenancy,
  TerminateClientVpnConnectionsCommand,
  TerminateInstancesCommand,
  TieringOperationStatus,
  TokenState,
  TpmSupportValues,
  TrafficDirection,
  TrafficMirrorFilterRuleField,
  TrafficMirrorNetworkService,
  TrafficMirrorRuleAction,
  TrafficMirrorSessionField,
  TrafficMirrorTargetType,
  TrafficType,
  TransferType,
  TransitGatewayAssociationState,
  TransitGatewayAttachmentResourceType,
  TransitGatewayAttachmentState,
  TransitGatewayConnectPeerState,
  TransitGatewayMulitcastDomainAssociationState,
  TransitGatewayMulticastDomainState,
  TransitGatewayPolicyTableState,
  TransitGatewayPrefixListReferenceState,
  TransitGatewayPropagationState,
  TransitGatewayRouteState,
  TransitGatewayRouteTableAnnouncementDirection,
  TransitGatewayRouteTableAnnouncementState,
  TransitGatewayRouteTableState,
  TransitGatewayRouteType,
  TransitGatewayState,
  TransportProtocol,
  TrustProviderType,
  TunnelInsideIpVersion,
  TunnelOptionFilterSensitiveLog,
  UnassignIpv6AddressesCommand,
  UnassignPrivateIpAddressesCommand,
  UnassignPrivateNatGatewayAddressCommand,
  UnlimitedSupportedInstanceFamily,
  UnlockSnapshotCommand,
  UnmonitorInstancesCommand,
  UnsuccessfulInstanceCreditSpecificationErrorCode,
  UpdateSecurityGroupRuleDescriptionsEgressCommand,
  UpdateSecurityGroupRuleDescriptionsIngressCommand,
  UsageClassType,
  UserDataFilterSensitiveLog,
  UserTrustProviderType,
  VerificationMethod,
  VerifiedAccessEndpointAttachmentType,
  VerifiedAccessEndpointProtocol,
  VerifiedAccessEndpointStatusCode,
  VerifiedAccessEndpointType,
  VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog,
  VerifiedAccessLogDeliveryStatusCode,
  VerifiedAccessTrustProviderFilterSensitiveLog,
  VirtualizationType,
  VolumeAttachmentState,
  VolumeAttributeName,
  VolumeModificationState,
  VolumeState,
  VolumeStatusInfoStatus,
  VolumeStatusName,
  VolumeType,
  VpcAttributeName,
  VpcBlockPublicAccessExclusionState,
  VpcBlockPublicAccessExclusionsAllowed,
  VpcBlockPublicAccessState,
  VpcCidrBlockStateCode,
  VpcEndpointType,
  VpcPeeringConnectionStateReasonCode,
  VpcState,
  VpcTenancy,
  VpnConnectionFilterSensitiveLog,
  VpnConnectionOptionsFilterSensitiveLog,
  VpnConnectionOptionsSpecificationFilterSensitiveLog,
  VpnEcmpSupportValue,
  VpnProtocol,
  VpnState,
  VpnStaticRouteSource,
  VpnTunnelOptionsSpecificationFilterSensitiveLog,
  WeekDay,
  WithdrawByoipCidrCommand,
  _InstanceType,
  Client as __Client,
  paginateDescribeAddressTransfers,
  paginateDescribeAddressesAttribute,
  paginateDescribeAwsNetworkPerformanceMetricSubscriptions,
  paginateDescribeByoipCidrs,
  paginateDescribeCapacityBlockExtensionHistory,
  paginateDescribeCapacityBlockExtensionOfferings,
  paginateDescribeCapacityBlockOfferings,
  paginateDescribeCapacityReservationBillingRequests,
  paginateDescribeCapacityReservationFleets,
  paginateDescribeCapacityReservations,
  paginateDescribeCarrierGateways,
  paginateDescribeClassicLinkInstances,
  paginateDescribeClientVpnAuthorizationRules,
  paginateDescribeClientVpnConnections,
  paginateDescribeClientVpnEndpoints,
  paginateDescribeClientVpnRoutes,
  paginateDescribeClientVpnTargetNetworks,
  paginateDescribeCoipPools,
  paginateDescribeDhcpOptions,
  paginateDescribeEgressOnlyInternetGateways,
  paginateDescribeExportImageTasks,
  paginateDescribeFastLaunchImages,
  paginateDescribeFastSnapshotRestores,
  paginateDescribeFleets,
  paginateDescribeFlowLogs,
  paginateDescribeFpgaImages,
  paginateDescribeHostReservationOfferings,
  paginateDescribeHostReservations,
  paginateDescribeHosts,
  paginateDescribeIamInstanceProfileAssociations,
  paginateDescribeImages,
  paginateDescribeImportImageTasks,
  paginateDescribeImportSnapshotTasks,
  paginateDescribeInstanceConnectEndpoints,
  paginateDescribeInstanceCreditSpecifications,
  paginateDescribeInstanceEventWindows,
  paginateDescribeInstanceImageMetadata,
  paginateDescribeInstanceStatus,
  paginateDescribeInstanceTopology,
  paginateDescribeInstanceTypeOfferings,
  paginateDescribeInstanceTypes,
  paginateDescribeInstances,
  paginateDescribeInternetGateways,
  paginateDescribeIpamPools,
  paginateDescribeIpamResourceDiscoveries,
  paginateDescribeIpamResourceDiscoveryAssociations,
  paginateDescribeIpamScopes,
  paginateDescribeIpams,
  paginateDescribeIpv6Pools,
  paginateDescribeLaunchTemplateVersions,
  paginateDescribeLaunchTemplates,
  paginateDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations,
  paginateDescribeLocalGatewayRouteTableVpcAssociations,
  paginateDescribeLocalGatewayRouteTables,
  paginateDescribeLocalGatewayVirtualInterfaceGroups,
  paginateDescribeLocalGatewayVirtualInterfaces,
  paginateDescribeLocalGateways,
  paginateDescribeMacHosts,
  paginateDescribeManagedPrefixLists,
  paginateDescribeMovingAddresses,
  paginateDescribeNatGateways,
  paginateDescribeNetworkAcls,
  paginateDescribeNetworkInsightsAccessScopeAnalyses,
  paginateDescribeNetworkInsightsAccessScopes,
  paginateDescribeNetworkInsightsAnalyses,
  paginateDescribeNetworkInsightsPaths,
  paginateDescribeNetworkInterfacePermissions,
  paginateDescribeNetworkInterfaces,
  paginateDescribePrefixLists,
  paginateDescribePrincipalIdFormat,
  paginateDescribePublicIpv4Pools,
  paginateDescribeReplaceRootVolumeTasks,
  paginateDescribeReservedInstancesModifications,
  paginateDescribeReservedInstancesOfferings,
  paginateDescribeRouteTables,
  paginateDescribeScheduledInstanceAvailability,
  paginateDescribeScheduledInstances,
  paginateDescribeSecurityGroupRules,
  paginateDescribeSecurityGroupVpcAssociations,
  paginateDescribeSecurityGroups,
  paginateDescribeSnapshotTierStatus,
  paginateDescribeSnapshots,
  paginateDescribeSpotFleetRequests,
  paginateDescribeSpotInstanceRequests,
  paginateDescribeSpotPriceHistory,
  paginateDescribeStaleSecurityGroups,
  paginateDescribeStoreImageTasks,
  paginateDescribeSubnets,
  paginateDescribeTags,
  paginateDescribeTrafficMirrorFilters,
  paginateDescribeTrafficMirrorSessions,
  paginateDescribeTrafficMirrorTargets,
  paginateDescribeTransitGatewayAttachments,
  paginateDescribeTransitGatewayConnectPeers,
  paginateDescribeTransitGatewayConnects,
  paginateDescribeTransitGatewayMulticastDomains,
  paginateDescribeTransitGatewayPeeringAttachments,
  paginateDescribeTransitGatewayPolicyTables,
  paginateDescribeTransitGatewayRouteTableAnnouncements,
  paginateDescribeTransitGatewayRouteTables,
  paginateDescribeTransitGatewayVpcAttachments,
  paginateDescribeTransitGateways,
  paginateDescribeTrunkInterfaceAssociations,
  paginateDescribeVerifiedAccessEndpoints,
  paginateDescribeVerifiedAccessGroups,
  paginateDescribeVerifiedAccessInstanceLoggingConfigurations,
  paginateDescribeVerifiedAccessInstances,
  paginateDescribeVerifiedAccessTrustProviders,
  paginateDescribeVolumeStatus,
  paginateDescribeVolumes,
  paginateDescribeVolumesModifications,
  paginateDescribeVpcClassicLinkDnsSupport,
  paginateDescribeVpcEndpointConnectionNotifications,
  paginateDescribeVpcEndpointConnections,
  paginateDescribeVpcEndpointServiceConfigurations,
  paginateDescribeVpcEndpointServicePermissions,
  paginateDescribeVpcEndpoints,
  paginateDescribeVpcPeeringConnections,
  paginateDescribeVpcs,
  paginateGetAssociatedIpv6PoolCidrs,
  paginateGetAwsNetworkPerformanceData,
  paginateGetGroupsForCapacityReservation,
  paginateGetInstanceTypesFromInstanceRequirements,
  paginateGetIpamAddressHistory,
  paginateGetIpamDiscoveredAccounts,
  paginateGetIpamDiscoveredResourceCidrs,
  paginateGetIpamPoolAllocations,
  paginateGetIpamPoolCidrs,
  paginateGetIpamResourceCidrs,
  paginateGetManagedPrefixListAssociations,
  paginateGetManagedPrefixListEntries,
  paginateGetNetworkInsightsAccessScopeAnalysisFindings,
  paginateGetSecurityGroupsForVpc,
  paginateGetSpotPlacementScores,
  paginateGetTransitGatewayAttachmentPropagations,
  paginateGetTransitGatewayMulticastDomainAssociations,
  paginateGetTransitGatewayPolicyTableAssociations,
  paginateGetTransitGatewayPrefixListReferences,
  paginateGetTransitGatewayRouteTableAssociations,
  paginateGetTransitGatewayRouteTablePropagations,
  paginateGetVpnConnectionDeviceTypes,
  paginateListImagesInRecycleBin,
  paginateListSnapshotsInRecycleBin,
  paginateSearchLocalGatewayRoutes,
  paginateSearchTransitGatewayMulticastGroups,
  waitForBundleTaskComplete,
  waitForConversionTaskCancelled,
  waitForConversionTaskCompleted,
  waitForConversionTaskDeleted,
  waitForCustomerGatewayAvailable,
  waitForExportTaskCancelled,
  waitForExportTaskCompleted,
  waitForImageAvailable,
  waitForImageExists,
  waitForInstanceExists,
  waitForInstanceRunning,
  waitForInstanceStatusOk,
  waitForInstanceStopped,
  waitForInstanceTerminated,
  waitForInternetGatewayExists,
  waitForKeyPairExists,
  waitForNatGatewayAvailable,
  waitForNatGatewayDeleted,
  waitForNetworkInterfaceAvailable,
  waitForPasswordDataAvailable,
  waitForSecurityGroupExists,
  waitForSnapshotCompleted,
  waitForSnapshotImported,
  waitForSpotInstanceRequestFulfilled,
  waitForStoreImageTaskComplete,
  waitForSubnetAvailable,
  waitForSystemStatusOk,
  waitForVolumeAvailable,
  waitForVolumeDeleted,
  waitForVolumeInUse,
  waitForVpcAvailable,
  waitForVpcExists,
  waitForVpcPeeringConnectionDeleted,
  waitForVpcPeeringConnectionExists,
  waitForVpnConnectionAvailable,
  waitForVpnConnectionDeleted,
  waitUntilBundleTaskComplete,
  waitUntilConversionTaskCancelled,
  waitUntilConversionTaskCompleted,
  waitUntilConversionTaskDeleted,
  waitUntilCustomerGatewayAvailable,
  waitUntilExportTaskCancelled,
  waitUntilExportTaskCompleted,
  waitUntilImageAvailable,
  waitUntilImageExists,
  waitUntilInstanceExists,
  waitUntilInstanceRunning,
  waitUntilInstanceStatusOk,
  waitUntilInstanceStopped,
  waitUntilInstanceTerminated,
  waitUntilInternetGatewayExists,
  waitUntilKeyPairExists,
  waitUntilNatGatewayAvailable,
  waitUntilNatGatewayDeleted,
  waitUntilNetworkInterfaceAvailable,
  waitUntilPasswordDataAvailable,
  waitUntilSecurityGroupExists,
  waitUntilSnapshotCompleted,
  waitUntilSnapshotImported,
  waitUntilSpotInstanceRequestFulfilled,
  waitUntilStoreImageTaskComplete,
  waitUntilSubnetAvailable,
  waitUntilSystemStatusOk,
  waitUntilVolumeAvailable,
  waitUntilVolumeDeleted,
  waitUntilVolumeInUse,
  waitUntilVpcAvailable,
  waitUntilVpcExists,
  waitUntilVpcPeeringConnectionDeleted,
  waitUntilVpcPeeringConnectionExists,
  waitUntilVpnConnectionAvailable,
  waitUntilVpnConnectionDeleted
};
//# sourceMappingURL=@aws-sdk_client-ec2.js.map
