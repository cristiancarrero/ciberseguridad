import {
  XmlNode
} from "./chunk-GG3YREJW.js";
import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  NoOpLogger,
  ServiceException,
  Sha256,
  WaiterState,
  awsEndpointFunctions,
  calculateBodyLength,
  checkExceptions,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  createWaiter,
  customEndpointFunctions,
  decorateServiceException,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  fromUtf8,
  getArrayIfSingleItem,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  loadConfigsForDefaultMode,
  loadRestXmlErrorCode,
  map,
  normalizeProvider,
  parseBoolean,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  parseXmlBody,
  parseXmlErrorBody,
  requestBuilder,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  strictParseFloat,
  strictParseInt32,
  strictParseLong,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-76OIWYIL.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@aws-sdk/client-route-53/dist-es/auth/httpAuthSchemeProvider.js
var defaultRoute53HttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "route53",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultRoute53HttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return {
    ...config_0
  };
};

// node_modules/@aws-sdk/client-route-53/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "route53"
  };
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-route-53/package.json
var package_default = {
  name: "@aws-sdk/client-route-53",
  description: "AWS SDK for JavaScript Route 53 Client for Node.js, Browser and React Native",
  version: "3.731.1",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-route-53",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo route-53"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.731.0",
    "@aws-sdk/credential-provider-node": "3.731.1",
    "@aws-sdk/middleware-host-header": "3.731.0",
    "@aws-sdk/middleware-logger": "3.731.0",
    "@aws-sdk/middleware-recursion-detection": "3.731.0",
    "@aws-sdk/middleware-sdk-route53": "3.731.0",
    "@aws-sdk/middleware-user-agent": "3.731.0",
    "@aws-sdk/region-config-resolver": "3.731.0",
    "@aws-sdk/types": "3.731.0",
    "@aws-sdk/util-endpoints": "3.731.0",
    "@aws-sdk/util-user-agent-browser": "3.731.0",
    "@aws-sdk/util-user-agent-node": "3.731.0",
    "@aws-sdk/xml-builder": "3.723.0",
    "@smithy/config-resolver": "^4.0.0",
    "@smithy/core": "^3.0.0",
    "@smithy/fetch-http-handler": "^5.0.0",
    "@smithy/hash-node": "^4.0.0",
    "@smithy/invalid-dependency": "^4.0.0",
    "@smithy/middleware-content-length": "^4.0.0",
    "@smithy/middleware-endpoint": "^4.0.0",
    "@smithy/middleware-retry": "^4.0.0",
    "@smithy/middleware-serde": "^4.0.0",
    "@smithy/middleware-stack": "^4.0.0",
    "@smithy/node-config-provider": "^4.0.0",
    "@smithy/node-http-handler": "^4.0.0",
    "@smithy/protocol-http": "^5.0.0",
    "@smithy/smithy-client": "^4.0.0",
    "@smithy/types": "^4.0.0",
    "@smithy/url-parser": "^4.0.0",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.0",
    "@smithy/util-defaults-mode-node": "^4.0.0",
    "@smithy/util-endpoints": "^3.0.0",
    "@smithy/util-middleware": "^4.0.0",
    "@smithy/util-retry": "^4.0.0",
    "@smithy/util-utf8": "^4.0.0",
    "@smithy/util-waiter": "^4.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.2.2"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-route-53",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-route-53"
  }
};

// node_modules/@aws-sdk/client-route-53/dist-es/endpoint/ruleset.js
var C = "required";
var D = "fn";
var E = "argv";
var F = "ref";
var G = "authSchemes";
var H = "signingName";
var I = "signingRegion";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "stringEquals";
var i = "sigv4";
var j = "route53";
var k = { [C]: false, "type": "String" };
var l = { [C]: true, "default": false, "type": "Boolean" };
var m = { [F]: "Endpoint" };
var n = { [D]: c, [E]: [{ [F]: "UseFIPS" }, true] };
var o = { [D]: c, [E]: [{ [F]: "UseDualStack" }, true] };
var p = {};
var q = { [D]: h, [E]: [{ [D]: "getAttr", [E]: [{ [F]: g }, "name"] }, "aws"] };
var r = { [D]: "getAttr", [E]: [{ [F]: g }, "name"] };
var s = { [D]: c, [E]: [{ [F]: "UseFIPS" }, false] };
var t = { [D]: c, [E]: [{ [F]: "UseDualStack" }, false] };
var u = { [G]: [{ "name": i, [H]: j, [I]: "us-east-1" }] };
var v = { [D]: h, [E]: [r, "aws-us-gov"] };
var w = { "url": "https://route53.us-gov.amazonaws.com", "properties": { [G]: [{ "name": i, [H]: j, [I]: "us-gov-west-1" }] }, "headers": {} };
var x = { [D]: "getAttr", [E]: [{ [F]: g }, "supportsFIPS"] };
var y = { [D]: c, [E]: [true, { [D]: "getAttr", [E]: [{ [F]: g }, "supportsDualStack"] }] };
var z = [n];
var A = [o];
var B = [{ [F]: "Region" }];
var _data = { version: "1.0", parameters: { Region: k, UseDualStack: l, UseFIPS: l, Endpoint: k }, rules: [{ conditions: [{ [D]: b, [E]: [m] }], rules: [{ conditions: z, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: A, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: m, properties: p, headers: p }, type: e }], type: f }, { conditions: [{ [D]: b, [E]: B }], rules: [{ conditions: [{ [D]: "aws.partition", [E]: B, assign: g }], rules: [{ conditions: [q, s, t], endpoint: { url: "https://route53.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [q, n, t], endpoint: { url: "https://route53-fips.amazonaws.com", properties: u, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-cn"] }, s, t], endpoint: { url: "https://route53.amazonaws.com.cn", properties: { [G]: [{ name: i, [H]: j, [I]: "cn-northwest-1" }] }, headers: p }, type: e }, { conditions: [v, s, t], endpoint: w, type: e }, { conditions: [v, n, t], endpoint: w, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso"] }, s, t], endpoint: { url: "https://route53.c2s.ic.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-iso-east-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-b"] }, s, t], endpoint: { url: "https://route53.sc2s.sgov.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-isob-east-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-e"] }, s, t], endpoint: { url: "https://route53.cloud.adc-e.uk", properties: { [G]: [{ name: i, [H]: j, [I]: "eu-isoe-west-1" }] }, headers: p }, type: e }, { conditions: [{ [D]: h, [E]: [r, "aws-iso-f"] }, s, t], endpoint: { url: "https://route53.csp.hci.ic.gov", properties: { [G]: [{ name: i, [H]: j, [I]: "us-isof-south-1" }] }, headers: p }, type: e }, { conditions: [n, o], rules: [{ conditions: [{ [D]: c, [E]: [a, x] }, y], rules: [{ endpoint: { url: "https://route53-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: z, rules: [{ conditions: [{ [D]: c, [E]: [x, a] }], rules: [{ endpoint: { url: "https://route53-fips.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: A, rules: [{ conditions: [y], rules: [{ endpoint: { url: "https://route53.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://route53.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-route-53/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-route-53/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2013-04-01",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultRoute53HttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Route 53",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-route-53/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-route-53/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-route-53/dist-es/runtimeExtensions.js
var asPartial = (t2) => t2;
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
    ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
    ...resolveDefaultRuntimeConfig(extensionConfiguration),
    ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
};

// node_modules/@aws-sdk/client-route-53/dist-es/Route53Client.js
var Route53Client = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    __publicField(this, "config");
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultRoute53HttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/middleware-sdk-route53/dist-es/constants.js
var IDENTIFIER_PREFIX_PATTERN = /^\/(hostedzone|change|delegationset)\//;

// node_modules/@aws-sdk/middleware-sdk-route53/dist-es/change-resource-record-sets.js
function changeResourceRecordSetsMiddleware() {
  return (next) => async (args) => {
    const { ChangeBatch } = args.input;
    const Changes = [];
    for (const change of ChangeBatch.Changes) {
      const { AliasTarget } = change.ResourceRecordSet;
      if (AliasTarget) {
        Changes.push({
          ...change,
          ResourceRecordSet: {
            ...change.ResourceRecordSet,
            AliasTarget: {
              ...AliasTarget,
              HostedZoneId: AliasTarget.HostedZoneId.replace(IDENTIFIER_PREFIX_PATTERN, "")
            }
          }
        });
      } else {
        Changes.push(change);
      }
    }
    return next({
      ...args,
      input: {
        ...args.input,
        ChangeBatch: {
          ...ChangeBatch,
          Changes
        }
      }
    });
  };
}
var changeResourceRecordSetsMiddlewareOptions = {
  step: "initialize",
  tags: ["ROUTE53_IDS", "CHANGE_RESOURCE_RECORD_SETS"],
  name: "changeResourceRecordSetsMiddleware",
  override: true
};
var getChangeResourceRecordSetsPlugin = (unused) => ({
  applyToStack: (clientStack) => {
    clientStack.add(changeResourceRecordSetsMiddleware(), changeResourceRecordSetsMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/middleware-sdk-route53/dist-es/id-normalizer.js
var IDENTIFIER_PARAMETERS = ["DelegationSetId", "HostedZoneId", "Id"];
function idNormalizerMiddleware() {
  return (next) => async (args) => {
    const input = { ...args.input };
    for (const paramName of IDENTIFIER_PARAMETERS) {
      const param = input[paramName];
      if (param) {
        input[paramName] = param.replace(IDENTIFIER_PREFIX_PATTERN, "");
      }
    }
    return next({
      ...args,
      input
    });
  };
}
var idNormalizerMiddlewareOptions = {
  step: "initialize",
  tags: ["ROUTE53_IDS"],
  name: "idNormalizerMiddleware",
  override: true
};
var getIdNormalizerPlugin = (unused) => ({
  applyToStack: (clientStack) => {
    clientStack.add(idNormalizerMiddleware(), idNormalizerMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-route-53/dist-es/models/Route53ServiceException.js
var Route53ServiceException = class _Route53ServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _Route53ServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-route-53/dist-es/models/models_0.js
var AccountLimitType = {
  MAX_HEALTH_CHECKS_BY_OWNER: "MAX_HEALTH_CHECKS_BY_OWNER",
  MAX_HOSTED_ZONES_BY_OWNER: "MAX_HOSTED_ZONES_BY_OWNER",
  MAX_REUSABLE_DELEGATION_SETS_BY_OWNER: "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER",
  MAX_TRAFFIC_POLICIES_BY_OWNER: "MAX_TRAFFIC_POLICIES_BY_OWNER",
  MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER: "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER"
};
var ChangeStatus = {
  INSYNC: "INSYNC",
  PENDING: "PENDING"
};
var ConcurrentModification = class _ConcurrentModification extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "ConcurrentModification",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConcurrentModification");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConcurrentModification.prototype);
  }
};
var InvalidInput = class _InvalidInput extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidInput",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidInput");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidInput.prototype);
  }
};
var InvalidKeySigningKeyStatus = class _InvalidKeySigningKeyStatus extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidKeySigningKeyStatus",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidKeySigningKeyStatus");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidKeySigningKeyStatus.prototype);
  }
};
var InvalidKMSArn = class _InvalidKMSArn extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidKMSArn",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidKMSArn");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidKMSArn.prototype);
  }
};
var InvalidSigningStatus = class _InvalidSigningStatus extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidSigningStatus",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidSigningStatus");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidSigningStatus.prototype);
  }
};
var NoSuchKeySigningKey = class _NoSuchKeySigningKey extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchKeySigningKey",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchKeySigningKey");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchKeySigningKey.prototype);
  }
};
var CloudWatchRegion = {
  af_south_1: "af-south-1",
  ap_east_1: "ap-east-1",
  ap_northeast_1: "ap-northeast-1",
  ap_northeast_2: "ap-northeast-2",
  ap_northeast_3: "ap-northeast-3",
  ap_south_1: "ap-south-1",
  ap_south_2: "ap-south-2",
  ap_southeast_1: "ap-southeast-1",
  ap_southeast_2: "ap-southeast-2",
  ap_southeast_3: "ap-southeast-3",
  ap_southeast_4: "ap-southeast-4",
  ap_southeast_5: "ap-southeast-5",
  ap_southeast_7: "ap-southeast-7",
  ca_central_1: "ca-central-1",
  ca_west_1: "ca-west-1",
  cn_north_1: "cn-north-1",
  cn_northwest_1: "cn-northwest-1",
  eu_central_1: "eu-central-1",
  eu_central_2: "eu-central-2",
  eu_north_1: "eu-north-1",
  eu_south_1: "eu-south-1",
  eu_south_2: "eu-south-2",
  eu_west_1: "eu-west-1",
  eu_west_2: "eu-west-2",
  eu_west_3: "eu-west-3",
  il_central_1: "il-central-1",
  me_central_1: "me-central-1",
  me_south_1: "me-south-1",
  mx_central_1: "mx-central-1",
  sa_east_1: "sa-east-1",
  us_east_1: "us-east-1",
  us_east_2: "us-east-2",
  us_gov_east_1: "us-gov-east-1",
  us_gov_west_1: "us-gov-west-1",
  us_iso_east_1: "us-iso-east-1",
  us_iso_west_1: "us-iso-west-1",
  us_isob_east_1: "us-isob-east-1",
  us_west_1: "us-west-1",
  us_west_2: "us-west-2"
};
var VPCRegion = {
  af_south_1: "af-south-1",
  ap_east_1: "ap-east-1",
  ap_northeast_1: "ap-northeast-1",
  ap_northeast_2: "ap-northeast-2",
  ap_northeast_3: "ap-northeast-3",
  ap_south_1: "ap-south-1",
  ap_south_2: "ap-south-2",
  ap_southeast_1: "ap-southeast-1",
  ap_southeast_2: "ap-southeast-2",
  ap_southeast_3: "ap-southeast-3",
  ap_southeast_4: "ap-southeast-4",
  ap_southeast_5: "ap-southeast-5",
  ap_southeast_7: "ap-southeast-7",
  ca_central_1: "ca-central-1",
  ca_west_1: "ca-west-1",
  cn_north_1: "cn-north-1",
  cn_northwest_1: "cn-northwest-1",
  eu_central_1: "eu-central-1",
  eu_central_2: "eu-central-2",
  eu_north_1: "eu-north-1",
  eu_south_1: "eu-south-1",
  eu_south_2: "eu-south-2",
  eu_west_1: "eu-west-1",
  eu_west_2: "eu-west-2",
  eu_west_3: "eu-west-3",
  il_central_1: "il-central-1",
  me_central_1: "me-central-1",
  me_south_1: "me-south-1",
  mx_central_1: "mx-central-1",
  sa_east_1: "sa-east-1",
  us_east_1: "us-east-1",
  us_east_2: "us-east-2",
  us_gov_east_1: "us-gov-east-1",
  us_gov_west_1: "us-gov-west-1",
  us_iso_east_1: "us-iso-east-1",
  us_iso_west_1: "us-iso-west-1",
  us_isob_east_1: "us-isob-east-1",
  us_west_1: "us-west-1",
  us_west_2: "us-west-2"
};
var ConflictingDomainExists = class _ConflictingDomainExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "ConflictingDomainExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConflictingDomainExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConflictingDomainExists.prototype);
  }
};
var InvalidVPCId = class _InvalidVPCId extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidVPCId",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidVPCId");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidVPCId.prototype);
  }
};
var LimitsExceeded = class _LimitsExceeded extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "LimitsExceeded",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "LimitsExceeded");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _LimitsExceeded.prototype);
  }
};
var NoSuchHostedZone = class _NoSuchHostedZone extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchHostedZone",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchHostedZone");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchHostedZone.prototype);
  }
};
var NotAuthorizedException = class _NotAuthorizedException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NotAuthorizedException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NotAuthorizedException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NotAuthorizedException.prototype);
  }
};
var PriorRequestNotComplete = class _PriorRequestNotComplete extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "PriorRequestNotComplete",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PriorRequestNotComplete");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _PriorRequestNotComplete.prototype);
  }
};
var PublicZoneVPCAssociation = class _PublicZoneVPCAssociation extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "PublicZoneVPCAssociation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "PublicZoneVPCAssociation");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _PublicZoneVPCAssociation.prototype);
  }
};
var CidrCollectionChangeAction = {
  DELETE_IF_EXISTS: "DELETE_IF_EXISTS",
  PUT: "PUT"
};
var CidrBlockInUseException = class _CidrBlockInUseException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "CidrBlockInUseException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CidrBlockInUseException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CidrBlockInUseException.prototype);
    this.Message = opts.Message;
  }
};
var CidrCollectionVersionMismatchException = class _CidrCollectionVersionMismatchException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "CidrCollectionVersionMismatchException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CidrCollectionVersionMismatchException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CidrCollectionVersionMismatchException.prototype);
    this.Message = opts.Message;
  }
};
var NoSuchCidrCollectionException = class _NoSuchCidrCollectionException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchCidrCollectionException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchCidrCollectionException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchCidrCollectionException.prototype);
    this.Message = opts.Message;
  }
};
var ChangeAction = {
  CREATE: "CREATE",
  DELETE: "DELETE",
  UPSERT: "UPSERT"
};
var ResourceRecordSetFailover = {
  PRIMARY: "PRIMARY",
  SECONDARY: "SECONDARY"
};
var ResourceRecordSetRegion = {
  af_south_1: "af-south-1",
  ap_east_1: "ap-east-1",
  ap_northeast_1: "ap-northeast-1",
  ap_northeast_2: "ap-northeast-2",
  ap_northeast_3: "ap-northeast-3",
  ap_south_1: "ap-south-1",
  ap_south_2: "ap-south-2",
  ap_southeast_1: "ap-southeast-1",
  ap_southeast_2: "ap-southeast-2",
  ap_southeast_3: "ap-southeast-3",
  ap_southeast_4: "ap-southeast-4",
  ap_southeast_5: "ap-southeast-5",
  ap_southeast_7: "ap-southeast-7",
  ca_central_1: "ca-central-1",
  ca_west_1: "ca-west-1",
  cn_north_1: "cn-north-1",
  cn_northwest_1: "cn-northwest-1",
  eu_central_1: "eu-central-1",
  eu_central_2: "eu-central-2",
  eu_north_1: "eu-north-1",
  eu_south_1: "eu-south-1",
  eu_south_2: "eu-south-2",
  eu_west_1: "eu-west-1",
  eu_west_2: "eu-west-2",
  eu_west_3: "eu-west-3",
  il_central_1: "il-central-1",
  me_central_1: "me-central-1",
  me_south_1: "me-south-1",
  mx_central_1: "mx-central-1",
  sa_east_1: "sa-east-1",
  us_east_1: "us-east-1",
  us_east_2: "us-east-2",
  us_west_1: "us-west-1",
  us_west_2: "us-west-2"
};
var RRType = {
  A: "A",
  AAAA: "AAAA",
  CAA: "CAA",
  CNAME: "CNAME",
  DS: "DS",
  HTTPS: "HTTPS",
  MX: "MX",
  NAPTR: "NAPTR",
  NS: "NS",
  PTR: "PTR",
  SOA: "SOA",
  SPF: "SPF",
  SRV: "SRV",
  SSHFP: "SSHFP",
  SVCB: "SVCB",
  TLSA: "TLSA",
  TXT: "TXT"
};
var InvalidChangeBatch = class _InvalidChangeBatch extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidChangeBatch",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidChangeBatch");
    __publicField(this, "$fault", "client");
    __publicField(this, "messages");
    Object.setPrototypeOf(this, _InvalidChangeBatch.prototype);
    this.messages = opts.messages;
  }
};
var NoSuchHealthCheck = class _NoSuchHealthCheck extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchHealthCheck",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchHealthCheck");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchHealthCheck.prototype);
  }
};
var TagResourceType = {
  healthcheck: "healthcheck",
  hostedzone: "hostedzone"
};
var ThrottlingException = class _ThrottlingException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ThrottlingException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var CidrCollectionAlreadyExistsException = class _CidrCollectionAlreadyExistsException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "CidrCollectionAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CidrCollectionAlreadyExistsException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CidrCollectionAlreadyExistsException.prototype);
    this.Message = opts.Message;
  }
};
var InsufficientDataHealthStatus = {
  Healthy: "Healthy",
  LastKnownStatus: "LastKnownStatus",
  Unhealthy: "Unhealthy"
};
var HealthCheckRegion = {
  ap_northeast_1: "ap-northeast-1",
  ap_southeast_1: "ap-southeast-1",
  ap_southeast_2: "ap-southeast-2",
  eu_west_1: "eu-west-1",
  sa_east_1: "sa-east-1",
  us_east_1: "us-east-1",
  us_west_1: "us-west-1",
  us_west_2: "us-west-2"
};
var HealthCheckType = {
  CALCULATED: "CALCULATED",
  CLOUDWATCH_METRIC: "CLOUDWATCH_METRIC",
  HTTP: "HTTP",
  HTTPS: "HTTPS",
  HTTPS_STR_MATCH: "HTTPS_STR_MATCH",
  HTTP_STR_MATCH: "HTTP_STR_MATCH",
  RECOVERY_CONTROL: "RECOVERY_CONTROL",
  TCP: "TCP"
};
var ComparisonOperator = {
  GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
  GreaterThanThreshold: "GreaterThanThreshold",
  LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
  LessThanThreshold: "LessThanThreshold"
};
var Statistic = {
  Average: "Average",
  Maximum: "Maximum",
  Minimum: "Minimum",
  SampleCount: "SampleCount",
  Sum: "Sum"
};
var HealthCheckAlreadyExists = class _HealthCheckAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HealthCheckAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HealthCheckAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HealthCheckAlreadyExists.prototype);
  }
};
var TooManyHealthChecks = class _TooManyHealthChecks extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyHealthChecks",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyHealthChecks");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyHealthChecks.prototype);
  }
};
var DelegationSetNotAvailable = class _DelegationSetNotAvailable extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DelegationSetNotAvailable",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DelegationSetNotAvailable");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DelegationSetNotAvailable.prototype);
  }
};
var DelegationSetNotReusable = class _DelegationSetNotReusable extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DelegationSetNotReusable",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DelegationSetNotReusable");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DelegationSetNotReusable.prototype);
  }
};
var HostedZoneAlreadyExists = class _HostedZoneAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HostedZoneAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HostedZoneAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HostedZoneAlreadyExists.prototype);
  }
};
var InvalidDomainName = class _InvalidDomainName extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidDomainName",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidDomainName");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidDomainName.prototype);
  }
};
var NoSuchDelegationSet = class _NoSuchDelegationSet extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchDelegationSet",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchDelegationSet");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchDelegationSet.prototype);
  }
};
var TooManyHostedZones = class _TooManyHostedZones extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyHostedZones",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyHostedZones");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyHostedZones.prototype);
  }
};
var InvalidArgument = class _InvalidArgument extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidArgument",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidArgument");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidArgument.prototype);
  }
};
var InvalidKeySigningKeyName = class _InvalidKeySigningKeyName extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidKeySigningKeyName",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidKeySigningKeyName");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidKeySigningKeyName.prototype);
  }
};
var KeySigningKeyAlreadyExists = class _KeySigningKeyAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "KeySigningKeyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeySigningKeyAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _KeySigningKeyAlreadyExists.prototype);
  }
};
var TooManyKeySigningKeys = class _TooManyKeySigningKeys extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyKeySigningKeys",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyKeySigningKeys");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyKeySigningKeys.prototype);
  }
};
var InsufficientCloudWatchLogsResourcePolicy = class _InsufficientCloudWatchLogsResourcePolicy extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InsufficientCloudWatchLogsResourcePolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InsufficientCloudWatchLogsResourcePolicy");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InsufficientCloudWatchLogsResourcePolicy.prototype);
  }
};
var NoSuchCloudWatchLogsLogGroup = class _NoSuchCloudWatchLogsLogGroup extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchCloudWatchLogsLogGroup",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchCloudWatchLogsLogGroup");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchCloudWatchLogsLogGroup.prototype);
  }
};
var QueryLoggingConfigAlreadyExists = class _QueryLoggingConfigAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "QueryLoggingConfigAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "QueryLoggingConfigAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _QueryLoggingConfigAlreadyExists.prototype);
  }
};
var DelegationSetAlreadyCreated = class _DelegationSetAlreadyCreated extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DelegationSetAlreadyCreated",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DelegationSetAlreadyCreated");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DelegationSetAlreadyCreated.prototype);
  }
};
var DelegationSetAlreadyReusable = class _DelegationSetAlreadyReusable extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DelegationSetAlreadyReusable",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DelegationSetAlreadyReusable");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DelegationSetAlreadyReusable.prototype);
  }
};
var HostedZoneNotFound = class _HostedZoneNotFound extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HostedZoneNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HostedZoneNotFound");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HostedZoneNotFound.prototype);
  }
};
var InvalidTrafficPolicyDocument = class _InvalidTrafficPolicyDocument extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidTrafficPolicyDocument",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidTrafficPolicyDocument");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidTrafficPolicyDocument.prototype);
  }
};
var TooManyTrafficPolicies = class _TooManyTrafficPolicies extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyTrafficPolicies",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyTrafficPolicies");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyTrafficPolicies.prototype);
  }
};
var TrafficPolicyAlreadyExists = class _TrafficPolicyAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TrafficPolicyAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TrafficPolicyAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TrafficPolicyAlreadyExists.prototype);
  }
};
var NoSuchTrafficPolicy = class _NoSuchTrafficPolicy extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchTrafficPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchTrafficPolicy");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchTrafficPolicy.prototype);
  }
};
var TooManyTrafficPolicyInstances = class _TooManyTrafficPolicyInstances extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyTrafficPolicyInstances",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyTrafficPolicyInstances");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyTrafficPolicyInstances.prototype);
  }
};
var TrafficPolicyInstanceAlreadyExists = class _TrafficPolicyInstanceAlreadyExists extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TrafficPolicyInstanceAlreadyExists",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TrafficPolicyInstanceAlreadyExists");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TrafficPolicyInstanceAlreadyExists.prototype);
  }
};
var TooManyTrafficPolicyVersionsForCurrentPolicy = class _TooManyTrafficPolicyVersionsForCurrentPolicy extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyTrafficPolicyVersionsForCurrentPolicy",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyTrafficPolicyVersionsForCurrentPolicy");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyTrafficPolicyVersionsForCurrentPolicy.prototype);
  }
};
var TooManyVPCAssociationAuthorizations = class _TooManyVPCAssociationAuthorizations extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TooManyVPCAssociationAuthorizations",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TooManyVPCAssociationAuthorizations");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TooManyVPCAssociationAuthorizations.prototype);
  }
};
var KeySigningKeyInParentDSRecord = class _KeySigningKeyInParentDSRecord extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "KeySigningKeyInParentDSRecord",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeySigningKeyInParentDSRecord");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _KeySigningKeyInParentDSRecord.prototype);
  }
};
var KeySigningKeyInUse = class _KeySigningKeyInUse extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "KeySigningKeyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeySigningKeyInUse");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _KeySigningKeyInUse.prototype);
  }
};
var CidrCollectionInUseException = class _CidrCollectionInUseException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "CidrCollectionInUseException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "CidrCollectionInUseException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _CidrCollectionInUseException.prototype);
    this.Message = opts.Message;
  }
};
var HealthCheckInUse = class _HealthCheckInUse extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HealthCheckInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HealthCheckInUse");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HealthCheckInUse.prototype);
  }
};
var HostedZoneNotEmpty = class _HostedZoneNotEmpty extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HostedZoneNotEmpty",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HostedZoneNotEmpty");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HostedZoneNotEmpty.prototype);
  }
};
var NoSuchQueryLoggingConfig = class _NoSuchQueryLoggingConfig extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchQueryLoggingConfig",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchQueryLoggingConfig");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchQueryLoggingConfig.prototype);
  }
};
var DelegationSetInUse = class _DelegationSetInUse extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DelegationSetInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DelegationSetInUse");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DelegationSetInUse.prototype);
  }
};
var TrafficPolicyInUse = class _TrafficPolicyInUse extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "TrafficPolicyInUse",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "TrafficPolicyInUse");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _TrafficPolicyInUse.prototype);
  }
};
var NoSuchTrafficPolicyInstance = class _NoSuchTrafficPolicyInstance extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchTrafficPolicyInstance",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchTrafficPolicyInstance");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchTrafficPolicyInstance.prototype);
  }
};
var VPCAssociationAuthorizationNotFound = class _VPCAssociationAuthorizationNotFound extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "VPCAssociationAuthorizationNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "VPCAssociationAuthorizationNotFound");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _VPCAssociationAuthorizationNotFound.prototype);
  }
};
var DNSSECNotFound = class _DNSSECNotFound extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "DNSSECNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "DNSSECNotFound");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _DNSSECNotFound.prototype);
  }
};
var LastVPCAssociation = class _LastVPCAssociation extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "LastVPCAssociation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "LastVPCAssociation");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _LastVPCAssociation.prototype);
  }
};
var VPCAssociationNotFound = class _VPCAssociationNotFound extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "VPCAssociationNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "VPCAssociationNotFound");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _VPCAssociationNotFound.prototype);
  }
};
var HostedZonePartiallyDelegated = class _HostedZonePartiallyDelegated extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HostedZonePartiallyDelegated",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HostedZonePartiallyDelegated");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HostedZonePartiallyDelegated.prototype);
  }
};
var KeySigningKeyWithActiveStatusNotFound = class _KeySigningKeyWithActiveStatusNotFound extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "KeySigningKeyWithActiveStatusNotFound",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "KeySigningKeyWithActiveStatusNotFound");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _KeySigningKeyWithActiveStatusNotFound.prototype);
  }
};
var NoSuchChange = class _NoSuchChange extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchChange",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchChange");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchChange.prototype);
  }
};
var NoSuchGeoLocation = class _NoSuchGeoLocation extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchGeoLocation",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchGeoLocation");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _NoSuchGeoLocation.prototype);
  }
};
var IncompatibleVersion = class _IncompatibleVersion extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "IncompatibleVersion",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "IncompatibleVersion");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _IncompatibleVersion.prototype);
  }
};
var HostedZoneLimitType = {
  MAX_RRSETS_BY_ZONE: "MAX_RRSETS_BY_ZONE",
  MAX_VPCS_ASSOCIATED_BY_ZONE: "MAX_VPCS_ASSOCIATED_BY_ZONE"
};
var HostedZoneNotPrivate = class _HostedZoneNotPrivate extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HostedZoneNotPrivate",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HostedZoneNotPrivate");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HostedZoneNotPrivate.prototype);
  }
};
var ReusableDelegationSetLimitType = {
  MAX_ZONES_BY_REUSABLE_DELEGATION_SET: "MAX_ZONES_BY_REUSABLE_DELEGATION_SET"
};
var NoSuchCidrLocationException = class _NoSuchCidrLocationException extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "NoSuchCidrLocationException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "NoSuchCidrLocationException");
    __publicField(this, "$fault", "client");
    __publicField(this, "Message");
    Object.setPrototypeOf(this, _NoSuchCidrLocationException.prototype);
    this.Message = opts.Message;
  }
};
var HostedZoneType = {
  PRIVATE_HOSTED_ZONE: "PrivateHostedZone"
};
var InvalidPaginationToken = class _InvalidPaginationToken extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "InvalidPaginationToken",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidPaginationToken");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidPaginationToken.prototype);
  }
};
var HealthCheckVersionMismatch = class _HealthCheckVersionMismatch extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "HealthCheckVersionMismatch",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "HealthCheckVersionMismatch");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _HealthCheckVersionMismatch.prototype);
  }
};
var ResettableElementName = {
  ChildHealthChecks: "ChildHealthChecks",
  FullyQualifiedDomainName: "FullyQualifiedDomainName",
  Regions: "Regions",
  ResourcePath: "ResourcePath"
};
var ConflictingTypes = class _ConflictingTypes extends Route53ServiceException {
  constructor(opts) {
    super({
      name: "ConflictingTypes",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConflictingTypes");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConflictingTypes.prototype);
  }
};

// node_modules/@aws-sdk/client-route-53/dist-es/protocols/Aws_restXml.js
var se_ActivateKeySigningKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_AssociateVPCWithHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/associatevpc");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_AVPCWHZR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_AVPCC, input[_C]).n(_C));
  }
  if (input[_VPC] != null) {
    bn.c(se_VPC(input[_VPC], context).n(_VPC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ChangeCidrCollectionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/cidrcollection/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CCCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  bn.lc(input, "Changes", "Changes", () => se_CidrCollectionChanges(input[_Ch], context));
  if (input[_CV] != null) {
    bn.c(XmlNode.of(_CV, String(input[_CV])).n(_CV));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ChangeResourceRecordSetsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/rrset");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CRRSR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CB] != null) {
    bn.c(se_ChangeBatch(input[_CB], context).n(_CB));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ChangeTagsForResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/tags/{ResourceType}/{ResourceId}");
  b2.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
  b2.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CTFRR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  bn.lc(input, "AddTags", "AddTags", () => se_TagList(input[_AT], context));
  bn.lc(input, "RemoveTagKeys", "RemoveTagKeys", () => se_TagKeyList(input[_RTK], context));
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateCidrCollectionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/cidrcollection");
  let body;
  body = _ve;
  const bn = new XmlNode(_CCCRr);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_CN, input[_CR]).n(_CR));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_CNo, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateHealthCheckCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/healthcheck");
  let body;
  body = _ve;
  const bn = new XmlNode(_CHCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_HCN, input[_CR]).n(_CR));
  }
  if (input[_HCC] != null) {
    bn.c(se_HealthCheckConfig(input[_HCC], context).n(_HCC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone");
  let body;
  body = _ve;
  const bn = new XmlNode(_CHZR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_No, input[_CR]).n(_CR));
  }
  if (input[_DSI] != null) {
    bn.c(XmlNode.of(_RI, input[_DSI]).n(_DSI));
  }
  if (input[_HZC] != null) {
    bn.c(se_HostedZoneConfig(input[_HZC], context).n(_HZC));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_DNSN, input[_N]).n(_N));
  }
  if (input[_VPC] != null) {
    bn.c(se_VPC(input[_VPC], context).n(_VPC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateKeySigningKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/keysigningkey");
  let body;
  body = _ve;
  const bn = new XmlNode(_CKSKR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_No, input[_CR]).n(_CR));
  }
  if (input[_HZI] != null) {
    bn.c(XmlNode.of(_RI, input[_HZI]).n(_HZI));
  }
  if (input[_KMSA] != null) {
    bn.c(XmlNode.of(_SKS, input[_KMSA]).n(_KMSA));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_SKN, input[_N]).n(_N));
  }
  if (input[_S] != null) {
    bn.c(XmlNode.of(_SKSi, input[_S]).n(_S));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateQueryLoggingConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/queryloggingconfig");
  let body;
  body = _ve;
  const bn = new XmlNode(_CQLCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  bn.cc(input, _CWLLGA);
  if (input[_HZI] != null) {
    bn.c(XmlNode.of(_RI, input[_HZI]).n(_HZI));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateReusableDelegationSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/delegationset");
  let body;
  body = _ve;
  const bn = new XmlNode(_CRDSR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_CR] != null) {
    bn.c(XmlNode.of(_No, input[_CR]).n(_CR));
  }
  if (input[_HZI] != null) {
    bn.c(XmlNode.of(_RI, input[_HZI]).n(_HZI));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateTrafficPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/trafficpolicy");
  let body;
  body = _ve;
  const bn = new XmlNode(_CTPR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_TPC, input[_C]).n(_C));
  }
  if (input[_D] != null) {
    bn.c(XmlNode.of(_TPD, input[_D]).n(_D));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_TPN, input[_N]).n(_N));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateTrafficPolicyInstanceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/trafficpolicyinstance");
  let body;
  body = _ve;
  const bn = new XmlNode(_CTPIR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_HZI] != null) {
    bn.c(XmlNode.of(_RI, input[_HZI]).n(_HZI));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_DNSN, input[_N]).n(_N));
  }
  if (input[_TTL] != null) {
    bn.c(XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
  }
  bn.cc(input, _TPI);
  if (input[_TPV] != null) {
    bn.c(XmlNode.of(_TPV, String(input[_TPV])).n(_TPV));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateTrafficPolicyVersionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/trafficpolicy/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CTPVR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_TPC, input[_C]).n(_C));
  }
  if (input[_D] != null) {
    bn.c(XmlNode.of(_TPD, input[_D]).n(_D));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CreateVPCAssociationAuthorizationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_CVPCAAR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_VPC] != null) {
    bn.c(se_VPC(input[_VPC], context).n(_VPC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeactivateKeySigningKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DeleteCidrCollectionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/cidrcollection/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteHealthCheckCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheck/{HealthCheckId}");
  b2.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteKeySigningKeyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  b2.p("Name", () => input.Name, "{Name}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteQueryLoggingConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/queryloggingconfig/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteReusableDelegationSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/delegationset/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteTrafficPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
  b2.p("Id", () => input.Id, "{Id}", false);
  b2.p("Version", () => input.Version.toString(), "{Version}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteTrafficPolicyInstanceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstance/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("DELETE").h(headers).b(body);
  return b2.build();
};
var se_DeleteVPCAssociationAuthorizationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_DVPCAAR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_VPC] != null) {
    bn.c(se_VPC(input[_VPC], context).n(_VPC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DisableHostedZoneDNSSECCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_DisassociateVPCFromHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_DVPCFHZR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_DVPCC, input[_C]).n(_C));
  }
  if (input[_VPC] != null) {
    bn.c(se_VPC(input[_VPC], context).n(_VPC));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_EnableHostedZoneDNSSECCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetAccountLimitCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/accountlimit/{Type}");
  b2.p("Type", () => input.Type, "{Type}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetChangeCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/change/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetCheckerIpRangesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/checkeripranges");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetDNSSECCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/dnssec");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetGeoLocationCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/geolocation");
  const query = map({
    [_c]: [, input[_CC]],
    [_co]: [, input[_CCo]],
    [_s]: [, input[_SC]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_GetHealthCheckCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheck/{HealthCheckId}");
  b2.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHealthCheckCountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheckcount");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHealthCheckLastFailureReasonCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason");
  b2.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHealthCheckStatusCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheck/{HealthCheckId}/status");
  b2.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHostedZoneCountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzonecount");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetHostedZoneLimitCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}");
  b2.p("Type", () => input.Type, "{Type}", false);
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetQueryLoggingConfigCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/queryloggingconfig/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetReusableDelegationSetCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/delegationset/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetReusableDelegationSetLimitCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}");
  b2.p("Type", () => input.Type, "{Type}", false);
  b2.p("DelegationSetId", () => input.DelegationSetId, "{DelegationSetId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetTrafficPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
  b2.p("Id", () => input.Id, "{Id}", false);
  b2.p("Version", () => input.Version.toString(), "{Version}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetTrafficPolicyInstanceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstance/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_GetTrafficPolicyInstanceCountCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstancecount");
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_ListCidrBlocksCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/cidrcollection/{CollectionId}/cidrblocks");
  b2.p("CollectionId", () => input.CollectionId, "{CollectionId}", false);
  const query = map({
    [_l]: [, input[_LN]],
    [_n]: [, input[_NT]],
    [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListCidrCollectionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/cidrcollection");
  const query = map({
    [_n]: [, input[_NT]],
    [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListCidrLocationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/cidrcollection/{CollectionId}");
  b2.p("CollectionId", () => input.CollectionId, "{CollectionId}", false);
  const query = map({
    [_n]: [, input[_NT]],
    [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListGeoLocationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/geolocations");
  const query = map({
    [_st]: [, input[_SCC]],
    [_sta]: [, input[_SCCt]],
    [_star]: [, input[_SSC]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListHealthChecksCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/healthcheck");
  const query = map({
    [_mar]: [, input[_M]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListHostedZonesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone");
  const query = map({
    [_mar]: [, input[_M]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    [_d]: [, input[_DSI]],
    [_h]: [, input[_HZT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListHostedZonesByNameCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzonesbyname");
  const query = map({
    [_dn]: [, input[_DNSN]],
    [_ho]: [, input[_HZI]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListHostedZonesByVPCCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzonesbyvpc");
  const query = map({
    [_v]: [, expectNonNull(input[_VPCI], `VPCId`)],
    [_vp]: [, expectNonNull(input[_VPCR], `VPCRegion`)],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    [_n]: [, input[_NT]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListQueryLoggingConfigsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/queryloggingconfig");
  const query = map({
    [_ho]: [, input[_HZI]],
    [_n]: [, input[_NT]],
    [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListResourceRecordSetsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/rrset");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  const query = map({
    [_na]: [, input[_SRN]],
    [_t]: [, input[_SRT]],
    [_i]: [, input[_SRI]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListReusableDelegationSetsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/delegationset");
  const query = map({
    [_mar]: [, input[_M]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTagsForResourceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/tags/{ResourceType}/{ResourceId}");
  b2.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
  b2.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_ListTagsForResourcesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/tags/{ResourceType}");
  b2.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_LTFRR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  bn.lc(input, "ResourceIds", "ResourceIds", () => se_TagResourceIdList(input[_RIe], context));
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListTrafficPoliciesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicies");
  const query = map({
    [_tr]: [, input[_TPIM]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTrafficPolicyInstancesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstances");
  const query = map({
    [_ho]: [, input[_HZIM]],
    [_tra]: [, input[_TPINM]],
    [_traf]: [, input[_TPITM]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTrafficPolicyInstancesByHostedZoneCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstances/hostedzone");
  const query = map({
    [_id]: [, expectNonNull(input[_HZI], `HostedZoneId`)],
    [_tra]: [, input[_TPINM]],
    [_traf]: [, input[_TPITM]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTrafficPolicyInstancesByPolicyCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicyinstances/trafficpolicy");
  const query = map({
    [_id]: [, expectNonNull(input[_TPI], `TrafficPolicyId`)],
    [_ver]: [
      expectNonNull(input.TrafficPolicyVersion, `TrafficPolicyVersion`) != null,
      () => input[_TPV].toString()
    ],
    [_ho]: [, input[_HZIM]],
    [_tra]: [, input[_TPINM]],
    [_traf]: [, input[_TPITM]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListTrafficPolicyVersionsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/trafficpolicies/{Id}/versions");
  b2.p("Id", () => input.Id, "{Id}", false);
  const query = map({
    [_traff]: [, input[_TPVM]],
    [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_ListVPCAssociationAuthorizationsCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation");
  b2.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
  const query = map({
    [_n]: [, input[_NT]],
    [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_TestDNSAnswerCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/2013-04-01/testdnsanswer");
  const query = map({
    [_ho]: [, expectNonNull(input[_HZI], `HostedZoneId`)],
    [_r]: [, expectNonNull(input[_RN], `RecordName`)],
    [_re]: [, expectNonNull(input[_RT], `RecordType`)],
    [_res]: [, input[_RIP]],
    [_e]: [, input[_EDNSCSIP]],
    [_ed]: [, input[_EDNSCSM]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_UpdateHealthCheckCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/healthcheck/{HealthCheckId}");
  b2.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UHCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_AI] != null) {
    bn.c(se_AlarmIdentifier(input[_AI], context).n(_AI));
  }
  bn.lc(input, "ChildHealthChecks", "ChildHealthChecks", () => se_ChildHealthCheckList(input[_CHC], context));
  if (input[_Di] != null) {
    bn.c(XmlNode.of(_Di, String(input[_Di])).n(_Di));
  }
  if (input[_ESNI] != null) {
    bn.c(XmlNode.of(_ESNI, String(input[_ESNI])).n(_ESNI));
  }
  if (input[_FT] != null) {
    bn.c(XmlNode.of(_FT, String(input[_FT])).n(_FT));
  }
  bn.cc(input, _FQDN);
  if (input[_HCV] != null) {
    bn.c(XmlNode.of(_HCV, String(input[_HCV])).n(_HCV));
  }
  if (input[_HT] != null) {
    bn.c(XmlNode.of(_HT, String(input[_HT])).n(_HT));
  }
  bn.cc(input, _IPA);
  bn.cc(input, _IDHS);
  if (input[_I] != null) {
    bn.c(XmlNode.of(_I, String(input[_I])).n(_I));
  }
  if (input[_P] != null) {
    bn.c(XmlNode.of(_P, String(input[_P])).n(_P));
  }
  bn.lc(input, "Regions", "Regions", () => se_HealthCheckRegionList(input[_R], context));
  bn.lc(input, "ResetElements", "ResetElements", () => se_ResettableElementNameList(input[_RE], context));
  bn.cc(input, _RP);
  bn.cc(input, _SS);
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateHostedZoneCommentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/hostedzone/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UHZCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_RD, input[_C]).n(_C));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateTrafficPolicyCommentCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
  b2.p("Id", () => input.Id, "{Id}", false);
  b2.p("Version", () => input.Version.toString(), "{Version}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UTPCR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_C] != null) {
    bn.c(XmlNode.of(_TPC, input[_C]).n(_C));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_UpdateTrafficPolicyInstanceCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/xml"
  };
  b2.bp("/2013-04-01/trafficpolicyinstance/{Id}");
  b2.p("Id", () => input.Id, "{Id}", false);
  let body;
  body = _ve;
  const bn = new XmlNode(_UTPIR);
  bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
  if (input[_TTL] != null) {
    bn.c(XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
  }
  bn.cc(input, _TPI);
  if (input[_TPV] != null) {
    bn.c(XmlNode.of(_TPV, String(input[_TPV])).n(_TPV));
  }
  body += bn.toString();
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_ActivateKeySigningKeyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_AssociateVPCWithHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_ChangeCidrCollectionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Id] != null) {
    contents[_Id] = expectString(data[_Id]);
  }
  return contents;
};
var de_ChangeResourceRecordSetsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_ChangeTagsForResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_CreateCidrCollectionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Co] != null) {
    contents[_Co] = de_CidrCollection(data[_Co], context);
  }
  return contents;
};
var de_CreateHealthCheckCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HC] != null) {
    contents[_HC] = de_HealthCheck(data[_HC], context);
  }
  return contents;
};
var de_CreateHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  if (data[_DS] != null) {
    contents[_DS] = de_DelegationSet(data[_DS], context);
  }
  if (data[_HZ] != null) {
    contents[_HZ] = de_HostedZone(data[_HZ], context);
  }
  if (data[_VPC] != null) {
    contents[_VPC] = de_VPC(data[_VPC], context);
  }
  return contents;
};
var de_CreateKeySigningKeyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  if (data[_KSK] != null) {
    contents[_KSK] = de_KeySigningKey(data[_KSK], context);
  }
  return contents;
};
var de_CreateQueryLoggingConfigCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_QLC] != null) {
    contents[_QLC] = de_QueryLoggingConfig(data[_QLC], context);
  }
  return contents;
};
var de_CreateReusableDelegationSetCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_DS] != null) {
    contents[_DS] = de_DelegationSet(data[_DS], context);
  }
  return contents;
};
var de_CreateTrafficPolicyCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TP] != null) {
    contents[_TP] = de_TrafficPolicy(data[_TP], context);
  }
  return contents;
};
var de_CreateTrafficPolicyInstanceCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TPIr] != null) {
    contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr], context);
  }
  return contents;
};
var de_CreateTrafficPolicyVersionCommand = async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_l]]
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TP] != null) {
    contents[_TP] = de_TrafficPolicy(data[_TP], context);
  }
  return contents;
};
var de_CreateVPCAssociationAuthorizationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZI] != null) {
    contents[_HZI] = expectString(data[_HZI]);
  }
  if (data[_VPC] != null) {
    contents[_VPC] = de_VPC(data[_VPC], context);
  }
  return contents;
};
var de_DeactivateKeySigningKeyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_DeleteCidrCollectionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteHealthCheckCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_DeleteKeySigningKeyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_DeleteQueryLoggingConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteReusableDelegationSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteTrafficPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteTrafficPolicyInstanceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DeleteVPCAssociationAuthorizationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var de_DisableHostedZoneDNSSECCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_DisassociateVPCFromHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_EnableHostedZoneDNSSECCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_GetAccountLimitCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Cou] != null) {
    contents[_Cou] = strictParseLong(data[_Cou]);
  }
  if (data[_Li] != null) {
    contents[_Li] = de_AccountLimit(data[_Li], context);
  }
  return contents;
};
var de_GetChangeCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_CI] != null) {
    contents[_CI] = de_ChangeInfo(data[_CI], context);
  }
  return contents;
};
var de_GetCheckerIpRangesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.CheckerIpRanges === "") {
    contents[_CIR] = [];
  } else if (data[_CIR] != null && data[_CIR][_me] != null) {
    contents[_CIR] = de_CheckerIpRanges(getArrayIfSingleItem(data[_CIR][_me]), context);
  }
  return contents;
};
var de_GetDNSSECCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.KeySigningKeys === "") {
    contents[_KSKe] = [];
  } else if (data[_KSKe] != null && data[_KSKe][_me] != null) {
    contents[_KSKe] = de_KeySigningKeys(getArrayIfSingleItem(data[_KSKe][_me]), context);
  }
  if (data[_S] != null) {
    contents[_S] = de_DNSSECStatus(data[_S], context);
  }
  return contents;
};
var de_GetGeoLocationCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_GLD] != null) {
    contents[_GLD] = de_GeoLocationDetails(data[_GLD], context);
  }
  return contents;
};
var de_GetHealthCheckCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HC] != null) {
    contents[_HC] = de_HealthCheck(data[_HC], context);
  }
  return contents;
};
var de_GetHealthCheckCountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HCCe] != null) {
    contents[_HCCe] = strictParseLong(data[_HCCe]);
  }
  return contents;
};
var de_GetHealthCheckLastFailureReasonCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.HealthCheckObservations === "") {
    contents[_HCO] = [];
  } else if (data[_HCO] != null && data[_HCO][_HCOe] != null) {
    contents[_HCO] = de_HealthCheckObservations(getArrayIfSingleItem(data[_HCO][_HCOe]), context);
  }
  return contents;
};
var de_GetHealthCheckStatusCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.HealthCheckObservations === "") {
    contents[_HCO] = [];
  } else if (data[_HCO] != null && data[_HCO][_HCOe] != null) {
    contents[_HCO] = de_HealthCheckObservations(getArrayIfSingleItem(data[_HCO][_HCOe]), context);
  }
  return contents;
};
var de_GetHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_DS] != null) {
    contents[_DS] = de_DelegationSet(data[_DS], context);
  }
  if (data[_HZ] != null) {
    contents[_HZ] = de_HostedZone(data[_HZ], context);
  }
  if (data.VPCs === "") {
    contents[_VPCs] = [];
  } else if (data[_VPCs] != null && data[_VPCs][_VPC] != null) {
    contents[_VPCs] = de_VPCs(getArrayIfSingleItem(data[_VPCs][_VPC]), context);
  }
  return contents;
};
var de_GetHostedZoneCountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZCo] != null) {
    contents[_HZCo] = strictParseLong(data[_HZCo]);
  }
  return contents;
};
var de_GetHostedZoneLimitCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Cou] != null) {
    contents[_Cou] = strictParseLong(data[_Cou]);
  }
  if (data[_Li] != null) {
    contents[_Li] = de_HostedZoneLimit(data[_Li], context);
  }
  return contents;
};
var de_GetQueryLoggingConfigCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_QLC] != null) {
    contents[_QLC] = de_QueryLoggingConfig(data[_QLC], context);
  }
  return contents;
};
var de_GetReusableDelegationSetCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_DS] != null) {
    contents[_DS] = de_DelegationSet(data[_DS], context);
  }
  return contents;
};
var de_GetReusableDelegationSetLimitCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Cou] != null) {
    contents[_Cou] = strictParseLong(data[_Cou]);
  }
  if (data[_Li] != null) {
    contents[_Li] = de_ReusableDelegationSetLimit(data[_Li], context);
  }
  return contents;
};
var de_GetTrafficPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TP] != null) {
    contents[_TP] = de_TrafficPolicy(data[_TP], context);
  }
  return contents;
};
var de_GetTrafficPolicyInstanceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TPIr] != null) {
    contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr], context);
  }
  return contents;
};
var de_GetTrafficPolicyInstanceCountCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TPIC] != null) {
    contents[_TPIC] = strictParseInt32(data[_TPIC]);
  }
  return contents;
};
var de_ListCidrBlocksCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.CidrBlocks === "") {
    contents[_CBi] = [];
  } else if (data[_CBi] != null && data[_CBi][_me] != null) {
    contents[_CBi] = de_CidrBlockSummaries(getArrayIfSingleItem(data[_CBi][_me]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  return contents;
};
var de_ListCidrCollectionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.CidrCollections === "") {
    contents[_CCi] = [];
  } else if (data[_CCi] != null && data[_CCi][_me] != null) {
    contents[_CCi] = de_CollectionSummaries(getArrayIfSingleItem(data[_CCi][_me]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  return contents;
};
var de_ListCidrLocationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.CidrLocations === "") {
    contents[_CL] = [];
  } else if (data[_CL] != null && data[_CL][_me] != null) {
    contents[_CL] = de_LocationSummaries(getArrayIfSingleItem(data[_CL][_me]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  return contents;
};
var de_ListGeoLocationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.GeoLocationDetailsList === "") {
    contents[_GLDL] = [];
  } else if (data[_GLDL] != null && data[_GLDL][_GLD] != null) {
    contents[_GLDL] = de_GeoLocationDetailsList(getArrayIfSingleItem(data[_GLDL][_GLD]), context);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NCC] != null) {
    contents[_NCC] = expectString(data[_NCC]);
  }
  if (data[_NCCe] != null) {
    contents[_NCCe] = expectString(data[_NCCe]);
  }
  if (data[_NSC] != null) {
    contents[_NSC] = expectString(data[_NSC]);
  }
  return contents;
};
var de_ListHealthChecksCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.HealthChecks === "") {
    contents[_HCe] = [];
  } else if (data[_HCe] != null && data[_HCe][_HC] != null) {
    contents[_HCe] = de_HealthChecks(getArrayIfSingleItem(data[_HCe][_HC]), context);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_M] != null) {
    contents[_M] = expectString(data[_M]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NM] != null) {
    contents[_NM] = expectString(data[_NM]);
  }
  return contents;
};
var de_ListHostedZonesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.HostedZones === "") {
    contents[_HZo] = [];
  } else if (data[_HZo] != null && data[_HZo][_HZ] != null) {
    contents[_HZo] = de_HostedZones(getArrayIfSingleItem(data[_HZo][_HZ]), context);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_M] != null) {
    contents[_M] = expectString(data[_M]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NM] != null) {
    contents[_NM] = expectString(data[_NM]);
  }
  return contents;
};
var de_ListHostedZonesByNameCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_DNSN] != null) {
    contents[_DNSN] = expectString(data[_DNSN]);
  }
  if (data[_HZI] != null) {
    contents[_HZI] = expectString(data[_HZI]);
  }
  if (data.HostedZones === "") {
    contents[_HZo] = [];
  } else if (data[_HZo] != null && data[_HZo][_HZ] != null) {
    contents[_HZo] = de_HostedZones(getArrayIfSingleItem(data[_HZo][_HZ]), context);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NDNSN] != null) {
    contents[_NDNSN] = expectString(data[_NDNSN]);
  }
  if (data[_NHZI] != null) {
    contents[_NHZI] = expectString(data[_NHZI]);
  }
  return contents;
};
var de_ListHostedZonesByVPCCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.HostedZoneSummaries === "") {
    contents[_HZS] = [];
  } else if (data[_HZS] != null && data[_HZS][_HZSo] != null) {
    contents[_HZS] = de_HostedZoneSummaries(getArrayIfSingleItem(data[_HZS][_HZSo]), context);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  return contents;
};
var de_ListQueryLoggingConfigsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  if (data.QueryLoggingConfigs === "") {
    contents[_QLCu] = [];
  } else if (data[_QLCu] != null && data[_QLCu][_QLC] != null) {
    contents[_QLCu] = de_QueryLoggingConfigs(getArrayIfSingleItem(data[_QLCu][_QLC]), context);
  }
  return contents;
};
var de_ListResourceRecordSetsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NRI] != null) {
    contents[_NRI] = expectString(data[_NRI]);
  }
  if (data[_NRN] != null) {
    contents[_NRN] = expectString(data[_NRN]);
  }
  if (data[_NRT] != null) {
    contents[_NRT] = expectString(data[_NRT]);
  }
  if (data.ResourceRecordSets === "") {
    contents[_RRS] = [];
  } else if (data[_RRS] != null && data[_RRS][_RRSe] != null) {
    contents[_RRS] = de_ResourceRecordSets(getArrayIfSingleItem(data[_RRS][_RRSe]), context);
  }
  return contents;
};
var de_ListReusableDelegationSetsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.DelegationSets === "") {
    contents[_DSe] = [];
  } else if (data[_DSe] != null && data[_DSe][_DS] != null) {
    contents[_DSe] = de_DelegationSets(getArrayIfSingleItem(data[_DSe][_DS]), context);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_M] != null) {
    contents[_M] = expectString(data[_M]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_NM] != null) {
    contents[_NM] = expectString(data[_NM]);
  }
  return contents;
};
var de_ListTagsForResourceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_RTS] != null) {
    contents[_RTS] = de_ResourceTagSet(data[_RTS], context);
  }
  return contents;
};
var de_ListTagsForResourcesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data.ResourceTagSets === "") {
    contents[_RTSe] = [];
  } else if (data[_RTSe] != null && data[_RTSe][_RTS] != null) {
    contents[_RTSe] = de_ResourceTagSetList(getArrayIfSingleItem(data[_RTSe][_RTS]), context);
  }
  return contents;
};
var de_ListTrafficPoliciesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_TPIM] != null) {
    contents[_TPIM] = expectString(data[_TPIM]);
  }
  if (data.TrafficPolicySummaries === "") {
    contents[_TPS] = [];
  } else if (data[_TPS] != null && data[_TPS][_TPSr] != null) {
    contents[_TPS] = de_TrafficPolicySummaries(getArrayIfSingleItem(data[_TPS][_TPSr]), context);
  }
  return contents;
};
var de_ListTrafficPolicyInstancesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZIM] != null) {
    contents[_HZIM] = expectString(data[_HZIM]);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_TPINM] != null) {
    contents[_TPINM] = expectString(data[_TPINM]);
  }
  if (data[_TPITM] != null) {
    contents[_TPITM] = expectString(data[_TPITM]);
  }
  if (data.TrafficPolicyInstances === "") {
    contents[_TPIra] = [];
  } else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
    contents[_TPIra] = de_TrafficPolicyInstances(getArrayIfSingleItem(data[_TPIra][_TPIr]), context);
  }
  return contents;
};
var de_ListTrafficPolicyInstancesByHostedZoneCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_TPINM] != null) {
    contents[_TPINM] = expectString(data[_TPINM]);
  }
  if (data[_TPITM] != null) {
    contents[_TPITM] = expectString(data[_TPITM]);
  }
  if (data.TrafficPolicyInstances === "") {
    contents[_TPIra] = [];
  } else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
    contents[_TPIra] = de_TrafficPolicyInstances(getArrayIfSingleItem(data[_TPIra][_TPIr]), context);
  }
  return contents;
};
var de_ListTrafficPolicyInstancesByPolicyCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZIM] != null) {
    contents[_HZIM] = expectString(data[_HZIM]);
  }
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data[_TPINM] != null) {
    contents[_TPINM] = expectString(data[_TPINM]);
  }
  if (data[_TPITM] != null) {
    contents[_TPITM] = expectString(data[_TPITM]);
  }
  if (data.TrafficPolicyInstances === "") {
    contents[_TPIra] = [];
  } else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
    contents[_TPIra] = de_TrafficPolicyInstances(getArrayIfSingleItem(data[_TPIra][_TPIr]), context);
  }
  return contents;
};
var de_ListTrafficPolicyVersionsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_IT] != null) {
    contents[_IT] = parseBoolean(data[_IT]);
  }
  if (data[_MI] != null) {
    contents[_MI] = strictParseInt32(data[_MI]);
  }
  if (data.TrafficPolicies === "") {
    contents[_TPr] = [];
  } else if (data[_TPr] != null && data[_TPr][_TP] != null) {
    contents[_TPr] = de_TrafficPolicies(getArrayIfSingleItem(data[_TPr][_TP]), context);
  }
  if (data[_TPVM] != null) {
    contents[_TPVM] = expectString(data[_TPVM]);
  }
  return contents;
};
var de_ListVPCAssociationAuthorizationsCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZI] != null) {
    contents[_HZI] = expectString(data[_HZI]);
  }
  if (data[_NT] != null) {
    contents[_NT] = expectString(data[_NT]);
  }
  if (data.VPCs === "") {
    contents[_VPCs] = [];
  } else if (data[_VPCs] != null && data[_VPCs][_VPC] != null) {
    contents[_VPCs] = de_VPCs(getArrayIfSingleItem(data[_VPCs][_VPC]), context);
  }
  return contents;
};
var de_TestDNSAnswerCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_Na] != null) {
    contents[_Na] = expectString(data[_Na]);
  }
  if (data[_Pr] != null) {
    contents[_Pr] = expectString(data[_Pr]);
  }
  if (data.RecordData === "") {
    contents[_RDe] = [];
  } else if (data[_RDe] != null && data[_RDe][_RDE] != null) {
    contents[_RDe] = de_RecordData(getArrayIfSingleItem(data[_RDe][_RDE]), context);
  }
  if (data[_RN] != null) {
    contents[_RN] = expectString(data[_RN]);
  }
  if (data[_RT] != null) {
    contents[_RT] = expectString(data[_RT]);
  }
  if (data[_RC] != null) {
    contents[_RC] = expectString(data[_RC]);
  }
  return contents;
};
var de_UpdateHealthCheckCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HC] != null) {
    contents[_HC] = de_HealthCheck(data[_HC], context);
  }
  return contents;
};
var de_UpdateHostedZoneCommentCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_HZ] != null) {
    contents[_HZ] = de_HostedZone(data[_HZ], context);
  }
  return contents;
};
var de_UpdateTrafficPolicyCommentCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TP] != null) {
    contents[_TP] = de_TrafficPolicy(data[_TP], context);
  }
  return contents;
};
var de_UpdateTrafficPolicyInstanceCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseXmlBody(output.body, context)), "body");
  if (data[_TPIr] != null) {
    contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr], context);
  }
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseXmlErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConcurrentModification":
    case "com.amazonaws.route53#ConcurrentModification":
      throw await de_ConcurrentModificationRes(parsedOutput, context);
    case "InvalidInput":
    case "com.amazonaws.route53#InvalidInput":
      throw await de_InvalidInputRes(parsedOutput, context);
    case "InvalidKMSArn":
    case "com.amazonaws.route53#InvalidKMSArn":
      throw await de_InvalidKMSArnRes(parsedOutput, context);
    case "InvalidKeySigningKeyStatus":
    case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
      throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
    case "InvalidSigningStatus":
    case "com.amazonaws.route53#InvalidSigningStatus":
      throw await de_InvalidSigningStatusRes(parsedOutput, context);
    case "NoSuchKeySigningKey":
    case "com.amazonaws.route53#NoSuchKeySigningKey":
      throw await de_NoSuchKeySigningKeyRes(parsedOutput, context);
    case "ConflictingDomainExists":
    case "com.amazonaws.route53#ConflictingDomainExists":
      throw await de_ConflictingDomainExistsRes(parsedOutput, context);
    case "InvalidVPCId":
    case "com.amazonaws.route53#InvalidVPCId":
      throw await de_InvalidVPCIdRes(parsedOutput, context);
    case "LimitsExceeded":
    case "com.amazonaws.route53#LimitsExceeded":
      throw await de_LimitsExceededRes(parsedOutput, context);
    case "NoSuchHostedZone":
    case "com.amazonaws.route53#NoSuchHostedZone":
      throw await de_NoSuchHostedZoneRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.route53#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "PriorRequestNotComplete":
    case "com.amazonaws.route53#PriorRequestNotComplete":
      throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
    case "PublicZoneVPCAssociation":
    case "com.amazonaws.route53#PublicZoneVPCAssociation":
      throw await de_PublicZoneVPCAssociationRes(parsedOutput, context);
    case "CidrBlockInUseException":
    case "com.amazonaws.route53#CidrBlockInUseException":
      throw await de_CidrBlockInUseExceptionRes(parsedOutput, context);
    case "CidrCollectionVersionMismatchException":
    case "com.amazonaws.route53#CidrCollectionVersionMismatchException":
      throw await de_CidrCollectionVersionMismatchExceptionRes(parsedOutput, context);
    case "NoSuchCidrCollectionException":
    case "com.amazonaws.route53#NoSuchCidrCollectionException":
      throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput, context);
    case "InvalidChangeBatch":
    case "com.amazonaws.route53#InvalidChangeBatch":
      throw await de_InvalidChangeBatchRes(parsedOutput, context);
    case "NoSuchHealthCheck":
    case "com.amazonaws.route53#NoSuchHealthCheck":
      throw await de_NoSuchHealthCheckRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.route53#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "CidrCollectionAlreadyExistsException":
    case "com.amazonaws.route53#CidrCollectionAlreadyExistsException":
      throw await de_CidrCollectionAlreadyExistsExceptionRes(parsedOutput, context);
    case "HealthCheckAlreadyExists":
    case "com.amazonaws.route53#HealthCheckAlreadyExists":
      throw await de_HealthCheckAlreadyExistsRes(parsedOutput, context);
    case "TooManyHealthChecks":
    case "com.amazonaws.route53#TooManyHealthChecks":
      throw await de_TooManyHealthChecksRes(parsedOutput, context);
    case "DelegationSetNotAvailable":
    case "com.amazonaws.route53#DelegationSetNotAvailable":
      throw await de_DelegationSetNotAvailableRes(parsedOutput, context);
    case "DelegationSetNotReusable":
    case "com.amazonaws.route53#DelegationSetNotReusable":
      throw await de_DelegationSetNotReusableRes(parsedOutput, context);
    case "HostedZoneAlreadyExists":
    case "com.amazonaws.route53#HostedZoneAlreadyExists":
      throw await de_HostedZoneAlreadyExistsRes(parsedOutput, context);
    case "InvalidDomainName":
    case "com.amazonaws.route53#InvalidDomainName":
      throw await de_InvalidDomainNameRes(parsedOutput, context);
    case "NoSuchDelegationSet":
    case "com.amazonaws.route53#NoSuchDelegationSet":
      throw await de_NoSuchDelegationSetRes(parsedOutput, context);
    case "TooManyHostedZones":
    case "com.amazonaws.route53#TooManyHostedZones":
      throw await de_TooManyHostedZonesRes(parsedOutput, context);
    case "InvalidArgument":
    case "com.amazonaws.route53#InvalidArgument":
      throw await de_InvalidArgumentRes(parsedOutput, context);
    case "InvalidKeySigningKeyName":
    case "com.amazonaws.route53#InvalidKeySigningKeyName":
      throw await de_InvalidKeySigningKeyNameRes(parsedOutput, context);
    case "KeySigningKeyAlreadyExists":
    case "com.amazonaws.route53#KeySigningKeyAlreadyExists":
      throw await de_KeySigningKeyAlreadyExistsRes(parsedOutput, context);
    case "TooManyKeySigningKeys":
    case "com.amazonaws.route53#TooManyKeySigningKeys":
      throw await de_TooManyKeySigningKeysRes(parsedOutput, context);
    case "InsufficientCloudWatchLogsResourcePolicy":
    case "com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy":
      throw await de_InsufficientCloudWatchLogsResourcePolicyRes(parsedOutput, context);
    case "NoSuchCloudWatchLogsLogGroup":
    case "com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup":
      throw await de_NoSuchCloudWatchLogsLogGroupRes(parsedOutput, context);
    case "QueryLoggingConfigAlreadyExists":
    case "com.amazonaws.route53#QueryLoggingConfigAlreadyExists":
      throw await de_QueryLoggingConfigAlreadyExistsRes(parsedOutput, context);
    case "DelegationSetAlreadyCreated":
    case "com.amazonaws.route53#DelegationSetAlreadyCreated":
      throw await de_DelegationSetAlreadyCreatedRes(parsedOutput, context);
    case "DelegationSetAlreadyReusable":
    case "com.amazonaws.route53#DelegationSetAlreadyReusable":
      throw await de_DelegationSetAlreadyReusableRes(parsedOutput, context);
    case "HostedZoneNotFound":
    case "com.amazonaws.route53#HostedZoneNotFound":
      throw await de_HostedZoneNotFoundRes(parsedOutput, context);
    case "InvalidTrafficPolicyDocument":
    case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
      throw await de_InvalidTrafficPolicyDocumentRes(parsedOutput, context);
    case "TooManyTrafficPolicies":
    case "com.amazonaws.route53#TooManyTrafficPolicies":
      throw await de_TooManyTrafficPoliciesRes(parsedOutput, context);
    case "TrafficPolicyAlreadyExists":
    case "com.amazonaws.route53#TrafficPolicyAlreadyExists":
      throw await de_TrafficPolicyAlreadyExistsRes(parsedOutput, context);
    case "NoSuchTrafficPolicy":
    case "com.amazonaws.route53#NoSuchTrafficPolicy":
      throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
    case "TooManyTrafficPolicyInstances":
    case "com.amazonaws.route53#TooManyTrafficPolicyInstances":
      throw await de_TooManyTrafficPolicyInstancesRes(parsedOutput, context);
    case "TrafficPolicyInstanceAlreadyExists":
    case "com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists":
      throw await de_TrafficPolicyInstanceAlreadyExistsRes(parsedOutput, context);
    case "TooManyTrafficPolicyVersionsForCurrentPolicy":
    case "com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy":
      throw await de_TooManyTrafficPolicyVersionsForCurrentPolicyRes(parsedOutput, context);
    case "TooManyVPCAssociationAuthorizations":
    case "com.amazonaws.route53#TooManyVPCAssociationAuthorizations":
      throw await de_TooManyVPCAssociationAuthorizationsRes(parsedOutput, context);
    case "KeySigningKeyInParentDSRecord":
    case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
      throw await de_KeySigningKeyInParentDSRecordRes(parsedOutput, context);
    case "KeySigningKeyInUse":
    case "com.amazonaws.route53#KeySigningKeyInUse":
      throw await de_KeySigningKeyInUseRes(parsedOutput, context);
    case "CidrCollectionInUseException":
    case "com.amazonaws.route53#CidrCollectionInUseException":
      throw await de_CidrCollectionInUseExceptionRes(parsedOutput, context);
    case "HealthCheckInUse":
    case "com.amazonaws.route53#HealthCheckInUse":
      throw await de_HealthCheckInUseRes(parsedOutput, context);
    case "HostedZoneNotEmpty":
    case "com.amazonaws.route53#HostedZoneNotEmpty":
      throw await de_HostedZoneNotEmptyRes(parsedOutput, context);
    case "NoSuchQueryLoggingConfig":
    case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
      throw await de_NoSuchQueryLoggingConfigRes(parsedOutput, context);
    case "DelegationSetInUse":
    case "com.amazonaws.route53#DelegationSetInUse":
      throw await de_DelegationSetInUseRes(parsedOutput, context);
    case "TrafficPolicyInUse":
    case "com.amazonaws.route53#TrafficPolicyInUse":
      throw await de_TrafficPolicyInUseRes(parsedOutput, context);
    case "NoSuchTrafficPolicyInstance":
    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
      throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
    case "VPCAssociationAuthorizationNotFound":
    case "com.amazonaws.route53#VPCAssociationAuthorizationNotFound":
      throw await de_VPCAssociationAuthorizationNotFoundRes(parsedOutput, context);
    case "DNSSECNotFound":
    case "com.amazonaws.route53#DNSSECNotFound":
      throw await de_DNSSECNotFoundRes(parsedOutput, context);
    case "LastVPCAssociation":
    case "com.amazonaws.route53#LastVPCAssociation":
      throw await de_LastVPCAssociationRes(parsedOutput, context);
    case "VPCAssociationNotFound":
    case "com.amazonaws.route53#VPCAssociationNotFound":
      throw await de_VPCAssociationNotFoundRes(parsedOutput, context);
    case "HostedZonePartiallyDelegated":
    case "com.amazonaws.route53#HostedZonePartiallyDelegated":
      throw await de_HostedZonePartiallyDelegatedRes(parsedOutput, context);
    case "KeySigningKeyWithActiveStatusNotFound":
    case "com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound":
      throw await de_KeySigningKeyWithActiveStatusNotFoundRes(parsedOutput, context);
    case "NoSuchChange":
    case "com.amazonaws.route53#NoSuchChange":
      throw await de_NoSuchChangeRes(parsedOutput, context);
    case "NoSuchGeoLocation":
    case "com.amazonaws.route53#NoSuchGeoLocation":
      throw await de_NoSuchGeoLocationRes(parsedOutput, context);
    case "IncompatibleVersion":
    case "com.amazonaws.route53#IncompatibleVersion":
      throw await de_IncompatibleVersionRes(parsedOutput, context);
    case "HostedZoneNotPrivate":
    case "com.amazonaws.route53#HostedZoneNotPrivate":
      throw await de_HostedZoneNotPrivateRes(parsedOutput, context);
    case "NoSuchCidrLocationException":
    case "com.amazonaws.route53#NoSuchCidrLocationException":
      throw await de_NoSuchCidrLocationExceptionRes(parsedOutput, context);
    case "InvalidPaginationToken":
    case "com.amazonaws.route53#InvalidPaginationToken":
      throw await de_InvalidPaginationTokenRes(parsedOutput, context);
    case "HealthCheckVersionMismatch":
    case "com.amazonaws.route53#HealthCheckVersionMismatch":
      throw await de_HealthCheckVersionMismatchRes(parsedOutput, context);
    case "ConflictingTypes":
    case "com.amazonaws.route53#ConflictingTypes":
      throw await de_ConflictingTypesRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(Route53ServiceException);
var de_CidrBlockInUseExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CidrBlockInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CidrCollectionAlreadyExistsExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CidrCollectionAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CidrCollectionInUseExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CidrCollectionInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_CidrCollectionVersionMismatchExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new CidrCollectionVersionMismatchException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ConcurrentModificationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new ConcurrentModification({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ConflictingDomainExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new ConflictingDomainExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ConflictingTypesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new ConflictingTypes({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DelegationSetAlreadyCreatedRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DelegationSetAlreadyCreated({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DelegationSetAlreadyReusableRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DelegationSetAlreadyReusable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DelegationSetInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DelegationSetInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DelegationSetNotAvailableRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DelegationSetNotAvailable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DelegationSetNotReusableRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DelegationSetNotReusable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_DNSSECNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new DNSSECNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HealthCheckAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HealthCheckAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HealthCheckInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HealthCheckInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HealthCheckVersionMismatchRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HealthCheckVersionMismatch({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HostedZoneAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HostedZoneAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HostedZoneNotEmptyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HostedZoneNotEmpty({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HostedZoneNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HostedZoneNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HostedZoneNotPrivateRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HostedZoneNotPrivate({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_HostedZonePartiallyDelegatedRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new HostedZonePartiallyDelegated({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_IncompatibleVersionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new IncompatibleVersion({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InsufficientCloudWatchLogsResourcePolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InsufficientCloudWatchLogsResourcePolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidArgumentRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidArgument({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidChangeBatchRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  if (data.messages === "") {
    contents[_mess] = [];
  } else if (data[_mess] != null && data[_mess][_Me] != null) {
    contents[_mess] = de_ErrorMessages(getArrayIfSingleItem(data[_mess][_Me]), context);
  }
  const exception = new InvalidChangeBatch({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidDomainNameRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidDomainName({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidInputRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidInput({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidKeySigningKeyNameRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidKeySigningKeyName({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidKeySigningKeyStatusRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidKeySigningKeyStatus({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidKMSArnRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidKMSArn({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidPaginationTokenRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidPaginationToken({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidSigningStatusRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidSigningStatus({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidTrafficPolicyDocumentRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidTrafficPolicyDocument({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_InvalidVPCIdRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new InvalidVPCId({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_KeySigningKeyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new KeySigningKeyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_KeySigningKeyInParentDSRecordRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new KeySigningKeyInParentDSRecord({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_KeySigningKeyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new KeySigningKeyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_KeySigningKeyWithActiveStatusNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new KeySigningKeyWithActiveStatusNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_LastVPCAssociationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new LastVPCAssociation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_LimitsExceededRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new LimitsExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchChangeRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchChange({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchCidrCollectionExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchCidrCollectionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchCidrLocationExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = expectString(data[_Me]);
  }
  const exception = new NoSuchCidrLocationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchCloudWatchLogsLogGroupRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchCloudWatchLogsLogGroup({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchDelegationSetRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchDelegationSet({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchGeoLocationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchGeoLocation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchHealthCheckRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchHealthCheck({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchHostedZoneRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchHostedZone({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchKeySigningKeyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchKeySigningKey({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchQueryLoggingConfigRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchQueryLoggingConfig({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchTrafficPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchTrafficPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NoSuchTrafficPolicyInstanceRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NoSuchTrafficPolicyInstance({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new NotAuthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_PriorRequestNotCompleteRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new PriorRequestNotComplete({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_PublicZoneVPCAssociationRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new PublicZoneVPCAssociation({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_QueryLoggingConfigAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new QueryLoggingConfigAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_ThrottlingExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyHealthChecksRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyHealthChecks({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyHostedZonesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyHostedZones({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyKeySigningKeysRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyKeySigningKeys({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyTrafficPoliciesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyTrafficPolicies({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyTrafficPolicyInstancesRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyTrafficPolicyInstances({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyTrafficPolicyVersionsForCurrentPolicyRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyTrafficPolicyVersionsForCurrentPolicy({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TooManyVPCAssociationAuthorizationsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TooManyVPCAssociationAuthorizations({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TrafficPolicyAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TrafficPolicyAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TrafficPolicyInstanceAlreadyExistsRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TrafficPolicyInstanceAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_TrafficPolicyInUseRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new TrafficPolicyInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_VPCAssociationAuthorizationNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new VPCAssociationAuthorizationNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var de_VPCAssociationNotFoundRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body.Error;
  if (data[_mes] != null) {
    contents[_mes] = expectString(data[_mes]);
  }
  const exception = new VPCAssociationNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body.Error);
};
var se_AlarmIdentifier = (input, context) => {
  const bn = new XmlNode(_AI);
  if (input[_Re] != null) {
    bn.c(XmlNode.of(_CWR, input[_Re]).n(_Re));
  }
  if (input[_N] != null) {
    bn.c(XmlNode.of(_AN, input[_N]).n(_N));
  }
  return bn;
};
var se_AliasTarget = (input, context) => {
  const bn = new XmlNode(_ATl);
  if (input[_HZI] != null) {
    bn.c(XmlNode.of(_RI, input[_HZI]).n(_HZI));
  }
  bn.cc(input, _DNSN);
  if (input[_ETH] != null) {
    bn.c(XmlNode.of(_AHE, String(input[_ETH])).n(_ETH));
  }
  return bn;
};
var se_Change = (input, context) => {
  const bn = new XmlNode(_Cha);
  if (input[_A] != null) {
    bn.c(XmlNode.of(_CA, input[_A]).n(_A));
  }
  if (input[_RRSe] != null) {
    bn.c(se_ResourceRecordSet(input[_RRSe], context).n(_RRSe));
  }
  return bn;
};
var se_ChangeBatch = (input, context) => {
  const bn = new XmlNode(_CB);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_RD, input[_C]).n(_C));
  }
  bn.lc(input, "Changes", "Changes", () => se_Changes(input[_Ch], context));
  return bn;
};
var se_Changes = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_Change(entry, context);
    return n2.n(_Cha);
  });
};
var se_ChildHealthCheckList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_HCI, entry);
    return n2.n(_CHCh);
  });
};
var se_CidrCollectionChange = (input, context) => {
  const bn = new XmlNode(_CCC);
  if (input[_LN] != null) {
    bn.c(XmlNode.of(_CLNDNA, input[_LN]).n(_LN));
  }
  if (input[_A] != null) {
    bn.c(XmlNode.of(_CCCA, input[_A]).n(_A));
  }
  bn.lc(input, "CidrList", "CidrList", () => se_CidrList(input[_CLi], context));
  return bn;
};
var se_CidrCollectionChanges = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_CidrCollectionChange(entry, context);
    return n2.n(_me);
  });
};
var se_CidrList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_Ci, entry);
    return n2.n(_Ci);
  });
};
var se_CidrRoutingConfig = (input, context) => {
  const bn = new XmlNode(_CRC);
  if (input[_CIo] != null) {
    bn.c(XmlNode.of(_UUID, input[_CIo]).n(_CIo));
  }
  if (input[_LN] != null) {
    bn.c(XmlNode.of(_CLNDA, input[_LN]).n(_LN));
  }
  return bn;
};
var se_Coordinates = (input, context) => {
  const bn = new XmlNode(_Coo);
  bn.cc(input, _La);
  bn.cc(input, _Lo);
  return bn;
};
var se_GeoLocation = (input, context) => {
  const bn = new XmlNode(_GL);
  if (input[_CC] != null) {
    bn.c(XmlNode.of(_GLCC, input[_CC]).n(_CC));
  }
  if (input[_CCo] != null) {
    bn.c(XmlNode.of(_GLCCe, input[_CCo]).n(_CCo));
  }
  if (input[_SC] != null) {
    bn.c(XmlNode.of(_GLSC, input[_SC]).n(_SC));
  }
  return bn;
};
var se_GeoProximityLocation = (input, context) => {
  const bn = new XmlNode(_GPL);
  bn.cc(input, _AWSR);
  bn.cc(input, _LZG);
  if (input[_Coo] != null) {
    bn.c(se_Coordinates(input[_Coo], context).n(_Coo));
  }
  if (input[_B] != null) {
    bn.c(XmlNode.of(_B, String(input[_B])).n(_B));
  }
  return bn;
};
var se_HealthCheckConfig = (input, context) => {
  const bn = new XmlNode(_HCC);
  bn.cc(input, _IPA);
  if (input[_P] != null) {
    bn.c(XmlNode.of(_P, String(input[_P])).n(_P));
  }
  if (input[_T] != null) {
    bn.c(XmlNode.of(_HCT, input[_T]).n(_T));
  }
  bn.cc(input, _RP);
  bn.cc(input, _FQDN);
  bn.cc(input, _SS);
  if (input[_RIeq] != null) {
    bn.c(XmlNode.of(_RIeq, String(input[_RIeq])).n(_RIeq));
  }
  if (input[_FT] != null) {
    bn.c(XmlNode.of(_FT, String(input[_FT])).n(_FT));
  }
  if (input[_ML] != null) {
    bn.c(XmlNode.of(_ML, String(input[_ML])).n(_ML));
  }
  if (input[_I] != null) {
    bn.c(XmlNode.of(_I, String(input[_I])).n(_I));
  }
  if (input[_Di] != null) {
    bn.c(XmlNode.of(_Di, String(input[_Di])).n(_Di));
  }
  if (input[_HT] != null) {
    bn.c(XmlNode.of(_HT, String(input[_HT])).n(_HT));
  }
  bn.lc(input, "ChildHealthChecks", "ChildHealthChecks", () => se_ChildHealthCheckList(input[_CHC], context));
  if (input[_ESNI] != null) {
    bn.c(XmlNode.of(_ESNI, String(input[_ESNI])).n(_ESNI));
  }
  bn.lc(input, "Regions", "Regions", () => se_HealthCheckRegionList(input[_R], context));
  if (input[_AI] != null) {
    bn.c(se_AlarmIdentifier(input[_AI], context).n(_AI));
  }
  bn.cc(input, _IDHS);
  bn.cc(input, _RCA);
  return bn;
};
var se_HealthCheckRegionList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_HCR, entry);
    return n2.n(_Re);
  });
};
var se_HostedZoneConfig = (input, context) => {
  const bn = new XmlNode(_HZC);
  if (input[_C] != null) {
    bn.c(XmlNode.of(_RD, input[_C]).n(_C));
  }
  if (input[_PZ] != null) {
    bn.c(XmlNode.of(_IPZ, String(input[_PZ])).n(_PZ));
  }
  return bn;
};
var se_ResettableElementNameList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_REN, entry);
    return n2.n(_REN);
  });
};
var se_ResourceRecord = (input, context) => {
  const bn = new XmlNode(_RR);
  if (input[_V] != null) {
    bn.c(XmlNode.of(_RDa, input[_V]).n(_V));
  }
  return bn;
};
var se_ResourceRecords = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_ResourceRecord(entry, context);
    return n2.n(_RR);
  });
};
var se_ResourceRecordSet = (input, context) => {
  const bn = new XmlNode(_RRSe);
  if (input[_N] != null) {
    bn.c(XmlNode.of(_DNSN, input[_N]).n(_N));
  }
  if (input[_T] != null) {
    bn.c(XmlNode.of(_RRT, input[_T]).n(_T));
  }
  if (input[_SI] != null) {
    bn.c(XmlNode.of(_RRSI, input[_SI]).n(_SI));
  }
  if (input[_W] != null) {
    bn.c(XmlNode.of(_RRSW, String(input[_W])).n(_W));
  }
  if (input[_Re] != null) {
    bn.c(XmlNode.of(_RRSR, input[_Re]).n(_Re));
  }
  if (input[_GL] != null) {
    bn.c(se_GeoLocation(input[_GL], context).n(_GL));
  }
  if (input[_F] != null) {
    bn.c(XmlNode.of(_RRSF, input[_F]).n(_F));
  }
  if (input[_MVA] != null) {
    bn.c(XmlNode.of(_RRSMVA, String(input[_MVA])).n(_MVA));
  }
  if (input[_TTL] != null) {
    bn.c(XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
  }
  bn.lc(input, "ResourceRecords", "ResourceRecords", () => se_ResourceRecords(input[_RRe], context));
  if (input[_ATl] != null) {
    bn.c(se_AliasTarget(input[_ATl], context).n(_ATl));
  }
  bn.cc(input, _HCI);
  bn.cc(input, _TPII);
  if (input[_CRC] != null) {
    bn.c(se_CidrRoutingConfig(input[_CRC], context).n(_CRC));
  }
  if (input[_GPL] != null) {
    bn.c(se_GeoProximityLocation(input[_GPL], context).n(_GPL));
  }
  return bn;
};
var se_Tag = (input, context) => {
  const bn = new XmlNode(_Ta);
  if (input[_K] != null) {
    bn.c(XmlNode.of(_TK, input[_K]).n(_K));
  }
  if (input[_V] != null) {
    bn.c(XmlNode.of(_TV, input[_V]).n(_V));
  }
  return bn;
};
var se_TagKeyList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_TK, entry);
    return n2.n(_K);
  });
};
var se_TagList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = se_Tag(entry, context);
    return n2.n(_Ta);
  });
};
var se_TagResourceIdList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    const n2 = XmlNode.of(_TRI, entry);
    return n2.n(_RI);
  });
};
var se_VPC = (input, context) => {
  const bn = new XmlNode(_VPC);
  bn.cc(input, _VPCR);
  bn.cc(input, _VPCI);
  return bn;
};
var de_AccountLimit = (output, context) => {
  const contents = {};
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_V] != null) {
    contents[_V] = strictParseLong(output[_V]);
  }
  return contents;
};
var de_AlarmIdentifier = (output, context) => {
  const contents = {};
  if (output[_Re] != null) {
    contents[_Re] = expectString(output[_Re]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  return contents;
};
var de_AliasTarget = (output, context) => {
  const contents = {};
  if (output[_HZI] != null) {
    contents[_HZI] = expectString(output[_HZI]);
  }
  if (output[_DNSN] != null) {
    contents[_DNSN] = expectString(output[_DNSN]);
  }
  if (output[_ETH] != null) {
    contents[_ETH] = parseBoolean(output[_ETH]);
  }
  return contents;
};
var de_ChangeInfo = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_S] != null) {
    contents[_S] = expectString(output[_S]);
  }
  if (output[_SA] != null) {
    contents[_SA] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_SA]));
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_CheckerIpRanges = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ChildHealthCheckList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_CidrBlockSummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CidrBlockSummary(entry, context);
  });
};
var de_CidrBlockSummary = (output, context) => {
  const contents = {};
  if (output[_CBid] != null) {
    contents[_CBid] = expectString(output[_CBid]);
  }
  if (output[_LN] != null) {
    contents[_LN] = expectString(output[_LN]);
  }
  return contents;
};
var de_CidrCollection = (output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Ve] != null) {
    contents[_Ve] = strictParseLong(output[_Ve]);
  }
  return contents;
};
var de_CidrRoutingConfig = (output, context) => {
  const contents = {};
  if (output[_CIo] != null) {
    contents[_CIo] = expectString(output[_CIo]);
  }
  if (output[_LN] != null) {
    contents[_LN] = expectString(output[_LN]);
  }
  return contents;
};
var de_CloudWatchAlarmConfiguration = (output, context) => {
  const contents = {};
  if (output[_EP] != null) {
    contents[_EP] = strictParseInt32(output[_EP]);
  }
  if (output[_Th] != null) {
    contents[_Th] = strictParseFloat(output[_Th]);
  }
  if (output[_CO] != null) {
    contents[_CO] = expectString(output[_CO]);
  }
  if (output[_Pe] != null) {
    contents[_Pe] = strictParseInt32(output[_Pe]);
  }
  if (output[_MN] != null) {
    contents[_MN] = expectString(output[_MN]);
  }
  if (output[_Nam] != null) {
    contents[_Nam] = expectString(output[_Nam]);
  }
  if (output[_St] != null) {
    contents[_St] = expectString(output[_St]);
  }
  if (output.Dimensions === "") {
    contents[_Dim] = [];
  } else if (output[_Dim] != null && output[_Dim][_Dime] != null) {
    contents[_Dim] = de_DimensionList(getArrayIfSingleItem(output[_Dim][_Dime]), context);
  }
  return contents;
};
var de_CollectionSummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CollectionSummary(entry, context);
  });
};
var de_CollectionSummary = (output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = expectString(output[_Ar]);
  }
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_Ve] != null) {
    contents[_Ve] = strictParseLong(output[_Ve]);
  }
  return contents;
};
var de_Coordinates = (output, context) => {
  const contents = {};
  if (output[_La] != null) {
    contents[_La] = expectString(output[_La]);
  }
  if (output[_Lo] != null) {
    contents[_Lo] = expectString(output[_Lo]);
  }
  return contents;
};
var de_DelegationSet = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output.NameServers === "") {
    contents[_NS] = [];
  } else if (output[_NS] != null && output[_NS][_NSa] != null) {
    contents[_NS] = de_DelegationSetNameServers(getArrayIfSingleItem(output[_NS][_NSa]), context);
  }
  return contents;
};
var de_DelegationSetNameServers = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_DelegationSets = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_DelegationSet(entry, context);
  });
};
var de_Dimension = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  return contents;
};
var de_DimensionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Dimension(entry, context);
  });
};
var de_DNSSECStatus = (output, context) => {
  const contents = {};
  if (output[_SSe] != null) {
    contents[_SSe] = expectString(output[_SSe]);
  }
  if (output[_SM] != null) {
    contents[_SM] = expectString(output[_SM]);
  }
  return contents;
};
var de_ErrorMessages = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_GeoLocation = (output, context) => {
  const contents = {};
  if (output[_CC] != null) {
    contents[_CC] = expectString(output[_CC]);
  }
  if (output[_CCo] != null) {
    contents[_CCo] = expectString(output[_CCo]);
  }
  if (output[_SC] != null) {
    contents[_SC] = expectString(output[_SC]);
  }
  return contents;
};
var de_GeoLocationDetails = (output, context) => {
  const contents = {};
  if (output[_CC] != null) {
    contents[_CC] = expectString(output[_CC]);
  }
  if (output[_CNon] != null) {
    contents[_CNon] = expectString(output[_CNon]);
  }
  if (output[_CCo] != null) {
    contents[_CCo] = expectString(output[_CCo]);
  }
  if (output[_CNou] != null) {
    contents[_CNou] = expectString(output[_CNou]);
  }
  if (output[_SC] != null) {
    contents[_SC] = expectString(output[_SC]);
  }
  if (output[_SN] != null) {
    contents[_SN] = expectString(output[_SN]);
  }
  return contents;
};
var de_GeoLocationDetailsList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GeoLocationDetails(entry, context);
  });
};
var de_GeoProximityLocation = (output, context) => {
  const contents = {};
  if (output[_AWSR] != null) {
    contents[_AWSR] = expectString(output[_AWSR]);
  }
  if (output[_LZG] != null) {
    contents[_LZG] = expectString(output[_LZG]);
  }
  if (output[_Coo] != null) {
    contents[_Coo] = de_Coordinates(output[_Coo], context);
  }
  if (output[_B] != null) {
    contents[_B] = strictParseInt32(output[_B]);
  }
  return contents;
};
var de_HealthCheck = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_LS] != null) {
    contents[_LS] = de_LinkedService(output[_LS], context);
  }
  if (output[_HCC] != null) {
    contents[_HCC] = de_HealthCheckConfig(output[_HCC], context);
  }
  if (output[_HCV] != null) {
    contents[_HCV] = strictParseLong(output[_HCV]);
  }
  if (output[_CWAC] != null) {
    contents[_CWAC] = de_CloudWatchAlarmConfiguration(output[_CWAC], context);
  }
  return contents;
};
var de_HealthCheckConfig = (output, context) => {
  const contents = {};
  if (output[_IPA] != null) {
    contents[_IPA] = expectString(output[_IPA]);
  }
  if (output[_P] != null) {
    contents[_P] = strictParseInt32(output[_P]);
  }
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_RP] != null) {
    contents[_RP] = expectString(output[_RP]);
  }
  if (output[_FQDN] != null) {
    contents[_FQDN] = expectString(output[_FQDN]);
  }
  if (output[_SS] != null) {
    contents[_SS] = expectString(output[_SS]);
  }
  if (output[_RIeq] != null) {
    contents[_RIeq] = strictParseInt32(output[_RIeq]);
  }
  if (output[_FT] != null) {
    contents[_FT] = strictParseInt32(output[_FT]);
  }
  if (output[_ML] != null) {
    contents[_ML] = parseBoolean(output[_ML]);
  }
  if (output[_I] != null) {
    contents[_I] = parseBoolean(output[_I]);
  }
  if (output[_Di] != null) {
    contents[_Di] = parseBoolean(output[_Di]);
  }
  if (output[_HT] != null) {
    contents[_HT] = strictParseInt32(output[_HT]);
  }
  if (output.ChildHealthChecks === "") {
    contents[_CHC] = [];
  } else if (output[_CHC] != null && output[_CHC][_CHCh] != null) {
    contents[_CHC] = de_ChildHealthCheckList(getArrayIfSingleItem(output[_CHC][_CHCh]), context);
  }
  if (output[_ESNI] != null) {
    contents[_ESNI] = parseBoolean(output[_ESNI]);
  }
  if (output.Regions === "") {
    contents[_R] = [];
  } else if (output[_R] != null && output[_R][_Re] != null) {
    contents[_R] = de_HealthCheckRegionList(getArrayIfSingleItem(output[_R][_Re]), context);
  }
  if (output[_AI] != null) {
    contents[_AI] = de_AlarmIdentifier(output[_AI], context);
  }
  if (output[_IDHS] != null) {
    contents[_IDHS] = expectString(output[_IDHS]);
  }
  if (output[_RCA] != null) {
    contents[_RCA] = expectString(output[_RCA]);
  }
  return contents;
};
var de_HealthCheckObservation = (output, context) => {
  const contents = {};
  if (output[_Re] != null) {
    contents[_Re] = expectString(output[_Re]);
  }
  if (output[_IPA] != null) {
    contents[_IPA] = expectString(output[_IPA]);
  }
  if (output[_SR] != null) {
    contents[_SR] = de_StatusReport(output[_SR], context);
  }
  return contents;
};
var de_HealthCheckObservations = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HealthCheckObservation(entry, context);
  });
};
var de_HealthCheckRegionList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_HealthChecks = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HealthCheck(entry, context);
  });
};
var de_HostedZone = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_CR] != null) {
    contents[_CR] = expectString(output[_CR]);
  }
  if (output[_Con] != null) {
    contents[_Con] = de_HostedZoneConfig(output[_Con], context);
  }
  if (output[_RRSC] != null) {
    contents[_RRSC] = strictParseLong(output[_RRSC]);
  }
  if (output[_LS] != null) {
    contents[_LS] = de_LinkedService(output[_LS], context);
  }
  return contents;
};
var de_HostedZoneConfig = (output, context) => {
  const contents = {};
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  if (output[_PZ] != null) {
    contents[_PZ] = parseBoolean(output[_PZ]);
  }
  return contents;
};
var de_HostedZoneLimit = (output, context) => {
  const contents = {};
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_V] != null) {
    contents[_V] = strictParseLong(output[_V]);
  }
  return contents;
};
var de_HostedZoneOwner = (output, context) => {
  const contents = {};
  if (output[_OA] != null) {
    contents[_OA] = expectString(output[_OA]);
  }
  if (output[_OS] != null) {
    contents[_OS] = expectString(output[_OS]);
  }
  return contents;
};
var de_HostedZones = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HostedZone(entry, context);
  });
};
var de_HostedZoneSummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_HostedZoneSummary(entry, context);
  });
};
var de_HostedZoneSummary = (output, context) => {
  const contents = {};
  if (output[_HZI] != null) {
    contents[_HZI] = expectString(output[_HZI]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_O] != null) {
    contents[_O] = de_HostedZoneOwner(output[_O], context);
  }
  return contents;
};
var de_KeySigningKey = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_KA] != null) {
    contents[_KA] = expectString(output[_KA]);
  }
  if (output[_Fl] != null) {
    contents[_Fl] = strictParseInt32(output[_Fl]);
  }
  if (output[_SAM] != null) {
    contents[_SAM] = expectString(output[_SAM]);
  }
  if (output[_SAT] != null) {
    contents[_SAT] = strictParseInt32(output[_SAT]);
  }
  if (output[_DAM] != null) {
    contents[_DAM] = expectString(output[_DAM]);
  }
  if (output[_DAT] != null) {
    contents[_DAT] = strictParseInt32(output[_DAT]);
  }
  if (output[_KT] != null) {
    contents[_KT] = strictParseInt32(output[_KT]);
  }
  if (output[_DV] != null) {
    contents[_DV] = expectString(output[_DV]);
  }
  if (output[_PK] != null) {
    contents[_PK] = expectString(output[_PK]);
  }
  if (output[_DSR] != null) {
    contents[_DSR] = expectString(output[_DSR]);
  }
  if (output[_DNSKEYR] != null) {
    contents[_DNSKEYR] = expectString(output[_DNSKEYR]);
  }
  if (output[_S] != null) {
    contents[_S] = expectString(output[_S]);
  }
  if (output[_SM] != null) {
    contents[_SM] = expectString(output[_SM]);
  }
  if (output[_CD] != null) {
    contents[_CD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CD]));
  }
  if (output[_LMD] != null) {
    contents[_LMD] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_LMD]));
  }
  return contents;
};
var de_KeySigningKeys = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_KeySigningKey(entry, context);
  });
};
var de_LinkedService = (output, context) => {
  const contents = {};
  if (output[_SP] != null) {
    contents[_SP] = expectString(output[_SP]);
  }
  if (output[_De] != null) {
    contents[_De] = expectString(output[_De]);
  }
  return contents;
};
var de_LocationSummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LocationSummary(entry, context);
  });
};
var de_LocationSummary = (output, context) => {
  const contents = {};
  if (output[_LN] != null) {
    contents[_LN] = expectString(output[_LN]);
  }
  return contents;
};
var de_QueryLoggingConfig = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_HZI] != null) {
    contents[_HZI] = expectString(output[_HZI]);
  }
  if (output[_CWLLGA] != null) {
    contents[_CWLLGA] = expectString(output[_CWLLGA]);
  }
  return contents;
};
var de_QueryLoggingConfigs = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_QueryLoggingConfig(entry, context);
  });
};
var de_RecordData = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return expectString(entry);
  });
};
var de_ResourceRecord = (output, context) => {
  const contents = {};
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  return contents;
};
var de_ResourceRecords = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceRecord(entry, context);
  });
};
var de_ResourceRecordSet = (output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_SI] != null) {
    contents[_SI] = expectString(output[_SI]);
  }
  if (output[_W] != null) {
    contents[_W] = strictParseLong(output[_W]);
  }
  if (output[_Re] != null) {
    contents[_Re] = expectString(output[_Re]);
  }
  if (output[_GL] != null) {
    contents[_GL] = de_GeoLocation(output[_GL], context);
  }
  if (output[_F] != null) {
    contents[_F] = expectString(output[_F]);
  }
  if (output[_MVA] != null) {
    contents[_MVA] = parseBoolean(output[_MVA]);
  }
  if (output[_TTL] != null) {
    contents[_TTL] = strictParseLong(output[_TTL]);
  }
  if (output.ResourceRecords === "") {
    contents[_RRe] = [];
  } else if (output[_RRe] != null && output[_RRe][_RR] != null) {
    contents[_RRe] = de_ResourceRecords(getArrayIfSingleItem(output[_RRe][_RR]), context);
  }
  if (output[_ATl] != null) {
    contents[_ATl] = de_AliasTarget(output[_ATl], context);
  }
  if (output[_HCI] != null) {
    contents[_HCI] = expectString(output[_HCI]);
  }
  if (output[_TPII] != null) {
    contents[_TPII] = expectString(output[_TPII]);
  }
  if (output[_CRC] != null) {
    contents[_CRC] = de_CidrRoutingConfig(output[_CRC], context);
  }
  if (output[_GPL] != null) {
    contents[_GPL] = de_GeoProximityLocation(output[_GPL], context);
  }
  return contents;
};
var de_ResourceRecordSets = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceRecordSet(entry, context);
  });
};
var de_ResourceTagSet = (output, context) => {
  const contents = {};
  if (output[_RTe] != null) {
    contents[_RTe] = expectString(output[_RTe]);
  }
  if (output[_RI] != null) {
    contents[_RI] = expectString(output[_RI]);
  }
  if (output.Tags === "") {
    contents[_Tag] = [];
  } else if (output[_Tag] != null && output[_Tag][_Ta] != null) {
    contents[_Tag] = de_TagList(getArrayIfSingleItem(output[_Tag][_Ta]), context);
  }
  return contents;
};
var de_ResourceTagSetList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ResourceTagSet(entry, context);
  });
};
var de_ReusableDelegationSetLimit = (output, context) => {
  const contents = {};
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_V] != null) {
    contents[_V] = strictParseLong(output[_V]);
  }
  return contents;
};
var de_StatusReport = (output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = expectString(output[_S]);
  }
  if (output[_CT] != null) {
    contents[_CT] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_CT]));
  }
  return contents;
};
var de_Tag = (output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = expectString(output[_K]);
  }
  if (output[_V] != null) {
    contents[_V] = expectString(output[_V]);
  }
  return contents;
};
var de_TagList = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Tag(entry, context);
  });
};
var de_TrafficPolicies = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficPolicy(entry, context);
  });
};
var de_TrafficPolicy = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_Ve] != null) {
    contents[_Ve] = strictParseInt32(output[_Ve]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_D] != null) {
    contents[_D] = expectString(output[_D]);
  }
  if (output[_C] != null) {
    contents[_C] = expectString(output[_C]);
  }
  return contents;
};
var de_TrafficPolicyInstance = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_HZI] != null) {
    contents[_HZI] = expectString(output[_HZI]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_TTL] != null) {
    contents[_TTL] = strictParseLong(output[_TTL]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = expectString(output[_Sta]);
  }
  if (output[_Me] != null) {
    contents[_Me] = expectString(output[_Me]);
  }
  if (output[_TPI] != null) {
    contents[_TPI] = expectString(output[_TPI]);
  }
  if (output[_TPV] != null) {
    contents[_TPV] = strictParseInt32(output[_TPV]);
  }
  if (output[_TPT] != null) {
    contents[_TPT] = expectString(output[_TPT]);
  }
  return contents;
};
var de_TrafficPolicyInstances = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficPolicyInstance(entry, context);
  });
};
var de_TrafficPolicySummaries = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_TrafficPolicySummary(entry, context);
  });
};
var de_TrafficPolicySummary = (output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = expectString(output[_Id]);
  }
  if (output[_N] != null) {
    contents[_N] = expectString(output[_N]);
  }
  if (output[_T] != null) {
    contents[_T] = expectString(output[_T]);
  }
  if (output[_LV] != null) {
    contents[_LV] = strictParseInt32(output[_LV]);
  }
  if (output[_TPCr] != null) {
    contents[_TPCr] = strictParseInt32(output[_TPCr]);
  }
  return contents;
};
var de_VPC = (output, context) => {
  const contents = {};
  if (output[_VPCR] != null) {
    contents[_VPCR] = expectString(output[_VPCR]);
  }
  if (output[_VPCI] != null) {
    contents[_VPCI] = expectString(output[_VPCI]);
  }
  return contents;
};
var de_VPCs = (output, context) => {
  return (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_VPC(entry, context);
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _A = "Action";
var _AHE = "AliasHealthEnabled";
var _AI = "AlarmIdentifier";
var _AN = "AlarmName";
var _AT = "AddTags";
var _ATl = "AliasTarget";
var _AVPCC = "AssociateVPCComment";
var _AVPCWHZR = "AssociateVPCWithHostedZoneRequest";
var _AWSR = "AWSRegion";
var _Ar = "Arn";
var _B = "Bias";
var _C = "Comment";
var _CA = "ChangeAction";
var _CB = "ChangeBatch";
var _CBi = "CidrBlocks";
var _CBid = "CidrBlock";
var _CC = "ContinentCode";
var _CCC = "CidrCollectionChange";
var _CCCA = "CidrCollectionChangeAction";
var _CCCR = "ChangeCidrCollectionRequest";
var _CCCRr = "CreateCidrCollectionRequest";
var _CCi = "CidrCollections";
var _CCo = "CountryCode";
var _CD = "CreatedDate";
var _CHC = "ChildHealthChecks";
var _CHCR = "CreateHealthCheckRequest";
var _CHCh = "ChildHealthCheck";
var _CHZR = "CreateHostedZoneRequest";
var _CI = "ChangeInfo";
var _CIR = "CheckerIpRanges";
var _CIo = "CollectionId";
var _CKSKR = "CreateKeySigningKeyRequest";
var _CL = "CidrLocations";
var _CLNDA = "CidrLocationNameDefaultAllowed";
var _CLNDNA = "CidrLocationNameDefaultNotAllowed";
var _CLi = "CidrList";
var _CN = "CidrNonce";
var _CNo = "CollectionName";
var _CNon = "ContinentName";
var _CNou = "CountryName";
var _CO = "ComparisonOperator";
var _CQLCR = "CreateQueryLoggingConfigRequest";
var _CR = "CallerReference";
var _CRC = "CidrRoutingConfig";
var _CRDSR = "CreateReusableDelegationSetRequest";
var _CRRSR = "ChangeResourceRecordSetsRequest";
var _CT = "CheckedTime";
var _CTFRR = "ChangeTagsForResourceRequest";
var _CTPIR = "CreateTrafficPolicyInstanceRequest";
var _CTPR = "CreateTrafficPolicyRequest";
var _CTPVR = "CreateTrafficPolicyVersionRequest";
var _CV = "CollectionVersion";
var _CVPCAAR = "CreateVPCAssociationAuthorizationRequest";
var _CWAC = "CloudWatchAlarmConfiguration";
var _CWLLGA = "CloudWatchLogsLogGroupArn";
var _CWR = "CloudWatchRegion";
var _Ch = "Changes";
var _Cha = "Change";
var _Ci = "Cidr";
var _Co = "Collection";
var _Con = "Config";
var _Coo = "Coordinates";
var _Cou = "Count";
var _D = "Document";
var _DAM = "DigestAlgorithmMnemonic";
var _DAT = "DigestAlgorithmType";
var _DNSKEYR = "DNSKEYRecord";
var _DNSN = "DNSName";
var _DS = "DelegationSet";
var _DSI = "DelegationSetId";
var _DSR = "DSRecord";
var _DSe = "DelegationSets";
var _DV = "DigestValue";
var _DVPCAAR = "DeleteVPCAssociationAuthorizationRequest";
var _DVPCC = "DisassociateVPCComment";
var _DVPCFHZR = "DisassociateVPCFromHostedZoneRequest";
var _De = "Description";
var _Di = "Disabled";
var _Dim = "Dimensions";
var _Dime = "Dimension";
var _EDNSCSIP = "EDNS0ClientSubnetIP";
var _EDNSCSM = "EDNS0ClientSubnetMask";
var _EP = "EvaluationPeriods";
var _ESNI = "EnableSNI";
var _ETH = "EvaluateTargetHealth";
var _F = "Failover";
var _FQDN = "FullyQualifiedDomainName";
var _FT = "FailureThreshold";
var _Fl = "Flag";
var _GL = "GeoLocation";
var _GLCC = "GeoLocationContinentCode";
var _GLCCe = "GeoLocationCountryCode";
var _GLD = "GeoLocationDetails";
var _GLDL = "GeoLocationDetailsList";
var _GLSC = "GeoLocationSubdivisionCode";
var _GPL = "GeoProximityLocation";
var _HC = "HealthCheck";
var _HCC = "HealthCheckConfig";
var _HCCe = "HealthCheckCount";
var _HCI = "HealthCheckId";
var _HCN = "HealthCheckNonce";
var _HCO = "HealthCheckObservations";
var _HCOe = "HealthCheckObservation";
var _HCR = "HealthCheckRegion";
var _HCT = "HealthCheckType";
var _HCV = "HealthCheckVersion";
var _HCe = "HealthChecks";
var _HT = "HealthThreshold";
var _HZ = "HostedZone";
var _HZC = "HostedZoneConfig";
var _HZCo = "HostedZoneCount";
var _HZI = "HostedZoneId";
var _HZIM = "HostedZoneIdMarker";
var _HZS = "HostedZoneSummaries";
var _HZSo = "HostedZoneSummary";
var _HZT = "HostedZoneType";
var _HZo = "HostedZones";
var _I = "Inverted";
var _IDHS = "InsufficientDataHealthStatus";
var _IPA = "IPAddress";
var _IPZ = "IsPrivateZone";
var _IT = "IsTruncated";
var _Id = "Id";
var _K = "Key";
var _KA = "KmsArn";
var _KMSA = "KeyManagementServiceArn";
var _KSK = "KeySigningKey";
var _KSKe = "KeySigningKeys";
var _KT = "KeyTag";
var _L = "Location";
var _LMD = "LastModifiedDate";
var _LN = "LocationName";
var _LS = "LinkedService";
var _LTFRR = "ListTagsForResourcesRequest";
var _LV = "LatestVersion";
var _LZG = "LocalZoneGroup";
var _La = "Latitude";
var _Li = "Limit";
var _Lo = "Longitude";
var _M = "Marker";
var _MI = "MaxItems";
var _ML = "MeasureLatency";
var _MN = "MetricName";
var _MR = "MaxResults";
var _MVA = "MultiValueAnswer";
var _Me = "Message";
var _N = "Name";
var _NCC = "NextContinentCode";
var _NCCe = "NextCountryCode";
var _NDNSN = "NextDNSName";
var _NHZI = "NextHostedZoneId";
var _NM = "NextMarker";
var _NRI = "NextRecordIdentifier";
var _NRN = "NextRecordName";
var _NRT = "NextRecordType";
var _NS = "NameServers";
var _NSC = "NextSubdivisionCode";
var _NSa = "NameServer";
var _NT = "NextToken";
var _Na = "Nameserver";
var _Nam = "Namespace";
var _No = "Nonce";
var _O = "Owner";
var _OA = "OwningAccount";
var _OS = "OwningService";
var _P = "Port";
var _PK = "PublicKey";
var _PZ = "PrivateZone";
var _Pe = "Period";
var _Pr = "Protocol";
var _QLC = "QueryLoggingConfig";
var _QLCu = "QueryLoggingConfigs";
var _R = "Regions";
var _RC = "ResponseCode";
var _RCA = "RoutingControlArn";
var _RD = "ResourceDescription";
var _RDE = "RecordDataEntry";
var _RDa = "RData";
var _RDe = "RecordData";
var _RE = "ResetElements";
var _REN = "ResettableElementName";
var _RI = "ResourceId";
var _RIP = "ResolverIP";
var _RIe = "ResourceIds";
var _RIeq = "RequestInterval";
var _RN = "RecordName";
var _RP = "ResourcePath";
var _RR = "ResourceRecord";
var _RRS = "ResourceRecordSets";
var _RRSC = "ResourceRecordSetCount";
var _RRSF = "ResourceRecordSetFailover";
var _RRSI = "ResourceRecordSetIdentifier";
var _RRSMVA = "ResourceRecordSetMultiValueAnswer";
var _RRSR = "ResourceRecordSetRegion";
var _RRSW = "ResourceRecordSetWeight";
var _RRSe = "ResourceRecordSet";
var _RRT = "RRType";
var _RRe = "ResourceRecords";
var _RT = "RecordType";
var _RTK = "RemoveTagKeys";
var _RTS = "ResourceTagSet";
var _RTSe = "ResourceTagSets";
var _RTe = "ResourceType";
var _Re = "Region";
var _S = "Status";
var _SA = "SubmittedAt";
var _SAM = "SigningAlgorithmMnemonic";
var _SAT = "SigningAlgorithmType";
var _SC = "SubdivisionCode";
var _SCC = "StartContinentCode";
var _SCCt = "StartCountryCode";
var _SI = "SetIdentifier";
var _SKN = "SigningKeyName";
var _SKS = "SigningKeyString";
var _SKSi = "SigningKeyStatus";
var _SM = "StatusMessage";
var _SN = "SubdivisionName";
var _SP = "ServicePrincipal";
var _SR = "StatusReport";
var _SRI = "StartRecordIdentifier";
var _SRN = "StartRecordName";
var _SRT = "StartRecordType";
var _SS = "SearchString";
var _SSC = "StartSubdivisionCode";
var _SSe = "ServeSignature";
var _St = "Statistic";
var _Sta = "State";
var _T = "Type";
var _TK = "TagKey";
var _TP = "TrafficPolicy";
var _TPC = "TrafficPolicyComment";
var _TPCr = "TrafficPolicyCount";
var _TPD = "TrafficPolicyDocument";
var _TPI = "TrafficPolicyId";
var _TPIC = "TrafficPolicyInstanceCount";
var _TPII = "TrafficPolicyInstanceId";
var _TPIM = "TrafficPolicyIdMarker";
var _TPINM = "TrafficPolicyInstanceNameMarker";
var _TPITM = "TrafficPolicyInstanceTypeMarker";
var _TPIr = "TrafficPolicyInstance";
var _TPIra = "TrafficPolicyInstances";
var _TPN = "TrafficPolicyName";
var _TPS = "TrafficPolicySummaries";
var _TPSr = "TrafficPolicySummary";
var _TPT = "TrafficPolicyType";
var _TPV = "TrafficPolicyVersion";
var _TPVM = "TrafficPolicyVersionMarker";
var _TPr = "TrafficPolicies";
var _TRI = "TagResourceId";
var _TTL = "TTL";
var _TV = "TagValue";
var _Ta = "Tag";
var _Tag = "Tags";
var _Th = "Threshold";
var _UHCR = "UpdateHealthCheckRequest";
var _UHZCR = "UpdateHostedZoneCommentRequest";
var _UTPCR = "UpdateTrafficPolicyCommentRequest";
var _UTPIR = "UpdateTrafficPolicyInstanceRequest";
var _UUID = "UUID";
var _V = "Value";
var _VPC = "VPC";
var _VPCI = "VPCId";
var _VPCR = "VPCRegion";
var _VPCs = "VPCs";
var _Ve = "Version";
var _W = "Weight";
var _c = "continentcode";
var _co = "countrycode";
var _d = "delegationsetid";
var _dn = "dnsname";
var _e = "edns0clientsubnetip";
var _ed = "edns0clientsubnetmask";
var _h = "hostedzonetype";
var _ho = "hostedzoneid";
var _i = "identifier";
var _id = "id";
var _l = "location";
var _m = "maxresults";
var _ma = "maxitems";
var _mar = "marker";
var _me = "member";
var _mes = "message";
var _mess = "messages";
var _n = "nexttoken";
var _na = "name";
var _r = "recordname";
var _re = "recordtype";
var _res = "resolverip";
var _s = "subdivisioncode";
var _st = "startcontinentcode";
var _sta = "startcountrycode";
var _star = "startsubdivisioncode";
var _t = "type";
var _tr = "trafficpolicyid";
var _tra = "trafficpolicyinstancename";
var _traf = "trafficpolicyinstancetype";
var _traff = "trafficpolicyversion";
var _v = "vpcid";
var _ve = '<?xml version="1.0" encoding="UTF-8"?>';
var _ver = "version";
var _vp = "vpcregion";

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ActivateKeySigningKeyCommand.js
var ActivateKeySigningKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ActivateKeySigningKey", {}).n("Route53Client", "ActivateKeySigningKeyCommand").f(void 0, void 0).ser(se_ActivateKeySigningKeyCommand).de(de_ActivateKeySigningKeyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/AssociateVPCWithHostedZoneCommand.js
var AssociateVPCWithHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "AssociateVPCWithHostedZone", {}).n("Route53Client", "AssociateVPCWithHostedZoneCommand").f(void 0, void 0).ser(se_AssociateVPCWithHostedZoneCommand).de(de_AssociateVPCWithHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ChangeCidrCollectionCommand.js
var ChangeCidrCollectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ChangeCidrCollection", {}).n("Route53Client", "ChangeCidrCollectionCommand").f(void 0, void 0).ser(se_ChangeCidrCollectionCommand).de(de_ChangeCidrCollectionCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ChangeResourceRecordSetsCommand.js
var ChangeResourceRecordSetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getChangeResourceRecordSetsPlugin(config),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ChangeResourceRecordSets", {}).n("Route53Client", "ChangeResourceRecordSetsCommand").f(void 0, void 0).ser(se_ChangeResourceRecordSetsCommand).de(de_ChangeResourceRecordSetsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ChangeTagsForResourceCommand.js
var ChangeTagsForResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ChangeTagsForResource", {}).n("Route53Client", "ChangeTagsForResourceCommand").f(void 0, void 0).ser(se_ChangeTagsForResourceCommand).de(de_ChangeTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateCidrCollectionCommand.js
var CreateCidrCollectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "CreateCidrCollection", {}).n("Route53Client", "CreateCidrCollectionCommand").f(void 0, void 0).ser(se_CreateCidrCollectionCommand).de(de_CreateCidrCollectionCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateHealthCheckCommand.js
var CreateHealthCheckCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "CreateHealthCheck", {}).n("Route53Client", "CreateHealthCheckCommand").f(void 0, void 0).ser(se_CreateHealthCheckCommand).de(de_CreateHealthCheckCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateHostedZoneCommand.js
var CreateHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateHostedZone", {}).n("Route53Client", "CreateHostedZoneCommand").f(void 0, void 0).ser(se_CreateHostedZoneCommand).de(de_CreateHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateKeySigningKeyCommand.js
var CreateKeySigningKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateKeySigningKey", {}).n("Route53Client", "CreateKeySigningKeyCommand").f(void 0, void 0).ser(se_CreateKeySigningKeyCommand).de(de_CreateKeySigningKeyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateQueryLoggingConfigCommand.js
var CreateQueryLoggingConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateQueryLoggingConfig", {}).n("Route53Client", "CreateQueryLoggingConfigCommand").f(void 0, void 0).ser(se_CreateQueryLoggingConfigCommand).de(de_CreateQueryLoggingConfigCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateReusableDelegationSetCommand.js
var CreateReusableDelegationSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateReusableDelegationSet", {}).n("Route53Client", "CreateReusableDelegationSetCommand").f(void 0, void 0).ser(se_CreateReusableDelegationSetCommand).de(de_CreateReusableDelegationSetCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateTrafficPolicyCommand.js
var CreateTrafficPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "CreateTrafficPolicy", {}).n("Route53Client", "CreateTrafficPolicyCommand").f(void 0, void 0).ser(se_CreateTrafficPolicyCommand).de(de_CreateTrafficPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateTrafficPolicyInstanceCommand.js
var CreateTrafficPolicyInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateTrafficPolicyInstance", {}).n("Route53Client", "CreateTrafficPolicyInstanceCommand").f(void 0, void 0).ser(se_CreateTrafficPolicyInstanceCommand).de(de_CreateTrafficPolicyInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateTrafficPolicyVersionCommand.js
var CreateTrafficPolicyVersionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateTrafficPolicyVersion", {}).n("Route53Client", "CreateTrafficPolicyVersionCommand").f(void 0, void 0).ser(se_CreateTrafficPolicyVersionCommand).de(de_CreateTrafficPolicyVersionCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/CreateVPCAssociationAuthorizationCommand.js
var CreateVPCAssociationAuthorizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "CreateVPCAssociationAuthorization", {}).n("Route53Client", "CreateVPCAssociationAuthorizationCommand").f(void 0, void 0).ser(se_CreateVPCAssociationAuthorizationCommand).de(de_CreateVPCAssociationAuthorizationCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeactivateKeySigningKeyCommand.js
var DeactivateKeySigningKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeactivateKeySigningKey", {}).n("Route53Client", "DeactivateKeySigningKeyCommand").f(void 0, void 0).ser(se_DeactivateKeySigningKeyCommand).de(de_DeactivateKeySigningKeyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteCidrCollectionCommand.js
var DeleteCidrCollectionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteCidrCollection", {}).n("Route53Client", "DeleteCidrCollectionCommand").f(void 0, void 0).ser(se_DeleteCidrCollectionCommand).de(de_DeleteCidrCollectionCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteHealthCheckCommand.js
var DeleteHealthCheckCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "DeleteHealthCheck", {}).n("Route53Client", "DeleteHealthCheckCommand").f(void 0, void 0).ser(se_DeleteHealthCheckCommand).de(de_DeleteHealthCheckCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteHostedZoneCommand.js
var DeleteHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteHostedZone", {}).n("Route53Client", "DeleteHostedZoneCommand").f(void 0, void 0).ser(se_DeleteHostedZoneCommand).de(de_DeleteHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteKeySigningKeyCommand.js
var DeleteKeySigningKeyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteKeySigningKey", {}).n("Route53Client", "DeleteKeySigningKeyCommand").f(void 0, void 0).ser(se_DeleteKeySigningKeyCommand).de(de_DeleteKeySigningKeyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteQueryLoggingConfigCommand.js
var DeleteQueryLoggingConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteQueryLoggingConfig", {}).n("Route53Client", "DeleteQueryLoggingConfigCommand").f(void 0, void 0).ser(se_DeleteQueryLoggingConfigCommand).de(de_DeleteQueryLoggingConfigCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteReusableDelegationSetCommand.js
var DeleteReusableDelegationSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteReusableDelegationSet", {}).n("Route53Client", "DeleteReusableDelegationSetCommand").f(void 0, void 0).ser(se_DeleteReusableDelegationSetCommand).de(de_DeleteReusableDelegationSetCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteTrafficPolicyCommand.js
var DeleteTrafficPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteTrafficPolicy", {}).n("Route53Client", "DeleteTrafficPolicyCommand").f(void 0, void 0).ser(se_DeleteTrafficPolicyCommand).de(de_DeleteTrafficPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteTrafficPolicyInstanceCommand.js
var DeleteTrafficPolicyInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteTrafficPolicyInstance", {}).n("Route53Client", "DeleteTrafficPolicyInstanceCommand").f(void 0, void 0).ser(se_DeleteTrafficPolicyInstanceCommand).de(de_DeleteTrafficPolicyInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DeleteVPCAssociationAuthorizationCommand.js
var DeleteVPCAssociationAuthorizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DeleteVPCAssociationAuthorization", {}).n("Route53Client", "DeleteVPCAssociationAuthorizationCommand").f(void 0, void 0).ser(se_DeleteVPCAssociationAuthorizationCommand).de(de_DeleteVPCAssociationAuthorizationCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DisableHostedZoneDNSSECCommand.js
var DisableHostedZoneDNSSECCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DisableHostedZoneDNSSEC", {}).n("Route53Client", "DisableHostedZoneDNSSECCommand").f(void 0, void 0).ser(se_DisableHostedZoneDNSSECCommand).de(de_DisableHostedZoneDNSSECCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/DisassociateVPCFromHostedZoneCommand.js
var DisassociateVPCFromHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "DisassociateVPCFromHostedZone", {}).n("Route53Client", "DisassociateVPCFromHostedZoneCommand").f(void 0, void 0).ser(se_DisassociateVPCFromHostedZoneCommand).de(de_DisassociateVPCFromHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/EnableHostedZoneDNSSECCommand.js
var EnableHostedZoneDNSSECCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "EnableHostedZoneDNSSEC", {}).n("Route53Client", "EnableHostedZoneDNSSECCommand").f(void 0, void 0).ser(se_EnableHostedZoneDNSSECCommand).de(de_EnableHostedZoneDNSSECCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetAccountLimitCommand.js
var GetAccountLimitCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetAccountLimit", {}).n("Route53Client", "GetAccountLimitCommand").f(void 0, void 0).ser(se_GetAccountLimitCommand).de(de_GetAccountLimitCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetChangeCommand.js
var GetChangeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetChange", {}).n("Route53Client", "GetChangeCommand").f(void 0, void 0).ser(se_GetChangeCommand).de(de_GetChangeCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetCheckerIpRangesCommand.js
var GetCheckerIpRangesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetCheckerIpRanges", {}).n("Route53Client", "GetCheckerIpRangesCommand").f(void 0, void 0).ser(se_GetCheckerIpRangesCommand).de(de_GetCheckerIpRangesCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetDNSSECCommand.js
var GetDNSSECCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetDNSSEC", {}).n("Route53Client", "GetDNSSECCommand").f(void 0, void 0).ser(se_GetDNSSECCommand).de(de_GetDNSSECCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetGeoLocationCommand.js
var GetGeoLocationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetGeoLocation", {}).n("Route53Client", "GetGeoLocationCommand").f(void 0, void 0).ser(se_GetGeoLocationCommand).de(de_GetGeoLocationCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHealthCheckCommand.js
var GetHealthCheckCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetHealthCheck", {}).n("Route53Client", "GetHealthCheckCommand").f(void 0, void 0).ser(se_GetHealthCheckCommand).de(de_GetHealthCheckCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHealthCheckCountCommand.js
var GetHealthCheckCountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetHealthCheckCount", {}).n("Route53Client", "GetHealthCheckCountCommand").f(void 0, void 0).ser(se_GetHealthCheckCountCommand).de(de_GetHealthCheckCountCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHealthCheckLastFailureReasonCommand.js
var GetHealthCheckLastFailureReasonCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetHealthCheckLastFailureReason", {}).n("Route53Client", "GetHealthCheckLastFailureReasonCommand").f(void 0, void 0).ser(se_GetHealthCheckLastFailureReasonCommand).de(de_GetHealthCheckLastFailureReasonCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHealthCheckStatusCommand.js
var GetHealthCheckStatusCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetHealthCheckStatus", {}).n("Route53Client", "GetHealthCheckStatusCommand").f(void 0, void 0).ser(se_GetHealthCheckStatusCommand).de(de_GetHealthCheckStatusCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHostedZoneCommand.js
var GetHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetHostedZone", {}).n("Route53Client", "GetHostedZoneCommand").f(void 0, void 0).ser(se_GetHostedZoneCommand).de(de_GetHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHostedZoneCountCommand.js
var GetHostedZoneCountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetHostedZoneCount", {}).n("Route53Client", "GetHostedZoneCountCommand").f(void 0, void 0).ser(se_GetHostedZoneCountCommand).de(de_GetHostedZoneCountCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetHostedZoneLimitCommand.js
var GetHostedZoneLimitCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetHostedZoneLimit", {}).n("Route53Client", "GetHostedZoneLimitCommand").f(void 0, void 0).ser(se_GetHostedZoneLimitCommand).de(de_GetHostedZoneLimitCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetQueryLoggingConfigCommand.js
var GetQueryLoggingConfigCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetQueryLoggingConfig", {}).n("Route53Client", "GetQueryLoggingConfigCommand").f(void 0, void 0).ser(se_GetQueryLoggingConfigCommand).de(de_GetQueryLoggingConfigCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetReusableDelegationSetCommand.js
var GetReusableDelegationSetCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetReusableDelegationSet", {}).n("Route53Client", "GetReusableDelegationSetCommand").f(void 0, void 0).ser(se_GetReusableDelegationSetCommand).de(de_GetReusableDelegationSetCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetReusableDelegationSetLimitCommand.js
var GetReusableDelegationSetLimitCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetReusableDelegationSetLimit", {}).n("Route53Client", "GetReusableDelegationSetLimitCommand").f(void 0, void 0).ser(se_GetReusableDelegationSetLimitCommand).de(de_GetReusableDelegationSetLimitCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetTrafficPolicyCommand.js
var GetTrafficPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetTrafficPolicy", {}).n("Route53Client", "GetTrafficPolicyCommand").f(void 0, void 0).ser(se_GetTrafficPolicyCommand).de(de_GetTrafficPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetTrafficPolicyInstanceCommand.js
var GetTrafficPolicyInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "GetTrafficPolicyInstance", {}).n("Route53Client", "GetTrafficPolicyInstanceCommand").f(void 0, void 0).ser(se_GetTrafficPolicyInstanceCommand).de(de_GetTrafficPolicyInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/GetTrafficPolicyInstanceCountCommand.js
var GetTrafficPolicyInstanceCountCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "GetTrafficPolicyInstanceCount", {}).n("Route53Client", "GetTrafficPolicyInstanceCountCommand").f(void 0, void 0).ser(se_GetTrafficPolicyInstanceCountCommand).de(de_GetTrafficPolicyInstanceCountCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListCidrBlocksCommand.js
var ListCidrBlocksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListCidrBlocks", {}).n("Route53Client", "ListCidrBlocksCommand").f(void 0, void 0).ser(se_ListCidrBlocksCommand).de(de_ListCidrBlocksCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListCidrCollectionsCommand.js
var ListCidrCollectionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListCidrCollections", {}).n("Route53Client", "ListCidrCollectionsCommand").f(void 0, void 0).ser(se_ListCidrCollectionsCommand).de(de_ListCidrCollectionsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListCidrLocationsCommand.js
var ListCidrLocationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListCidrLocations", {}).n("Route53Client", "ListCidrLocationsCommand").f(void 0, void 0).ser(se_ListCidrLocationsCommand).de(de_ListCidrLocationsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListGeoLocationsCommand.js
var ListGeoLocationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListGeoLocations", {}).n("Route53Client", "ListGeoLocationsCommand").f(void 0, void 0).ser(se_ListGeoLocationsCommand).de(de_ListGeoLocationsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListHealthChecksCommand.js
var ListHealthChecksCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListHealthChecks", {}).n("Route53Client", "ListHealthChecksCommand").f(void 0, void 0).ser(se_ListHealthChecksCommand).de(de_ListHealthChecksCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListHostedZonesByNameCommand.js
var ListHostedZonesByNameCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListHostedZonesByName", {}).n("Route53Client", "ListHostedZonesByNameCommand").f(void 0, void 0).ser(se_ListHostedZonesByNameCommand).de(de_ListHostedZonesByNameCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListHostedZonesByVPCCommand.js
var ListHostedZonesByVPCCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListHostedZonesByVPC", {}).n("Route53Client", "ListHostedZonesByVPCCommand").f(void 0, void 0).ser(se_ListHostedZonesByVPCCommand).de(de_ListHostedZonesByVPCCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListHostedZonesCommand.js
var ListHostedZonesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListHostedZones", {}).n("Route53Client", "ListHostedZonesCommand").f(void 0, void 0).ser(se_ListHostedZonesCommand).de(de_ListHostedZonesCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListQueryLoggingConfigsCommand.js
var ListQueryLoggingConfigsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListQueryLoggingConfigs", {}).n("Route53Client", "ListQueryLoggingConfigsCommand").f(void 0, void 0).ser(se_ListQueryLoggingConfigsCommand).de(de_ListQueryLoggingConfigsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListResourceRecordSetsCommand.js
var ListResourceRecordSetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListResourceRecordSets", {}).n("Route53Client", "ListResourceRecordSetsCommand").f(void 0, void 0).ser(se_ListResourceRecordSetsCommand).de(de_ListResourceRecordSetsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListReusableDelegationSetsCommand.js
var ListReusableDelegationSetsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListReusableDelegationSets", {}).n("Route53Client", "ListReusableDelegationSetsCommand").f(void 0, void 0).ser(se_ListReusableDelegationSetsCommand).de(de_ListReusableDelegationSetsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListTagsForResource", {}).n("Route53Client", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTagsForResourcesCommand.js
var ListTagsForResourcesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListTagsForResources", {}).n("Route53Client", "ListTagsForResourcesCommand").f(void 0, void 0).ser(se_ListTagsForResourcesCommand).de(de_ListTagsForResourcesCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTrafficPoliciesCommand.js
var ListTrafficPoliciesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListTrafficPolicies", {}).n("Route53Client", "ListTrafficPoliciesCommand").f(void 0, void 0).ser(se_ListTrafficPoliciesCommand).de(de_ListTrafficPoliciesCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTrafficPolicyInstancesByHostedZoneCommand.js
var ListTrafficPolicyInstancesByHostedZoneCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListTrafficPolicyInstancesByHostedZone", {}).n("Route53Client", "ListTrafficPolicyInstancesByHostedZoneCommand").f(void 0, void 0).ser(se_ListTrafficPolicyInstancesByHostedZoneCommand).de(de_ListTrafficPolicyInstancesByHostedZoneCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTrafficPolicyInstancesByPolicyCommand.js
var ListTrafficPolicyInstancesByPolicyCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListTrafficPolicyInstancesByPolicy", {}).n("Route53Client", "ListTrafficPolicyInstancesByPolicyCommand").f(void 0, void 0).ser(se_ListTrafficPolicyInstancesByPolicyCommand).de(de_ListTrafficPolicyInstancesByPolicyCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTrafficPolicyInstancesCommand.js
var ListTrafficPolicyInstancesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "ListTrafficPolicyInstances", {}).n("Route53Client", "ListTrafficPolicyInstancesCommand").f(void 0, void 0).ser(se_ListTrafficPolicyInstancesCommand).de(de_ListTrafficPolicyInstancesCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListTrafficPolicyVersionsCommand.js
var ListTrafficPolicyVersionsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListTrafficPolicyVersions", {}).n("Route53Client", "ListTrafficPolicyVersionsCommand").f(void 0, void 0).ser(se_ListTrafficPolicyVersionsCommand).de(de_ListTrafficPolicyVersionsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/ListVPCAssociationAuthorizationsCommand.js
var ListVPCAssociationAuthorizationsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "ListVPCAssociationAuthorizations", {}).n("Route53Client", "ListVPCAssociationAuthorizationsCommand").f(void 0, void 0).ser(se_ListVPCAssociationAuthorizationsCommand).de(de_ListVPCAssociationAuthorizationsCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/TestDNSAnswerCommand.js
var TestDNSAnswerCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "TestDNSAnswer", {}).n("Route53Client", "TestDNSAnswerCommand").f(void 0, void 0).ser(se_TestDNSAnswerCommand).de(de_TestDNSAnswerCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/UpdateHealthCheckCommand.js
var UpdateHealthCheckCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSDnsV20130401", "UpdateHealthCheck", {}).n("Route53Client", "UpdateHealthCheckCommand").f(void 0, void 0).ser(se_UpdateHealthCheckCommand).de(de_UpdateHealthCheckCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/UpdateHostedZoneCommentCommand.js
var UpdateHostedZoneCommentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "UpdateHostedZoneComment", {}).n("Route53Client", "UpdateHostedZoneCommentCommand").f(void 0, void 0).ser(se_UpdateHostedZoneCommentCommand).de(de_UpdateHostedZoneCommentCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/UpdateTrafficPolicyCommentCommand.js
var UpdateTrafficPolicyCommentCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "UpdateTrafficPolicyComment", {}).n("Route53Client", "UpdateTrafficPolicyCommentCommand").f(void 0, void 0).ser(se_UpdateTrafficPolicyCommentCommand).de(de_UpdateTrafficPolicyCommentCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/commands/UpdateTrafficPolicyInstanceCommand.js
var UpdateTrafficPolicyInstanceCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getIdNormalizerPlugin(config)
  ];
}).s("AWSDnsV20130401", "UpdateTrafficPolicyInstance", {}).n("Route53Client", "UpdateTrafficPolicyInstanceCommand").f(void 0, void 0).ser(se_UpdateTrafficPolicyInstanceCommand).de(de_UpdateTrafficPolicyInstanceCommand).build() {
};

// node_modules/@aws-sdk/client-route-53/dist-es/Route53.js
var commands = {
  ActivateKeySigningKeyCommand,
  AssociateVPCWithHostedZoneCommand,
  ChangeCidrCollectionCommand,
  ChangeResourceRecordSetsCommand,
  ChangeTagsForResourceCommand,
  CreateCidrCollectionCommand,
  CreateHealthCheckCommand,
  CreateHostedZoneCommand,
  CreateKeySigningKeyCommand,
  CreateQueryLoggingConfigCommand,
  CreateReusableDelegationSetCommand,
  CreateTrafficPolicyCommand,
  CreateTrafficPolicyInstanceCommand,
  CreateTrafficPolicyVersionCommand,
  CreateVPCAssociationAuthorizationCommand,
  DeactivateKeySigningKeyCommand,
  DeleteCidrCollectionCommand,
  DeleteHealthCheckCommand,
  DeleteHostedZoneCommand,
  DeleteKeySigningKeyCommand,
  DeleteQueryLoggingConfigCommand,
  DeleteReusableDelegationSetCommand,
  DeleteTrafficPolicyCommand,
  DeleteTrafficPolicyInstanceCommand,
  DeleteVPCAssociationAuthorizationCommand,
  DisableHostedZoneDNSSECCommand,
  DisassociateVPCFromHostedZoneCommand,
  EnableHostedZoneDNSSECCommand,
  GetAccountLimitCommand,
  GetChangeCommand,
  GetCheckerIpRangesCommand,
  GetDNSSECCommand,
  GetGeoLocationCommand,
  GetHealthCheckCommand,
  GetHealthCheckCountCommand,
  GetHealthCheckLastFailureReasonCommand,
  GetHealthCheckStatusCommand,
  GetHostedZoneCommand,
  GetHostedZoneCountCommand,
  GetHostedZoneLimitCommand,
  GetQueryLoggingConfigCommand,
  GetReusableDelegationSetCommand,
  GetReusableDelegationSetLimitCommand,
  GetTrafficPolicyCommand,
  GetTrafficPolicyInstanceCommand,
  GetTrafficPolicyInstanceCountCommand,
  ListCidrBlocksCommand,
  ListCidrCollectionsCommand,
  ListCidrLocationsCommand,
  ListGeoLocationsCommand,
  ListHealthChecksCommand,
  ListHostedZonesCommand,
  ListHostedZonesByNameCommand,
  ListHostedZonesByVPCCommand,
  ListQueryLoggingConfigsCommand,
  ListResourceRecordSetsCommand,
  ListReusableDelegationSetsCommand,
  ListTagsForResourceCommand,
  ListTagsForResourcesCommand,
  ListTrafficPoliciesCommand,
  ListTrafficPolicyInstancesCommand,
  ListTrafficPolicyInstancesByHostedZoneCommand,
  ListTrafficPolicyInstancesByPolicyCommand,
  ListTrafficPolicyVersionsCommand,
  ListVPCAssociationAuthorizationsCommand,
  TestDNSAnswerCommand,
  UpdateHealthCheckCommand,
  UpdateHostedZoneCommentCommand,
  UpdateTrafficPolicyCommentCommand,
  UpdateTrafficPolicyInstanceCommand
};
var Route53 = class extends Route53Client {
};
createAggregatedClient(commands, Route53);

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListCidrBlocksPaginator.js
var paginateListCidrBlocks = createPaginator(Route53Client, ListCidrBlocksCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListCidrCollectionsPaginator.js
var paginateListCidrCollections = createPaginator(Route53Client, ListCidrCollectionsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListCidrLocationsPaginator.js
var paginateListCidrLocations = createPaginator(Route53Client, ListCidrLocationsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListHealthChecksPaginator.js
var paginateListHealthChecks = createPaginator(Route53Client, ListHealthChecksCommand, "Marker", "NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListHostedZonesPaginator.js
var paginateListHostedZones = createPaginator(Route53Client, ListHostedZonesCommand, "Marker", "NextMarker", "MaxItems");

// node_modules/@aws-sdk/client-route-53/dist-es/pagination/ListQueryLoggingConfigsPaginator.js
var paginateListQueryLoggingConfigs = createPaginator(Route53Client, ListQueryLoggingConfigsCommand, "NextToken", "NextToken", "MaxResults");

// node_modules/@aws-sdk/client-route-53/dist-es/waiters/waitForResourceRecordSetsChanged.js
var checkState = async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetChangeCommand(input));
    reason = result;
    try {
      const returnComparator = () => {
        return result.ChangeInfo.Status;
      };
      if (returnComparator() === "INSYNC") {
        return { state: WaiterState.SUCCESS, reason };
      }
    } catch (e2) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: WaiterState.RETRY, reason };
};
var waitForResourceRecordSetsChanged = async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
var waitUntilResourceRecordSetsChanged = async (params, input) => {
  const serviceDefaults = { minDelay: 30, maxDelay: 120 };
  const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
  return checkExceptions(result);
};
export {
  Command as $Command,
  AccountLimitType,
  ActivateKeySigningKeyCommand,
  AssociateVPCWithHostedZoneCommand,
  ChangeAction,
  ChangeCidrCollectionCommand,
  ChangeResourceRecordSetsCommand,
  ChangeStatus,
  ChangeTagsForResourceCommand,
  CidrBlockInUseException,
  CidrCollectionAlreadyExistsException,
  CidrCollectionChangeAction,
  CidrCollectionInUseException,
  CidrCollectionVersionMismatchException,
  CloudWatchRegion,
  ComparisonOperator,
  ConcurrentModification,
  ConflictingDomainExists,
  ConflictingTypes,
  CreateCidrCollectionCommand,
  CreateHealthCheckCommand,
  CreateHostedZoneCommand,
  CreateKeySigningKeyCommand,
  CreateQueryLoggingConfigCommand,
  CreateReusableDelegationSetCommand,
  CreateTrafficPolicyCommand,
  CreateTrafficPolicyInstanceCommand,
  CreateTrafficPolicyVersionCommand,
  CreateVPCAssociationAuthorizationCommand,
  DNSSECNotFound,
  DeactivateKeySigningKeyCommand,
  DelegationSetAlreadyCreated,
  DelegationSetAlreadyReusable,
  DelegationSetInUse,
  DelegationSetNotAvailable,
  DelegationSetNotReusable,
  DeleteCidrCollectionCommand,
  DeleteHealthCheckCommand,
  DeleteHostedZoneCommand,
  DeleteKeySigningKeyCommand,
  DeleteQueryLoggingConfigCommand,
  DeleteReusableDelegationSetCommand,
  DeleteTrafficPolicyCommand,
  DeleteTrafficPolicyInstanceCommand,
  DeleteVPCAssociationAuthorizationCommand,
  DisableHostedZoneDNSSECCommand,
  DisassociateVPCFromHostedZoneCommand,
  EnableHostedZoneDNSSECCommand,
  GetAccountLimitCommand,
  GetChangeCommand,
  GetCheckerIpRangesCommand,
  GetDNSSECCommand,
  GetGeoLocationCommand,
  GetHealthCheckCommand,
  GetHealthCheckCountCommand,
  GetHealthCheckLastFailureReasonCommand,
  GetHealthCheckStatusCommand,
  GetHostedZoneCommand,
  GetHostedZoneCountCommand,
  GetHostedZoneLimitCommand,
  GetQueryLoggingConfigCommand,
  GetReusableDelegationSetCommand,
  GetReusableDelegationSetLimitCommand,
  GetTrafficPolicyCommand,
  GetTrafficPolicyInstanceCommand,
  GetTrafficPolicyInstanceCountCommand,
  HealthCheckAlreadyExists,
  HealthCheckInUse,
  HealthCheckRegion,
  HealthCheckType,
  HealthCheckVersionMismatch,
  HostedZoneAlreadyExists,
  HostedZoneLimitType,
  HostedZoneNotEmpty,
  HostedZoneNotFound,
  HostedZoneNotPrivate,
  HostedZonePartiallyDelegated,
  HostedZoneType,
  IncompatibleVersion,
  InsufficientCloudWatchLogsResourcePolicy,
  InsufficientDataHealthStatus,
  InvalidArgument,
  InvalidChangeBatch,
  InvalidDomainName,
  InvalidInput,
  InvalidKMSArn,
  InvalidKeySigningKeyName,
  InvalidKeySigningKeyStatus,
  InvalidPaginationToken,
  InvalidSigningStatus,
  InvalidTrafficPolicyDocument,
  InvalidVPCId,
  KeySigningKeyAlreadyExists,
  KeySigningKeyInParentDSRecord,
  KeySigningKeyInUse,
  KeySigningKeyWithActiveStatusNotFound,
  LastVPCAssociation,
  LimitsExceeded,
  ListCidrBlocksCommand,
  ListCidrCollectionsCommand,
  ListCidrLocationsCommand,
  ListGeoLocationsCommand,
  ListHealthChecksCommand,
  ListHostedZonesByNameCommand,
  ListHostedZonesByVPCCommand,
  ListHostedZonesCommand,
  ListQueryLoggingConfigsCommand,
  ListResourceRecordSetsCommand,
  ListReusableDelegationSetsCommand,
  ListTagsForResourceCommand,
  ListTagsForResourcesCommand,
  ListTrafficPoliciesCommand,
  ListTrafficPolicyInstancesByHostedZoneCommand,
  ListTrafficPolicyInstancesByPolicyCommand,
  ListTrafficPolicyInstancesCommand,
  ListTrafficPolicyVersionsCommand,
  ListVPCAssociationAuthorizationsCommand,
  NoSuchChange,
  NoSuchCidrCollectionException,
  NoSuchCidrLocationException,
  NoSuchCloudWatchLogsLogGroup,
  NoSuchDelegationSet,
  NoSuchGeoLocation,
  NoSuchHealthCheck,
  NoSuchHostedZone,
  NoSuchKeySigningKey,
  NoSuchQueryLoggingConfig,
  NoSuchTrafficPolicy,
  NoSuchTrafficPolicyInstance,
  NotAuthorizedException,
  PriorRequestNotComplete,
  PublicZoneVPCAssociation,
  QueryLoggingConfigAlreadyExists,
  RRType,
  ResettableElementName,
  ResourceRecordSetFailover,
  ResourceRecordSetRegion,
  ReusableDelegationSetLimitType,
  Route53,
  Route53Client,
  Route53ServiceException,
  Statistic,
  TagResourceType,
  TestDNSAnswerCommand,
  ThrottlingException,
  TooManyHealthChecks,
  TooManyHostedZones,
  TooManyKeySigningKeys,
  TooManyTrafficPolicies,
  TooManyTrafficPolicyInstances,
  TooManyTrafficPolicyVersionsForCurrentPolicy,
  TooManyVPCAssociationAuthorizations,
  TrafficPolicyAlreadyExists,
  TrafficPolicyInUse,
  TrafficPolicyInstanceAlreadyExists,
  UpdateHealthCheckCommand,
  UpdateHostedZoneCommentCommand,
  UpdateTrafficPolicyCommentCommand,
  UpdateTrafficPolicyInstanceCommand,
  VPCAssociationAuthorizationNotFound,
  VPCAssociationNotFound,
  VPCRegion,
  Client as __Client,
  paginateListCidrBlocks,
  paginateListCidrCollections,
  paginateListCidrLocations,
  paginateListHealthChecks,
  paginateListHostedZones,
  paginateListQueryLoggingConfigs,
  waitForResourceRecordSetsChanged,
  waitUntilResourceRecordSetsChanged
};
//# sourceMappingURL=@aws-sdk_client-route-53.js.map
