import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { InspectorServiceException as __BaseException } from "../models/InspectorServiceException";
import { AccessDeniedException, AgentsAlreadyRunningAssessmentException, AssessmentRunInProgressException, InternalException, InvalidCrossAccountRoleException, InvalidInputException, LimitExceededException, NoSuchEntityException, PreviewGenerationInProgressException, ServiceTemporarilyUnavailableException, UnsupportedFeatureException, } from "../models/models_0";
export const se_AddAttributesToFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("AddAttributesToFindings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAssessmentTargetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAssessmentTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAssessmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAssessmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateExclusionsPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExclusionsPreview");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateResourceGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAssessmentRunCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssessmentRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAssessmentTargetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssessmentTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAssessmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssessmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAssessmentRunsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssessmentRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAssessmentTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssessmentTargets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAssessmentTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAssessmentTemplates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCrossAccountAccessRoleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCrossAccountAccessRole");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExclusionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExclusions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFindings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeResourceGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourceGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRulesPackagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRulesPackages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAssessmentReportCommand = async (input, context) => {
    const headers = sharedHeaders("GetAssessmentReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetExclusionsPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("GetExclusionsPreview");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTelemetryMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetTelemetryMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssessmentRunAgentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssessmentRunAgents");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssessmentRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssessmentRuns");
    let body;
    body = JSON.stringify(se_ListAssessmentRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssessmentTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssessmentTargets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssessmentTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssessmentTemplates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEventSubscriptionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventSubscriptions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListExclusionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExclusions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFindings");
    let body;
    body = JSON.stringify(se_ListFindingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRulesPackagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRulesPackages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PreviewAgentsCommand = async (input, context) => {
    const headers = sharedHeaders("PreviewAgents");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterCrossAccountAccessRoleCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterCrossAccountAccessRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveAttributesFromFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveAttributesFromFindings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("SetTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartAssessmentRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartAssessmentRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopAssessmentRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopAssessmentRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SubscribeToEventCommand = async (input, context) => {
    const headers = sharedHeaders("SubscribeToEvent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnsubscribeFromEventCommand = async (input, context) => {
    const headers = sharedHeaders("UnsubscribeFromEvent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAssessmentTargetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAssessmentTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddAttributesToFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAssessmentTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAssessmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateExclusionsPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateResourceGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAssessmentRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteAssessmentTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteAssessmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeAssessmentRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssessmentRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAssessmentTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssessmentTargetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAssessmentTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAssessmentTemplatesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCrossAccountAccessRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCrossAccountAccessRoleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeExclusionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFindingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeResourceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeResourceGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRulesPackagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAssessmentReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetExclusionsPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTelemetryMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssessmentRunAgentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssessmentRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssessmentTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssessmentTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEventSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEventSubscriptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListExclusionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRulesPackagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PreviewAgentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterCrossAccountAccessRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RemoveAttributesFromFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StartAssessmentRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopAssessmentRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SubscribeToEventCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UnsubscribeFromEventCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateAssessmentTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.inspector#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.inspector#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.inspector#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NoSuchEntityException":
        case "com.amazonaws.inspector#NoSuchEntityException":
            throw await de_NoSuchEntityExceptionRes(parsedOutput, context);
        case "ServiceTemporarilyUnavailableException":
        case "com.amazonaws.inspector#ServiceTemporarilyUnavailableException":
            throw await de_ServiceTemporarilyUnavailableExceptionRes(parsedOutput, context);
        case "InvalidCrossAccountRoleException":
        case "com.amazonaws.inspector#InvalidCrossAccountRoleException":
            throw await de_InvalidCrossAccountRoleExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.inspector#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PreviewGenerationInProgressException":
        case "com.amazonaws.inspector#PreviewGenerationInProgressException":
            throw await de_PreviewGenerationInProgressExceptionRes(parsedOutput, context);
        case "AssessmentRunInProgressException":
        case "com.amazonaws.inspector#AssessmentRunInProgressException":
            throw await de_AssessmentRunInProgressExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.inspector#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        case "AgentsAlreadyRunningAssessmentException":
        case "com.amazonaws.inspector#AgentsAlreadyRunningAssessmentException":
            throw await de_AgentsAlreadyRunningAssessmentExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AgentsAlreadyRunningAssessmentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AgentsAlreadyRunningAssessmentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AssessmentRunInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssessmentRunInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCrossAccountRoleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCrossAccountRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoSuchEntityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoSuchEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PreviewGenerationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PreviewGenerationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceTemporarilyUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceTemporarilyUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedFeatureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedFeatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AssessmentRunFilter = (input, context) => {
    return take(input, {
        completionTimeRange: (_) => se_TimestampRange(_, context),
        durationRange: _json,
        namePattern: [],
        rulesPackageArns: _json,
        startTimeRange: (_) => se_TimestampRange(_, context),
        stateChangeTimeRange: (_) => se_TimestampRange(_, context),
        states: _json,
    });
};
const se_FindingFilter = (input, context) => {
    return take(input, {
        agentIds: _json,
        attributes: _json,
        autoScalingGroups: _json,
        creationTimeRange: (_) => se_TimestampRange(_, context),
        ruleNames: _json,
        rulesPackageArns: _json,
        severities: _json,
        userAttributes: _json,
    });
};
const se_ListAssessmentRunsRequest = (input, context) => {
    return take(input, {
        assessmentTemplateArns: _json,
        filter: (_) => se_AssessmentRunFilter(_, context),
        maxResults: [],
        nextToken: [],
    });
};
const se_ListFindingsRequest = (input, context) => {
    return take(input, {
        assessmentRunArns: _json,
        filter: (_) => se_FindingFilter(_, context),
        maxResults: [],
        nextToken: [],
    });
};
const se_TimestampRange = (input, context) => {
    return take(input, {
        beginDate: (_) => _.getTime() / 1000,
        endDate: (_) => _.getTime() / 1000,
    });
};
const de_AssessmentRun = (output, context) => {
    return take(output, {
        arn: __expectString,
        assessmentTemplateArn: __expectString,
        completedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataCollected: __expectBoolean,
        durationInSeconds: __expectInt32,
        findingCounts: _json,
        name: __expectString,
        notifications: (_) => de_AssessmentRunNotificationList(_, context),
        rulesPackageArns: _json,
        startedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        state: __expectString,
        stateChangedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        stateChanges: (_) => de_AssessmentRunStateChangeList(_, context),
        userAttributesForFindings: _json,
    });
};
const de_AssessmentRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentRun(entry, context);
    });
    return retVal;
};
const de_AssessmentRunNotification = (output, context) => {
    return take(output, {
        date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        error: __expectBoolean,
        event: __expectString,
        message: __expectString,
        snsPublishStatusCode: __expectString,
        snsTopicArn: __expectString,
    });
};
const de_AssessmentRunNotificationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentRunNotification(entry, context);
    });
    return retVal;
};
const de_AssessmentRunStateChange = (output, context) => {
    return take(output, {
        state: __expectString,
        stateChangedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AssessmentRunStateChangeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentRunStateChange(entry, context);
    });
    return retVal;
};
const de_AssessmentTarget = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        resourceGroupArn: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AssessmentTargetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentTarget(entry, context);
    });
    return retVal;
};
const de_AssessmentTemplate = (output, context) => {
    return take(output, {
        arn: __expectString,
        assessmentRunCount: __expectInt32,
        assessmentTargetArn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        durationInSeconds: __expectInt32,
        lastAssessmentRunArn: __expectString,
        name: __expectString,
        rulesPackageArns: _json,
        userAttributesForFindings: _json,
    });
};
const de_AssessmentTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentTemplate(entry, context);
    });
    return retVal;
};
const de_DescribeAssessmentRunsResponse = (output, context) => {
    return take(output, {
        assessmentRuns: (_) => de_AssessmentRunList(_, context),
        failedItems: _json,
    });
};
const de_DescribeAssessmentTargetsResponse = (output, context) => {
    return take(output, {
        assessmentTargets: (_) => de_AssessmentTargetList(_, context),
        failedItems: _json,
    });
};
const de_DescribeAssessmentTemplatesResponse = (output, context) => {
    return take(output, {
        assessmentTemplates: (_) => de_AssessmentTemplateList(_, context),
        failedItems: _json,
    });
};
const de_DescribeCrossAccountAccessRoleResponse = (output, context) => {
    return take(output, {
        registeredAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        valid: __expectBoolean,
    });
};
const de_DescribeFindingsResponse = (output, context) => {
    return take(output, {
        failedItems: _json,
        findings: (_) => de_FindingList(_, context),
    });
};
const de_DescribeResourceGroupsResponse = (output, context) => {
    return take(output, {
        failedItems: _json,
        resourceGroups: (_) => de_ResourceGroupList(_, context),
    });
};
const de_EventSubscription = (output, context) => {
    return take(output, {
        event: __expectString,
        subscribedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EventSubscriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventSubscription(entry, context);
    });
    return retVal;
};
const de_Finding = (output, context) => {
    return take(output, {
        arn: __expectString,
        assetAttributes: _json,
        assetType: __expectString,
        attributes: _json,
        confidence: __expectInt32,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        id: __expectString,
        indicatorOfCompromise: __expectBoolean,
        numericSeverity: __limitedParseDouble,
        recommendation: __expectString,
        schemaVersion: __expectInt32,
        service: __expectString,
        serviceAttributes: _json,
        severity: __expectString,
        title: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        userAttributes: _json,
    });
};
const de_FindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Finding(entry, context);
    });
    return retVal;
};
const de_ListEventSubscriptionsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        subscriptions: (_) => de_SubscriptionList(_, context),
    });
};
const de_ResourceGroup = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        tags: _json,
    });
};
const de_ResourceGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceGroup(entry, context);
    });
    return retVal;
};
const de_Subscription = (output, context) => {
    return take(output, {
        eventSubscriptions: (_) => de_EventSubscriptionList(_, context),
        resourceArn: __expectString,
        topicArn: __expectString,
    });
};
const de_SubscriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subscription(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `InspectorService.${operation}`,
    };
}
