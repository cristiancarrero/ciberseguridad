from flask import Flask, request, jsonify
from flask_cors import CORS
import socket
import threading
from datetime import datetime
import json

# Inicialización de la aplicación Flask
app = Flask(__name__)
CORS(app)  # Habilitar CORS para permitir peticiones desde el frontend

def scan_single_port(ip, port):
    """
    Escanea un único puerto usando sockets TCP
    
    Args:
        ip (str): Dirección IP objetivo
        port (int): Puerto a escanear
    
    Returns:
        dict: Información del puerto si está abierto, None si está cerrado
    """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)  # Timeout de 2 segundos para la conexión
        result = sock.connect_ex((ip, port))
        
        if result == 0:  # Puerto abierto
            try:
                service = socket.getservbyport(port)
            except:
                service = "unknown"
                
            # Intentar obtener banner del servicio
            try:
                sock.send(b"HEAD / HTTP/1.0\r\n\r\n")
                banner = sock.recv(1024).decode('utf-8', errors='ignore').split('\n')[0]
                if banner:
                    service = f"{service} ({banner.strip()})"
            except:
                pass
                
            sock.close()
            return {
                "port": port,
                "state": "open",
                "service": service
            }
        sock.close()
        return None
    except Exception as e:
        print(f"Error en puerto {port}: {str(e)}")
        return None

def get_service_name(port):
    try:
        return socket.getservbyport(port)
    except:
        return "unknown"

def scan_ports(target_ip, port_range="1-1000"):
    """
    Realiza un escaneo de puertos en un rango específico
    
    Args:
        target_ip (str): IP objetivo
        port_range (str): Rango de puertos en formato "inicio-fin"
    
    Returns:
        dict: Resultados del escaneo
    """
    try:
        start_port, end_port = map(int, port_range.split('-'))
        timestamp = datetime.now().isoformat()
        print(f"[{timestamp}] Iniciando escaneo TCP en {target_ip}, rango {port_range}...")
        
        results = {
            "timestamp": timestamp,
            "target": target_ip,
            "ports": []
        }
        
        # Escaneo multihilo para mejor rendimiento
        chunk_size = 25
        common_ports = [21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 445, 993, 995, 1723, 3306, 3389, 5900, 8080]
        
        # Primero escanear puertos comunes
        threads = []
        for port in common_ports:
            if start_port <= port <= end_port:
                thread = threading.Thread(
                    target=lambda p: results["ports"].append(r) if (r := scan_single_port(target_ip, p)) else None,
                    args=(port,)
                )
                thread.start()
                threads.append(thread)
        
        for thread in threads:
            thread.join()
            
        # Luego escanear el resto de puertos
        for start in range(start_port, end_port + 1, chunk_size):
            end = min(start + chunk_size, end_port + 1)
            threads = []
            
            for port in range(start, end):
                if port not in common_ports:
                    thread = threading.Thread(
                        target=lambda p: results["ports"].append(r) if (r := scan_single_port(target_ip, p)) else None,
                        args=(port,)
                    )
                    thread.start()
                    threads.append(thread)
            
            for thread in threads:
                thread.join()
        
        results["ports"].sort(key=lambda x: x["port"])
        print(f"[{timestamp}] Escaneo completado. Puertos abiertos: {len(results['ports'])}")
        return results
        
    except Exception as e:
        error_msg = f"Error durante el escaneo: {str(e)}"
        print(f"[{datetime.now().isoformat()}] {error_msg}")
        return {"error": error_msg, "timestamp": datetime.now().isoformat()}

# Ruta API para el escaneo de puertos
@app.route('/api/scan-range', methods=['POST', 'OPTIONS'])
def scan_range():
    """Endpoint para iniciar un escaneo de puertos"""
    if request.method == 'OPTIONS':
        return '', 200
    
    data = request.get_json()
    print("Datos recibidos:", data)
    
    target_ip = data.get('ip')
    port_range = data.get('portRange', '1-1000')
    
    if not target_ip:
        error_msg = "IP address is required"
        print("Error:", error_msg)
        return jsonify({"error": error_msg}), 400
    
    print(f"Iniciando escaneo para IP: {target_ip}, rango: {port_range}")
    results = scan_ports(target_ip, port_range)
    return jsonify(results)

if __name__ == '__main__':
    print("Iniciando servidor de escaneo de puertos en puerto 3002...")
    app.run(port=3002) 