import React, { useState } from 'react';
import { FaPlay, FaStop, FaSave } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import './S3Scanner.css';

const S3Scanner = () => {
  const [target, setTarget] = useState('');
  const [wordlist, setWordlist] = useState('default');
  const [isScanning, setIsScanning] = useState(false);
  const [logs, setLogs] = useState([]);

  const handleScan = async () => {
    if (!target) {
      addLog('Error: Por favor, introduce un nombre base para el bucket', 'error');
      return;
    }

    setIsScanning(true);
    addLog(`Iniciando escaneo de buckets S3 para ${target}...`, 'info');

    try {
      // Aquí irá la lógica real de escaneo
      await simulateScan();
    } catch (error) {
      addLog(`Error: ${error.message}`, 'error');
    } finally {
      setIsScanning(false);
    }
  };

  const simulateScan = async () => {
    const suffixes = [
      '-dev', '-prod', '-staging', '-test',
      '-backup', '-data', '-assets', '-media',
      '-public', '-private', '-internal', '-external'
    ];

    for (let suffix of suffixes) {
      await new Promise(resolve => setTimeout(resolve, 800));
      const bucketName = `${target}${suffix}`;
      addLog(`Probando bucket: ${bucketName}`, 'info');
      
      // Simulamos diferentes estados de buckets
      const response = Math.random();
      if (response > 0.8) {
        addLog(`¡Bucket encontrado y accesible: ${bucketName}!`, 'success');
        addLog('Permisos: Lectura/Escritura pública', 'warning');
      } else if (response > 0.6) {
        addLog(`Bucket encontrado: ${bucketName}`, 'success');
        addLog('Permisos: Solo lectura', 'info');
      } else if (response > 0.4) {
        addLog(`Bucket encontrado pero no accesible: ${bucketName}`, 'warning');
      } else {
        addLog(`Bucket no encontrado: ${bucketName}`, 'info');
      }
    }

    addLog('Escaneo completado', 'info');
  };

  const handleStop = () => {
    setIsScanning(false);
    addLog('Escaneo detenido por el usuario', 'warning');
  };

  const handleSave = () => {
    const report = logs.map(log => `[${log.timestamp}] ${log.message}`).join('\\n');
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 's3_scan_report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  return (
    <div className="tool-container">
      <div className="tool-header">
        <h2>S3 Bucket Scanner</h2>
        <div className="tool-actions">
          <button
            className="btn btn-primary"
            onClick={handleScan}
            disabled={isScanning}
          >
            <FaPlay /> Iniciar Escaneo
          </button>
          <button
            className="btn btn-danger"
            onClick={handleStop}
            disabled={!isScanning}
          >
            <FaStop /> Detener
          </button>
          <button
            className="btn"
            onClick={handleSave}
            disabled={logs.length === 0}
          >
            <FaSave /> Guardar Reporte
          </button>
        </div>
      </div>

      <div className="tool-content">
        <div className="config-panel">
          <div className="form-group">
            <label>Nombre base del bucket:</label>
            <input
              type="text"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              placeholder="company-name"
              disabled={isScanning}
            />
          </div>
          <div className="form-group">
            <label>Wordlist:</label>
            <select
              value={wordlist}
              onChange={(e) => setWordlist(e.target.value)}
              disabled={isScanning}
            >
              <option value="default">Default</option>
              <option value="common">Common Patterns</option>
              <option value="aggressive">Aggressive</option>
            </select>
          </div>
        </div>

        <Terminal logs={logs} />
      </div>
    </div>
  );
};

export default S3Scanner; 