import React, { useState } from 'react';
import { FaPlay, FaStop, FaSave } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import './IAMAnalyzer.css';

const IAMAnalyzer = () => {
  const [target, setTarget] = useState('');
  const [analysisType, setAnalysisType] = useState('user');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [logs, setLogs] = useState([]);

  const handleAnalyze = async () => {
    if (!target) {
      addLog('Error: Por favor, introduce un objetivo para analizar', 'error');
      return;
    }

    setIsAnalyzing(true);
    addLog(`Iniciando análisis de ${analysisType === 'user' ? 'usuario' : 'rol'} ${target}...`, 'info');

    try {
      // Aquí irá la lógica real de análisis
      await simulateAnalysis();
    } catch (error) {
      addLog(`Error: ${error.message}`, 'error');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const simulateAnalysis = async () => {
    const permissions = [
      { service: 'S3', actions: ['s3:GetObject', 's3:PutObject', 's3:ListBucket'] },
      { service: 'EC2', actions: ['ec2:DescribeInstances', 'ec2:StartInstances', 'ec2:StopInstances'] },
      { service: 'IAM', actions: ['iam:ListUsers', 'iam:CreateUser', 'iam:DeleteUser'] },
      { service: 'CloudWatch', actions: ['cloudwatch:GetMetricData', 'cloudwatch:PutMetricData'] }
    ];

    addLog('Analizando permisos...', 'info');
    await new Promise(resolve => setTimeout(resolve, 1000));

    for (let perm of permissions) {
      addLog(`\nAnalizando permisos de ${perm.service}:`, 'info');
      await new Promise(resolve => setTimeout(resolve, 800));

      for (let action of perm.actions) {
        const risk = Math.random();
        if (risk > 0.8) {
          addLog(`⚠️ Alto riesgo - ${action}: Permiso administrativo detectado`, 'error');
        } else if (risk > 0.6) {
          addLog(`⚠️ Riesgo medio - ${action}: Permiso potencialmente peligroso`, 'warning');
        } else {
          addLog(`✓ ${action}: Permiso normal`, 'success');
        }
        await new Promise(resolve => setTimeout(resolve, 400));
      }
    }

    addLog('\nAnalizando políticas inline...', 'info');
    await new Promise(resolve => setTimeout(resolve, 1000));
    addLog('Se encontraron 2 políticas inline', 'warning');

    addLog('\nVerificando permisos de escalada de privilegios...', 'info');
    await new Promise(resolve => setTimeout(resolve, 1000));
    addLog('No se encontraron rutas de escalada de privilegios', 'success');

    addLog('\nAnálisis completado', 'info');
  };

  const handleStop = () => {
    setIsAnalyzing(false);
    addLog('Análisis detenido por el usuario', 'warning');
  };

  const handleSave = () => {
    const report = logs.map(log => `[${log.timestamp}] ${log.message}`).join('\\n');
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'iam_analysis_report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  return (
    <div className="tool-container">
      <div className="tool-header">
        <h2>IAM Analyzer</h2>
        <div className="tool-actions">
          <button
            className="btn btn-primary"
            onClick={handleAnalyze}
            disabled={isAnalyzing}
          >
            <FaPlay /> Iniciar Análisis
          </button>
          <button
            className="btn btn-danger"
            onClick={handleStop}
            disabled={!isAnalyzing}
          >
            <FaStop /> Detener
          </button>
          <button
            className="btn"
            onClick={handleSave}
            disabled={logs.length === 0}
          >
            <FaSave /> Guardar Reporte
          </button>
        </div>
      </div>

      <div className="tool-content">
        <div className="config-panel">
          <div className="form-group">
            <label>Tipo de análisis:</label>
            <select
              value={analysisType}
              onChange={(e) => setAnalysisType(e.target.value)}
              disabled={isAnalyzing}
            >
              <option value="user">Usuario IAM</option>
              <option value="role">Rol IAM</option>
            </select>
          </div>
          <div className="form-group">
            <label>{analysisType === 'user' ? 'Nombre de usuario:' : 'Nombre del rol:'}</label>
            <input
              type="text"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              placeholder={analysisType === 'user' ? 'admin-user' : 'lambda-role'}
              disabled={isAnalyzing}
            />
          </div>
        </div>

        <Terminal logs={logs} />
      </div>
    </div>
  );
};

export default IAMAnalyzer; 