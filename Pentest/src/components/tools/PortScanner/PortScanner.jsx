import React, { useState, useEffect } from 'react';
import { FaPlay, FaStop, FaSave, FaKey, FaServer, FaNetworkWired, FaAws } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import { configureAWS, isAWSConnected, getEC2Client, loadSavedAWSConfig } from '../../../services/aws';
import { DescribeInstancesCommand, DescribeSecurityGroupsCommand } from "@aws-sdk/client-ec2";
import { scanPorts } from '../../../services/portScanner';
import './PortScanner.css';

const parseAWSCredentials = (input) => {
  try {
    const lines = input.split('\n');
    const credentials = {};
    
    lines.forEach(line => {
      if (line.includes('aws_access_key_id=')) {
        credentials.accessKeyId = line.split('=')[1].trim();
      } else if (line.includes('aws_secret_access_key=')) {
        credentials.secretAccessKey = line.split('=')[1].trim();
      } else if (line.includes('aws_session_token=')) {
        credentials.sessionToken = line.split('=')[1].trim();
      }
    });

    if (credentials.accessKeyId && credentials.secretAccessKey && credentials.sessionToken) {
      return {
        ...credentials,
        region: 'us-west-2' // Región por defecto
      };
    }
    return null;
  } catch (error) {
    console.error('Error parsing AWS credentials:', error);
    return null;
  }
};

/**
 * Componente principal del escáner de puertos
 * Permite escanear puertos tanto en modo AWS como en modo manual
 */
const PortScanner = () => {
  // Estados para el control del escáner
  const [isScanning, setIsScanning] = useState(false);  // Estado del escaneo
  const [targetIp, setTargetIp] = useState('');        // IP objetivo
  const [portRange, setPortRange] = useState('');      // Rango de puertos
  const [logs, setLogs] = useState([]);                // Logs del escaneo
  const [scanMode, setScanMode] = useState('manual');  // Modo de escaneo (manual/aws)
  
  // Estados específicos para AWS
  const [showCredentialsForm, setShowCredentialsForm] = useState(!isAWSConnected());
  const [credentials, setCredentials] = useState(() => {
    const savedConfig = loadSavedAWSConfig();
    return savedConfig || {
      accessKeyId: '',
      secretAccessKey: '',
      sessionToken: '',
      region: 'us-west-2'
    };
  });
  const [instances, setInstances] = useState([]);
  const [selectedInstance, setSelectedInstance] = useState('');
  const [isLoadingInstances, setIsLoadingInstances] = useState(false);

  const handleConnect = () => {
    if (configureAWS(credentials)) {
      setShowCredentialsForm(false);
      setLogs(prev => [...prev, {
        type: 'success',
        message: 'Conectado exitosamente a AWS',
        timestamp: new Date().toISOString()
      }]);
    } else {
      setLogs(prev => [...prev, {
        type: 'error',
        message: 'Error al conectar con AWS',
        timestamp: new Date().toISOString()
      }]);
    }
  };

  const handleCredentialsInput = (e) => {
    const input = e.target.value;
    const parsedCredentials = parseAWSCredentials(input);
    
    if (parsedCredentials) {
      setCredentials(parsedCredentials);
      // Opcionalmente, autoconectar cuando se detecten credenciales válidas
      configureAWS(parsedCredentials);
      setShowCredentialsForm(false);
      setLogs(prev => [...prev, {
        type: 'success',
        message: 'Credenciales AWS detectadas y configuradas automáticamente',
        timestamp: new Date().toISOString()
      }]);
    } else {
      setCredentials({
        ...credentials,
        accessKeyId: input
      });
    }
  };

  const loadEC2Instances = async () => {
    try {
      setIsLoadingInstances(true);
      const ec2Client = getEC2Client();
      const command = new DescribeInstancesCommand({});
      const response = await ec2Client.send(command);
      
      const instanceList = response.Reservations
        .flatMap(reservation => reservation.Instances)
        .map(instance => ({
          id: instance.InstanceId,
          ip: instance.PublicIpAddress || instance.PrivateIpAddress,
          name: instance.Tags?.find(tag => tag.Key === 'Name')?.Value || instance.InstanceId,
          state: instance.State.Name
        }))
        .filter(instance => instance.ip); // Solo instancias con IP

      setInstances(instanceList);
      setLogs(prev => [...prev, {
        type: 'info',
        message: `${instanceList.length} instancias EC2 encontradas`,
        timestamp: new Date().toISOString()
      }]);
    } catch (error) {
      console.error('Error loading EC2 instances:', error);
      setLogs(prev => [...prev, {
        type: 'error',
        message: 'Error al cargar instancias EC2: ' + error.message,
        timestamp: new Date().toISOString()
      }]);
    } finally {
      setIsLoadingInstances(false);
    }
  };

  useEffect(() => {
    // Si hay credenciales guardadas, cargar instancias automáticamente
    if (isAWSConnected()) {
      loadEC2Instances();
    }
  }, []);

  const handleInstanceSelect = (instanceId) => {
    const instance = instances.find(i => i.id === instanceId);
    setSelectedInstance(instanceId);
    if (instance) {
      setTargetIp(instance.ip);
    }
  };

  const parsePortRange = (range) => {
    try {
      if (range.includes('-')) {
        const [start, end] = range.split('-').map(num => parseInt(num.trim()));
        return { start, end };
      } else {
        const port = parseInt(range.trim());
        return { start: port, end: port };
      }
    } catch (error) {
      return null;
    }
  };

  const scanPort = async (ip, port) => {
    try {
      const response = await fetch('http://localhost:3001/api/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ host: ip, port })
      });
      
      const result = await response.json();
      return {
        port,
        status: result.status,
        service: getServiceName(port)
      };
    } catch (error) {
      return {
        port,
        status: 'error',
        error: error.message
      };
    }
  };

  const getServiceName = (port) => {
    const commonPorts = {
      21: 'FTP',
      22: 'SSH',
      23: 'Telnet',
      25: 'SMTP',
      53: 'DNS',
      80: 'HTTP',
      110: 'POP3',
      143: 'IMAP',
      443: 'HTTPS',
      3306: 'MySQL',
      3389: 'RDP',
      5432: 'PostgreSQL',
      27017: 'MongoDB'
    };
    return commonPorts[port] || 'Unknown';
  };

  /**
   * Inicia el escaneo de puertos
   */
  const handleStartScan = async () => {
    if (!targetIp || !portRange) {
      setLogs(prev => [...prev, {
        type: 'error',
        message: 'Por favor, ingresa una IP y un rango de puertos válidos.',
        timestamp: new Date().toISOString()
      }]);
      return;
    }

    setIsScanning(true);
    setLogs(prev => [...prev, {
      type: 'info',
      message: `Iniciando escaneo de puertos ${portRange} en ${targetIp}...`,
      timestamp: new Date().toISOString()
    }]);

    try {
      // Añadir log para ver qué datos se envían
      console.log('Enviando datos:', { ip: targetIp, portRange });
      
      const results = await scanPorts(targetIp, portRange);
      
      if (results.error) {
        throw new Error(results.error);
      }

      // Mostrar los puertos encontrados
      if (results.ports && Array.isArray(results.ports)) {
        results.ports.forEach(port => {
          setLogs(prev => [...prev, {
            type: 'success',
            message: `Puerto ${port.port} (${port.service}): ${port.state}`,
            timestamp: new Date().toISOString()
          }]);
        });
      }

      setLogs(prev => [...prev, {
        type: results.ports?.length > 0 ? 'success' : 'warning',
        message: `Escaneo completado. Se encontraron ${results.ports?.length || 0} puertos abiertos.`,
        timestamp: new Date().toISOString()
      }]);

    } catch (error) {
      console.error('Error completo:', error);
      setLogs(prev => [...prev, {
        type: 'error',
        message: `Error durante el escaneo: ${error.message}`,
        timestamp: new Date().toISOString()
      }]);
    } finally {
      setIsScanning(false);
    }
  };

  /**
   * Detiene el escaneo en curso
   */
  const handleStopScan = () => {
    setIsScanning(false);
    setLogs(prev => [...prev, {
      type: 'warning',
      message: 'Escaneo detenido por el usuario.',
      timestamp: new Date().toISOString()
    }]);
  };

  /**
   * Guarda el reporte del escaneo en formato HTML
   */
  const handleSaveReport = () => {
    try {
        const htmlContent = `
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Port Scan Report - ${targetIp}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background: #0f1118;
            color: #e1e1e6;
        }
        .container {
            max-width: 1000px;
            margin: 40px auto;
            padding: 0 20px;
        }
        .header {
            background: linear-gradient(135deg, #1a1f2c 0%, #2c3e50 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            background: linear-gradient(45deg, #4ecdc4, #556270);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .header p {
            margin: 10px 0 0;
            color: #8b97a8;
        }
        .scan-info {
            background: rgba(52, 73, 94, 0.4);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .scan-info h2 {
            margin: 0 0 20px;
            color: #4ecdc4;
            font-size: 1.8em;
        }
        .scan-info p {
            margin: 10px 0;
            font-size: 1.1em;
        }
        .scan-info strong {
            color: #4ecdc4;
        }
        .logs {
            background: rgba(26, 31, 44, 0.6);
            padding: 25px;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .logs h2 {
            margin: 0 0 20px;
            color: #4ecdc4;
            font-size: 1.8em;
        }
        .log-entry {
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            font-family: 'Consolas', 'Monaco', monospace;
            transition: transform 0.2s;
        }
        .log-entry:hover {
            transform: translateX(5px);
        }
        .info {
            background: rgba(52, 152, 219, 0.15);
            border-left: 4px solid #3498db;
        }
        .success {
            background: rgba(46, 204, 113, 0.15);
            border-left: 4px solid #2ecc71;
        }
        .warning {
            background: rgba(241, 196, 15, 0.15);
            border-left: 4px solid #f1c40f;
        }
        .error {
            background: rgba(231, 76, 60, 0.15);
            border-left: 4px solid #e74c3c;
        }
        .timestamp {
            color: #8b97a8;
            font-size: 0.9em;
            font-weight: 500;
            margin-right: 10px;
        }
        .summary {
            background: linear-gradient(135deg, rgba(78, 205, 196, 0.1), rgba(85, 98, 112, 0.1));
            padding: 20px;
            border-radius: 12px;
            margin: 30px 0;
            border: 1px solid rgba(78, 205, 196, 0.2);
        }
        .summary h3 {
            color: #4ecdc4;
            margin: 0 0 15px;
        }
        @media print {
            body {
                background: white;
                color: black;
            }
            .container {
                max-width: 100%;
                margin: 0;
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Port Scan Report</h1>
            <p>Generated on: ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="scan-info">
            <h2>Scan Details</h2>
            <p><strong>Target IP:</strong> ${targetIp}</p>
            <p><strong>Port Range:</strong> ${portRange}</p>
        </div>

        <div class="summary">
            <h3>Scan Summary</h3>
            <p>Total open ports found: ${logs.filter(log => log.type === 'success' && log.message.includes('open')).length}</p>
        </div>

        <div class="logs">
            <h2>Scan Results</h2>
            ${logs.map(log => `
                <div class="log-entry ${log.type}">
                    <span class="timestamp">[${new Date(log.timestamp).toLocaleTimeString()}]</span>
                    ${log.message}
                </div>
            `).join('')}
        </div>
    </div>
</body>
</html>`;

        // Crear blob y link de descarga
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `port-scan-report-${targetIp}-${new Date().toISOString().split('T')[0]}.html`;
        
        // Trigger la descarga
        document.body.appendChild(a);
        a.click();
        
        // Limpieza
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        // Notificar al usuario
        setLogs(prev => [...prev, {
            type: 'success',
            message: 'Reporte HTML guardado exitosamente',
            timestamp: new Date().toISOString()
        }]);
    } catch (error) {
        console.error('Error al guardar el reporte:', error);
        setLogs(prev => [...prev, {
            type: 'error',
            message: 'Error al guardar el reporte: ' + error.message,
            timestamp: new Date().toISOString()
        }]);
    }
  };

  if (showCredentialsForm) {
    return (
      <div className="tool-container">
        <div className="aws-credentials-form">
          <h2>Configurar Credenciales AWS</h2>
          <div className="form-group">
            <label>Credenciales AWS (pega el contenido completo):</label>
            <textarea
              value={credentials.accessKeyId}
              onChange={handleCredentialsInput}
              placeholder="[default]&#10;aws_access_key_id=...&#10;aws_secret_access_key=...&#10;aws_session_token=..."
              rows={6}
              className="credentials-input"
            />
          </div>
          <div className="form-group">
            <label>Region:</label>
            <input
              type="text"
              value={credentials.region}
              onChange={(e) => setCredentials({...credentials, region: e.target.value})}
              placeholder="us-west-2"
            />
          </div>
          <button className="connect-aws-btn" onClick={handleConnect}>
            <FaKey /> Conectar a AWS
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="tool-container">
      <div className="tool-header">
        <h2>Port Scanner</h2>
        <div className="scan-mode-selector">
          <button 
            className={`mode-button ${scanMode === 'manual' ? 'active' : ''}`}
            onClick={() => setScanMode('manual')}
          >
            <FaNetworkWired /> Modo Manual
          </button>
          <button 
            className={`mode-button ${scanMode === 'aws' ? 'active' : ''}`}
            onClick={() => setScanMode('aws')}
          >
            <FaAws /> Modo AWS
          </button>
        </div>
        <div className="tool-actions">
          <button
            className="action-button start-button"
            onClick={handleStartScan}
            disabled={isScanning}
          >
            <FaPlay /> Iniciar Escaneo
          </button>
          <button
            className="action-button stop-button"
            onClick={handleStopScan}
            disabled={!isScanning}
          >
            <FaStop /> Detener
          </button>
          <button
            className="action-button save-button"
            onClick={handleSaveReport}
            disabled={logs.length === 0}
          >
            <FaSave /> Guardar Reporte
          </button>
        </div>
      </div>

      <div className="tool-content">
        <div className="config-panel">
          {scanMode === 'aws' ? (
            <div className="form-group">
              <label>Instancia EC2:</label>
              <select
                value={selectedInstance}
                onChange={(e) => handleInstanceSelect(e.target.value)}
                disabled={isScanning || isLoadingInstances}
                className="instance-select"
              >
                <option value="">Selecciona una instancia</option>
                {instances.map(instance => (
                  <option key={instance.id} value={instance.id}>
                    {instance.name} ({instance.ip}) - {instance.state}
                  </option>
                ))}
              </select>
              <button 
                className="refresh-btn"
                onClick={loadEC2Instances}
                disabled={isScanning || isLoadingInstances}
              >
                <FaServer /> Recargar Instancias
              </button>
            </div>
          ) : (
            <div className="form-group">
              <label>IP Objetivo:</label>
              <input
                type="text"
                value={targetIp}
                onChange={(e) => setTargetIp(e.target.value)}
                placeholder="Ej: 8.8.8.8"
                disabled={isScanning}
              />
              <small className="help-text">
                * Ingresa cualquier IP pública válida
              </small>
            </div>
          )}

          <div className="form-group">
            <label>Puerto o Rango:</label>
            <input
              type="text"
              value={portRange}
              onChange={(e) => setPortRange(e.target.value)}
              placeholder="Ej: 22 o 1-1000"
              disabled={isScanning}
            />
          </div>
        </div>

        <Terminal logs={logs} />
      </div>
    </div>
  );
};

export default PortScanner; 