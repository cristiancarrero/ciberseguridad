import React, { useState, useEffect } from 'react';
import { FaSearch, FaStop, FaSave, FaAws } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import AWSConfigForm from '../../common/AWSConfigForm/AWSConfigForm';
import './SubdomainEnum.css';
import { deployApplication, configureAWS, loadSavedAWSConfig, isAWSConnected, deployToCloudFront, deployForEnumeration, deployTargetServer, createTestInstance, createTestSubdomains, clearAWSConfig } from '../../../services/aws';
import { enumerateSubdomains } from '../../../services/subdomainEnum';

const SubdomainEnum = () => {
  const [domain, setDomain] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState([]);
  const [scanMethods, setScanMethods] = useState({
    bruteforce: true,
    ssl: true,
    apis: true
  });
  const [logs, setLogs] = useState([]);
  const [deploymentStatus, setDeploymentStatus] = useState(null);
  const [isAWSConfigured, setIsAWSConfigured] = useState(isAWSConnected());

  useEffect(() => {
    const checkAWSConfig = () => {
      setIsAWSConfigured(isAWSConnected());
    };

    // Verificar cuando el componente se monta
    checkAWSConfig();

    // Verificar cuando el componente recibe foco
    window.addEventListener('focus', checkAWSConfig);
    
    return () => {
      window.removeEventListener('focus', checkAWSConfig);
    };
  }, []);

  const handleScan = async () => {
    if (!domain) {
      addLog('Error: Por favor, introduce un dominio objetivo válido', 'error');
      return;
    }

    setIsScanning(true);
    addLog('Iniciando configuración del entorno de prueba...', 'info');

    try {
      // 1. Crear distribución CloudFront con subdominios
      const result = await createTestSubdomains();
      
      // 2. Actualizar el dominio
      setDomain(result.domain);
      addLog(`Distribución CloudFront creada: ${result.domain}`, 'success');
      
      // 3. Mostrar subdominios disponibles
      addLog('Subdominios creados:', 'info');
      result.subdomains.forEach(sub => {
        addLog(`- ${sub.name} (${sub.url})`, 'info');
      });

      // 4. Esperar a que CloudFront esté listo
      addLog('Esperando a que la distribución esté lista...', 'info');
      await new Promise(resolve => setTimeout(resolve, 30000));

      // 5. Iniciar enumeración
      const subdomains = await scanSubdomains(result.domain, scanMethods);
      setResults(subdomains);

    } catch (error) {
      addLog(`Error: ${error.message}`, 'error');
    } finally {
      setIsScanning(false);
    }
  };

  const scanSubdomains = async (domain, methods) => {
    const results = [];
    addLog(`Iniciando enumeración para ${domain}...`, 'info');

    if (methods.bruteforce) {
      try {
        const enumResults = await enumerateSubdomains(domain);
        results.push(...enumResults.results);
        addLog(`Encontrados ${enumResults.total} subdominios`, 'success');
        enumResults.results.forEach(sub => {
          addLog(`Encontrado: ${sub.name} (${sub.ip})`, 'info');
        });
      } catch (error) {
        addLog(`Error en DNS bruteforce: ${error.message}`, 'error');
      }
    }

    if (methods.ssl) {
      // Implement SSL certificate logic here
    }

    if (methods.apis) {
      // Implement API logic here
    }

    addLog('Enumeración completada', 'info');
    return results;
  };

  const handleStop = () => {
    setIsScanning(false);
    addLog('Enumeración detenida por el usuario', 'warning');
  };

  const handleSave = () => {
    const report = logs.map(log => `[${log.timestamp}] ${log.message}`).join('\\n');
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'subdomain_enum_report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDeploy = async () => {
    try {
      setDeploymentStatus('deploying');
      addLog('Obteniendo información del servidor objetivo...', 'info');
      
      const result = await deployTargetServer();
      
      if (result.success) {
        setDeploymentStatus('success');
        setDomain(result.instanceDns);
        addLog(`Servidor objetivo listo`, 'success');
        addLog(`DNS Público: ${result.instanceDns}`, 'info');
        addLog(`IP: ${result.instanceIp}`, 'info');
        addLog(`Región: ${result.region}`, 'info');
        addLog('Subdominios disponibles para enumerar:', 'info');
        addLog('www, admin, api, dev, test, staging, mail, db, backup, internal', 'info');
      } else {
        setDeploymentStatus('error');
        addLog(`Error: ${result.error}`, 'error');
      }
    } catch (error) {
      setDeploymentStatus('error');
      addLog(`Error: ${error.message}`, 'error');
    }
  };

  const handleAWSConfig = async (credentials) => {
    if (configureAWS(credentials)) {
      setIsAWSConfigured(true);
      addLog('Configuración AWS cargada', 'info');
    } else {
      addLog('Error configurando AWS', 'error');
    }
  };

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  return (
    <div className="tool-container">
      {!isAWSConfigured ? (
        <AWSConfigForm />
      ) : (
        <>
          <div className="tool-header">
            <h2>Subdomain Enumeration</h2>
            <div className="tool-actions">
              <button
                className="btn btn-primary"
                onClick={handleScan}
                disabled={isScanning}
              >
                <FaSearch /> Iniciar Escaneo
              </button>
              <button
                className="btn btn-danger"
                onClick={handleStop}
                disabled={!isScanning}
              >
                <FaStop /> Detener
              </button>
              <button
                className="btn"
                onClick={handleSave}
                disabled={logs.length === 0}
              >
                <FaSave /> Guardar Reporte
              </button>
              <button
                className="btn btn-secondary"
                onClick={handleDeploy}
                disabled={isScanning || deploymentStatus === 'deploying'}
              >
                <FaAws /> {deploymentStatus === 'deploying' ? 'Desplegando...' : 'Desplegar en AWS'}
              </button>
            </div>
          </div>

          <div className="tool-content">
            <div className="config-panel">
              <div className="form-group">
                <label>Dominio objetivo:</label>
                <input
                  type="text"
                  value={domain}
                  onChange={(e) => setDomain(e.target.value)}
                  placeholder="ejemplo.com"
                />
              </div>

              <div className="scan-methods">
                <label>Métodos de escaneo:</label>
                <div className="checkbox-group">
                  <label>
                    <input
                      type="checkbox"
                      checked={scanMethods.bruteforce}
                      onChange={(e) => setScanMethods({
                        ...scanMethods,
                        bruteforce: e.target.checked
                      })}
                    />
                    DNS Bruteforce
                  </label>
                  {/* Más opciones... */}
                </div>
              </div>
            </div>

            <Terminal logs={logs} />

            <div className="results-panel">
              {results.map((subdomain, index) => (
                <div key={index} className="subdomain-item">
                  <span className="domain">
                    {subdomain.accessible ? (
                      <a 
                        href={`http://${subdomain.name}`}
                        target="_blank" 
                        rel="noopener noreferrer"
                        title={subdomain.content || subdomain.status}
                      >
                        {subdomain.name}
                      </a>
                    ) : (
                      subdomain.name
                    )}
                  </span>
                  <span className="ip">{subdomain.ip}</span>
                  <span className="status">Status: {subdomain.status}</span>
                  {subdomain.requires_auth && (
                    <span className="auth-badge">Auth Required</span>
                  )}
                </div>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default SubdomainEnum; 