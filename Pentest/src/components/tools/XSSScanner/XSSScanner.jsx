import React, { useState } from 'react';
import { FaPlay, FaStop, FaSave } from 'react-icons/fa';
import Terminal from '../../common/Terminal';
import './XSSScanner.css';

const XSSScanner = () => {
  const [target, setTarget] = useState('');
  const [parameter, setParameter] = useState('');
  const [isTesting, setIsTesting] = useState(false);
  const [logs, setLogs] = useState([]);

  const handleTest = async () => {
    if (!target) {
      addLog('Error: Por favor, introduce una URL objetivo válida', 'error');
      return;
    }

    if (!parameter) {
      addLog('Error: Por favor, especifica el parámetro a probar', 'error');
      return;
    }

    setIsTesting(true);
    addLog(`Iniciando pruebas de XSS en ${target}...`, 'info');

    try {
      // Aquí irá la lógica real de pruebas
      await simulateTest();
    } catch (error) {
      addLog(`Error: ${error.message}`, 'error');
    } finally {
      setIsTesting(false);
    }
  };

  const simulateTest = async () => {
    const payloads = [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "<svg onload=alert('XSS')>",
      "javascript:alert('XSS')",
      "'-alert('XSS')-'"
    ];

    for (let payload of payloads) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      addLog(`Probando payload: ${payload}`, 'info');
      
      // Simulamos diferentes respuestas
      const response = Math.random();
      if (response > 0.8) {
        addLog(`¡Vulnerabilidad XSS encontrada con payload: ${payload}!`, 'success');
      } else if (response > 0.6) {
        addLog(`Posible vulnerabilidad XSS detectada, requiere verificación manual`, 'warning');
      } else {
        addLog(`Payload no exitoso`, 'info');
      }
    }

    addLog('Pruebas completadas', 'info');
  };

  const handleStop = () => {
    setIsTesting(false);
    addLog('Pruebas detenidas por el usuario', 'warning');
  };

  const handleSave = () => {
    const report = logs.map(log => `[${log.timestamp}] ${log.message}`).join('\\n');
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'xss_scan_report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  return (
    <div className="tool-container">
      <div className="tool-header">
        <h2>XSS Scanner</h2>
        <div className="tool-actions">
          <button
            className="btn btn-primary"
            onClick={handleTest}
            disabled={isTesting}
          >
            <FaPlay /> Iniciar Pruebas
          </button>
          <button
            className="btn btn-danger"
            onClick={handleStop}
            disabled={!isTesting}
          >
            <FaStop /> Detener
          </button>
          <button
            className="btn"
            onClick={handleSave}
            disabled={logs.length === 0}
          >
            <FaSave /> Guardar Reporte
          </button>
        </div>
      </div>

      <div className="tool-content">
        <div className="config-panel">
          <div className="form-group">
            <label>URL Objetivo:</label>
            <input
              type="text"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              placeholder="https://ejemplo.com/pagina.php"
              disabled={isTesting}
            />
          </div>
          <div className="form-group">
            <label>Parámetro a probar:</label>
            <input
              type="text"
              value={parameter}
              onChange={(e) => setParameter(e.target.value)}
              placeholder="comment"
              disabled={isTesting}
            />
          </div>
        </div>

        <Terminal logs={logs} />
      </div>
    </div>
  );
};

export default XSSScanner; 